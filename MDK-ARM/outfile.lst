
========================================================================

** ELF Header Information

    File Name: C:\STM32\project\efeed\MDK-ARM\efeed\efeed.axf

    Machine class: ELFCLASS32 (32-bit)
    Data encoding: ELFDATA2LSB (Little endian)
    Header version: EV_CURRENT (Current version)
    Operating System ABI: none
    ABI Version: 0
    File Type: ET_EXEC (Executable) (2)
    Machine: EM_ARM (ARM)

    Image Entry point: 0x080000ed
    Flags: EF_ARM_HASENTRY + EF_ARM_ABI_FLOAT_SOFT (0x05000202)

    ARM ELF revision: 5 (ABI version 2)

    Conforms to Soft float procedure-call standard

    Built with
    Component: ARM Compiler 5.06 update 4 (build 422) Tool: armasm [4d35cf]
    Component: ARM Compiler 5.06 update 4 (build 422) Tool: armlink [4d35d2]

    Header size: 52 bytes (0x34)
    Program header entry size: 32 bytes (0x20)
    Section header entry size: 40 bytes (0x28)

    Program header entries: 1
    Section header entries: 16

    Program header offset: 778408 (0x000be0a8)
    Section header offset: 778440 (0x000be0c8)

    Section header string table index: 15

========================================================================

** Program header #0 (PT_LOAD) [PF_X + PF_W + PF_R + PF_ARM_ENTRY]
    Size : 11944 bytes (9364 bytes in file)
    Virtual address: 0x08000000 (Alignment 8)


========================================================================

** Section #1 'ER_IROM1' (SHT_PROGBITS) [SHF_ALLOC + SHF_EXECINSTR]
    Size   : 8952 bytes (alignment 8)
    Address: 0x08000000

    $d.realdata
    RESET
    __Vectors
        0x08000000:    20000bb0    ...     DCD    536873904
        0x08000004:    08000101    ....    DCD    134217985
        0x08000008:    08000109    ....    DCD    134217993
        0x0800000c:    0800010b    ....    DCD    134217995
        0x08000010:    0800010d    ....    DCD    134217997
        0x08000014:    0800010f    ....    DCD    134217999
        0x08000018:    08000111    ....    DCD    134218001
        0x0800001c:    00000000    ....    DCD    0
        0x08000020:    00000000    ....    DCD    0
        0x08000024:    00000000    ....    DCD    0
        0x08000028:    00000000    ....    DCD    0
        0x0800002c:    080014bd    ....    DCD    134223037
        0x08000030:    08000115    ....    DCD    134218005
        0x08000034:    00000000    ....    DCD    0
        0x08000038:    080013bd    ....    DCD    134222781
        0x0800003c:    080014c1    ....    DCD    134223041
        0x08000040:    0800011b    ....    DCD    134218011
        0x08000044:    0800011b    ....    DCD    134218011
        0x08000048:    0800011b    ....    DCD    134218011
        0x0800004c:    0800011b    ....    DCD    134218011
        0x08000050:    0800011b    ....    DCD    134218011
        0x08000054:    0800011b    ....    DCD    134218011
        0x08000058:    0800011b    ....    DCD    134218011
        0x0800005c:    0800011b    ....    DCD    134218011
        0x08000060:    0800011b    ....    DCD    134218011
        0x08000064:    0800011b    ....    DCD    134218011
        0x08000068:    0800011b    ....    DCD    134218011
        0x0800006c:    0800011b    ....    DCD    134218011
        0x08000070:    0800011b    ....    DCD    134218011
        0x08000074:    0800011b    ....    DCD    134218011
        0x08000078:    08000241    A...    DCD    134218305
        0x0800007c:    0800011b    ....    DCD    134218011
        0x08000080:    0800011b    ....    DCD    134218011
        0x08000084:    0800011b    ....    DCD    134218011
        0x08000088:    0800011b    ....    DCD    134218011
        0x0800008c:    0800011b    ....    DCD    134218011
        0x08000090:    0800011b    ....    DCD    134218011
        0x08000094:    0800011b    ....    DCD    134218011
        0x08000098:    0800011b    ....    DCD    134218011
        0x0800009c:    0800011b    ....    DCD    134218011
        0x080000a0:    0800011b    ....    DCD    134218011
        0x080000a4:    08001691    ....    DCD    134223505
        0x080000a8:    0800011b    ....    DCD    134218011
        0x080000ac:    0800011b    ....    DCD    134218011
        0x080000b0:    080016b1    ....    DCD    134223537
        0x080000b4:    0800011b    ....    DCD    134218011
        0x080000b8:    080016f5    ....    DCD    134223605
        0x080000bc:    0800011b    ....    DCD    134218011
        0x080000c0:    0800011b    ....    DCD    134218011
        0x080000c4:    0800027d    }...    DCD    134218365
        0x080000c8:    08000279    y...    DCD    134218361
        0x080000cc:    0800011b    ....    DCD    134218011
        0x080000d0:    0800011b    ....    DCD    134218011
        0x080000d4:    0800011b    ....    DCD    134218011
        0x080000d8:    0800011b    ....    DCD    134218011
        0x080000dc:    0800011b    ....    DCD    134218011
        0x080000e0:    0800011b    ....    DCD    134218011
        0x080000e4:    0800011b    ....    DCD    134218011
        0x080000e8:    0800011b    ....    DCD    134218011
    $t
    .ARM.Collect$$$$00000000
    .ARM.Collect$$$$00000001
    __Vectors_End
    __main
    _main_stk
        0x080000ec:    f8dfd00c    ....    LDR      sp,__lit__00000000 ; [0x80000fc] = 0x20000bb0
    .ARM.Collect$$$$00000004
    _main_scatterload
        0x080000f0:    f000f868    ..h.    BL       __scatterload ; 0x80001c4
    .ARM.Collect$$$$00000008
    .ARM.Collect$$$$0000000A
    .ARM.Collect$$$$0000000B
    __main_after_scatterload
    _main_clock
    _main_cpp_init
    _main_init
        0x080000f4:    4800        .H      LDR      r0,[pc,#0] ; [0x80000f8] = 0x8001d15
        0x080000f6:    4700        .G      BX       r0
    $d
        0x080000f8:    08001d15    ....    DCD    134225173
    .ARM.Collect$$$$00002712
    __lit__00000000
    .ARM.Collect$$$$0000000D
    .ARM.Collect$$$$0000000F
    __rt_final_cpp
    __rt_final_exit
        0x080000fc:    20000bb0    ...     DCD    536873904
    $t
    .text
    Reset_Handler
;;;150                     LDR     R0, =SystemInit
        0x08000100:    4806        .H      LDR      r0,[pc,#24] ; [0x800011c] = 0x8001639
;;;151                     BLX     R0
        0x08000102:    4780        .G      BLX      r0
;;;152                     LDR     R0, =__main
        0x08000104:    4806        .H      LDR      r0,[pc,#24] ; [0x8000120] = 0x80000ed
;;;153                     BX      R0
        0x08000106:    4700        .G      BX       r0
    NMI_Handler
;;;154                     ENDP
;;;155    
;;;156    ; Dummy Exception Handlers (infinite loops which can be modified)
;;;157    
;;;158    NMI_Handler     PROC
;;;159                    EXPORT  NMI_Handler                [WEAK]
;;;160                    B       .
        0x08000108:    e7fe        ..      B        NMI_Handler ; 0x8000108
    HardFault_Handler
;;;161                    ENDP
;;;162    HardFault_Handler\
;;;163                    PROC
;;;164                    EXPORT  HardFault_Handler          [WEAK]
;;;165                    B       .
        0x0800010a:    e7fe        ..      B        HardFault_Handler ; 0x800010a
    MemManage_Handler
;;;166                    ENDP
;;;167    MemManage_Handler\
;;;168                    PROC
;;;169                    EXPORT  MemManage_Handler          [WEAK]
;;;170                    B       .
        0x0800010c:    e7fe        ..      B        MemManage_Handler ; 0x800010c
    BusFault_Handler
;;;171                    ENDP
;;;172    BusFault_Handler\
;;;173                    PROC
;;;174                    EXPORT  BusFault_Handler           [WEAK]
;;;175                    B       .
        0x0800010e:    e7fe        ..      B        BusFault_Handler ; 0x800010e
    UsageFault_Handler
;;;176                    ENDP
;;;177    UsageFault_Handler\
;;;178                    PROC
;;;179                    EXPORT  UsageFault_Handler         [WEAK]
;;;180                    B       .
        0x08000110:    e7fe        ..      B        UsageFault_Handler ; 0x8000110
;;;181                    ENDP
;;;182    SVC_Handler     PROC
;;;183                    EXPORT  SVC_Handler                [WEAK]
;;;184                    B       .
        0x08000112:    e7fe        ..      B        0x8000112 ; UsageFault_Handler + 2
    DebugMon_Handler
;;;185                    ENDP
;;;186    DebugMon_Handler\
;;;187                    PROC
;;;188                    EXPORT  DebugMon_Handler           [WEAK]
;;;189                    B       .
        0x08000114:    e7fe        ..      B        DebugMon_Handler ; 0x8000114
;;;190                    ENDP
;;;191    PendSV_Handler  PROC
;;;192                    EXPORT  PendSV_Handler             [WEAK]
;;;193                    B       .
        0x08000116:    e7fe        ..      B        0x8000116 ; DebugMon_Handler + 2
;;;194                    ENDP
;;;195    SysTick_Handler PROC
;;;196                    EXPORT  SysTick_Handler            [WEAK]
;;;197                    B       .
        0x08000118:    e7fe        ..      B        0x8000118 ; DebugMon_Handler + 4
    ADC1_2_IRQHandler
    CAN1_RX1_IRQHandler
    CAN1_SCE_IRQHandler
    DMA1_Channel1_IRQHandler
    DMA1_Channel2_IRQHandler
    DMA1_Channel3_IRQHandler
    DMA1_Channel5_IRQHandler
    DMA1_Channel6_IRQHandler
    DMA1_Channel7_IRQHandler
    EXTI0_IRQHandler
    EXTI15_10_IRQHandler
    EXTI1_IRQHandler
    EXTI2_IRQHandler
    EXTI3_IRQHandler
    EXTI4_IRQHandler
    EXTI9_5_IRQHandler
    FLASH_IRQHandler
    I2C1_ER_IRQHandler
    I2C1_EV_IRQHandler
    PVD_IRQHandler
    RCC_IRQHandler
    RTC_Alarm_IRQHandler
    RTC_IRQHandler
    SPI1_IRQHandler
    SPI2_IRQHandler
    TAMPER_IRQHandler
    TIM1_BRK_IRQHandler
    TIM1_CC_IRQHandler
    TIM1_TRG_COM_IRQHandler
    TIM3_IRQHandler
    USART1_IRQHandler
    USART2_IRQHandler
    USART3_IRQHandler
    USBWakeUp_IRQHandler
    USB_HP_CAN1_TX_IRQHandler
    USB_LP_CAN1_RX0_IRQHandler
    WWDG_IRQHandler
;;;198                    ENDP
;;;199    
;;;200    Default_Handler PROC
;;;201    
;;;202                    EXPORT  WWDG_IRQHandler            [WEAK]
;;;203                    EXPORT  PVD_IRQHandler             [WEAK]
;;;204                    EXPORT  TAMPER_IRQHandler          [WEAK]
;;;205                    EXPORT  RTC_IRQHandler             [WEAK]
;;;206                    EXPORT  FLASH_IRQHandler           [WEAK]
;;;207                    EXPORT  RCC_IRQHandler             [WEAK]
;;;208                    EXPORT  EXTI0_IRQHandler           [WEAK]
;;;209                    EXPORT  EXTI1_IRQHandler           [WEAK]
;;;210                    EXPORT  EXTI2_IRQHandler           [WEAK]
;;;211                    EXPORT  EXTI3_IRQHandler           [WEAK]
;;;212                    EXPORT  EXTI4_IRQHandler           [WEAK]
;;;213                    EXPORT  DMA1_Channel1_IRQHandler   [WEAK]
;;;214                    EXPORT  DMA1_Channel2_IRQHandler   [WEAK]
;;;215                    EXPORT  DMA1_Channel3_IRQHandler   [WEAK]
;;;216                    EXPORT  DMA1_Channel4_IRQHandler   [WEAK]
;;;217                    EXPORT  DMA1_Channel5_IRQHandler   [WEAK]
;;;218                    EXPORT  DMA1_Channel6_IRQHandler   [WEAK]
;;;219                    EXPORT  DMA1_Channel7_IRQHandler   [WEAK]
;;;220                    EXPORT  ADC1_2_IRQHandler          [WEAK]
;;;221                    EXPORT  USB_HP_CAN1_TX_IRQHandler  [WEAK]
;;;222                    EXPORT  USB_LP_CAN1_RX0_IRQHandler [WEAK]
;;;223                    EXPORT  CAN1_RX1_IRQHandler        [WEAK]
;;;224                    EXPORT  CAN1_SCE_IRQHandler        [WEAK]
;;;225                    EXPORT  EXTI9_5_IRQHandler         [WEAK]
;;;226                    EXPORT  TIM1_BRK_IRQHandler        [WEAK]
;;;227                    EXPORT  TIM1_UP_IRQHandler         [WEAK]
;;;228                    EXPORT  TIM1_TRG_COM_IRQHandler    [WEAK]
;;;229                    EXPORT  TIM1_CC_IRQHandler         [WEAK]
;;;230                    EXPORT  TIM2_IRQHandler            [WEAK]
;;;231                    EXPORT  TIM3_IRQHandler            [WEAK]
;;;232                    EXPORT  TIM4_IRQHandler            [WEAK]
;;;233                    EXPORT  I2C1_EV_IRQHandler         [WEAK]
;;;234                    EXPORT  I2C1_ER_IRQHandler         [WEAK]
;;;235                    EXPORT  I2C2_EV_IRQHandler         [WEAK]
;;;236                    EXPORT  I2C2_ER_IRQHandler         [WEAK]
;;;237                    EXPORT  SPI1_IRQHandler            [WEAK]
;;;238                    EXPORT  SPI2_IRQHandler            [WEAK]
;;;239                    EXPORT  USART1_IRQHandler          [WEAK]
;;;240                    EXPORT  USART2_IRQHandler          [WEAK]
;;;241                    EXPORT  USART3_IRQHandler          [WEAK]
;;;242                    EXPORT  EXTI15_10_IRQHandler       [WEAK]
;;;243                    EXPORT  RTC_Alarm_IRQHandler        [WEAK]
;;;244                    EXPORT  USBWakeUp_IRQHandler       [WEAK]
;;;245    
;;;246    WWDG_IRQHandler
;;;247    PVD_IRQHandler
;;;248    TAMPER_IRQHandler
;;;249    RTC_IRQHandler
;;;250    FLASH_IRQHandler
;;;251    RCC_IRQHandler
;;;252    EXTI0_IRQHandler
;;;253    EXTI1_IRQHandler
;;;254    EXTI2_IRQHandler
;;;255    EXTI3_IRQHandler
;;;256    EXTI4_IRQHandler
;;;257    DMA1_Channel1_IRQHandler
;;;258    DMA1_Channel2_IRQHandler
;;;259    DMA1_Channel3_IRQHandler
;;;260    DMA1_Channel4_IRQHandler
;;;261    DMA1_Channel5_IRQHandler
;;;262    DMA1_Channel6_IRQHandler
;;;263    DMA1_Channel7_IRQHandler
;;;264    ADC1_2_IRQHandler
;;;265    USB_HP_CAN1_TX_IRQHandler
;;;266    USB_LP_CAN1_RX0_IRQHandler
;;;267    CAN1_RX1_IRQHandler
;;;268    CAN1_SCE_IRQHandler
;;;269    EXTI9_5_IRQHandler
;;;270    TIM1_BRK_IRQHandler
;;;271    TIM1_UP_IRQHandler
;;;272    TIM1_TRG_COM_IRQHandler
;;;273    TIM1_CC_IRQHandler
;;;274    TIM2_IRQHandler
;;;275    TIM3_IRQHandler
;;;276    TIM4_IRQHandler
;;;277    I2C1_EV_IRQHandler
;;;278    I2C1_ER_IRQHandler
;;;279    I2C2_EV_IRQHandler
;;;280    I2C2_ER_IRQHandler
;;;281    SPI1_IRQHandler
;;;282    SPI2_IRQHandler
;;;283    USART1_IRQHandler
;;;284    USART2_IRQHandler
;;;285    USART3_IRQHandler
;;;286    EXTI15_10_IRQHandler
;;;287    RTC_Alarm_IRQHandler
;;;288    USBWakeUp_IRQHandler
;;;289    
;;;290                    B       .
        0x0800011a:    e7fe        ..      B        ADC1_2_IRQHandler ; 0x800011a
    $d
        0x0800011c:    08001639    9...    DCD    134223417
        0x08000120:    080000ed    ....    DCD    134217965
    $t
    .text
    __aeabi_uldivmod
        0x08000124:    e92d5ff0    -.._    PUSH     {r4-r12,lr}
        0x08000128:    4605        .F      MOV      r5,r0
        0x0800012a:    2000        .       MOVS     r0,#0
        0x0800012c:    4692        .F      MOV      r10,r2
        0x0800012e:    469b        .F      MOV      r11,r3
        0x08000130:    4688        .F      MOV      r8,r1
        0x08000132:    4606        .F      MOV      r6,r0
        0x08000134:    4681        .F      MOV      r9,r0
        0x08000136:    2440        @$      MOVS     r4,#0x40
        0x08000138:    e01b        ..      B        0x8000172 ; __aeabi_uldivmod + 78
        0x0800013a:    4628        (F      MOV      r0,r5
        0x0800013c:    4641        AF      MOV      r1,r8
        0x0800013e:    4647        GF      MOV      r7,r8
        0x08000140:    4622        "F      MOV      r2,r4
        0x08000142:    f000f82f    ../.    BL       __aeabi_llsr ; 0x80001a4
        0x08000146:    4653        SF      MOV      r3,r10
        0x08000148:    465a        ZF      MOV      r2,r11
        0x0800014a:    1ac0        ..      SUBS     r0,r0,r3
        0x0800014c:    4191        .A      SBCS     r1,r1,r2
        0x0800014e:    d310        ..      BCC      0x8000172 ; __aeabi_uldivmod + 78
        0x08000150:    4611        .F      MOV      r1,r2
        0x08000152:    4618        .F      MOV      r0,r3
        0x08000154:    4622        "F      MOV      r2,r4
        0x08000156:    f000f816    ....    BL       __aeabi_llsl ; 0x8000186
        0x0800015a:    1a2d        -.      SUBS     r5,r5,r0
        0x0800015c:    eb670801    g...    SBC      r8,r7,r1
        0x08000160:    464f        OF      MOV      r7,r9
        0x08000162:    4622        "F      MOV      r2,r4
        0x08000164:    2001        .       MOVS     r0,#1
        0x08000166:    2100        .!      MOVS     r1,#0
        0x08000168:    f000f80d    ....    BL       __aeabi_llsl ; 0x8000186
        0x0800016c:    eb170900    ....    ADDS     r9,r7,r0
        0x08000170:    414e        NA      ADCS     r6,r6,r1
        0x08000172:    1e20         .      SUBS     r0,r4,#0
        0x08000174:    f1a40401    ....    SUB      r4,r4,#1
        0x08000178:    dcdf        ..      BGT      0x800013a ; __aeabi_uldivmod + 22
        0x0800017a:    4648        HF      MOV      r0,r9
        0x0800017c:    4631        1F      MOV      r1,r6
        0x0800017e:    462a        *F      MOV      r2,r5
        0x08000180:    4643        CF      MOV      r3,r8
        0x08000182:    e8bd9ff0    ....    POP      {r4-r12,pc}
    .text
    __aeabi_llsl
    _ll_shift_l
        0x08000186:    2a20         *      CMP      r2,#0x20
        0x08000188:    db04        ..      BLT      0x8000194 ; __aeabi_llsl + 14
        0x0800018a:    3a20         :      SUBS     r2,r2,#0x20
        0x0800018c:    fa00f102    ....    LSL      r1,r0,r2
        0x08000190:    2000        .       MOVS     r0,#0
        0x08000192:    4770        pG      BX       lr
        0x08000194:    4091        .@      LSLS     r1,r1,r2
        0x08000196:    f1c20320    .. .    RSB      r3,r2,#0x20
        0x0800019a:    fa20f303     ...    LSR      r3,r0,r3
        0x0800019e:    4319        .C      ORRS     r1,r1,r3
        0x080001a0:    4090        .@      LSLS     r0,r0,r2
        0x080001a2:    4770        pG      BX       lr
    .text
    __aeabi_llsr
    _ll_ushift_r
        0x080001a4:    2a20         *      CMP      r2,#0x20
        0x080001a6:    db04        ..      BLT      0x80001b2 ; __aeabi_llsr + 14
        0x080001a8:    3a20         :      SUBS     r2,r2,#0x20
        0x080001aa:    fa21f002    !...    LSR      r0,r1,r2
        0x080001ae:    2100        .!      MOVS     r1,#0
        0x080001b0:    4770        pG      BX       lr
        0x080001b2:    fa21f302    !...    LSR      r3,r1,r2
        0x080001b6:    40d0        .@      LSRS     r0,r0,r2
        0x080001b8:    f1c20220    .. .    RSB      r2,r2,#0x20
        0x080001bc:    4091        .@      LSLS     r1,r1,r2
        0x080001be:    4308        .C      ORRS     r0,r0,r1
        0x080001c0:    4619        .F      MOV      r1,r3
        0x080001c2:    4770        pG      BX       lr
    .text
    __scatterload
    __scatterload_rt2
        0x080001c4:    4c06        .L      LDR      r4,[pc,#24] ; [0x80001e0] = 0x80022d8
        0x080001c6:    4d07        .M      LDR      r5,[pc,#28] ; [0x80001e4] = 0x80022f8
        0x080001c8:    e006        ..      B        0x80001d8 ; __scatterload + 20
        0x080001ca:    68e0        .h      LDR      r0,[r4,#0xc]
        0x080001cc:    f0400301    @...    ORR      r3,r0,#1
        0x080001d0:    e8940007    ....    LDM      r4,{r0-r2}
        0x080001d4:    4798        .G      BLX      r3
        0x080001d6:    3410        .4      ADDS     r4,r4,#0x10
        0x080001d8:    42ac        .B      CMP      r4,r5
        0x080001da:    d3f6        ..      BCC      0x80001ca ; __scatterload + 6
        0x080001dc:    f7ffff8a    ....    BL       __main_after_scatterload ; 0x80000f4
    $d
        0x080001e0:    080022d8    ."..    DCD    134226648
        0x080001e4:    080022f8    ."..    DCD    134226680
    $t
    .text
    __decompress
    __decompress1
        0x080001e8:    b570        p.      PUSH     {r4-r6,lr}
        0x080001ea:    188c        ..      ADDS     r4,r1,r2
        0x080001ec:    f8105b01    ...[    LDRB     r5,[r0],#1
        0x080001f0:    f0150307    ....    ANDS     r3,r5,#7
        0x080001f4:    d101        ..      BNE      0x80001fa ; __decompress + 18
        0x080001f6:    f8103b01    ...;    LDRB     r3,[r0],#1
        0x080001fa:    112a        *.      ASRS     r2,r5,#4
        0x080001fc:    d106        ..      BNE      0x800020c ; __decompress + 36
        0x080001fe:    f8102b01    ...+    LDRB     r2,[r0],#1
        0x08000202:    e003        ..      B        0x800020c ; __decompress + 36
        0x08000204:    f8106b01    ...k    LDRB     r6,[r0],#1
        0x08000208:    f8016b01    ...k    STRB     r6,[r1],#1
        0x0800020c:    1e5b        [.      SUBS     r3,r3,#1
        0x0800020e:    d1f9        ..      BNE      0x8000204 ; __decompress + 28
        0x08000210:    072b        +.      LSLS     r3,r5,#28
        0x08000212:    d405        ..      BMI      0x8000220 ; __decompress + 56
        0x08000214:    2300        .#      MOVS     r3,#0
        0x08000216:    1e52        R.      SUBS     r2,r2,#1
        0x08000218:    d40d        ..      BMI      0x8000236 ; __decompress + 78
        0x0800021a:    f8013b01    ...;    STRB     r3,[r1],#1
        0x0800021e:    e7fa        ..      B        0x8000216 ; __decompress + 46
        0x08000220:    f8103b01    ...;    LDRB     r3,[r0],#1
        0x08000224:    1acb        ..      SUBS     r3,r1,r3
        0x08000226:    1c92        ..      ADDS     r2,r2,#2
        0x08000228:    e003        ..      B        0x8000232 ; __decompress + 74
        0x0800022a:    f8135b01    ...[    LDRB     r5,[r3],#1
        0x0800022e:    f8015b01    ...[    STRB     r5,[r1],#1
        0x08000232:    1e52        R.      SUBS     r2,r2,#1
        0x08000234:    d5f9        ..      BPL      0x800022a ; __decompress + 66
        0x08000236:    42a1        .B      CMP      r1,r4
        0x08000238:    d3d8        ..      BCC      0x80001ec ; __decompress + 4
        0x0800023a:    2000        .       MOVS     r0,#0
        0x0800023c:    bd70        p.      POP      {r4-r6,pc}
        0x0800023e:    0000        ..      MOVS     r0,r0
    i.DMA1_Channel4_IRQHandler
    DMA1_Channel4_IRQHandler
;;; .\../Src/stm32f1xx_it.c
;;;158    {
        0x08000240:    b510        ..      PUSH     {r4,lr}
;;;159      /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */
;;;160      if(LL_DMA_IsActiveFlag_TC4(DMA1))
        0x08000242:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h
;;;1258     return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF4) == (DMA_ISR_TCIF4));
        0x08000244:    480b        .H      LDR      r0,[pc,#44] ; [0x8000274] = 0x40020000
        0x08000246:    6800        .h      LDR      r0,[r0,#0]
        0x08000248:    f3c03040    ..@0    UBFX     r0,r0,#13,#1
        0x0800024c:    b140        @.      CBZ      r0,0x8000260 ; DMA1_Channel4_IRQHandler + 32
;;; .\../Src/stm32f1xx_it.c
;;;162        LL_DMA_ClearFlag_GI4(DMA1);
        0x0800024e:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h
;;;1489     WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF4);
        0x08000250:    f44f5080    O..P    MOV      r0,#0x1000
        0x08000254:    4907        .I      LDR      r1,[pc,#28] ; [0x8000274] = 0x40020000
        0x08000256:    6048        H`      STR      r0,[r1,#4]
;;;1490   }
        0x08000258:    bf00        ..      NOP      
;;; .\../Src/stm32f1xx_it.c
;;;163        Transfer_Complete_Callback();
        0x0800025a:    f001fa6f    ..o.    BL       Transfer_Complete_Callback ; 0x800173c
        0x0800025e:    e007        ..      B        0x8000270 ; DMA1_Channel4_IRQHandler + 48
;;;164    //    DMA1_Transfer_Complete_Callback();
;;;165      }
;;;166      else if(LL_DMA_IsActiveFlag_TE4(DMA1))
        0x08000260:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h
;;;1412     return (READ_BIT(DMAx->ISR, DMA_ISR_TEIF4) == (DMA_ISR_TEIF4));
        0x08000262:    4804        .H      LDR      r0,[pc,#16] ; [0x8000274] = 0x40020000
        0x08000264:    6800        .h      LDR      r0,[r0,#0]
        0x08000266:    f3c030c0    ...0    UBFX     r0,r0,#15,#1
        0x0800026a:    b108        ..      CBZ      r0,0x8000270 ; DMA1_Channel4_IRQHandler + 48
;;; .\../Src/stm32f1xx_it.c
;;;168        Transfer_Error_Callback();
        0x0800026c:    f001fa90    ....    BL       Transfer_Error_Callback ; 0x8001790
;;;169      }
;;;170    
;;;171      /* USER CODE END DMA1_Channel4_IRQn 0 */
;;;172      
;;;173      /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */
;;;174    
;;;175      /* USER CODE END DMA1_Channel4_IRQn 1 */
;;;176    }
        0x08000270:    bd10        ..      POP      {r4,pc}
    $d
        0x08000272:    0000        ..      DCW    0
        0x08000274:    40020000    ...@    DCD    1073872896
    $t
    i.I2C2_ER_IRQHandler
    I2C2_ER_IRQHandler
;;;177    
;;;178    /**
;;;179    * @brief This function handles TIM1 update interrupt.
;;;180    */
;;;181    void TIM1_UP_IRQHandler(void)
;;;182    {
;;;183      /* USER CODE BEGIN TIM1_UP_IRQn 0 */
;;;184    
;;;185      /* USER CODE END TIM1_UP_IRQn 0 */
;;;186      /* USER CODE BEGIN TIM1_UP_IRQn 1 */
;;;187      if(LL_TIM_IsActiveFlag_UPDATE(TIM1) == 1)
;;;188      {
;;;189        /* Clear the update interrupt flag*/
;;;190        LL_TIM_ClearFlag_UPDATE(TIM1);
;;;191      }
;;;192    
;;;193      /* USER CODE END TIM1_UP_IRQn 1 */
;;;194    }
;;;195    
;;;196    /**
;;;197    * @brief This function handles TIM2 global interrupt.
;;;198    */
;;;199    void TIM2_IRQHandler(void)
;;;200    {
;;;201      /* USER CODE BEGIN TIM2_IRQn 0 */
;;;202    // prescaler=((((speed=72000000)/((period=20000)/(1/hz=1)))+0,5)-1)
;;;203    //	if ( async_z == 1) {
;;;204    	if ( state.async_z == 1) {
;;;205    //		state.f_encoder = encoder;
;;;206    //		state.f_tacho = t4sr[TIM_SR_CC3IF_Pos];
;;;207    //		LED_GPIO_Port->BSRR = LED_Pin;   // led off
;;;208    //		LED_GPIO_Port->BRR = LED_Pin;
;;;209    //    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
;;;210    //    LL_GPIO_TogglePin( LED_GPIO_Port, LED_Pin);
;;;211    
;;;212    		state.function(&state);
;;;213    
;;;214    		TIM2->ARR = state.z_period;
;;;215    		TIM2->EGR |= TIM_EGR_UG;
;;;216    
;;;217    //		text_buffer[tbc++] = TIM2->ARR;
;;;218    	}
;;;219    
;;;220      /* USER CODE END TIM2_IRQn 0 */
;;;221      /* USER CODE BEGIN TIM2_IRQn 1 */
;;;222      /* Check whether update interrupt is pending */
;;;223      if(LL_TIM_IsActiveFlag_UPDATE(TIM2) == 1)
;;;224      {
;;;225        /* Clear the update interrupt flag*/
;;;226        LL_TIM_ClearFlag_UPDATE(TIM2);
;;;227      }
;;;228      /* USER CODE END TIM2_IRQn 1 */
;;;229    }
;;;230    
;;;231    /**
;;;232    * @brief This function handles TIM4 global interrupt.
;;;233    */
;;;234    void TIM4_IRQHandler(void)
;;;235    {
;;;236      /* USER CODE BEGIN TIM4_IRQn 0 */
;;;237    //	_Bool dir = t4cr1[TIM_CR1_DIR_Pos];
;;;238    //	if(t4sr[TIM_SR_CC3IF_Pos]){
;;;239    //		do_fsm_wait_tacho(&state);
;;;240    //	}
;;;241    	if (state.sync == true) {
;;;242    		state.spindle_dir = t4cr1[TIM_CR1_DIR_Pos];
;;;243    //		state.f_encoder = encoder;
;;;244    		state.f_tacho = t4sr[TIM_SR_CC3IF_Pos];
;;;245    		state.function(&state);
;;;246    	}
;;;247    //	TIM4->SR &= ~TIM_SR_UIF; //Сбрасываем бит вызова прерывания. 
;;;248    
;;;249      /* USER CODE END TIM4_IRQn 0 */
;;;250      /* USER CODE BEGIN TIM4_IRQn 1 */
;;;251      /* Check whether update interrupt is pending */
;;;252    //	if(LL_TIM_IsActiveFlag_CC2OVR(TIM4) == 1){
;;;253    //		TIM4->SR = 0;
;;;254    //	}
;;;255    	TIM4->SR = 0;
;;;256    /*
;;;257    	if(LL_TIM_IsActiveFlag_CC2(TIM4) == 1)
;;;258        LL_TIM_ClearFlag_CC2(TIM4);
;;;259    	if(LL_TIM_IsActiveFlag_CC3(TIM4) == 1)
;;;260        LL_TIM_ClearFlag_CC3(TIM4);
;;;261    	if(LL_TIM_IsActiveFlag_UPDATE(TIM4) == 1)
;;;262      {
;;;263        LL_TIM_ClearFlag_UPDATE(TIM4); //Clear the update interrupt flag
;;;264      }
;;;265    */
;;;266      /* USER CODE END TIM4_IRQn 1 */
;;;267    }
;;;268    
;;;269    /**
;;;270    * @brief This function handles I2C2 event interrupt.
;;;271    */
;;;272    void I2C2_EV_IRQHandler(void)
;;;273    {
;;;274      /* USER CODE BEGIN I2C2_EV_IRQn 0 */
;;;275      /* Check SB flag value in ISR register */
;;;276      if(LL_I2C_IsActiveFlag_SB(I2C2))
;;;277      {
;;;278        /* Send Slave address with a 7-Bit SLAVE_OWN_ADDRESS for a write request */
;;;279        LL_I2C_TransmitData8(I2C2, SSD1306_I2C_ADDR);
;;;280      }
;;;281      /* Check ADDR flag value in ISR register */
;;;282      else if(LL_I2C_IsActiveFlag_ADDR(I2C2))
;;;283      {
;;;284        /* Enable DMA transmission requests */
;;;285        LL_I2C_EnableDMAReq_TX(I2C2);
;;;286    
;;;287        /* Clear ADDR flag value in ISR register */
;;;288        LL_I2C_ClearFlag_ADDR(I2C2);
;;;289      }
;;;290    
;;;291      /* USER CODE END I2C2_EV_IRQn 0 */
;;;292      
;;;293      /* USER CODE BEGIN I2C2_EV_IRQn 1 */
;;;294    
;;;295      /* USER CODE END I2C2_EV_IRQn 1 */
;;;296    }
;;;297    
;;;298    /**
;;;299    * @brief This function handles I2C2 error interrupt.
;;;300    */
;;;301    void I2C2_ER_IRQHandler(void)
;;;302    {
;;;303      /* USER CODE BEGIN I2C2_ER_IRQn 0 */
;;;304      while(1){
        0x08000278:    bf00        ..      NOP      
        0x0800027a:    e7fe        ..      B        0x800027a ; I2C2_ER_IRQHandler + 2
    i.I2C2_EV_IRQHandler
    I2C2_EV_IRQHandler
;;; .\../Src/stm32f1xx_it.c (273)
        0x0800027c:    b508        ..      PUSH     {r3,lr}
;;;274      /* USER CODE BEGIN I2C2_EV_IRQn 0 */
;;;275      /* Check SB flag value in ISR register */
;;;276      if(LL_I2C_IsActiveFlag_SB(I2C2))
        0x0800027e:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;1186     return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
        0x08000280:    4814        .H      LDR      r0,[pc,#80] ; [0x80002d4] = 0x40005800
        0x08000282:    6940        @i      LDR      r0,[r0,#0x14]
        0x08000284:    f0000001    ....    AND      r0,r0,#1
        0x08000288:    b148        H.      CBZ      r0,0x800029e ; I2C2_EV_IRQHandler + 34
;;; .\../Src/stm32f1xx_it.c
;;;279        LL_I2C_TransmitData8(I2C2, SSD1306_I2C_ADDR);
        0x0800028a:    2078        x       MOVS     r0,#0x78
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;1758     MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
        0x0800028c:    4911        .I      LDR      r1,[pc,#68] ; [0x80002d4] = 0x40005800
        0x0800028e:    6909        .i      LDR      r1,[r1,#0x10]
        0x08000290:    f02101ff    !...    BIC      r1,r1,#0xff
        0x08000294:    4301        .C      ORRS     r1,r1,r0
        0x08000296:    4a0f        .J      LDR      r2,[pc,#60] ; [0x80002d4] = 0x40005800
        0x08000298:    6111        .a      STR      r1,[r2,#0x10]
;;;1759   }
        0x0800029a:    bf00        ..      NOP      
        0x0800029c:    e018        ..      B        0x80002d0 ; I2C2_EV_IRQHandler + 84
;;; .\../Src/stm32f1xx_it.c
;;;282      else if(LL_I2C_IsActiveFlag_ADDR(I2C2))
        0x0800029e:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;1199     return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
        0x080002a0:    480c        .H      LDR      r0,[pc,#48] ; [0x80002d4] = 0x40005800
        0x080002a2:    6940        @i      LDR      r0,[r0,#0x14]
        0x080002a4:    f3c00040    ..@.    UBFX     r0,r0,#1,#1
        0x080002a8:    b190        ..      CBZ      r0,0x80002d0 ; I2C2_EV_IRQHandler + 84
;;; .\../Src/stm32f1xx_it.c
;;;285        LL_I2C_EnableDMAReq_TX(I2C2);
        0x080002aa:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;401      SET_BIT(I2Cx->CR2, I2C_CR2_DMAEN);
        0x080002ac:    4809        .H      LDR      r0,[pc,#36] ; [0x80002d4] = 0x40005800
        0x080002ae:    6840        @h      LDR      r0,[r0,#4]
        0x080002b0:    f4406000    @..`    ORR      r0,r0,#0x800
        0x080002b4:    4907        .I      LDR      r1,[pc,#28] ; [0x80002d4] = 0x40005800
        0x080002b6:    6048        H`      STR      r0,[r1,#4]
;;;402    }
        0x080002b8:    bf00        ..      NOP      
;;; .\../Src/stm32f1xx_it.c
;;;288        LL_I2C_ClearFlag_ADDR(I2C2);
        0x080002ba:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;1415     tmpreg = I2Cx->SR1;
        0x080002bc:    4608        .F      MOV      r0,r1
        0x080002be:    6940        @i      LDR      r0,[r0,#0x14]
        0x080002c0:    9000        ..      STR      r0,[sp,#0]
;;;1416     (void) tmpreg;
        0x080002c2:    bf00        ..      NOP      
;;;1417     tmpreg = I2Cx->SR2;
        0x080002c4:    4608        .F      MOV      r0,r1
        0x080002c6:    6980        .i      LDR      r0,[r0,#0x18]
        0x080002c8:    9000        ..      STR      r0,[sp,#0]
;;;1418     (void) tmpreg;
        0x080002ca:    bf00        ..      NOP      
;;;1419   }
        0x080002cc:    bf00        ..      NOP      
        0x080002ce:    bf00        ..      NOP      
;;; .\../Src/stm32f1xx_it.c
;;;296    }
        0x080002d0:    bd08        ..      POP      {r3,pc}
    $d
        0x080002d2:    0000        ..      DCW    0
        0x080002d4:    40005800    .X.@    DCD    1073764352
    $t
    i.LL_APB1_GRP1_EnableClock
    LL_APB1_GRP1_EnableClock
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h
;;;464    {
        0x080002d8:    b508        ..      PUSH     {r3,lr}
;;;465      __IO uint32_t tmpreg;
;;;466      SET_BIT(RCC->APB1ENR, Periphs);
        0x080002da:    4905        .I      LDR      r1,[pc,#20] ; [0x80002f0] = 0x40021000
        0x080002dc:    69c9        .i      LDR      r1,[r1,#0x1c]
        0x080002de:    4301        .C      ORRS     r1,r1,r0
        0x080002e0:    4a03        .J      LDR      r2,[pc,#12] ; [0x80002f0] = 0x40021000
        0x080002e2:    61d1        .a      STR      r1,[r2,#0x1c]
;;;467      /* Delay after an RCC peripheral clock enabling */
;;;468      tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
        0x080002e4:    4611        .F      MOV      r1,r2
        0x080002e6:    69c9        .i      LDR      r1,[r1,#0x1c]
        0x080002e8:    4001        .@      ANDS     r1,r1,r0
        0x080002ea:    9100        ..      STR      r1,[sp,#0]
;;;469      (void)tmpreg;
        0x080002ec:    bf00        ..      NOP      
;;;470    }
        0x080002ee:    bd08        ..      POP      {r3,pc}
    $d
        0x080002f0:    40021000    ...@    DCD    1073876992
    $t
    i.LL_APB2_GRP1_EnableClock
    LL_APB2_GRP1_EnableClock
;;;471    
;;;472    /**
;;;473      * @brief  Check if APB1 peripheral clock is enabled or not
;;;474      * @rmtoll APB1ENR      BKPEN         LL_APB1_GRP1_IsEnabledClock\n
;;;475      *         APB1ENR      CAN1EN        LL_APB1_GRP1_IsEnabledClock\n
;;;476      *         APB1ENR      CAN2EN        LL_APB1_GRP1_IsEnabledClock\n
;;;477      *         APB1ENR      CECEN         LL_APB1_GRP1_IsEnabledClock\n
;;;478      *         APB1ENR      DACEN         LL_APB1_GRP1_IsEnabledClock\n
;;;479      *         APB1ENR      I2C1EN        LL_APB1_GRP1_IsEnabledClock\n
;;;480      *         APB1ENR      I2C2EN        LL_APB1_GRP1_IsEnabledClock\n
;;;481      *         APB1ENR      PWREN         LL_APB1_GRP1_IsEnabledClock\n
;;;482      *         APB1ENR      SPI2EN        LL_APB1_GRP1_IsEnabledClock\n
;;;483      *         APB1ENR      SPI3EN        LL_APB1_GRP1_IsEnabledClock\n
;;;484      *         APB1ENR      TIM12EN       LL_APB1_GRP1_IsEnabledClock\n
;;;485      *         APB1ENR      TIM13EN       LL_APB1_GRP1_IsEnabledClock\n
;;;486      *         APB1ENR      TIM14EN       LL_APB1_GRP1_IsEnabledClock\n
;;;487      *         APB1ENR      TIM2EN        LL_APB1_GRP1_IsEnabledClock\n
;;;488      *         APB1ENR      TIM3EN        LL_APB1_GRP1_IsEnabledClock\n
;;;489      *         APB1ENR      TIM4EN        LL_APB1_GRP1_IsEnabledClock\n
;;;490      *         APB1ENR      TIM5EN        LL_APB1_GRP1_IsEnabledClock\n
;;;491      *         APB1ENR      TIM6EN        LL_APB1_GRP1_IsEnabledClock\n
;;;492      *         APB1ENR      TIM7EN        LL_APB1_GRP1_IsEnabledClock\n
;;;493      *         APB1ENR      UART4EN       LL_APB1_GRP1_IsEnabledClock\n
;;;494      *         APB1ENR      UART5EN       LL_APB1_GRP1_IsEnabledClock\n
;;;495      *         APB1ENR      USART2EN      LL_APB1_GRP1_IsEnabledClock\n
;;;496      *         APB1ENR      USART3EN      LL_APB1_GRP1_IsEnabledClock\n
;;;497      *         APB1ENR      USBEN         LL_APB1_GRP1_IsEnabledClock\n
;;;498      *         APB1ENR      WWDGEN        LL_APB1_GRP1_IsEnabledClock
;;;499      * @param  Periphs This parameter can be a combination of the following values:
;;;500      *         @arg @ref LL_APB1_GRP1_PERIPH_BKP
;;;501      *         @arg @ref LL_APB1_GRP1_PERIPH_CAN1 (*)
;;;502      *         @arg @ref LL_APB1_GRP1_PERIPH_CAN2 (*)
;;;503      *         @arg @ref LL_APB1_GRP1_PERIPH_CEC (*)
;;;504      *         @arg @ref LL_APB1_GRP1_PERIPH_DAC1 (*)
;;;505      *         @arg @ref LL_APB1_GRP1_PERIPH_I2C1
;;;506      *         @arg @ref LL_APB1_GRP1_PERIPH_I2C2 (*)
;;;507      *         @arg @ref LL_APB1_GRP1_PERIPH_PWR
;;;508      *         @arg @ref LL_APB1_GRP1_PERIPH_SPI2 (*)
;;;509      *         @arg @ref LL_APB1_GRP1_PERIPH_SPI3 (*)
;;;510      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM12 (*)
;;;511      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM13 (*)
;;;512      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM14 (*)
;;;513      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM2
;;;514      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM3
;;;515      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM4 (*)
;;;516      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM5 (*)
;;;517      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM6 (*)
;;;518      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM7 (*)
;;;519      *         @arg @ref LL_APB1_GRP1_PERIPH_UART4 (*)
;;;520      *         @arg @ref LL_APB1_GRP1_PERIPH_UART5 (*)
;;;521      *         @arg @ref LL_APB1_GRP1_PERIPH_USART2
;;;522      *         @arg @ref LL_APB1_GRP1_PERIPH_USART3 (*)
;;;523      *         @arg @ref LL_APB1_GRP1_PERIPH_USB (*)
;;;524      *         @arg @ref LL_APB1_GRP1_PERIPH_WWDG
;;;525      *
;;;526      *         (*) value not defined in all devices.
;;;527      * @retval State of Periphs (1 or 0).
;;;528    */
;;;529    __STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
;;;530    {
;;;531      return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
;;;532    }
;;;533    
;;;534    /**
;;;535      * @brief  Disable APB1 peripherals clock.
;;;536      * @rmtoll APB1ENR      BKPEN         LL_APB1_GRP1_DisableClock\n
;;;537      *         APB1ENR      CAN1EN        LL_APB1_GRP1_DisableClock\n
;;;538      *         APB1ENR      CAN2EN        LL_APB1_GRP1_DisableClock\n
;;;539      *         APB1ENR      CECEN         LL_APB1_GRP1_DisableClock\n
;;;540      *         APB1ENR      DACEN         LL_APB1_GRP1_DisableClock\n
;;;541      *         APB1ENR      I2C1EN        LL_APB1_GRP1_DisableClock\n
;;;542      *         APB1ENR      I2C2EN        LL_APB1_GRP1_DisableClock\n
;;;543      *         APB1ENR      PWREN         LL_APB1_GRP1_DisableClock\n
;;;544      *         APB1ENR      SPI2EN        LL_APB1_GRP1_DisableClock\n
;;;545      *         APB1ENR      SPI3EN        LL_APB1_GRP1_DisableClock\n
;;;546      *         APB1ENR      TIM12EN       LL_APB1_GRP1_DisableClock\n
;;;547      *         APB1ENR      TIM13EN       LL_APB1_GRP1_DisableClock\n
;;;548      *         APB1ENR      TIM14EN       LL_APB1_GRP1_DisableClock\n
;;;549      *         APB1ENR      TIM2EN        LL_APB1_GRP1_DisableClock\n
;;;550      *         APB1ENR      TIM3EN        LL_APB1_GRP1_DisableClock\n
;;;551      *         APB1ENR      TIM4EN        LL_APB1_GRP1_DisableClock\n
;;;552      *         APB1ENR      TIM5EN        LL_APB1_GRP1_DisableClock\n
;;;553      *         APB1ENR      TIM6EN        LL_APB1_GRP1_DisableClock\n
;;;554      *         APB1ENR      TIM7EN        LL_APB1_GRP1_DisableClock\n
;;;555      *         APB1ENR      UART4EN       LL_APB1_GRP1_DisableClock\n
;;;556      *         APB1ENR      UART5EN       LL_APB1_GRP1_DisableClock\n
;;;557      *         APB1ENR      USART2EN      LL_APB1_GRP1_DisableClock\n
;;;558      *         APB1ENR      USART3EN      LL_APB1_GRP1_DisableClock\n
;;;559      *         APB1ENR      USBEN         LL_APB1_GRP1_DisableClock\n
;;;560      *         APB1ENR      WWDGEN        LL_APB1_GRP1_DisableClock
;;;561      * @param  Periphs This parameter can be a combination of the following values:
;;;562      *         @arg @ref LL_APB1_GRP1_PERIPH_BKP
;;;563      *         @arg @ref LL_APB1_GRP1_PERIPH_CAN1 (*)
;;;564      *         @arg @ref LL_APB1_GRP1_PERIPH_CAN2 (*)
;;;565      *         @arg @ref LL_APB1_GRP1_PERIPH_CEC (*)
;;;566      *         @arg @ref LL_APB1_GRP1_PERIPH_DAC1 (*)
;;;567      *         @arg @ref LL_APB1_GRP1_PERIPH_I2C1
;;;568      *         @arg @ref LL_APB1_GRP1_PERIPH_I2C2 (*)
;;;569      *         @arg @ref LL_APB1_GRP1_PERIPH_PWR
;;;570      *         @arg @ref LL_APB1_GRP1_PERIPH_SPI2 (*)
;;;571      *         @arg @ref LL_APB1_GRP1_PERIPH_SPI3 (*)
;;;572      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM12 (*)
;;;573      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM13 (*)
;;;574      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM14 (*)
;;;575      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM2
;;;576      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM3
;;;577      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM4 (*)
;;;578      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM5 (*)
;;;579      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM6 (*)
;;;580      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM7 (*)
;;;581      *         @arg @ref LL_APB1_GRP1_PERIPH_UART4 (*)
;;;582      *         @arg @ref LL_APB1_GRP1_PERIPH_UART5 (*)
;;;583      *         @arg @ref LL_APB1_GRP1_PERIPH_USART2
;;;584      *         @arg @ref LL_APB1_GRP1_PERIPH_USART3 (*)
;;;585      *         @arg @ref LL_APB1_GRP1_PERIPH_USB (*)
;;;586      *         @arg @ref LL_APB1_GRP1_PERIPH_WWDG
;;;587      *
;;;588      *         (*) value not defined in all devices.
;;;589      * @retval None
;;;590    */
;;;591    __STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
;;;592    {
;;;593      CLEAR_BIT(RCC->APB1ENR, Periphs);
;;;594    }
;;;595    
;;;596    /**
;;;597      * @brief  Force APB1 peripherals reset.
;;;598      * @rmtoll APB1RSTR     BKPRST        LL_APB1_GRP1_ForceReset\n
;;;599      *         APB1RSTR     CAN1RST       LL_APB1_GRP1_ForceReset\n
;;;600      *         APB1RSTR     CAN2RST       LL_APB1_GRP1_ForceReset\n
;;;601      *         APB1RSTR     CECRST        LL_APB1_GRP1_ForceReset\n
;;;602      *         APB1RSTR     DACRST        LL_APB1_GRP1_ForceReset\n
;;;603      *         APB1RSTR     I2C1RST       LL_APB1_GRP1_ForceReset\n
;;;604      *         APB1RSTR     I2C2RST       LL_APB1_GRP1_ForceReset\n
;;;605      *         APB1RSTR     PWRRST        LL_APB1_GRP1_ForceReset\n
;;;606      *         APB1RSTR     SPI2RST       LL_APB1_GRP1_ForceReset\n
;;;607      *         APB1RSTR     SPI3RST       LL_APB1_GRP1_ForceReset\n
;;;608      *         APB1RSTR     TIM12RST      LL_APB1_GRP1_ForceReset\n
;;;609      *         APB1RSTR     TIM13RST      LL_APB1_GRP1_ForceReset\n
;;;610      *         APB1RSTR     TIM14RST      LL_APB1_GRP1_ForceReset\n
;;;611      *         APB1RSTR     TIM2RST       LL_APB1_GRP1_ForceReset\n
;;;612      *         APB1RSTR     TIM3RST       LL_APB1_GRP1_ForceReset\n
;;;613      *         APB1RSTR     TIM4RST       LL_APB1_GRP1_ForceReset\n
;;;614      *         APB1RSTR     TIM5RST       LL_APB1_GRP1_ForceReset\n
;;;615      *         APB1RSTR     TIM6RST       LL_APB1_GRP1_ForceReset\n
;;;616      *         APB1RSTR     TIM7RST       LL_APB1_GRP1_ForceReset\n
;;;617      *         APB1RSTR     UART4RST      LL_APB1_GRP1_ForceReset\n
;;;618      *         APB1RSTR     UART5RST      LL_APB1_GRP1_ForceReset\n
;;;619      *         APB1RSTR     USART2RST     LL_APB1_GRP1_ForceReset\n
;;;620      *         APB1RSTR     USART3RST     LL_APB1_GRP1_ForceReset\n
;;;621      *         APB1RSTR     USBRST        LL_APB1_GRP1_ForceReset\n
;;;622      *         APB1RSTR     WWDGRST       LL_APB1_GRP1_ForceReset
;;;623      * @param  Periphs This parameter can be a combination of the following values:
;;;624      *         @arg @ref LL_APB1_GRP1_PERIPH_ALL
;;;625      *         @arg @ref LL_APB1_GRP1_PERIPH_BKP
;;;626      *         @arg @ref LL_APB1_GRP1_PERIPH_CAN1 (*)
;;;627      *         @arg @ref LL_APB1_GRP1_PERIPH_CAN2 (*)
;;;628      *         @arg @ref LL_APB1_GRP1_PERIPH_CEC (*)
;;;629      *         @arg @ref LL_APB1_GRP1_PERIPH_DAC1 (*)
;;;630      *         @arg @ref LL_APB1_GRP1_PERIPH_I2C1
;;;631      *         @arg @ref LL_APB1_GRP1_PERIPH_I2C2 (*)
;;;632      *         @arg @ref LL_APB1_GRP1_PERIPH_PWR
;;;633      *         @arg @ref LL_APB1_GRP1_PERIPH_SPI2 (*)
;;;634      *         @arg @ref LL_APB1_GRP1_PERIPH_SPI3 (*)
;;;635      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM12 (*)
;;;636      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM13 (*)
;;;637      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM14 (*)
;;;638      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM2
;;;639      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM3
;;;640      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM4 (*)
;;;641      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM5 (*)
;;;642      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM6 (*)
;;;643      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM7 (*)
;;;644      *         @arg @ref LL_APB1_GRP1_PERIPH_UART4 (*)
;;;645      *         @arg @ref LL_APB1_GRP1_PERIPH_UART5 (*)
;;;646      *         @arg @ref LL_APB1_GRP1_PERIPH_USART2
;;;647      *         @arg @ref LL_APB1_GRP1_PERIPH_USART3 (*)
;;;648      *         @arg @ref LL_APB1_GRP1_PERIPH_USB (*)
;;;649      *         @arg @ref LL_APB1_GRP1_PERIPH_WWDG
;;;650      *
;;;651      *         (*) value not defined in all devices.
;;;652      * @retval None
;;;653    */
;;;654    __STATIC_INLINE void LL_APB1_GRP1_ForceReset(uint32_t Periphs)
;;;655    {
;;;656      SET_BIT(RCC->APB1RSTR, Periphs);
;;;657    }
;;;658    
;;;659    /**
;;;660      * @brief  Release APB1 peripherals reset.
;;;661      * @rmtoll APB1RSTR     BKPRST        LL_APB1_GRP1_ReleaseReset\n
;;;662      *         APB1RSTR     CAN1RST       LL_APB1_GRP1_ReleaseReset\n
;;;663      *         APB1RSTR     CAN2RST       LL_APB1_GRP1_ReleaseReset\n
;;;664      *         APB1RSTR     CECRST        LL_APB1_GRP1_ReleaseReset\n
;;;665      *         APB1RSTR     DACRST        LL_APB1_GRP1_ReleaseReset\n
;;;666      *         APB1RSTR     I2C1RST       LL_APB1_GRP1_ReleaseReset\n
;;;667      *         APB1RSTR     I2C2RST       LL_APB1_GRP1_ReleaseReset\n
;;;668      *         APB1RSTR     PWRRST        LL_APB1_GRP1_ReleaseReset\n
;;;669      *         APB1RSTR     SPI2RST       LL_APB1_GRP1_ReleaseReset\n
;;;670      *         APB1RSTR     SPI3RST       LL_APB1_GRP1_ReleaseReset\n
;;;671      *         APB1RSTR     TIM12RST      LL_APB1_GRP1_ReleaseReset\n
;;;672      *         APB1RSTR     TIM13RST      LL_APB1_GRP1_ReleaseReset\n
;;;673      *         APB1RSTR     TIM14RST      LL_APB1_GRP1_ReleaseReset\n
;;;674      *         APB1RSTR     TIM2RST       LL_APB1_GRP1_ReleaseReset\n
;;;675      *         APB1RSTR     TIM3RST       LL_APB1_GRP1_ReleaseReset\n
;;;676      *         APB1RSTR     TIM4RST       LL_APB1_GRP1_ReleaseReset\n
;;;677      *         APB1RSTR     TIM5RST       LL_APB1_GRP1_ReleaseReset\n
;;;678      *         APB1RSTR     TIM6RST       LL_APB1_GRP1_ReleaseReset\n
;;;679      *         APB1RSTR     TIM7RST       LL_APB1_GRP1_ReleaseReset\n
;;;680      *         APB1RSTR     UART4RST      LL_APB1_GRP1_ReleaseReset\n
;;;681      *         APB1RSTR     UART5RST      LL_APB1_GRP1_ReleaseReset\n
;;;682      *         APB1RSTR     USART2RST     LL_APB1_GRP1_ReleaseReset\n
;;;683      *         APB1RSTR     USART3RST     LL_APB1_GRP1_ReleaseReset\n
;;;684      *         APB1RSTR     USBRST        LL_APB1_GRP1_ReleaseReset\n
;;;685      *         APB1RSTR     WWDGRST       LL_APB1_GRP1_ReleaseReset
;;;686      * @param  Periphs This parameter can be a combination of the following values:
;;;687      *         @arg @ref LL_APB1_GRP1_PERIPH_ALL
;;;688      *         @arg @ref LL_APB1_GRP1_PERIPH_BKP
;;;689      *         @arg @ref LL_APB1_GRP1_PERIPH_CAN1 (*)
;;;690      *         @arg @ref LL_APB1_GRP1_PERIPH_CAN2 (*)
;;;691      *         @arg @ref LL_APB1_GRP1_PERIPH_CEC (*)
;;;692      *         @arg @ref LL_APB1_GRP1_PERIPH_DAC1 (*)
;;;693      *         @arg @ref LL_APB1_GRP1_PERIPH_I2C1
;;;694      *         @arg @ref LL_APB1_GRP1_PERIPH_I2C2 (*)
;;;695      *         @arg @ref LL_APB1_GRP1_PERIPH_PWR
;;;696      *         @arg @ref LL_APB1_GRP1_PERIPH_SPI2 (*)
;;;697      *         @arg @ref LL_APB1_GRP1_PERIPH_SPI3 (*)
;;;698      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM12 (*)
;;;699      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM13 (*)
;;;700      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM14 (*)
;;;701      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM2
;;;702      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM3
;;;703      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM4 (*)
;;;704      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM5 (*)
;;;705      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM6 (*)
;;;706      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM7 (*)
;;;707      *         @arg @ref LL_APB1_GRP1_PERIPH_UART4 (*)
;;;708      *         @arg @ref LL_APB1_GRP1_PERIPH_UART5 (*)
;;;709      *         @arg @ref LL_APB1_GRP1_PERIPH_USART2
;;;710      *         @arg @ref LL_APB1_GRP1_PERIPH_USART3 (*)
;;;711      *         @arg @ref LL_APB1_GRP1_PERIPH_USB (*)
;;;712      *         @arg @ref LL_APB1_GRP1_PERIPH_WWDG
;;;713      *
;;;714      *         (*) value not defined in all devices.
;;;715      * @retval None
;;;716    */
;;;717    __STATIC_INLINE void LL_APB1_GRP1_ReleaseReset(uint32_t Periphs)
;;;718    {
;;;719      CLEAR_BIT(RCC->APB1RSTR, Periphs);
;;;720    }
;;;721    
;;;722    /**
;;;723      * @}
;;;724      */
;;;725    
;;;726    /** @defgroup BUS_LL_EF_APB2 APB2
;;;727      * @{
;;;728      */
;;;729    
;;;730    /**
;;;731      * @brief  Enable APB2 peripherals clock.
;;;732      * @rmtoll APB2ENR      ADC1EN        LL_APB2_GRP1_EnableClock\n
;;;733      *         APB2ENR      ADC2EN        LL_APB2_GRP1_EnableClock\n
;;;734      *         APB2ENR      ADC3EN        LL_APB2_GRP1_EnableClock\n
;;;735      *         APB2ENR      AFIOEN        LL_APB2_GRP1_EnableClock\n
;;;736      *         APB2ENR      IOPAEN        LL_APB2_GRP1_EnableClock\n
;;;737      *         APB2ENR      IOPBEN        LL_APB2_GRP1_EnableClock\n
;;;738      *         APB2ENR      IOPCEN        LL_APB2_GRP1_EnableClock\n
;;;739      *         APB2ENR      IOPDEN        LL_APB2_GRP1_EnableClock\n
;;;740      *         APB2ENR      IOPEEN        LL_APB2_GRP1_EnableClock\n
;;;741      *         APB2ENR      IOPFEN        LL_APB2_GRP1_EnableClock\n
;;;742      *         APB2ENR      IOPGEN        LL_APB2_GRP1_EnableClock\n
;;;743      *         APB2ENR      SPI1EN        LL_APB2_GRP1_EnableClock\n
;;;744      *         APB2ENR      TIM10EN       LL_APB2_GRP1_EnableClock\n
;;;745      *         APB2ENR      TIM11EN       LL_APB2_GRP1_EnableClock\n
;;;746      *         APB2ENR      TIM15EN       LL_APB2_GRP1_EnableClock\n
;;;747      *         APB2ENR      TIM16EN       LL_APB2_GRP1_EnableClock\n
;;;748      *         APB2ENR      TIM17EN       LL_APB2_GRP1_EnableClock\n
;;;749      *         APB2ENR      TIM1EN        LL_APB2_GRP1_EnableClock\n
;;;750      *         APB2ENR      TIM8EN        LL_APB2_GRP1_EnableClock\n
;;;751      *         APB2ENR      TIM9EN        LL_APB2_GRP1_EnableClock\n
;;;752      *         APB2ENR      USART1EN      LL_APB2_GRP1_EnableClock
;;;753      * @param  Periphs This parameter can be a combination of the following values:
;;;754      *         @arg @ref LL_APB2_GRP1_PERIPH_ADC1
;;;755      *         @arg @ref LL_APB2_GRP1_PERIPH_ADC2 (*)
;;;756      *         @arg @ref LL_APB2_GRP1_PERIPH_ADC3 (*)
;;;757      *         @arg @ref LL_APB2_GRP1_PERIPH_AFIO
;;;758      *         @arg @ref LL_APB2_GRP1_PERIPH_GPIOA
;;;759      *         @arg @ref LL_APB2_GRP1_PERIPH_GPIOB
;;;760      *         @arg @ref LL_APB2_GRP1_PERIPH_GPIOC
;;;761      *         @arg @ref LL_APB2_GRP1_PERIPH_GPIOD
;;;762      *         @arg @ref LL_APB2_GRP1_PERIPH_GPIOE (*)
;;;763      *         @arg @ref LL_APB2_GRP1_PERIPH_GPIOF (*)
;;;764      *         @arg @ref LL_APB2_GRP1_PERIPH_GPIOG (*)
;;;765      *         @arg @ref LL_APB2_GRP1_PERIPH_SPI1
;;;766      *         @arg @ref LL_APB2_GRP1_PERIPH_TIM10 (*)
;;;767      *         @arg @ref LL_APB2_GRP1_PERIPH_TIM11 (*)
;;;768      *         @arg @ref LL_APB2_GRP1_PERIPH_TIM15 (*)
;;;769      *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16 (*)
;;;770      *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17 (*)
;;;771      *         @arg @ref LL_APB2_GRP1_PERIPH_TIM1
;;;772      *         @arg @ref LL_APB2_GRP1_PERIPH_TIM8 (*)
;;;773      *         @arg @ref LL_APB2_GRP1_PERIPH_TIM9 (*)
;;;774      *         @arg @ref LL_APB2_GRP1_PERIPH_USART1
;;;775      *
;;;776      *         (*) value not defined in all devices.
;;;777      * @retval None
;;;778    */
;;;779    __STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
;;;780    {
        0x080002f4:    b508        ..      PUSH     {r3,lr}
;;;781      __IO uint32_t tmpreg;
;;;782      SET_BIT(RCC->APB2ENR, Periphs);
        0x080002f6:    4905        .I      LDR      r1,[pc,#20] ; [0x800030c] = 0x40021000
        0x080002f8:    6989        .i      LDR      r1,[r1,#0x18]
        0x080002fa:    4301        .C      ORRS     r1,r1,r0
        0x080002fc:    4a03        .J      LDR      r2,[pc,#12] ; [0x800030c] = 0x40021000
        0x080002fe:    6191        .a      STR      r1,[r2,#0x18]
;;;783      /* Delay after an RCC peripheral clock enabling */
;;;784      tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
        0x08000300:    4611        .F      MOV      r1,r2
        0x08000302:    6989        .i      LDR      r1,[r1,#0x18]
        0x08000304:    4001        .@      ANDS     r1,r1,r0
        0x08000306:    9100        ..      STR      r1,[sp,#0]
;;;785      (void)tmpreg;
        0x08000308:    bf00        ..      NOP      
;;;786    }
        0x0800030a:    bd08        ..      POP      {r3,pc}
    $d
        0x0800030c:    40021000    ...@    DCD    1073876992
    $t
    i.LL_GPIO_Init
    LL_GPIO_Init
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_gpio.c
;;;172    {
        0x08000310:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x08000314:    4602        .F      MOV      r2,r0
        0x08000316:    460b        .F      MOV      r3,r1
;;;173      uint32_t pinmask;
;;;174      uint32_t pinpos;
;;;175      uint32_t currentpin;
;;;176    
;;;177      /* Check the parameters */
;;;178      assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
;;;179      assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));
;;;180    
;;;181      /* ------------------------- Configure the port pins ---------------- */
;;;182      /* Initialize  pinpos on first pin set */
;;;183    
;;;184      pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
        0x08000318:    6818        .h      LDR      r0,[r3,#0]
        0x0800031a:    f3c0250f    ...%    UBFX     r5,r0,#8,#16
;;;185      pinpos = POSITION_VAL(pinmask);
        0x0800031e:    fa95f0a5    ....    RBIT     r0,r5
        0x08000322:    fab0f480    ....    CLZ      r4,r0
;;;186    
;;;187      /* Configure the port pins */
;;;188      while ((pinmask  >> pinpos) != 0U)
        0x08000326:    e07c        |.      B        0x8000422 ; LL_GPIO_Init + 274
;;;189      {
;;;190        /* skip if bit is not set */
;;;191        if ((pinmask & (1U << pinpos)) != 0U)
        0x08000328:    2001        .       MOVS     r0,#1
        0x0800032a:    40a0        .@      LSLS     r0,r0,r4
        0x0800032c:    4028        (@      ANDS     r0,r0,r5
        0x0800032e:    2800        .(      CMP      r0,#0
        0x08000330:    d076        v.      BEQ      0x8000420 ; LL_GPIO_Init + 272
;;;192        {
;;;193          /* Get current io position */
;;;194          if (pinpos < GPIO_PIN_MASK_POS)
        0x08000332:    2c08        .,      CMP      r4,#8
        0x08000334:    d204        ..      BCS      0x8000340 ; LL_GPIO_Init + 48
;;;195          {
;;;196            currentpin = (0x00000101U << pinpos);
        0x08000336:    f2401001    @...    MOV      r0,#0x101
        0x0800033a:    fa00f104    ....    LSL      r1,r0,r4
        0x0800033e:    e006        ..      B        0x800034e ; LL_GPIO_Init + 62
;;;197          }
;;;198          else
;;;199          {
;;;200            currentpin = ((0x00010001U << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000U);
        0x08000340:    f1a40008    ....    SUB      r0,r4,#8
        0x08000344:    f04f1601    O...    MOV      r6,#0x10001
        0x08000348:    4086        .@      LSLS     r6,r6,r0
        0x0800034a:    f0466180    F..a    ORR      r1,r6,#0x4000000
;;;201          }
;;;202    
;;;203          /* Check Pin Mode and Pin Pull parameters */
;;;204          assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
;;;205          assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));
;;;206    
;;;207          /* Pin Mode configuration */
;;;208          LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
        0x0800034e:    6858        Xh      LDR      r0,[r3,#4]
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h
;;;360      register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
        0x08000350:    eb026611    ...f    ADD      r6,r2,r1,LSR #24
;;;361      MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
        0x08000354:    fa91fca1    ....    RBIT     r12,r1
        0x08000358:    fabcfc8c    ....    CLZ      r12,r12
        0x0800035c:    ea4f088c    O...    LSL      r8,r12,#2
        0x08000360:    f04f0c0f    O...    MOV      r12,#0xf
        0x08000364:    fa0cfc08    ....    LSL      r12,r12,r8
        0x08000368:    6837        7h      LDR      r7,[r6,#0]
        0x0800036a:    ea27070c    '...    BIC      r7,r7,r12
        0x0800036e:    fa91fca1    ....    RBIT     r12,r1
        0x08000372:    fabcfc8c    ....    CLZ      r12,r12
        0x08000376:    ea4f0c8c    O...    LSL      r12,r12,#2
        0x0800037a:    fa00fc0c    ....    LSL      r12,r0,r12
        0x0800037e:    ea47070c    G...    ORR      r7,r7,r12
        0x08000382:    6037        7`      STR      r7,[r6,#0]
;;;362    }
        0x08000384:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_gpio.c
;;;211          LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
        0x08000386:    6918        .i      LDR      r0,[r3,#0x10]
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h
;;;583      MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
        0x08000388:    68d6        .h      LDR      r6,[r2,#0xc]
        0x0800038a:    ea262611    &..&    BIC      r6,r6,r1,LSR #8
        0x0800038e:    0a0f        ..      LSRS     r7,r1,#8
        0x08000390:    fa97f7a7    ....    RBIT     r7,r7
        0x08000394:    fab7f787    ....    CLZ      r7,r7
        0x08000398:    fa00f707    ....    LSL      r7,r0,r7
        0x0800039c:    433e        >C      ORRS     r6,r6,r7
        0x0800039e:    60d6        .`      STR      r6,[r2,#0xc]
;;;584    }
        0x080003a0:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_gpio.c
;;;213          if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
        0x080003a2:    6858        Xh      LDR      r0,[r3,#4]
        0x080003a4:    2801        .(      CMP      r0,#1
        0x080003a6:    d002        ..      BEQ      0x80003ae ; LL_GPIO_Init + 158
        0x080003a8:    6858        Xh      LDR      r0,[r3,#4]
        0x080003aa:    2809        .(      CMP      r0,#9
        0x080003ac:    d138        8.      BNE      0x8000420 ; LL_GPIO_Init + 272
;;;214          {
;;;215            /* Check speed and Output mode parameters */
;;;216            assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
;;;217            assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
;;;218    
;;;219            /* Speed mode configuration */
;;;220            LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
        0x080003ae:    6898        .h      LDR      r0,[r3,#8]
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h
;;;438      register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
        0x080003b0:    eb026611    ...f    ADD      r6,r2,r1,LSR #24
;;;439      MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
        0x080003b4:    fa91fca1    ....    RBIT     r12,r1
        0x080003b8:    fabcfc8c    ....    CLZ      r12,r12
        0x080003bc:    ea4f088c    O...    LSL      r8,r12,#2
        0x080003c0:    f04f0c03    O...    MOV      r12,#3
        0x080003c4:    fa0cfc08    ....    LSL      r12,r12,r8
        0x080003c8:    6837        7h      LDR      r7,[r6,#0]
        0x080003ca:    ea27070c    '...    BIC      r7,r7,r12
        0x080003ce:    fa91fca1    ....    RBIT     r12,r1
        0x080003d2:    fabcfc8c    ....    CLZ      r12,r12
        0x080003d6:    ea4f0c8c    O...    LSL      r12,r12,#2
        0x080003da:    fa00fc0c    ....    LSL      r12,r0,r12
        0x080003de:    ea47070c    G...    ORR      r7,r7,r12
        0x080003e2:    6037        7`      STR      r7,[r6,#0]
;;;440                 (Speed << (POSITION_VAL(Pin) * 4U)));
;;;441    }
        0x080003e4:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_gpio.c
;;;223            LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
        0x080003e6:    68d8        .h      LDR      r0,[r3,#0xc]
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h
;;;512      register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
        0x080003e8:    eb026611    ...f    ADD      r6,r2,r1,LSR #24
;;;513      MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
        0x080003ec:    fa91fca1    ....    RBIT     r12,r1
        0x080003f0:    fabcfc8c    ....    CLZ      r12,r12
        0x080003f4:    ea4f088c    O...    LSL      r8,r12,#2
        0x080003f8:    f04f0c04    O...    MOV      r12,#4
        0x080003fc:    fa0cfc08    ....    LSL      r12,r12,r8
        0x08000400:    6837        7h      LDR      r7,[r6,#0]
        0x08000402:    ea27070c    '...    BIC      r7,r7,r12
        0x08000406:    fa91fca1    ....    RBIT     r12,r1
        0x0800040a:    fabcfc8c    ....    CLZ      r12,r12
        0x0800040e:    ea4f0c8c    O...    LSL      r12,r12,#2
        0x08000412:    fa00fc0c    ....    LSL      r12,r0,r12
        0x08000416:    ea47070c    G...    ORR      r7,r7,r12
        0x0800041a:    6037        7`      STR      r7,[r6,#0]
;;;514                 (OutputType << (POSITION_VAL(Pin) * 4U)));
;;;515    }
        0x0800041c:    bf00        ..      NOP      
        0x0800041e:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_gpio.c
;;;226        pinpos++;
        0x08000420:    1c64        d.      ADDS     r4,r4,#1
        0x08000422:    fa25f004    %...    LSR      r0,r5,r4
        0x08000426:    2800        .(      CMP      r0,#0
        0x08000428:    f47faf7e    ..~.    BNE      0x8000328 ; LL_GPIO_Init + 24
;;;227      }
;;;228      return (SUCCESS);
        0x0800042c:    2001        .       MOVS     r0,#1
;;;229    }
        0x0800042e:    e8bd81f0    ....    POP      {r4-r8,pc}
    i.LL_GPIO_IsInputPinSet
    LL_GPIO_IsInputPinSet
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h
;;;740    {
        0x08000432:    4602        .F      MOV      r2,r0
;;;741      return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
        0x08000434:    6890        .h      LDR      r0,[r2,#8]
        0x08000436:    f3c1230f    ...#    UBFX     r3,r1,#8,#16
        0x0800043a:    4018        .@      ANDS     r0,r0,r3
        0x0800043c:    f3c1230f    ...#    UBFX     r3,r1,#8,#16
        0x08000440:    4298        .B      CMP      r0,r3
        0x08000442:    d101        ..      BNE      0x8000448 ; LL_GPIO_IsInputPinSet + 22
        0x08000444:    2001        .       MOVS     r0,#1
        0x08000446:    4770        pG      BX       lr
        0x08000448:    2000        .       MOVS     r0,#0
        0x0800044a:    e7fc        ..      B        0x8000446 ; LL_GPIO_IsInputPinSet + 20
    i.LL_GPIO_ResetOutputPin
    LL_GPIO_ResetOutputPin
;;;742    }
;;;743    
;;;744    /**
;;;745      * @brief  Write output data register for the port.
;;;746      * @rmtoll ODR          ODy           LL_GPIO_WriteOutputPort
;;;747      * @param  GPIOx GPIO Port
;;;748      * @param  PortValue Level value for each pin of the port
;;;749      * @retval None
;;;750      */
;;;751    __STATIC_INLINE void LL_GPIO_WriteOutputPort(GPIO_TypeDef *GPIOx, uint32_t PortValue)
;;;752    {
;;;753      WRITE_REG(GPIOx->ODR, PortValue);
;;;754    }
;;;755    
;;;756    /**
;;;757      * @brief  Return full output data register value for a dedicated port.
;;;758      * @rmtoll ODR          ODy           LL_GPIO_ReadOutputPort
;;;759      * @param  GPIOx GPIO Port
;;;760      * @retval Output data register value of port
;;;761      */
;;;762    __STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
;;;763    {
;;;764      return (uint32_t)(READ_REG(GPIOx->ODR));
;;;765    }
;;;766    
;;;767    /**
;;;768      * @brief  Return if input data level for several pins of dedicated port is high or low.
;;;769      * @rmtoll ODR          ODy           LL_GPIO_IsOutputPinSet
;;;770      * @param  GPIOx GPIO Port
;;;771      * @param  PinMask This parameter can be a combination of the following values:
;;;772      *         @arg @ref LL_GPIO_PIN_0
;;;773      *         @arg @ref LL_GPIO_PIN_1
;;;774      *         @arg @ref LL_GPIO_PIN_2
;;;775      *         @arg @ref LL_GPIO_PIN_3
;;;776      *         @arg @ref LL_GPIO_PIN_4
;;;777      *         @arg @ref LL_GPIO_PIN_5
;;;778      *         @arg @ref LL_GPIO_PIN_6
;;;779      *         @arg @ref LL_GPIO_PIN_7
;;;780      *         @arg @ref LL_GPIO_PIN_8
;;;781      *         @arg @ref LL_GPIO_PIN_9
;;;782      *         @arg @ref LL_GPIO_PIN_10
;;;783      *         @arg @ref LL_GPIO_PIN_11
;;;784      *         @arg @ref LL_GPIO_PIN_12
;;;785      *         @arg @ref LL_GPIO_PIN_13
;;;786      *         @arg @ref LL_GPIO_PIN_14
;;;787      *         @arg @ref LL_GPIO_PIN_15
;;;788      *         @arg @ref LL_GPIO_PIN_ALL
;;;789      * @retval State of bit (1 or 0).
;;;790      */
;;;791    __STATIC_INLINE uint32_t LL_GPIO_IsOutputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
;;;792    {
;;;793      return (READ_BIT(GPIOx->ODR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
;;;794    }
;;;795    
;;;796    /**
;;;797      * @brief  Set several pins to high level on dedicated gpio port.
;;;798      * @rmtoll BSRR         BSy           LL_GPIO_SetOutputPin
;;;799      * @param  GPIOx GPIO Port
;;;800      * @param  PinMask This parameter can be a combination of the following values:
;;;801      *         @arg @ref LL_GPIO_PIN_0
;;;802      *         @arg @ref LL_GPIO_PIN_1
;;;803      *         @arg @ref LL_GPIO_PIN_2
;;;804      *         @arg @ref LL_GPIO_PIN_3
;;;805      *         @arg @ref LL_GPIO_PIN_4
;;;806      *         @arg @ref LL_GPIO_PIN_5
;;;807      *         @arg @ref LL_GPIO_PIN_6
;;;808      *         @arg @ref LL_GPIO_PIN_7
;;;809      *         @arg @ref LL_GPIO_PIN_8
;;;810      *         @arg @ref LL_GPIO_PIN_9
;;;811      *         @arg @ref LL_GPIO_PIN_10
;;;812      *         @arg @ref LL_GPIO_PIN_11
;;;813      *         @arg @ref LL_GPIO_PIN_12
;;;814      *         @arg @ref LL_GPIO_PIN_13
;;;815      *         @arg @ref LL_GPIO_PIN_14
;;;816      *         @arg @ref LL_GPIO_PIN_15
;;;817      *         @arg @ref LL_GPIO_PIN_ALL
;;;818      * @retval None
;;;819      */
;;;820    __STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
;;;821    {
;;;822      WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
;;;823    }
;;;824    
;;;825    /**
;;;826      * @brief  Set several pins to low level on dedicated gpio port.
;;;827      * @rmtoll BRR          BRy           LL_GPIO_ResetOutputPin
;;;828      * @param  GPIOx GPIO Port
;;;829      * @param  PinMask This parameter can be a combination of the following values:
;;;830      *         @arg @ref LL_GPIO_PIN_0
;;;831      *         @arg @ref LL_GPIO_PIN_1
;;;832      *         @arg @ref LL_GPIO_PIN_2
;;;833      *         @arg @ref LL_GPIO_PIN_3
;;;834      *         @arg @ref LL_GPIO_PIN_4
;;;835      *         @arg @ref LL_GPIO_PIN_5
;;;836      *         @arg @ref LL_GPIO_PIN_6
;;;837      *         @arg @ref LL_GPIO_PIN_7
;;;838      *         @arg @ref LL_GPIO_PIN_8
;;;839      *         @arg @ref LL_GPIO_PIN_9
;;;840      *         @arg @ref LL_GPIO_PIN_10
;;;841      *         @arg @ref LL_GPIO_PIN_11
;;;842      *         @arg @ref LL_GPIO_PIN_12
;;;843      *         @arg @ref LL_GPIO_PIN_13
;;;844      *         @arg @ref LL_GPIO_PIN_14
;;;845      *         @arg @ref LL_GPIO_PIN_15
;;;846      *         @arg @ref LL_GPIO_PIN_ALL
;;;847      * @retval None
;;;848      */
;;;849    __STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
;;;850    {
;;;851      WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
        0x0800044c:    f3c1220f    ..."    UBFX     r2,r1,#8,#16
        0x08000450:    6142        Ba      STR      r2,[r0,#0x14]
;;;852    }
        0x08000452:    4770        pG      BX       lr
    i.LL_I2C_ConfigSpeed
    LL_I2C_ConfigSpeed
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;747    {
        0x08000454:    b5f0        ..      PUSH     {r4-r7,lr}
;;;748      register uint32_t freqrange = 0x0U;
        0x08000456:    2400        .$      MOVS     r4,#0
;;;749      register uint32_t clockconfig = 0x0U;
        0x08000458:    2500        .%      MOVS     r5,#0
;;;750    
;;;751      /* Compute frequency range */
;;;752      freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
        0x0800045a:    4e2b        +N      LDR      r6,[pc,#172] ; [0x8000508] = 0xf4240
        0x0800045c:    fbb1f4f6    ....    UDIV     r4,r1,r6
;;;753    
;;;754      /* Configure I2Cx: Frequency range register */
;;;755      MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
        0x08000460:    6846        Fh      LDR      r6,[r0,#4]
        0x08000462:    f026063f    &.?.    BIC      r6,r6,#0x3f
        0x08000466:    4326        &C      ORRS     r6,r6,r4
        0x08000468:    6046        F`      STR      r6,[r0,#4]
;;;756    
;;;757      /* Configure I2Cx: Rise Time register */
;;;758      MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
        0x0800046a:    4e28        (N      LDR      r6,[pc,#160] ; [0x800050c] = 0x186a0
        0x0800046c:    42b2        .B      CMP      r2,r6
        0x0800046e:    d801        ..      BHI      0x8000474 ; LL_I2C_ConfigSpeed + 32
        0x08000470:    1c66        f.      ADDS     r6,r4,#1
        0x08000472:    e007        ..      B        0x8000484 ; LL_I2C_ConfigSpeed + 48
        0x08000474:    f44f7696    O..v    MOV      r6,#0x12c
        0x08000478:    4366        fC      MULS     r6,r4,r6
        0x0800047a:    f44f777a    O.zw    MOV      r7,#0x3e8
        0x0800047e:    fbb6f6f7    ....    UDIV     r6,r6,r7
        0x08000482:    1c76        v.      ADDS     r6,r6,#1
        0x08000484:    6a07        .j      LDR      r7,[r0,#0x20]
        0x08000486:    f027073f    '.?.    BIC      r7,r7,#0x3f
        0x0800048a:    433e        >C      ORRS     r6,r6,r7
        0x0800048c:    6206        .b      STR      r6,[r0,#0x20]
;;;759    
;;;760      /* Configure Speed mode, Duty Cycle and Clock control register value */
;;;761      if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
        0x0800048e:    4e1f        .N      LDR      r6,[pc,#124] ; [0x800050c] = 0x186a0
        0x08000490:    42b2        .B      CMP      r2,r6
        0x08000492:    d924        $.      BLS      0x80004de ; LL_I2C_ConfigSpeed + 138
;;;762      {
;;;763        /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
;;;764        clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
        0x08000494:    b96b        k.      CBNZ     r3,0x80004b2 ; LL_I2C_ConfigSpeed + 94
;;;765                      __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
        0x08000496:    eb020642    ..B.    ADD      r6,r2,r2,LSL #1
        0x0800049a:    fbb1f6f6    ....    UDIV     r6,r1,r6
        0x0800049e:    f3c6060b    ....    UBFX     r6,r6,#0,#12
        0x080004a2:    b90e        ..      CBNZ     r6,0x80004a8 ; LL_I2C_ConfigSpeed + 84
        0x080004a4:    2601        .&      MOVS     r6,#1
        0x080004a6:    e015        ..      B        0x80004d4 ; LL_I2C_ConfigSpeed + 128
        0x080004a8:    eb020642    ..B.    ADD      r6,r2,r2,LSL #1
        0x080004ac:    fbb1f6f6    ....    UDIV     r6,r1,r6
        0x080004b0:    e010        ..      B        0x80004d4 ; LL_I2C_ConfigSpeed + 128
        0x080004b2:    eb0206c2    ....    ADD      r6,r2,r2,LSL #3
        0x080004b6:    eb061602    ....    ADD      r6,r6,r2,LSL #4
        0x080004ba:    fbb1f6f6    ....    UDIV     r6,r1,r6
        0x080004be:    f3c6060b    ....    UBFX     r6,r6,#0,#12
        0x080004c2:    b90e        ..      CBNZ     r6,0x80004c8 ; LL_I2C_ConfigSpeed + 116
        0x080004c4:    2601        .&      MOVS     r6,#1
        0x080004c6:    e005        ..      B        0x80004d4 ; LL_I2C_ConfigSpeed + 128
        0x080004c8:    eb0206c2    ....    ADD      r6,r2,r2,LSL #3
        0x080004cc:    eb061602    ....    ADD      r6,r6,r2,LSL #4
        0x080004d0:    fbb1f6f6    ....    UDIV     r6,r1,r6
        0x080004d4:    f4464600    F..F    ORR      r6,r6,#0x8000
        0x080004d8:    ea460503    F...    ORR      r5,r6,r3
        0x080004dc:    e00c        ..      B        0x80004f8 ; LL_I2C_ConfigSpeed + 164
;;;766                      DutyCycle;
;;;767      }
;;;768      else
;;;769      {
;;;770        /* Set Speed mode at standard for Clock Speed request in standard clock range */
;;;771        clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
        0x080004de:    0056        V.      LSLS     r6,r2,#1
        0x080004e0:    fbb1f6f6    ....    UDIV     r6,r1,r6
        0x080004e4:    f3c6060b    ....    UBFX     r6,r6,#0,#12
        0x080004e8:    2e04        ..      CMP      r6,#4
        0x080004ea:    d201        ..      BCS      0x80004f0 ; LL_I2C_ConfigSpeed + 156
;;;772                      __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
        0x080004ec:    2604        .&      MOVS     r6,#4
        0x080004ee:    e002        ..      B        0x80004f6 ; LL_I2C_ConfigSpeed + 162
        0x080004f0:    0056        V.      LSLS     r6,r2,#1
        0x080004f2:    fbb1f6f6    ....    UDIV     r6,r1,r6
        0x080004f6:    4635        5F      MOV      r5,r6
;;;773      }
;;;774    
;;;775      /* Configure I2Cx: Clock control register */
;;;776      MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
        0x080004f8:    69c6        .i      LDR      r6,[r0,#0x1c]
        0x080004fa:    f64c77ff    L..w    MOV      r7,#0xcfff
        0x080004fe:    43be        .C      BICS     r6,r6,r7
        0x08000500:    432e        .C      ORRS     r6,r6,r5
        0x08000502:    61c6        .a      STR      r6,[r0,#0x1c]
;;;777    }
        0x08000504:    bdf0        ..      POP      {r4-r7,pc}
    $d
        0x08000506:    0000        ..      DCW    0
        0x08000508:    000f4240    @B..    DCD    1000000
        0x0800050c:    000186a0    ....    DCD    100000
    $t
    i.LL_I2C_Init
    LL_I2C_Init
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_i2c.c
;;;147    {
        0x08000510:    b57f        ..      PUSH     {r0-r6,lr}
        0x08000512:    4604        .F      MOV      r4,r0
        0x08000514:    460d        .F      MOV      r5,r1
;;;148      LL_RCC_ClocksTypeDef rcc_clocks;
;;;149    
;;;150      /* Check the I2C Instance I2Cx */
;;;151      assert_param(IS_I2C_ALL_INSTANCE(I2Cx));
;;;152    
;;;153      /* Check the I2C parameters from I2C_InitStruct */
;;;154      assert_param(IS_LL_I2C_PERIPHERAL_MODE(I2C_InitStruct->PeripheralMode));
;;;155      assert_param(IS_LL_I2C_CLOCK_SPEED(I2C_InitStruct->ClockSpeed));
;;;156      assert_param(IS_LL_I2C_DUTY_CYCLE(I2C_InitStruct->DutyCycle));
;;;157      assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
;;;158      assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
;;;159      assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));
;;;160    
;;;161      /* Disable the selected I2Cx Peripheral */
;;;162      LL_I2C_Disable(I2Cx);
        0x08000516:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;378      CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
        0x08000518:    6820         h      LDR      r0,[r4,#0]
        0x0800051a:    f0200001     ...    BIC      r0,r0,#1
        0x0800051e:    6020         `      STR      r0,[r4,#0]
;;;379    }
        0x08000520:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_i2c.c
;;;165      LL_RCC_GetSystemClocksFreq(&rcc_clocks);
        0x08000522:    4668        hF      MOV      r0,sp
        0x08000524:    f000f8bc    ....    BL       LL_RCC_GetSystemClocksFreq ; 0x80006a0
;;;166    
;;;167      /*---------------------------- I2Cx SCL Clock Speed Configuration ------------
;;;168       * Configure the SCL speed :
;;;169       * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
;;;170       *           and I2C_CCR_CCR[11:0] bits
;;;171       * - DutyCycle: I2C_CCR_DUTY[7:0] bits
;;;172       */
;;;173      LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
        0x08000528:    e9d52301    ...#    LDRD     r2,r3,[r5,#4]
        0x0800052c:    4620         F      MOV      r0,r4
        0x0800052e:    9902        ..      LDR      r1,[sp,#8]
        0x08000530:    f7ffff90    ....    BL       LL_I2C_ConfigSpeed ; 0x8000454
;;;174    
;;;175      /*---------------------------- I2Cx OAR1 Configuration -----------------------
;;;176       * Disable, Configure and Enable I2Cx device own address 1 with parameters :
;;;177       * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
;;;178       * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
;;;179       */
;;;180      LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
        0x08000534:    6969        ii      LDR      r1,[r5,#0x14]
        0x08000536:    68e8        .h      LDR      r0,[r5,#0xc]
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;555      MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
        0x08000538:    68a2        .h      LDR      r2,[r4,#8]
        0x0800053a:    f24833ff    H..3    MOV      r3,#0x83ff
        0x0800053e:    439a        .C      BICS     r2,r2,r3
        0x08000540:    ea400301    @...    ORR      r3,r0,r1
        0x08000544:    431a        .C      ORRS     r2,r2,r3
        0x08000546:    60a2        .`      STR      r2,[r4,#8]
;;;556    }
        0x08000548:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_i2c.c
;;;186      LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
        0x0800054a:    6828        (h      LDR      r0,[r5,#0]
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;796      MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
        0x0800054c:    6821        !h      LDR      r1,[r4,#0]
        0x0800054e:    f021011a    !...    BIC      r1,r1,#0x1a
        0x08000552:    4301        .C      ORRS     r1,r1,r0
        0x08000554:    6021        !`      STR      r1,[r4,#0]
;;;797    }
        0x08000556:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_i2c.c
;;;189      LL_I2C_Enable(I2Cx);
        0x08000558:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;367      SET_BIT(I2Cx->CR1, I2C_CR1_PE);
        0x0800055a:    6820         h      LDR      r0,[r4,#0]
        0x0800055c:    f0400001    @...    ORR      r0,r0,#1
        0x08000560:    6020         `      STR      r0,[r4,#0]
;;;368    }
        0x08000562:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_i2c.c
;;;196      LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
        0x08000564:    6928        (i      LDR      r0,[r5,#0x10]
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;1572     MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
        0x08000566:    6821        !h      LDR      r1,[r4,#0]
        0x08000568:    f4216180    !..a    BIC      r1,r1,#0x400
        0x0800056c:    4301        .C      ORRS     r1,r1,r0
        0x0800056e:    6021        !`      STR      r1,[r4,#0]
;;;1573   }
        0x08000570:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_i2c.c
;;;198      return SUCCESS;
        0x08000572:    2001        .       MOVS     r0,#1
;;;199    }
        0x08000574:    b004        ..      ADD      sp,sp,#0x10
        0x08000576:    bd70        p.      POP      {r4-r6,pc}
    i.LL_Init
    LL_Init
;;; .\../Src/main.c
;;;356    {
        0x08000578:    b570        p.      PUSH     {r4-r6,lr}
;;;357      
;;;358    
;;;359      LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
        0x0800057a:    2001        .       MOVS     r0,#1
        0x0800057c:    f7fffeba    ....    BL       LL_APB2_GRP1_EnableClock ; 0x80002f4
;;;360      LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
        0x08000580:    f04f5080    O..P    MOV      r0,#0x10000000
        0x08000584:    f7fffea8    ....    BL       LL_APB1_GRP1_EnableClock ; 0x80002d8
;;;361    
;;;362      NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
        0x08000588:    2003        .       MOVS     r0,#3
;;; ../Drivers/CMSIS/Include/core_cm3.h
;;;1425     uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
        0x0800058a:    4602        .F      MOV      r2,r0
;;;1426   
;;;1427     reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
        0x0800058c:    4b3a        :K      LDR      r3,[pc,#232] ; [0x8000678] = 0xe000ed0c
        0x0800058e:    6819        .h      LDR      r1,[r3,#0]
;;;1428     reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
        0x08000590:    f64f03ff    O...    MOV      r3,#0xf8ff
        0x08000594:    4019        .@      ANDS     r1,r1,r3
;;;1429     reg_value  =  (reg_value                                   |
        0x08000596:    4b39        9K      LDR      r3,[pc,#228] ; [0x800067c] = 0x5fa0000
        0x08000598:    430b        .C      ORRS     r3,r3,r1
        0x0800059a:    ea432102    C..!    ORR      r1,r3,r2,LSL #8
;;;1430                   ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
;;;1431                   (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
;;;1432     SCB->AIRCR =  reg_value;
        0x0800059e:    4b36        6K      LDR      r3,[pc,#216] ; [0x8000678] = 0xe000ed0c
        0x080005a0:    6019        .`      STR      r1,[r3,#0]
;;;1433   }
        0x080005a2:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;366      NVIC_SetPriority(MemoryManagement_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
        0x080005a4:    f000fdfe    ....    BL       NVIC_GetPriorityGrouping ; 0x80011a4
        0x080005a8:    4605        .F      MOV      r5,r0
        0x080005aa:    2200        ."      MOVS     r2,#0
        0x080005ac:    4611        .F      MOV      r1,r2
        0x080005ae:    f000fdd8    ....    BL       NVIC_EncodePriority ; 0x8001162
        0x080005b2:    4604        .F      MOV      r4,r0
        0x080005b4:    4621        !F      MOV      r1,r4
        0x080005b6:    f06f000b    o...    MVN      r0,#0xb
        0x080005ba:    f000fdfb    ....    BL       NVIC_SetPriority ; 0x80011b4
;;;367      /* BusFault_IRQn interrupt configuration */
;;;368      NVIC_SetPriority(BusFault_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
        0x080005be:    f000fdf1    ....    BL       NVIC_GetPriorityGrouping ; 0x80011a4
        0x080005c2:    4605        .F      MOV      r5,r0
        0x080005c4:    2200        ."      MOVS     r2,#0
        0x080005c6:    4611        .F      MOV      r1,r2
        0x080005c8:    f000fdcb    ....    BL       NVIC_EncodePriority ; 0x8001162
        0x080005cc:    4604        .F      MOV      r4,r0
        0x080005ce:    4621        !F      MOV      r1,r4
        0x080005d0:    f06f000a    o...    MVN      r0,#0xa
        0x080005d4:    f000fdee    ....    BL       NVIC_SetPriority ; 0x80011b4
;;;369      /* UsageFault_IRQn interrupt configuration */
;;;370      NVIC_SetPriority(UsageFault_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
        0x080005d8:    f000fde4    ....    BL       NVIC_GetPriorityGrouping ; 0x80011a4
        0x080005dc:    4605        .F      MOV      r5,r0
        0x080005de:    2200        ."      MOVS     r2,#0
        0x080005e0:    4611        .F      MOV      r1,r2
        0x080005e2:    f000fdbe    ....    BL       NVIC_EncodePriority ; 0x8001162
        0x080005e6:    4604        .F      MOV      r4,r0
        0x080005e8:    4621        !F      MOV      r1,r4
        0x080005ea:    f06f0009    o...    MVN      r0,#9
        0x080005ee:    f000fde1    ....    BL       NVIC_SetPriority ; 0x80011b4
;;;371      /* SVCall_IRQn interrupt configuration */
;;;372      NVIC_SetPriority(SVCall_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
        0x080005f2:    f000fdd7    ....    BL       NVIC_GetPriorityGrouping ; 0x80011a4
        0x080005f6:    4605        .F      MOV      r5,r0
        0x080005f8:    2200        ."      MOVS     r2,#0
        0x080005fa:    4611        .F      MOV      r1,r2
        0x080005fc:    f000fdb1    ....    BL       NVIC_EncodePriority ; 0x8001162
        0x08000600:    4604        .F      MOV      r4,r0
        0x08000602:    4621        !F      MOV      r1,r4
        0x08000604:    f06f0004    o...    MVN      r0,#4
        0x08000608:    f000fdd4    ....    BL       NVIC_SetPriority ; 0x80011b4
;;;373      /* DebugMonitor_IRQn interrupt configuration */
;;;374      NVIC_SetPriority(DebugMonitor_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
        0x0800060c:    f000fdca    ....    BL       NVIC_GetPriorityGrouping ; 0x80011a4
        0x08000610:    4605        .F      MOV      r5,r0
        0x08000612:    2200        ."      MOVS     r2,#0
        0x08000614:    4611        .F      MOV      r1,r2
        0x08000616:    f000fda4    ....    BL       NVIC_EncodePriority ; 0x8001162
        0x0800061a:    4604        .F      MOV      r4,r0
        0x0800061c:    4621        !F      MOV      r1,r4
        0x0800061e:    f06f0003    o...    MVN      r0,#3
        0x08000622:    f000fdc7    ....    BL       NVIC_SetPriority ; 0x80011b4
;;;375      /* PendSV_IRQn interrupt configuration */
;;;376      NVIC_SetPriority(PendSV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
        0x08000626:    f000fdbd    ....    BL       NVIC_GetPriorityGrouping ; 0x80011a4
        0x0800062a:    4605        .F      MOV      r5,r0
        0x0800062c:    2200        ."      MOVS     r2,#0
        0x0800062e:    4611        .F      MOV      r1,r2
        0x08000630:    f000fd97    ....    BL       NVIC_EncodePriority ; 0x8001162
        0x08000634:    4604        .F      MOV      r4,r0
        0x08000636:    4621        !F      MOV      r1,r4
        0x08000638:    f06f0001    o...    MVN      r0,#1
        0x0800063c:    f000fdba    ....    BL       NVIC_SetPriority ; 0x80011b4
;;;377      /* SysTick_IRQn interrupt configuration */
;;;378      NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
        0x08000640:    f000fdb0    ....    BL       NVIC_GetPriorityGrouping ; 0x80011a4
        0x08000644:    4605        .F      MOV      r5,r0
        0x08000646:    2200        ."      MOVS     r2,#0
        0x08000648:    4611        .F      MOV      r1,r2
        0x0800064a:    f000fd8a    ....    BL       NVIC_EncodePriority ; 0x8001162
        0x0800064e:    4604        .F      MOV      r4,r0
        0x08000650:    4621        !F      MOV      r1,r4
        0x08000652:    f04f30ff    O..0    MOV      r0,#0xffffffff
        0x08000656:    f000fdad    ....    BL       NVIC_SetPriority ; 0x80011b4
;;;379    
;;;380        /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
;;;381        */
;;;382      LL_GPIO_AF_Remap_SWJ_NOJTAG();
        0x0800065a:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h
;;;1597     CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
        0x0800065c:    4808        .H      LDR      r0,[pc,#32] ; [0x8000680] = 0x40010000
        0x0800065e:    6840        @h      LDR      r0,[r0,#4]
        0x08000660:    f02060e0     ..`    BIC      r0,r0,#0x7000000
        0x08000664:    4906        .I      LDR      r1,[pc,#24] ; [0x8000680] = 0x40010000
        0x08000666:    6048        H`      STR      r0,[r1,#4]
;;;1598     SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
        0x08000668:    4608        .F      MOV      r0,r1
        0x0800066a:    6840        @h      LDR      r0,[r0,#4]
        0x0800066c:    f0407000    @..p    ORR      r0,r0,#0x2000000
        0x08000670:    6048        H`      STR      r0,[r1,#4]
;;;1599   }
        0x08000672:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;384    }
        0x08000674:    bd70        p.      POP      {r4-r6,pc}
    $d
        0x08000676:    0000        ..      DCW    0
        0x08000678:    e000ed0c    ....    DCD    3758157068
        0x0800067c:    05fa0000    ....    DCD    100270080
        0x08000680:    40010000    ...@    DCD    1073807360
    $t
    i.LL_Init1msTick
    LL_Init1msTick
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_utils.c
;;;187      LL_InitTick(HCLKFrequency, 1000U);
        0x08000684:    f44f717a    O.zq    MOV      r1,#0x3e8
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_utils.h
;;;237      SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
        0x08000688:    fbb0f2f1    ....    UDIV     r2,r0,r1
        0x0800068c:    1e52        R.      SUBS     r2,r2,#1
        0x0800068e:    f04f23e0    O..#    MOV      r3,#0xe000e000
        0x08000692:    615a        Za      STR      r2,[r3,#0x14]
;;;238      SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
        0x08000694:    2200        ."      MOVS     r2,#0
        0x08000696:    619a        .a      STR      r2,[r3,#0x18]
;;;239      SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
        0x08000698:    2205        ."      MOVS     r2,#5
        0x0800069a:    611a        .a      STR      r2,[r3,#0x10]
;;;240                       SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
;;;241    }
        0x0800069c:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_utils.c
;;;188    }
        0x0800069e:    4770        pG      BX       lr
    i.LL_RCC_GetSystemClocksFreq
    LL_RCC_GetSystemClocksFreq
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_rcc.c
;;;206    {
        0x080006a0:    b510        ..      PUSH     {r4,lr}
        0x080006a2:    4604        .F      MOV      r4,r0
;;;207      /* Get SYSCLK frequency */
;;;208      RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
        0x080006a4:    f000fec0    ....    BL       RCC_GetSystemClockFreq ; 0x8001428
        0x080006a8:    6020         `      STR      r0,[r4,#0]
;;;209    
;;;210      /* HCLK clock frequency */
;;;211      RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
        0x080006aa:    6820         h      LDR      r0,[r4,#0]
        0x080006ac:    f000fe88    ....    BL       RCC_GetHCLKClockFreq ; 0x80013c0
        0x080006b0:    6060        ``      STR      r0,[r4,#4]
;;;212    
;;;213      /* PCLK1 clock frequency */
;;;214      RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
        0x080006b2:    6860        `h      LDR      r0,[r4,#4]
        0x080006b4:    f000fe94    ....    BL       RCC_GetPCLK1ClockFreq ; 0x80013e0
        0x080006b8:    60a0        .`      STR      r0,[r4,#8]
;;;215    
;;;216      /* PCLK2 clock frequency */
;;;217      RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
        0x080006ba:    6860        `h      LDR      r0,[r4,#4]
        0x080006bc:    f000fea2    ....    BL       RCC_GetPCLK2ClockFreq ; 0x8001404
        0x080006c0:    60e0        .`      STR      r0,[r4,#0xc]
;;;218    }
        0x080006c2:    bd10        ..      POP      {r4,pc}
    i.LL_SetSystemCoreClock
    LL_SetSystemCoreClock
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_utils.c
;;;261      SystemCoreClock = HCLKFrequency;
        0x080006c4:    4901        .I      LDR      r1,[pc,#4] ; [0x80006cc] = 0x20000000
        0x080006c6:    6008        .`      STR      r0,[r1,#0]
;;;262    }
        0x080006c8:    4770        pG      BX       lr
    $d
        0x080006ca:    0000        ..      DCW    0
        0x080006cc:    20000000    ...     DCD    536870912
    $t
    i.LL_TIM_BDTR_Init
    LL_TIM_BDTR_Init
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_tim.c
;;;715    {
        0x080006d0:    b510        ..      PUSH     {r4,lr}
        0x080006d2:    4603        .F      MOV      r3,r0
        0x080006d4:    460a        .F      MOV      r2,r1
;;;716      uint32_t tmpbdtr = 0;
        0x080006d6:    2100        .!      MOVS     r1,#0
;;;717    
;;;718      /* Check the parameters */
;;;719      assert_param(IS_TIM_BREAK_INSTANCE(TIMx));
;;;720      assert_param(IS_LL_TIM_OSSR_STATE(TIM_BDTRInitStruct->OSSRState));
;;;721      assert_param(IS_LL_TIM_OSSI_STATE(TIM_BDTRInitStruct->OSSIState));
;;;722      assert_param(IS_LL_TIM_LOCK_LEVEL(TIM_BDTRInitStruct->LockLevel));
;;;723      assert_param(IS_LL_TIM_BREAK_STATE(TIM_BDTRInitStruct->BreakState));
;;;724      assert_param(IS_LL_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->BreakPolarity));
;;;725      assert_param(IS_LL_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->AutomaticOutput));
;;;726    
;;;727      /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
;;;728      the OSSI State, the dead time value and the Automatic Output Enable Bit */
;;;729    
;;;730      /* Set the BDTR bits */
;;;731      MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
        0x080006d8:    7b14        .{      LDRB     r4,[r2,#0xc]
        0x080006da:    4621        !F      MOV      r1,r4
;;;732      MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
        0x080006dc:    6890        .h      LDR      r0,[r2,#8]
        0x080006de:    4301        .C      ORRS     r1,r1,r0
;;;733      MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
        0x080006e0:    f4216080    !..`    BIC      r0,r1,#0x400
        0x080006e4:    6854        Th      LDR      r4,[r2,#4]
        0x080006e6:    ea400104    @...    ORR      r1,r0,r4
;;;734      MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
        0x080006ea:    f4216000    !..`    BIC      r0,r1,#0x800
        0x080006ee:    6814        .h      LDR      r4,[r2,#0]
        0x080006f0:    ea400104    @...    ORR      r1,r0,r4
;;;735      MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
        0x080006f4:    f4215080    !..P    BIC      r0,r1,#0x1000
        0x080006f8:    89d4        ..      LDRH     r4,[r2,#0xe]
        0x080006fa:    ea400104    @...    ORR      r1,r0,r4
;;;736      MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
        0x080006fe:    f4215000    !..P    BIC      r0,r1,#0x2000
        0x08000702:    6914        .i      LDR      r4,[r2,#0x10]
        0x08000704:    ea400104    @...    ORR      r1,r0,r4
;;;737      MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
        0x08000708:    f4214080    !..@    BIC      r0,r1,#0x4000
        0x0800070c:    6954        Ti      LDR      r4,[r2,#0x14]
        0x0800070e:    ea400104    @...    ORR      r1,r0,r4
;;;738      MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
        0x08000712:    f4214000    !..@    BIC      r0,r1,#0x8000
        0x08000716:    6954        Ti      LDR      r4,[r2,#0x14]
        0x08000718:    ea400104    @...    ORR      r1,r0,r4
;;;739    
;;;740      /* Set TIMx_BDTR */
;;;741      LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
        0x0800071c:    6459        Yd      STR      r1,[r3,#0x44]
;;;742    
;;;743      return SUCCESS;
        0x0800071e:    2001        .       MOVS     r0,#1
;;;744    }
        0x08000720:    bd10        ..      POP      {r4,pc}
    i.LL_TIM_CC_DisableChannel
    LL_TIM_CC_DisableChannel
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;1515     CLEAR_BIT(TIMx->CCER, Channels);
        0x08000722:    6a02        .j      LDR      r2,[r0,#0x20]
        0x08000724:    438a        .C      BICS     r2,r2,r1
        0x08000726:    6202        .b      STR      r2,[r0,#0x20]
;;;1516   }
        0x08000728:    4770        pG      BX       lr
    i.LL_TIM_CC_EnableChannel
    LL_TIM_CC_EnableChannel
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h (1490)
        0x0800072a:    6a02        .j      LDR      r2,[r0,#0x20]
        0x0800072c:    430a        .C      ORRS     r2,r2,r1
        0x0800072e:    6202        .b      STR      r2,[r0,#0x20]
;;;1491   }
        0x08000730:    4770        pG      BX       lr
    i.LL_TIM_DisableARRPreload
    LL_TIM_DisableARRPreload
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h (1206)
        0x08000732:    6801        .h      LDR      r1,[r0,#0]
        0x08000734:    f0210180    !...    BIC      r1,r1,#0x80
        0x08000738:    6001        .`      STR      r1,[r0,#0]
;;;1207   }
        0x0800073a:    4770        pG      BX       lr
    i.LL_TIM_DisableMasterSlaveMode
    LL_TIM_DisableMasterSlaveMode
;;;1208   
;;;1209   /**
;;;1210     * @brief  Indicates whether auto-reload (ARR) preload is enabled.
;;;1211     * @rmtoll CR1          ARPE          LL_TIM_IsEnabledARRPreload
;;;1212     * @param  TIMx Timer instance
;;;1213     * @retval State of bit (1 or 0).
;;;1214     */
;;;1215   __STATIC_INLINE uint32_t LL_TIM_IsEnabledARRPreload(TIM_TypeDef *TIMx)
;;;1216   {
;;;1217     return (READ_BIT(TIMx->CR1, TIM_CR1_ARPE) == (TIM_CR1_ARPE));
;;;1218   }
;;;1219   
;;;1220   /**
;;;1221     * @brief  Set the division ratio between the timer clock  and the sampling clock used by the dead-time generators (when supported) and the digital filters.
;;;1222     * @note Macro @ref IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx) can be used to check
;;;1223     *       whether or not the clock division feature is supported by the timer
;;;1224     *       instance.
;;;1225     * @rmtoll CR1          CKD           LL_TIM_SetClockDivision
;;;1226     * @param  TIMx Timer instance
;;;1227     * @param  ClockDivision This parameter can be one of the following values:
;;;1228     *         @arg @ref LL_TIM_CLOCKDIVISION_DIV1
;;;1229     *         @arg @ref LL_TIM_CLOCKDIVISION_DIV2
;;;1230     *         @arg @ref LL_TIM_CLOCKDIVISION_DIV4
;;;1231     * @retval None
;;;1232     */
;;;1233   __STATIC_INLINE void LL_TIM_SetClockDivision(TIM_TypeDef *TIMx, uint32_t ClockDivision)
;;;1234   {
;;;1235     MODIFY_REG(TIMx->CR1, TIM_CR1_CKD, ClockDivision);
;;;1236   }
;;;1237   
;;;1238   /**
;;;1239     * @brief  Get the actual division ratio between the timer clock  and the sampling clock used by the dead-time generators (when supported) and the digital filters.
;;;1240     * @note Macro @ref IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx) can be used to check
;;;1241     *       whether or not the clock division feature is supported by the timer
;;;1242     *       instance.
;;;1243     * @rmtoll CR1          CKD           LL_TIM_GetClockDivision
;;;1244     * @param  TIMx Timer instance
;;;1245     * @retval Returned value can be one of the following values:
;;;1246     *         @arg @ref LL_TIM_CLOCKDIVISION_DIV1
;;;1247     *         @arg @ref LL_TIM_CLOCKDIVISION_DIV2
;;;1248     *         @arg @ref LL_TIM_CLOCKDIVISION_DIV4
;;;1249     */
;;;1250   __STATIC_INLINE uint32_t LL_TIM_GetClockDivision(TIM_TypeDef *TIMx)
;;;1251   {
;;;1252     return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_CKD));
;;;1253   }
;;;1254   
;;;1255   /**
;;;1256     * @brief  Set the counter value.
;;;1257     * @rmtoll CNT          CNT           LL_TIM_SetCounter
;;;1258     * @param  TIMx Timer instance
;;;1259     * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF)
;;;1260     * @retval None
;;;1261     */
;;;1262   __STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
;;;1263   {
;;;1264     WRITE_REG(TIMx->CNT, Counter);
;;;1265   }
;;;1266   
;;;1267   /**
;;;1268     * @brief  Get the counter value.
;;;1269     * @rmtoll CNT          CNT           LL_TIM_GetCounter
;;;1270     * @param  TIMx Timer instance
;;;1271     * @retval Counter value (between Min_Data=0 and Max_Data=0xFFFF)
;;;1272     */
;;;1273   __STATIC_INLINE uint32_t LL_TIM_GetCounter(TIM_TypeDef *TIMx)
;;;1274   {
;;;1275     return (uint32_t)(READ_REG(TIMx->CNT));
;;;1276   }
;;;1277   
;;;1278   /**
;;;1279     * @brief  Get the current direction of the counter
;;;1280     * @rmtoll CR1          DIR           LL_TIM_GetDirection
;;;1281     * @param  TIMx Timer instance
;;;1282     * @retval Returned value can be one of the following values:
;;;1283     *         @arg @ref LL_TIM_COUNTERDIRECTION_UP
;;;1284     *         @arg @ref LL_TIM_COUNTERDIRECTION_DOWN
;;;1285     */
;;;1286   __STATIC_INLINE uint32_t LL_TIM_GetDirection(TIM_TypeDef *TIMx)
;;;1287   {
;;;1288     return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
;;;1289   }
;;;1290   
;;;1291   /**
;;;1292     * @brief  Set the prescaler value.
;;;1293     * @note The counter clock frequency CK_CNT is equal to fCK_PSC / (PSC[15:0] + 1).
;;;1294     * @note The prescaler can be changed on the fly as this control register is buffered. The new
;;;1295     *       prescaler ratio is taken into account at the next update event.
;;;1296     * @note Helper macro @ref __LL_TIM_CALC_PSC can be used to calculate the Prescaler parameter
;;;1297     * @rmtoll PSC          PSC           LL_TIM_SetPrescaler
;;;1298     * @param  TIMx Timer instance
;;;1299     * @param  Prescaler between Min_Data=0 and Max_Data=65535
;;;1300     * @retval None
;;;1301     */
;;;1302   __STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
;;;1303   {
;;;1304     WRITE_REG(TIMx->PSC, Prescaler);
;;;1305   }
;;;1306   
;;;1307   /**
;;;1308     * @brief  Get the prescaler value.
;;;1309     * @rmtoll PSC          PSC           LL_TIM_GetPrescaler
;;;1310     * @param  TIMx Timer instance
;;;1311     * @retval  Prescaler value between Min_Data=0 and Max_Data=65535
;;;1312     */
;;;1313   __STATIC_INLINE uint32_t LL_TIM_GetPrescaler(TIM_TypeDef *TIMx)
;;;1314   {
;;;1315     return (uint32_t)(READ_REG(TIMx->PSC));
;;;1316   }
;;;1317   
;;;1318   /**
;;;1319     * @brief  Set the auto-reload value.
;;;1320     * @note The counter is blocked while the auto-reload value is null.
;;;1321     * @note Helper macro @ref __LL_TIM_CALC_ARR can be used to calculate the AutoReload parameter
;;;1322     * @rmtoll ARR          ARR           LL_TIM_SetAutoReload
;;;1323     * @param  TIMx Timer instance
;;;1324     * @param  AutoReload between Min_Data=0 and Max_Data=65535
;;;1325     * @retval None
;;;1326     */
;;;1327   __STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
;;;1328   {
;;;1329     WRITE_REG(TIMx->ARR, AutoReload);
;;;1330   }
;;;1331   
;;;1332   /**
;;;1333     * @brief  Get the auto-reload value.
;;;1334     * @rmtoll ARR          ARR           LL_TIM_GetAutoReload
;;;1335     * @param  TIMx Timer instance
;;;1336     * @retval Auto-reload value
;;;1337     */
;;;1338   __STATIC_INLINE uint32_t LL_TIM_GetAutoReload(TIM_TypeDef *TIMx)
;;;1339   {
;;;1340     return (uint32_t)(READ_REG(TIMx->ARR));
;;;1341   }
;;;1342   
;;;1343   /**
;;;1344     * @brief  Set the repetition counter value.
;;;1345     * @note Macro @ref IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx) can be used to check
;;;1346     *       whether or not a timer instance supports a repetition counter.
;;;1347     * @rmtoll RCR          REP           LL_TIM_SetRepetitionCounter
;;;1348     * @param  TIMx Timer instance
;;;1349     * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
;;;1350     * @retval None
;;;1351     */
;;;1352   __STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
;;;1353   {
;;;1354     WRITE_REG(TIMx->RCR, RepetitionCounter);
;;;1355   }
;;;1356   
;;;1357   /**
;;;1358     * @brief  Get the repetition counter value.
;;;1359     * @note Macro @ref IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx) can be used to check
;;;1360     *       whether or not a timer instance supports a repetition counter.
;;;1361     * @rmtoll RCR          REP           LL_TIM_GetRepetitionCounter
;;;1362     * @param  TIMx Timer instance
;;;1363     * @retval Repetition counter value
;;;1364     */
;;;1365   __STATIC_INLINE uint32_t LL_TIM_GetRepetitionCounter(TIM_TypeDef *TIMx)
;;;1366   {
;;;1367     return (uint32_t)(READ_REG(TIMx->RCR));
;;;1368   }
;;;1369   
;;;1370   /**
;;;1371     * @}
;;;1372     */
;;;1373   
;;;1374   /** @defgroup TIM_LL_EF_Capture_Compare Capture Compare configuration
;;;1375     * @{
;;;1376     */
;;;1377   /**
;;;1378     * @brief  Enable  the capture/compare control bits (CCxE, CCxNE and OCxM) preload.
;;;1379     * @note CCxE, CCxNE and OCxM bits are preloaded, after having been written,
;;;1380     *       they are updated only when a commutation event (COM) occurs.
;;;1381     * @note Only on channels that have a complementary output.
;;;1382     * @note Macro @ref IS_TIM_COMMUTATION_EVENT_INSTANCE(TIMx) can be used to check
;;;1383     *       whether or not a timer instance is able to generate a commutation event.
;;;1384     * @rmtoll CR2          CCPC          LL_TIM_CC_EnablePreload
;;;1385     * @param  TIMx Timer instance
;;;1386     * @retval None
;;;1387     */
;;;1388   __STATIC_INLINE void LL_TIM_CC_EnablePreload(TIM_TypeDef *TIMx)
;;;1389   {
;;;1390     SET_BIT(TIMx->CR2, TIM_CR2_CCPC);
;;;1391   }
;;;1392   
;;;1393   /**
;;;1394     * @brief  Disable  the capture/compare control bits (CCxE, CCxNE and OCxM) preload.
;;;1395     * @note Macro @ref IS_TIM_COMMUTATION_EVENT_INSTANCE(TIMx) can be used to check
;;;1396     *       whether or not a timer instance is able to generate a commutation event.
;;;1397     * @rmtoll CR2          CCPC          LL_TIM_CC_DisablePreload
;;;1398     * @param  TIMx Timer instance
;;;1399     * @retval None
;;;1400     */
;;;1401   __STATIC_INLINE void LL_TIM_CC_DisablePreload(TIM_TypeDef *TIMx)
;;;1402   {
;;;1403     CLEAR_BIT(TIMx->CR2, TIM_CR2_CCPC);
;;;1404   }
;;;1405   
;;;1406   /**
;;;1407     * @brief  Set the updated source of the capture/compare control bits (CCxE, CCxNE and OCxM).
;;;1408     * @note Macro @ref IS_TIM_COMMUTATION_EVENT_INSTANCE(TIMx) can be used to check
;;;1409     *       whether or not a timer instance is able to generate a commutation event.
;;;1410     * @rmtoll CR2          CCUS          LL_TIM_CC_SetUpdate
;;;1411     * @param  TIMx Timer instance
;;;1412     * @param  CCUpdateSource This parameter can be one of the following values:
;;;1413     *         @arg @ref LL_TIM_CCUPDATESOURCE_COMG_ONLY
;;;1414     *         @arg @ref LL_TIM_CCUPDATESOURCE_COMG_AND_TRGI
;;;1415     * @retval None
;;;1416     */
;;;1417   __STATIC_INLINE void LL_TIM_CC_SetUpdate(TIM_TypeDef *TIMx, uint32_t CCUpdateSource)
;;;1418   {
;;;1419     MODIFY_REG(TIMx->CR2, TIM_CR2_CCUS, CCUpdateSource);
;;;1420   }
;;;1421   
;;;1422   /**
;;;1423     * @brief  Set the trigger of the capture/compare DMA request.
;;;1424     * @rmtoll CR2          CCDS          LL_TIM_CC_SetDMAReqTrigger
;;;1425     * @param  TIMx Timer instance
;;;1426     * @param  DMAReqTrigger This parameter can be one of the following values:
;;;1427     *         @arg @ref LL_TIM_CCDMAREQUEST_CC
;;;1428     *         @arg @ref LL_TIM_CCDMAREQUEST_UPDATE
;;;1429     * @retval None
;;;1430     */
;;;1431   __STATIC_INLINE void LL_TIM_CC_SetDMAReqTrigger(TIM_TypeDef *TIMx, uint32_t DMAReqTrigger)
;;;1432   {
;;;1433     MODIFY_REG(TIMx->CR2, TIM_CR2_CCDS, DMAReqTrigger);
;;;1434   }
;;;1435   
;;;1436   /**
;;;1437     * @brief  Get actual trigger of the capture/compare DMA request.
;;;1438     * @rmtoll CR2          CCDS          LL_TIM_CC_GetDMAReqTrigger
;;;1439     * @param  TIMx Timer instance
;;;1440     * @retval Returned value can be one of the following values:
;;;1441     *         @arg @ref LL_TIM_CCDMAREQUEST_CC
;;;1442     *         @arg @ref LL_TIM_CCDMAREQUEST_UPDATE
;;;1443     */
;;;1444   __STATIC_INLINE uint32_t LL_TIM_CC_GetDMAReqTrigger(TIM_TypeDef *TIMx)
;;;1445   {
;;;1446     return (uint32_t)(READ_BIT(TIMx->CR2, TIM_CR2_CCDS));
;;;1447   }
;;;1448   
;;;1449   /**
;;;1450     * @brief  Set the lock level to freeze the
;;;1451     *         configuration of several capture/compare parameters.
;;;1452     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;1453     *       the lock mechanism is supported by a timer instance.
;;;1454     * @rmtoll BDTR         LOCK          LL_TIM_CC_SetLockLevel
;;;1455     * @param  TIMx Timer instance
;;;1456     * @param  LockLevel This parameter can be one of the following values:
;;;1457     *         @arg @ref LL_TIM_LOCKLEVEL_OFF
;;;1458     *         @arg @ref LL_TIM_LOCKLEVEL_1
;;;1459     *         @arg @ref LL_TIM_LOCKLEVEL_2
;;;1460     *         @arg @ref LL_TIM_LOCKLEVEL_3
;;;1461     * @retval None
;;;1462     */
;;;1463   __STATIC_INLINE void LL_TIM_CC_SetLockLevel(TIM_TypeDef *TIMx, uint32_t LockLevel)
;;;1464   {
;;;1465     MODIFY_REG(TIMx->BDTR, TIM_BDTR_LOCK, LockLevel);
;;;1466   }
;;;1467   
;;;1468   /**
;;;1469     * @brief  Enable capture/compare channels.
;;;1470     * @rmtoll CCER         CC1E          LL_TIM_CC_EnableChannel\n
;;;1471     *         CCER         CC1NE         LL_TIM_CC_EnableChannel\n
;;;1472     *         CCER         CC2E          LL_TIM_CC_EnableChannel\n
;;;1473     *         CCER         CC2NE         LL_TIM_CC_EnableChannel\n
;;;1474     *         CCER         CC3E          LL_TIM_CC_EnableChannel\n
;;;1475     *         CCER         CC3NE         LL_TIM_CC_EnableChannel\n
;;;1476     *         CCER         CC4E          LL_TIM_CC_EnableChannel
;;;1477     * @param  TIMx Timer instance
;;;1478     * @param  Channels This parameter can be a combination of the following values:
;;;1479     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1480     *         @arg @ref LL_TIM_CHANNEL_CH1N
;;;1481     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1482     *         @arg @ref LL_TIM_CHANNEL_CH2N
;;;1483     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1484     *         @arg @ref LL_TIM_CHANNEL_CH3N
;;;1485     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1486     * @retval None
;;;1487     */
;;;1488   __STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
;;;1489   {
;;;1490     SET_BIT(TIMx->CCER, Channels);
;;;1491   }
;;;1492   
;;;1493   /**
;;;1494     * @brief  Disable capture/compare channels.
;;;1495     * @rmtoll CCER         CC1E          LL_TIM_CC_DisableChannel\n
;;;1496     *         CCER         CC1NE         LL_TIM_CC_DisableChannel\n
;;;1497     *         CCER         CC2E          LL_TIM_CC_DisableChannel\n
;;;1498     *         CCER         CC2NE         LL_TIM_CC_DisableChannel\n
;;;1499     *         CCER         CC3E          LL_TIM_CC_DisableChannel\n
;;;1500     *         CCER         CC3NE         LL_TIM_CC_DisableChannel\n
;;;1501     *         CCER         CC4E          LL_TIM_CC_DisableChannel
;;;1502     * @param  TIMx Timer instance
;;;1503     * @param  Channels This parameter can be a combination of the following values:
;;;1504     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1505     *         @arg @ref LL_TIM_CHANNEL_CH1N
;;;1506     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1507     *         @arg @ref LL_TIM_CHANNEL_CH2N
;;;1508     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1509     *         @arg @ref LL_TIM_CHANNEL_CH3N
;;;1510     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1511     * @retval None
;;;1512     */
;;;1513   __STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
;;;1514   {
;;;1515     CLEAR_BIT(TIMx->CCER, Channels);
;;;1516   }
;;;1517   
;;;1518   /**
;;;1519     * @brief  Indicate whether channel(s) is(are) enabled.
;;;1520     * @rmtoll CCER         CC1E          LL_TIM_CC_IsEnabledChannel\n
;;;1521     *         CCER         CC1NE         LL_TIM_CC_IsEnabledChannel\n
;;;1522     *         CCER         CC2E          LL_TIM_CC_IsEnabledChannel\n
;;;1523     *         CCER         CC2NE         LL_TIM_CC_IsEnabledChannel\n
;;;1524     *         CCER         CC3E          LL_TIM_CC_IsEnabledChannel\n
;;;1525     *         CCER         CC3NE         LL_TIM_CC_IsEnabledChannel\n
;;;1526     *         CCER         CC4E          LL_TIM_CC_IsEnabledChannel
;;;1527     * @param  TIMx Timer instance
;;;1528     * @param  Channels This parameter can be a combination of the following values:
;;;1529     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1530     *         @arg @ref LL_TIM_CHANNEL_CH1N
;;;1531     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1532     *         @arg @ref LL_TIM_CHANNEL_CH2N
;;;1533     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1534     *         @arg @ref LL_TIM_CHANNEL_CH3N
;;;1535     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1536     * @retval State of bit (1 or 0).
;;;1537     */
;;;1538   __STATIC_INLINE uint32_t LL_TIM_CC_IsEnabledChannel(TIM_TypeDef *TIMx, uint32_t Channels)
;;;1539   {
;;;1540     return (READ_BIT(TIMx->CCER, Channels) == (Channels));
;;;1541   }
;;;1542   
;;;1543   /**
;;;1544     * @}
;;;1545     */
;;;1546   
;;;1547   /** @defgroup TIM_LL_EF_Output_Channel Output channel configuration
;;;1548     * @{
;;;1549     */
;;;1550   /**
;;;1551     * @brief  Configure an output channel.
;;;1552     * @rmtoll CCMR1        CC1S          LL_TIM_OC_ConfigOutput\n
;;;1553     *         CCMR1        CC2S          LL_TIM_OC_ConfigOutput\n
;;;1554     *         CCMR2        CC3S          LL_TIM_OC_ConfigOutput\n
;;;1555     *         CCMR2        CC4S          LL_TIM_OC_ConfigOutput\n
;;;1556     *         CCER         CC1P          LL_TIM_OC_ConfigOutput\n
;;;1557     *         CCER         CC2P          LL_TIM_OC_ConfigOutput\n
;;;1558     *         CCER         CC3P          LL_TIM_OC_ConfigOutput\n
;;;1559     *         CCER         CC4P          LL_TIM_OC_ConfigOutput\n
;;;1560     *         CR2          OIS1          LL_TIM_OC_ConfigOutput\n
;;;1561     *         CR2          OIS2          LL_TIM_OC_ConfigOutput\n
;;;1562     *         CR2          OIS3          LL_TIM_OC_ConfigOutput\n
;;;1563     *         CR2          OIS4          LL_TIM_OC_ConfigOutput
;;;1564     * @param  TIMx Timer instance
;;;1565     * @param  Channel This parameter can be one of the following values:
;;;1566     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1567     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1568     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1569     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1570     * @param  Configuration This parameter must be a combination of all the following values:
;;;1571     *         @arg @ref LL_TIM_OCPOLARITY_HIGH or @ref LL_TIM_OCPOLARITY_LOW
;;;1572     *         @arg @ref LL_TIM_OCIDLESTATE_LOW or @ref LL_TIM_OCIDLESTATE_HIGH
;;;1573     * @retval None
;;;1574     */
;;;1575   __STATIC_INLINE void LL_TIM_OC_ConfigOutput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Configuration)
;;;1576   {
;;;1577     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1578     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1579     CLEAR_BIT(*pReg, (TIM_CCMR1_CC1S << SHIFT_TAB_OCxx[iChannel]));
;;;1580     MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),
;;;1581                (Configuration & TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]);
;;;1582     MODIFY_REG(TIMx->CR2, (TIM_CR2_OIS1 << SHIFT_TAB_OISx[iChannel]),
;;;1583                (Configuration & TIM_CR2_OIS1) << SHIFT_TAB_OISx[iChannel]);
;;;1584   }
;;;1585   
;;;1586   /**
;;;1587     * @brief  Define the behavior of the output reference signal OCxREF from which
;;;1588     *         OCx and OCxN (when relevant) are derived.
;;;1589     * @rmtoll CCMR1        OC1M          LL_TIM_OC_SetMode\n
;;;1590     *         CCMR1        OC2M          LL_TIM_OC_SetMode\n
;;;1591     *         CCMR2        OC3M          LL_TIM_OC_SetMode\n
;;;1592     *         CCMR2        OC4M          LL_TIM_OC_SetMode
;;;1593     * @param  TIMx Timer instance
;;;1594     * @param  Channel This parameter can be one of the following values:
;;;1595     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1596     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1597     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1598     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1599     * @param  Mode This parameter can be one of the following values:
;;;1600     *         @arg @ref LL_TIM_OCMODE_FROZEN
;;;1601     *         @arg @ref LL_TIM_OCMODE_ACTIVE
;;;1602     *         @arg @ref LL_TIM_OCMODE_INACTIVE
;;;1603     *         @arg @ref LL_TIM_OCMODE_TOGGLE
;;;1604     *         @arg @ref LL_TIM_OCMODE_FORCED_INACTIVE
;;;1605     *         @arg @ref LL_TIM_OCMODE_FORCED_ACTIVE
;;;1606     *         @arg @ref LL_TIM_OCMODE_PWM1
;;;1607     *         @arg @ref LL_TIM_OCMODE_PWM2
;;;1608     * @retval None
;;;1609     */
;;;1610   __STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
;;;1611   {
;;;1612     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1613     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1614     MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
;;;1615   }
;;;1616   
;;;1617   /**
;;;1618     * @brief  Get the output compare mode of an output channel.
;;;1619     * @rmtoll CCMR1        OC1M          LL_TIM_OC_GetMode\n
;;;1620     *         CCMR1        OC2M          LL_TIM_OC_GetMode\n
;;;1621     *         CCMR2        OC3M          LL_TIM_OC_GetMode\n
;;;1622     *         CCMR2        OC4M          LL_TIM_OC_GetMode
;;;1623     * @param  TIMx Timer instance
;;;1624     * @param  Channel This parameter can be one of the following values:
;;;1625     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1626     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1627     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1628     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1629     * @retval Returned value can be one of the following values:
;;;1630     *         @arg @ref LL_TIM_OCMODE_FROZEN
;;;1631     *         @arg @ref LL_TIM_OCMODE_ACTIVE
;;;1632     *         @arg @ref LL_TIM_OCMODE_INACTIVE
;;;1633     *         @arg @ref LL_TIM_OCMODE_TOGGLE
;;;1634     *         @arg @ref LL_TIM_OCMODE_FORCED_INACTIVE
;;;1635     *         @arg @ref LL_TIM_OCMODE_FORCED_ACTIVE
;;;1636     *         @arg @ref LL_TIM_OCMODE_PWM1
;;;1637     *         @arg @ref LL_TIM_OCMODE_PWM2
;;;1638     */
;;;1639   __STATIC_INLINE uint32_t LL_TIM_OC_GetMode(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1640   {
;;;1641     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1642     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1643     return (READ_BIT(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel])) >> SHIFT_TAB_OCxx[iChannel]);
;;;1644   }
;;;1645   
;;;1646   /**
;;;1647     * @brief  Set the polarity of an output channel.
;;;1648     * @rmtoll CCER         CC1P          LL_TIM_OC_SetPolarity\n
;;;1649     *         CCER         CC1NP         LL_TIM_OC_SetPolarity\n
;;;1650     *         CCER         CC2P          LL_TIM_OC_SetPolarity\n
;;;1651     *         CCER         CC2NP         LL_TIM_OC_SetPolarity\n
;;;1652     *         CCER         CC3P          LL_TIM_OC_SetPolarity\n
;;;1653     *         CCER         CC3NP         LL_TIM_OC_SetPolarity\n
;;;1654     *         CCER         CC4P          LL_TIM_OC_SetPolarity
;;;1655     * @param  TIMx Timer instance
;;;1656     * @param  Channel This parameter can be one of the following values:
;;;1657     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1658     *         @arg @ref LL_TIM_CHANNEL_CH1N
;;;1659     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1660     *         @arg @ref LL_TIM_CHANNEL_CH2N
;;;1661     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1662     *         @arg @ref LL_TIM_CHANNEL_CH3N
;;;1663     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1664     * @param  Polarity This parameter can be one of the following values:
;;;1665     *         @arg @ref LL_TIM_OCPOLARITY_HIGH
;;;1666     *         @arg @ref LL_TIM_OCPOLARITY_LOW
;;;1667     * @retval None
;;;1668     */
;;;1669   __STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
;;;1670   {
;;;1671     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1672     MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
;;;1673   }
;;;1674   
;;;1675   /**
;;;1676     * @brief  Get the polarity of an output channel.
;;;1677     * @rmtoll CCER         CC1P          LL_TIM_OC_GetPolarity\n
;;;1678     *         CCER         CC1NP         LL_TIM_OC_GetPolarity\n
;;;1679     *         CCER         CC2P          LL_TIM_OC_GetPolarity\n
;;;1680     *         CCER         CC2NP         LL_TIM_OC_GetPolarity\n
;;;1681     *         CCER         CC3P          LL_TIM_OC_GetPolarity\n
;;;1682     *         CCER         CC3NP         LL_TIM_OC_GetPolarity\n
;;;1683     *         CCER         CC4P          LL_TIM_OC_GetPolarity
;;;1684     * @param  TIMx Timer instance
;;;1685     * @param  Channel This parameter can be one of the following values:
;;;1686     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1687     *         @arg @ref LL_TIM_CHANNEL_CH1N
;;;1688     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1689     *         @arg @ref LL_TIM_CHANNEL_CH2N
;;;1690     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1691     *         @arg @ref LL_TIM_CHANNEL_CH3N
;;;1692     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1693     * @retval Returned value can be one of the following values:
;;;1694     *         @arg @ref LL_TIM_OCPOLARITY_HIGH
;;;1695     *         @arg @ref LL_TIM_OCPOLARITY_LOW
;;;1696     */
;;;1697   __STATIC_INLINE uint32_t LL_TIM_OC_GetPolarity(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1698   {
;;;1699     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1700     return (READ_BIT(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel])) >> SHIFT_TAB_CCxP[iChannel]);
;;;1701   }
;;;1702   
;;;1703   /**
;;;1704     * @brief  Set the IDLE state of an output channel
;;;1705     * @note This function is significant only for the timer instances
;;;1706     *       supporting the break feature. Macro @ref IS_TIM_BREAK_INSTANCE(TIMx)
;;;1707     *       can be used to check whether or not a timer instance provides
;;;1708     *       a break input.
;;;1709     * @rmtoll CR2         OIS1          LL_TIM_OC_SetIdleState\n
;;;1710     *         CR2         OIS1N         LL_TIM_OC_SetIdleState\n
;;;1711     *         CR2         OIS2          LL_TIM_OC_SetIdleState\n
;;;1712     *         CR2         OIS2N         LL_TIM_OC_SetIdleState\n
;;;1713     *         CR2         OIS3          LL_TIM_OC_SetIdleState\n
;;;1714     *         CR2         OIS3N         LL_TIM_OC_SetIdleState\n
;;;1715     *         CR2         OIS4          LL_TIM_OC_SetIdleState
;;;1716     * @param  TIMx Timer instance
;;;1717     * @param  Channel This parameter can be one of the following values:
;;;1718     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1719     *         @arg @ref LL_TIM_CHANNEL_CH1N
;;;1720     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1721     *         @arg @ref LL_TIM_CHANNEL_CH2N
;;;1722     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1723     *         @arg @ref LL_TIM_CHANNEL_CH3N
;;;1724     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1725     * @param  IdleState This parameter can be one of the following values:
;;;1726     *         @arg @ref LL_TIM_OCIDLESTATE_LOW
;;;1727     *         @arg @ref LL_TIM_OCIDLESTATE_HIGH
;;;1728     * @retval None
;;;1729     */
;;;1730   __STATIC_INLINE void LL_TIM_OC_SetIdleState(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t IdleState)
;;;1731   {
;;;1732     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1733     MODIFY_REG(TIMx->CR2, (TIM_CR2_OIS1 << SHIFT_TAB_OISx[iChannel]),  IdleState << SHIFT_TAB_OISx[iChannel]);
;;;1734   }
;;;1735   
;;;1736   /**
;;;1737     * @brief  Get the IDLE state of an output channel
;;;1738     * @rmtoll CR2         OIS1          LL_TIM_OC_GetIdleState\n
;;;1739     *         CR2         OIS1N         LL_TIM_OC_GetIdleState\n
;;;1740     *         CR2         OIS2          LL_TIM_OC_GetIdleState\n
;;;1741     *         CR2         OIS2N         LL_TIM_OC_GetIdleState\n
;;;1742     *         CR2         OIS3          LL_TIM_OC_GetIdleState\n
;;;1743     *         CR2         OIS3N         LL_TIM_OC_GetIdleState\n
;;;1744     *         CR2         OIS4          LL_TIM_OC_GetIdleState
;;;1745     * @param  TIMx Timer instance
;;;1746     * @param  Channel This parameter can be one of the following values:
;;;1747     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1748     *         @arg @ref LL_TIM_CHANNEL_CH1N
;;;1749     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1750     *         @arg @ref LL_TIM_CHANNEL_CH2N
;;;1751     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1752     *         @arg @ref LL_TIM_CHANNEL_CH3N
;;;1753     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1754     * @retval Returned value can be one of the following values:
;;;1755     *         @arg @ref LL_TIM_OCIDLESTATE_LOW
;;;1756     *         @arg @ref LL_TIM_OCIDLESTATE_HIGH
;;;1757     */
;;;1758   __STATIC_INLINE uint32_t LL_TIM_OC_GetIdleState(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1759   {
;;;1760     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1761     return (READ_BIT(TIMx->CR2, (TIM_CR2_OIS1 << SHIFT_TAB_OISx[iChannel])) >> SHIFT_TAB_OISx[iChannel]);
;;;1762   }
;;;1763   
;;;1764   /**
;;;1765     * @brief  Enable fast mode for the output channel.
;;;1766     * @note Acts only if the channel is configured in PWM1 or PWM2 mode.
;;;1767     * @rmtoll CCMR1        OC1FE          LL_TIM_OC_EnableFast\n
;;;1768     *         CCMR1        OC2FE          LL_TIM_OC_EnableFast\n
;;;1769     *         CCMR2        OC3FE          LL_TIM_OC_EnableFast\n
;;;1770     *         CCMR2        OC4FE          LL_TIM_OC_EnableFast
;;;1771     * @param  TIMx Timer instance
;;;1772     * @param  Channel This parameter can be one of the following values:
;;;1773     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1774     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1775     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1776     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1777     * @retval None
;;;1778     */
;;;1779   __STATIC_INLINE void LL_TIM_OC_EnableFast(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1780   {
;;;1781     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1782     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1783     SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
;;;1784   
;;;1785   }
;;;1786   
;;;1787   /**
;;;1788     * @brief  Disable fast mode for the output channel.
;;;1789     * @rmtoll CCMR1        OC1FE          LL_TIM_OC_DisableFast\n
;;;1790     *         CCMR1        OC2FE          LL_TIM_OC_DisableFast\n
;;;1791     *         CCMR2        OC3FE          LL_TIM_OC_DisableFast\n
;;;1792     *         CCMR2        OC4FE          LL_TIM_OC_DisableFast
;;;1793     * @param  TIMx Timer instance
;;;1794     * @param  Channel This parameter can be one of the following values:
;;;1795     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1796     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1797     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1798     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1799     * @retval None
;;;1800     */
;;;1801   __STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1802   {
;;;1803     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1804     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1805     CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
;;;1806   
;;;1807   }
;;;1808   
;;;1809   /**
;;;1810     * @brief  Indicates whether fast mode is enabled for the output channel.
;;;1811     * @rmtoll CCMR1        OC1FE          LL_TIM_OC_IsEnabledFast\n
;;;1812     *         CCMR1        OC2FE          LL_TIM_OC_IsEnabledFast\n
;;;1813     *         CCMR2        OC3FE          LL_TIM_OC_IsEnabledFast\n
;;;1814     *         CCMR2        OC4FE          LL_TIM_OC_IsEnabledFast\n
;;;1815     * @param  TIMx Timer instance
;;;1816     * @param  Channel This parameter can be one of the following values:
;;;1817     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1818     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1819     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1820     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1821     * @retval State of bit (1 or 0).
;;;1822     */
;;;1823   __STATIC_INLINE uint32_t LL_TIM_OC_IsEnabledFast(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1824   {
;;;1825     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1826     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1827     register uint32_t bitfield = TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel];
;;;1828     return (READ_BIT(*pReg, bitfield) == bitfield);
;;;1829   }
;;;1830   
;;;1831   /**
;;;1832     * @brief  Enable compare register (TIMx_CCRx) preload for the output channel.
;;;1833     * @rmtoll CCMR1        OC1PE          LL_TIM_OC_EnablePreload\n
;;;1834     *         CCMR1        OC2PE          LL_TIM_OC_EnablePreload\n
;;;1835     *         CCMR2        OC3PE          LL_TIM_OC_EnablePreload\n
;;;1836     *         CCMR2        OC4PE          LL_TIM_OC_EnablePreload
;;;1837     * @param  TIMx Timer instance
;;;1838     * @param  Channel This parameter can be one of the following values:
;;;1839     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1840     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1841     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1842     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1843     * @retval None
;;;1844     */
;;;1845   __STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1846   {
;;;1847     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1848     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1849     SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
;;;1850   }
;;;1851   
;;;1852   /**
;;;1853     * @brief  Disable compare register (TIMx_CCRx) preload for the output channel.
;;;1854     * @rmtoll CCMR1        OC1PE          LL_TIM_OC_DisablePreload\n
;;;1855     *         CCMR1        OC2PE          LL_TIM_OC_DisablePreload\n
;;;1856     *         CCMR2        OC3PE          LL_TIM_OC_DisablePreload\n
;;;1857     *         CCMR2        OC4PE          LL_TIM_OC_DisablePreload
;;;1858     * @param  TIMx Timer instance
;;;1859     * @param  Channel This parameter can be one of the following values:
;;;1860     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1861     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1862     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1863     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1864     * @retval None
;;;1865     */
;;;1866   __STATIC_INLINE void LL_TIM_OC_DisablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1867   {
;;;1868     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1869     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1870     CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
;;;1871   }
;;;1872   
;;;1873   /**
;;;1874     * @brief  Indicates whether compare register (TIMx_CCRx) preload is enabled for the output channel.
;;;1875     * @rmtoll CCMR1        OC1PE          LL_TIM_OC_IsEnabledPreload\n
;;;1876     *         CCMR1        OC2PE          LL_TIM_OC_IsEnabledPreload\n
;;;1877     *         CCMR2        OC3PE          LL_TIM_OC_IsEnabledPreload\n
;;;1878     *         CCMR2        OC4PE          LL_TIM_OC_IsEnabledPreload\n
;;;1879     * @param  TIMx Timer instance
;;;1880     * @param  Channel This parameter can be one of the following values:
;;;1881     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1882     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1883     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1884     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1885     * @retval State of bit (1 or 0).
;;;1886     */
;;;1887   __STATIC_INLINE uint32_t LL_TIM_OC_IsEnabledPreload(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1888   {
;;;1889     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1890     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1891     register uint32_t bitfield = TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel];
;;;1892     return (READ_BIT(*pReg, bitfield) == bitfield);
;;;1893   }
;;;1894   
;;;1895   /**
;;;1896     * @brief  Enable clearing the output channel on an external event.
;;;1897     * @note This function can only be used in Output compare and PWM modes. It does not work in Forced mode.
;;;1898     * @note Macro @ref IS_TIM_OCXREF_CLEAR_INSTANCE(TIMx) can be used to check whether
;;;1899     *       or not a timer instance can clear the OCxREF signal on an external event.
;;;1900     * @rmtoll CCMR1        OC1CE          LL_TIM_OC_EnableClear\n
;;;1901     *         CCMR1        OC2CE          LL_TIM_OC_EnableClear\n
;;;1902     *         CCMR2        OC3CE          LL_TIM_OC_EnableClear\n
;;;1903     *         CCMR2        OC4CE          LL_TIM_OC_EnableClear
;;;1904     * @param  TIMx Timer instance
;;;1905     * @param  Channel This parameter can be one of the following values:
;;;1906     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1907     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1908     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1909     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1910     * @retval None
;;;1911     */
;;;1912   __STATIC_INLINE void LL_TIM_OC_EnableClear(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1913   {
;;;1914     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1915     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1916     SET_BIT(*pReg, (TIM_CCMR1_OC1CE << SHIFT_TAB_OCxx[iChannel]));
;;;1917   }
;;;1918   
;;;1919   /**
;;;1920     * @brief  Disable clearing the output channel on an external event.
;;;1921     * @note Macro @ref IS_TIM_OCXREF_CLEAR_INSTANCE(TIMx) can be used to check whether
;;;1922     *       or not a timer instance can clear the OCxREF signal on an external event.
;;;1923     * @rmtoll CCMR1        OC1CE          LL_TIM_OC_DisableClear\n
;;;1924     *         CCMR1        OC2CE          LL_TIM_OC_DisableClear\n
;;;1925     *         CCMR2        OC3CE          LL_TIM_OC_DisableClear\n
;;;1926     *         CCMR2        OC4CE          LL_TIM_OC_DisableClear
;;;1927     * @param  TIMx Timer instance
;;;1928     * @param  Channel This parameter can be one of the following values:
;;;1929     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1930     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1931     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1932     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1933     * @retval None
;;;1934     */
;;;1935   __STATIC_INLINE void LL_TIM_OC_DisableClear(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1936   {
;;;1937     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1938     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1939     CLEAR_BIT(*pReg, (TIM_CCMR1_OC1CE << SHIFT_TAB_OCxx[iChannel]));
;;;1940   }
;;;1941   
;;;1942   /**
;;;1943     * @brief  Indicates clearing the output channel on an external event is enabled for the output channel.
;;;1944     * @note This function enables clearing the output channel on an external event.
;;;1945     * @note This function can only be used in Output compare and PWM modes. It does not work in Forced mode.
;;;1946     * @note Macro @ref IS_TIM_OCXREF_CLEAR_INSTANCE(TIMx) can be used to check whether
;;;1947     *       or not a timer instance can clear the OCxREF signal on an external event.
;;;1948     * @rmtoll CCMR1        OC1CE          LL_TIM_OC_IsEnabledClear\n
;;;1949     *         CCMR1        OC2CE          LL_TIM_OC_IsEnabledClear\n
;;;1950     *         CCMR2        OC3CE          LL_TIM_OC_IsEnabledClear\n
;;;1951     *         CCMR2        OC4CE          LL_TIM_OC_IsEnabledClear\n
;;;1952     * @param  TIMx Timer instance
;;;1953     * @param  Channel This parameter can be one of the following values:
;;;1954     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1955     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1956     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1957     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1958     * @retval State of bit (1 or 0).
;;;1959     */
;;;1960   __STATIC_INLINE uint32_t LL_TIM_OC_IsEnabledClear(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1961   {
;;;1962     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1963     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1964     register uint32_t bitfield = TIM_CCMR1_OC1CE << SHIFT_TAB_OCxx[iChannel];
;;;1965     return (READ_BIT(*pReg, bitfield) == bitfield);
;;;1966   }
;;;1967   
;;;1968   /**
;;;1969     * @brief  Set the dead-time delay (delay inserted between the rising edge of the OCxREF signal and the rising edge if the Ocx and OCxN signals).
;;;1970     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;1971     *       dead-time insertion feature is supported by a timer instance.
;;;1972     * @note Helper macro @ref __LL_TIM_CALC_DEADTIME can be used to calculate the DeadTime parameter
;;;1973     * @rmtoll BDTR         DTG           LL_TIM_OC_SetDeadTime
;;;1974     * @param  TIMx Timer instance
;;;1975     * @param  DeadTime between Min_Data=0 and Max_Data=255
;;;1976     * @retval None
;;;1977     */
;;;1978   __STATIC_INLINE void LL_TIM_OC_SetDeadTime(TIM_TypeDef *TIMx, uint32_t DeadTime)
;;;1979   {
;;;1980     MODIFY_REG(TIMx->BDTR, TIM_BDTR_DTG, DeadTime);
;;;1981   }
;;;1982   
;;;1983   /**
;;;1984     * @brief  Set compare value for output channel 1 (TIMx_CCR1).
;;;1985     * @note Macro @ref IS_TIM_CC1_INSTANCE(TIMx) can be used to check whether or not
;;;1986     *       output channel 1 is supported by a timer instance.
;;;1987     * @rmtoll CCR1         CCR1          LL_TIM_OC_SetCompareCH1
;;;1988     * @param  TIMx Timer instance
;;;1989     * @param  CompareValue between Min_Data=0 and Max_Data=65535
;;;1990     * @retval None
;;;1991     */
;;;1992   __STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
;;;1993   {
;;;1994     WRITE_REG(TIMx->CCR1, CompareValue);
;;;1995   }
;;;1996   
;;;1997   /**
;;;1998     * @brief  Set compare value for output channel 2 (TIMx_CCR2).
;;;1999     * @note Macro @ref IS_TIM_CC2_INSTANCE(TIMx) can be used to check whether or not
;;;2000     *       output channel 2 is supported by a timer instance.
;;;2001     * @rmtoll CCR2         CCR2          LL_TIM_OC_SetCompareCH2
;;;2002     * @param  TIMx Timer instance
;;;2003     * @param  CompareValue between Min_Data=0 and Max_Data=65535
;;;2004     * @retval None
;;;2005     */
;;;2006   __STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
;;;2007   {
;;;2008     WRITE_REG(TIMx->CCR2, CompareValue);
;;;2009   }
;;;2010   
;;;2011   /**
;;;2012     * @brief  Set compare value for output channel 3 (TIMx_CCR3).
;;;2013     * @note Macro @ref IS_TIM_CC3_INSTANCE(TIMx) can be used to check whether or not
;;;2014     *       output channel is supported by a timer instance.
;;;2015     * @rmtoll CCR3         CCR3          LL_TIM_OC_SetCompareCH3
;;;2016     * @param  TIMx Timer instance
;;;2017     * @param  CompareValue between Min_Data=0 and Max_Data=65535
;;;2018     * @retval None
;;;2019     */
;;;2020   __STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
;;;2021   {
;;;2022     WRITE_REG(TIMx->CCR3, CompareValue);
;;;2023   }
;;;2024   
;;;2025   /**
;;;2026     * @brief  Set compare value for output channel 4 (TIMx_CCR4).
;;;2027     * @note Macro @ref IS_TIM_CC4_INSTANCE(TIMx) can be used to check whether or not
;;;2028     *       output channel 4 is supported by a timer instance.
;;;2029     * @rmtoll CCR4         CCR4          LL_TIM_OC_SetCompareCH4
;;;2030     * @param  TIMx Timer instance
;;;2031     * @param  CompareValue between Min_Data=0 and Max_Data=65535
;;;2032     * @retval None
;;;2033     */
;;;2034   __STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
;;;2035   {
;;;2036     WRITE_REG(TIMx->CCR4, CompareValue);
;;;2037   }
;;;2038   
;;;2039   /**
;;;2040     * @brief  Get compare value (TIMx_CCR1) set for  output channel 1.
;;;2041     * @note Macro @ref IS_TIM_CC1_INSTANCE(TIMx) can be used to check whether or not
;;;2042     *       output channel 1 is supported by a timer instance.
;;;2043     * @rmtoll CCR1         CCR1          LL_TIM_OC_GetCompareCH1
;;;2044     * @param  TIMx Timer instance
;;;2045     * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
;;;2046     */
;;;2047   __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH1(TIM_TypeDef *TIMx)
;;;2048   {
;;;2049     return (uint32_t)(READ_REG(TIMx->CCR1));
;;;2050   }
;;;2051   
;;;2052   /**
;;;2053     * @brief  Get compare value (TIMx_CCR2) set for  output channel 2.
;;;2054     * @note Macro @ref IS_TIM_CC2_INSTANCE(TIMx) can be used to check whether or not
;;;2055     *       output channel 2 is supported by a timer instance.
;;;2056     * @rmtoll CCR2         CCR2          LL_TIM_OC_GetCompareCH2
;;;2057     * @param  TIMx Timer instance
;;;2058     * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
;;;2059     */
;;;2060   __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH2(TIM_TypeDef *TIMx)
;;;2061   {
;;;2062     return (uint32_t)(READ_REG(TIMx->CCR2));
;;;2063   }
;;;2064   
;;;2065   /**
;;;2066     * @brief  Get compare value (TIMx_CCR3) set for  output channel 3.
;;;2067     * @note Macro @ref IS_TIM_CC3_INSTANCE(TIMx) can be used to check whether or not
;;;2068     *       output channel 3 is supported by a timer instance.
;;;2069     * @rmtoll CCR3         CCR3          LL_TIM_OC_GetCompareCH3
;;;2070     * @param  TIMx Timer instance
;;;2071     * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
;;;2072     */
;;;2073   __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH3(TIM_TypeDef *TIMx)
;;;2074   {
;;;2075     return (uint32_t)(READ_REG(TIMx->CCR3));
;;;2076   }
;;;2077   
;;;2078   /**
;;;2079     * @brief  Get compare value (TIMx_CCR4) set for  output channel 4.
;;;2080     * @note Macro @ref IS_TIM_CC4_INSTANCE(TIMx) can be used to check whether or not
;;;2081     *       output channel 4 is supported by a timer instance.
;;;2082     * @rmtoll CCR4         CCR4          LL_TIM_OC_GetCompareCH4
;;;2083     * @param  TIMx Timer instance
;;;2084     * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
;;;2085     */
;;;2086   __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH4(TIM_TypeDef *TIMx)
;;;2087   {
;;;2088     return (uint32_t)(READ_REG(TIMx->CCR4));
;;;2089   }
;;;2090   
;;;2091   /**
;;;2092     * @}
;;;2093     */
;;;2094   
;;;2095   /** @defgroup TIM_LL_EF_Input_Channel Input channel configuration
;;;2096     * @{
;;;2097     */
;;;2098   /**
;;;2099     * @brief  Configure input channel.
;;;2100     * @rmtoll CCMR1        CC1S          LL_TIM_IC_Config\n
;;;2101     *         CCMR1        IC1PSC        LL_TIM_IC_Config\n
;;;2102     *         CCMR1        IC1F          LL_TIM_IC_Config\n
;;;2103     *         CCMR1        CC2S          LL_TIM_IC_Config\n
;;;2104     *         CCMR1        IC2PSC        LL_TIM_IC_Config\n
;;;2105     *         CCMR1        IC2F          LL_TIM_IC_Config\n
;;;2106     *         CCMR2        CC3S          LL_TIM_IC_Config\n
;;;2107     *         CCMR2        IC3PSC        LL_TIM_IC_Config\n
;;;2108     *         CCMR2        IC3F          LL_TIM_IC_Config\n
;;;2109     *         CCMR2        CC4S          LL_TIM_IC_Config\n
;;;2110     *         CCMR2        IC4PSC        LL_TIM_IC_Config\n
;;;2111     *         CCMR2        IC4F          LL_TIM_IC_Config\n
;;;2112     *         CCER         CC1P          LL_TIM_IC_Config\n
;;;2113     *         CCER         CC1NP         LL_TIM_IC_Config\n
;;;2114     *         CCER         CC2P          LL_TIM_IC_Config\n
;;;2115     *         CCER         CC2NP         LL_TIM_IC_Config\n
;;;2116     *         CCER         CC3P          LL_TIM_IC_Config\n
;;;2117     *         CCER         CC3NP         LL_TIM_IC_Config\n
;;;2118     *         CCER         CC4P          LL_TIM_IC_Config\n
;;;2119     * @param  TIMx Timer instance
;;;2120     * @param  Channel This parameter can be one of the following values:
;;;2121     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2122     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2123     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2124     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2125     * @param  Configuration This parameter must be a combination of all the following values:
;;;2126     *         @arg @ref LL_TIM_ACTIVEINPUT_DIRECTTI or @ref LL_TIM_ACTIVEINPUT_INDIRECTTI or @ref LL_TIM_ACTIVEINPUT_TRC
;;;2127     *         @arg @ref LL_TIM_ICPSC_DIV1 or ... or @ref LL_TIM_ICPSC_DIV8
;;;2128     *         @arg @ref LL_TIM_IC_FILTER_FDIV1 or ... or @ref LL_TIM_IC_FILTER_FDIV32_N8
;;;2129     *         @arg @ref LL_TIM_IC_POLARITY_RISING or @ref LL_TIM_IC_POLARITY_FALLING
;;;2130     * @retval None
;;;2131     */
;;;2132   __STATIC_INLINE void LL_TIM_IC_Config(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Configuration)
;;;2133   {
;;;2134     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2135     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2136     MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F | TIM_CCMR1_IC1PSC | TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]),
;;;2137                ((Configuration >> 16U) & (TIM_CCMR1_IC1F | TIM_CCMR1_IC1PSC | TIM_CCMR1_CC1S))  << SHIFT_TAB_ICxx[iChannel]);
;;;2138     MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
;;;2139                (Configuration & (TIM_CCER_CC1NP | TIM_CCER_CC1P)) << SHIFT_TAB_CCxP[iChannel]);
;;;2140   }
;;;2141   
;;;2142   /**
;;;2143     * @brief  Set the active input.
;;;2144     * @rmtoll CCMR1        CC1S          LL_TIM_IC_SetActiveInput\n
;;;2145     *         CCMR1        CC2S          LL_TIM_IC_SetActiveInput\n
;;;2146     *         CCMR2        CC3S          LL_TIM_IC_SetActiveInput\n
;;;2147     *         CCMR2        CC4S          LL_TIM_IC_SetActiveInput
;;;2148     * @param  TIMx Timer instance
;;;2149     * @param  Channel This parameter can be one of the following values:
;;;2150     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2151     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2152     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2153     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2154     * @param  ICActiveInput This parameter can be one of the following values:
;;;2155     *         @arg @ref LL_TIM_ACTIVEINPUT_DIRECTTI
;;;2156     *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
;;;2157     *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
;;;2158     * @retval None
;;;2159     */
;;;2160   __STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiveInput)
;;;2161   {
;;;2162     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2163     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2164     MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
;;;2165   }
;;;2166   
;;;2167   /**
;;;2168     * @brief  Get the current active input.
;;;2169     * @rmtoll CCMR1        CC1S          LL_TIM_IC_GetActiveInput\n
;;;2170     *         CCMR1        CC2S          LL_TIM_IC_GetActiveInput\n
;;;2171     *         CCMR2        CC3S          LL_TIM_IC_GetActiveInput\n
;;;2172     *         CCMR2        CC4S          LL_TIM_IC_GetActiveInput
;;;2173     * @param  TIMx Timer instance
;;;2174     * @param  Channel This parameter can be one of the following values:
;;;2175     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2176     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2177     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2178     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2179     * @retval Returned value can be one of the following values:
;;;2180     *         @arg @ref LL_TIM_ACTIVEINPUT_DIRECTTI
;;;2181     *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
;;;2182     *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
;;;2183     */
;;;2184   __STATIC_INLINE uint32_t LL_TIM_IC_GetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel)
;;;2185   {
;;;2186     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2187     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2188     return ((READ_BIT(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iChannel]) << 16U);
;;;2189   }
;;;2190   
;;;2191   /**
;;;2192     * @brief  Set the prescaler of input channel.
;;;2193     * @rmtoll CCMR1        IC1PSC        LL_TIM_IC_SetPrescaler\n
;;;2194     *         CCMR1        IC2PSC        LL_TIM_IC_SetPrescaler\n
;;;2195     *         CCMR2        IC3PSC        LL_TIM_IC_SetPrescaler\n
;;;2196     *         CCMR2        IC4PSC        LL_TIM_IC_SetPrescaler
;;;2197     * @param  TIMx Timer instance
;;;2198     * @param  Channel This parameter can be one of the following values:
;;;2199     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2200     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2201     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2202     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2203     * @param  ICPrescaler This parameter can be one of the following values:
;;;2204     *         @arg @ref LL_TIM_ICPSC_DIV1
;;;2205     *         @arg @ref LL_TIM_ICPSC_DIV2
;;;2206     *         @arg @ref LL_TIM_ICPSC_DIV4
;;;2207     *         @arg @ref LL_TIM_ICPSC_DIV8
;;;2208     * @retval None
;;;2209     */
;;;2210   __STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
;;;2211   {
;;;2212     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2213     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2214     MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
;;;2215   }
;;;2216   
;;;2217   /**
;;;2218     * @brief  Get the current prescaler value acting on an  input channel.
;;;2219     * @rmtoll CCMR1        IC1PSC        LL_TIM_IC_GetPrescaler\n
;;;2220     *         CCMR1        IC2PSC        LL_TIM_IC_GetPrescaler\n
;;;2221     *         CCMR2        IC3PSC        LL_TIM_IC_GetPrescaler\n
;;;2222     *         CCMR2        IC4PSC        LL_TIM_IC_GetPrescaler
;;;2223     * @param  TIMx Timer instance
;;;2224     * @param  Channel This parameter can be one of the following values:
;;;2225     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2226     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2227     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2228     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2229     * @retval Returned value can be one of the following values:
;;;2230     *         @arg @ref LL_TIM_ICPSC_DIV1
;;;2231     *         @arg @ref LL_TIM_ICPSC_DIV2
;;;2232     *         @arg @ref LL_TIM_ICPSC_DIV4
;;;2233     *         @arg @ref LL_TIM_ICPSC_DIV8
;;;2234     */
;;;2235   __STATIC_INLINE uint32_t LL_TIM_IC_GetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel)
;;;2236   {
;;;2237     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2238     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2239     return ((READ_BIT(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iChannel]) << 16U);
;;;2240   }
;;;2241   
;;;2242   /**
;;;2243     * @brief  Set the input filter duration.
;;;2244     * @rmtoll CCMR1        IC1F          LL_TIM_IC_SetFilter\n
;;;2245     *         CCMR1        IC2F          LL_TIM_IC_SetFilter\n
;;;2246     *         CCMR2        IC3F          LL_TIM_IC_SetFilter\n
;;;2247     *         CCMR2        IC4F          LL_TIM_IC_SetFilter
;;;2248     * @param  TIMx Timer instance
;;;2249     * @param  Channel This parameter can be one of the following values:
;;;2250     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2251     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2252     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2253     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2254     * @param  ICFilter This parameter can be one of the following values:
;;;2255     *         @arg @ref LL_TIM_IC_FILTER_FDIV1
;;;2256     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N2
;;;2257     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N4
;;;2258     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N8
;;;2259     *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N6
;;;2260     *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N8
;;;2261     *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N6
;;;2262     *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N8
;;;2263     *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N6
;;;2264     *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N8
;;;2265     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N5
;;;2266     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N6
;;;2267     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N8
;;;2268     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N5
;;;2269     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
;;;2270     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
;;;2271     * @retval None
;;;2272     */
;;;2273   __STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
;;;2274   {
;;;2275     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2276     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2277     MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
;;;2278   }
;;;2279   
;;;2280   /**
;;;2281     * @brief  Get the input filter duration.
;;;2282     * @rmtoll CCMR1        IC1F          LL_TIM_IC_GetFilter\n
;;;2283     *         CCMR1        IC2F          LL_TIM_IC_GetFilter\n
;;;2284     *         CCMR2        IC3F          LL_TIM_IC_GetFilter\n
;;;2285     *         CCMR2        IC4F          LL_TIM_IC_GetFilter
;;;2286     * @param  TIMx Timer instance
;;;2287     * @param  Channel This parameter can be one of the following values:
;;;2288     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2289     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2290     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2291     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2292     * @retval Returned value can be one of the following values:
;;;2293     *         @arg @ref LL_TIM_IC_FILTER_FDIV1
;;;2294     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N2
;;;2295     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N4
;;;2296     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N8
;;;2297     *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N6
;;;2298     *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N8
;;;2299     *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N6
;;;2300     *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N8
;;;2301     *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N6
;;;2302     *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N8
;;;2303     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N5
;;;2304     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N6
;;;2305     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N8
;;;2306     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N5
;;;2307     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
;;;2308     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
;;;2309     */
;;;2310   __STATIC_INLINE uint32_t LL_TIM_IC_GetFilter(TIM_TypeDef *TIMx, uint32_t Channel)
;;;2311   {
;;;2312     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2313     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2314     return ((READ_BIT(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iChannel]) << 16U);
;;;2315   }
;;;2316   
;;;2317   /**
;;;2318     * @brief  Set the input channel polarity.
;;;2319     * @rmtoll CCER         CC1P          LL_TIM_IC_SetPolarity\n
;;;2320     *         CCER         CC1NP         LL_TIM_IC_SetPolarity\n
;;;2321     *         CCER         CC2P          LL_TIM_IC_SetPolarity\n
;;;2322     *         CCER         CC2NP         LL_TIM_IC_SetPolarity\n
;;;2323     *         CCER         CC3P          LL_TIM_IC_SetPolarity\n
;;;2324     *         CCER         CC3NP         LL_TIM_IC_SetPolarity\n
;;;2325     *         CCER         CC4P          LL_TIM_IC_SetPolarity\n
;;;2326     * @param  TIMx Timer instance
;;;2327     * @param  Channel This parameter can be one of the following values:
;;;2328     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2329     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2330     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2331     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2332     * @param  ICPolarity This parameter can be one of the following values:
;;;2333     *         @arg @ref LL_TIM_IC_POLARITY_RISING
;;;2334     *         @arg @ref LL_TIM_IC_POLARITY_FALLING
;;;2335     * @retval None
;;;2336     */
;;;2337   __STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
;;;2338   {
;;;2339     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2340     MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
;;;2341                ICPolarity << SHIFT_TAB_CCxP[iChannel]);
;;;2342   }
;;;2343   
;;;2344   /**
;;;2345     * @brief  Get the current input channel polarity.
;;;2346     * @rmtoll CCER         CC1P          LL_TIM_IC_GetPolarity\n
;;;2347     *         CCER         CC1NP         LL_TIM_IC_GetPolarity\n
;;;2348     *         CCER         CC2P          LL_TIM_IC_GetPolarity\n
;;;2349     *         CCER         CC2NP         LL_TIM_IC_GetPolarity\n
;;;2350     *         CCER         CC3P          LL_TIM_IC_GetPolarity\n
;;;2351     *         CCER         CC3NP         LL_TIM_IC_GetPolarity\n
;;;2352     *         CCER         CC4P          LL_TIM_IC_GetPolarity\n
;;;2353     * @param  TIMx Timer instance
;;;2354     * @param  Channel This parameter can be one of the following values:
;;;2355     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2356     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2357     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2358     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2359     * @retval Returned value can be one of the following values:
;;;2360     *         @arg @ref LL_TIM_IC_POLARITY_RISING
;;;2361     *         @arg @ref LL_TIM_IC_POLARITY_FALLING
;;;2362     */
;;;2363   __STATIC_INLINE uint32_t LL_TIM_IC_GetPolarity(TIM_TypeDef *TIMx, uint32_t Channel)
;;;2364   {
;;;2365     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2366     return (READ_BIT(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel])) >>
;;;2367             SHIFT_TAB_CCxP[iChannel]);
;;;2368   }
;;;2369   
;;;2370   /**
;;;2371     * @brief  Connect the TIMx_CH1, CH2 and CH3 pins  to the TI1 input (XOR combination).
;;;2372     * @note Macro @ref IS_TIM_XOR_INSTANCE(TIMx) can be used to check whether or not
;;;2373     *       a timer instance provides an XOR input.
;;;2374     * @rmtoll CR2          TI1S          LL_TIM_IC_EnableXORCombination
;;;2375     * @param  TIMx Timer instance
;;;2376     * @retval None
;;;2377     */
;;;2378   __STATIC_INLINE void LL_TIM_IC_EnableXORCombination(TIM_TypeDef *TIMx)
;;;2379   {
;;;2380     SET_BIT(TIMx->CR2, TIM_CR2_TI1S);
;;;2381   }
;;;2382   
;;;2383   /**
;;;2384     * @brief  Disconnect the TIMx_CH1, CH2 and CH3 pins  from the TI1 input.
;;;2385     * @note Macro @ref IS_TIM_XOR_INSTANCE(TIMx) can be used to check whether or not
;;;2386     *       a timer instance provides an XOR input.
;;;2387     * @rmtoll CR2          TI1S          LL_TIM_IC_DisableXORCombination
;;;2388     * @param  TIMx Timer instance
;;;2389     * @retval None
;;;2390     */
;;;2391   __STATIC_INLINE void LL_TIM_IC_DisableXORCombination(TIM_TypeDef *TIMx)
;;;2392   {
;;;2393     CLEAR_BIT(TIMx->CR2, TIM_CR2_TI1S);
;;;2394   }
;;;2395   
;;;2396   /**
;;;2397     * @brief  Indicates whether the TIMx_CH1, CH2 and CH3 pins are connectected to the TI1 input.
;;;2398     * @note Macro @ref IS_TIM_XOR_INSTANCE(TIMx) can be used to check whether or not
;;;2399     * a timer instance provides an XOR input.
;;;2400     * @rmtoll CR2          TI1S          LL_TIM_IC_IsEnabledXORCombination
;;;2401     * @param  TIMx Timer instance
;;;2402     * @retval State of bit (1 or 0).
;;;2403     */
;;;2404   __STATIC_INLINE uint32_t LL_TIM_IC_IsEnabledXORCombination(TIM_TypeDef *TIMx)
;;;2405   {
;;;2406     return (READ_BIT(TIMx->CR2, TIM_CR2_TI1S) == (TIM_CR2_TI1S));
;;;2407   }
;;;2408   
;;;2409   /**
;;;2410     * @brief  Get captured value for input channel 1.
;;;2411     * @note Macro @ref IS_TIM_CC1_INSTANCE(TIMx) can be used to check whether or not
;;;2412     *       input channel 1 is supported by a timer instance.
;;;2413     * @rmtoll CCR1         CCR1          LL_TIM_IC_GetCaptureCH1
;;;2414     * @param  TIMx Timer instance
;;;2415     * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
;;;2416     */
;;;2417   __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH1(TIM_TypeDef *TIMx)
;;;2418   {
;;;2419     return (uint32_t)(READ_REG(TIMx->CCR1));
;;;2420   }
;;;2421   
;;;2422   /**
;;;2423     * @brief  Get captured value for input channel 2.
;;;2424     * @note Macro @ref IS_TIM_CC2_INSTANCE(TIMx) can be used to check whether or not
;;;2425     *       input channel 2 is supported by a timer instance.
;;;2426     * @rmtoll CCR2         CCR2          LL_TIM_IC_GetCaptureCH2
;;;2427     * @param  TIMx Timer instance
;;;2428     * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
;;;2429     */
;;;2430   __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH2(TIM_TypeDef *TIMx)
;;;2431   {
;;;2432     return (uint32_t)(READ_REG(TIMx->CCR2));
;;;2433   }
;;;2434   
;;;2435   /**
;;;2436     * @brief  Get captured value for input channel 3.
;;;2437     * @note Macro @ref IS_TIM_CC3_INSTANCE(TIMx) can be used to check whether or not
;;;2438     *       input channel 3 is supported by a timer instance.
;;;2439     * @rmtoll CCR3         CCR3          LL_TIM_IC_GetCaptureCH3
;;;2440     * @param  TIMx Timer instance
;;;2441     * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
;;;2442     */
;;;2443   __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH3(TIM_TypeDef *TIMx)
;;;2444   {
;;;2445     return (uint32_t)(READ_REG(TIMx->CCR3));
;;;2446   }
;;;2447   
;;;2448   /**
;;;2449     * @brief  Get captured value for input channel 4.
;;;2450     * @note Macro @ref IS_TIM_CC4_INSTANCE(TIMx) can be used to check whether or not
;;;2451     *       input channel 4 is supported by a timer instance.
;;;2452     * @rmtoll CCR4         CCR4          LL_TIM_IC_GetCaptureCH4
;;;2453     * @param  TIMx Timer instance
;;;2454     * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
;;;2455     */
;;;2456   __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH4(TIM_TypeDef *TIMx)
;;;2457   {
;;;2458     return (uint32_t)(READ_REG(TIMx->CCR4));
;;;2459   }
;;;2460   
;;;2461   /**
;;;2462     * @}
;;;2463     */
;;;2464   
;;;2465   /** @defgroup TIM_LL_EF_Clock_Selection Counter clock selection
;;;2466     * @{
;;;2467     */
;;;2468   /**
;;;2469     * @brief  Enable external clock mode 2.
;;;2470     * @note When external clock mode 2 is enabled the counter is clocked by any active edge on the ETRF signal.
;;;2471     * @note Macro @ref IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
;;;2472     *       whether or not a timer instance supports external clock mode2.
;;;2473     * @rmtoll SMCR         ECE           LL_TIM_EnableExternalClock
;;;2474     * @param  TIMx Timer instance
;;;2475     * @retval None
;;;2476     */
;;;2477   __STATIC_INLINE void LL_TIM_EnableExternalClock(TIM_TypeDef *TIMx)
;;;2478   {
;;;2479     SET_BIT(TIMx->SMCR, TIM_SMCR_ECE);
;;;2480   }
;;;2481   
;;;2482   /**
;;;2483     * @brief  Disable external clock mode 2.
;;;2484     * @note Macro @ref IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
;;;2485     *       whether or not a timer instance supports external clock mode2.
;;;2486     * @rmtoll SMCR         ECE           LL_TIM_DisableExternalClock
;;;2487     * @param  TIMx Timer instance
;;;2488     * @retval None
;;;2489     */
;;;2490   __STATIC_INLINE void LL_TIM_DisableExternalClock(TIM_TypeDef *TIMx)
;;;2491   {
;;;2492     CLEAR_BIT(TIMx->SMCR, TIM_SMCR_ECE);
;;;2493   }
;;;2494   
;;;2495   /**
;;;2496     * @brief  Indicate whether external clock mode 2 is enabled.
;;;2497     * @note Macro @ref IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
;;;2498     *       whether or not a timer instance supports external clock mode2.
;;;2499     * @rmtoll SMCR         ECE           LL_TIM_IsEnabledExternalClock
;;;2500     * @param  TIMx Timer instance
;;;2501     * @retval State of bit (1 or 0).
;;;2502     */
;;;2503   __STATIC_INLINE uint32_t LL_TIM_IsEnabledExternalClock(TIM_TypeDef *TIMx)
;;;2504   {
;;;2505     return (READ_BIT(TIMx->SMCR, TIM_SMCR_ECE) == (TIM_SMCR_ECE));
;;;2506   }
;;;2507   
;;;2508   /**
;;;2509     * @brief  Set the clock source of the counter clock.
;;;2510     * @note when selected clock source is external clock mode 1, the timer input
;;;2511     *       the external clock is applied is selected by calling the @ref LL_TIM_SetTriggerInput()
;;;2512     *       function. This timer input must be configured by calling
;;;2513     *       the @ref LL_TIM_IC_Config() function.
;;;2514     * @note Macro @ref IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(TIMx) can be used to check
;;;2515     *       whether or not a timer instance supports external clock mode1.
;;;2516     * @note Macro @ref IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
;;;2517     *       whether or not a timer instance supports external clock mode2.
;;;2518     * @rmtoll SMCR         SMS           LL_TIM_SetClockSource\n
;;;2519     *         SMCR         ECE           LL_TIM_SetClockSource
;;;2520     * @param  TIMx Timer instance
;;;2521     * @param  ClockSource This parameter can be one of the following values:
;;;2522     *         @arg @ref LL_TIM_CLOCKSOURCE_INTERNAL
;;;2523     *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
;;;2524     *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
;;;2525     * @retval None
;;;2526     */
;;;2527   __STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
;;;2528   {
;;;2529     MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
;;;2530   }
;;;2531   
;;;2532   /**
;;;2533     * @brief  Set the encoder interface mode.
;;;2534     * @note Macro @ref IS_TIM_ENCODER_INTERFACE_INSTANCE(TIMx) can be used to check
;;;2535     *       whether or not a timer instance supports the encoder mode.
;;;2536     * @rmtoll SMCR         SMS           LL_TIM_SetEncoderMode
;;;2537     * @param  TIMx Timer instance
;;;2538     * @param  EncoderMode This parameter can be one of the following values:
;;;2539     *         @arg @ref LL_TIM_ENCODERMODE_X2_TI1
;;;2540     *         @arg @ref LL_TIM_ENCODERMODE_X2_TI2
;;;2541     *         @arg @ref LL_TIM_ENCODERMODE_X4_TI12
;;;2542     * @retval None
;;;2543     */
;;;2544   __STATIC_INLINE void LL_TIM_SetEncoderMode(TIM_TypeDef *TIMx, uint32_t EncoderMode)
;;;2545   {
;;;2546     MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
;;;2547   }
;;;2548   
;;;2549   /**
;;;2550     * @}
;;;2551     */
;;;2552   
;;;2553   /** @defgroup TIM_LL_EF_Timer_Synchronization Timer synchronisation configuration
;;;2554     * @{
;;;2555     */
;;;2556   /**
;;;2557     * @brief  Set the trigger output (TRGO) used for timer synchronization .
;;;2558     * @note Macro @ref IS_TIM_MASTER_INSTANCE(TIMx) can be used to check
;;;2559     *       whether or not a timer instance can operate as a master timer.
;;;2560     * @rmtoll CR2          MMS           LL_TIM_SetTriggerOutput
;;;2561     * @param  TIMx Timer instance
;;;2562     * @param  TimerSynchronization This parameter can be one of the following values:
;;;2563     *         @arg @ref LL_TIM_TRGO_RESET
;;;2564     *         @arg @ref LL_TIM_TRGO_ENABLE
;;;2565     *         @arg @ref LL_TIM_TRGO_UPDATE
;;;2566     *         @arg @ref LL_TIM_TRGO_CC1IF
;;;2567     *         @arg @ref LL_TIM_TRGO_OC1REF
;;;2568     *         @arg @ref LL_TIM_TRGO_OC2REF
;;;2569     *         @arg @ref LL_TIM_TRGO_OC3REF
;;;2570     *         @arg @ref LL_TIM_TRGO_OC4REF
;;;2571     * @retval None
;;;2572     */
;;;2573   __STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
;;;2574   {
;;;2575     MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
;;;2576   }
;;;2577   
;;;2578   /**
;;;2579     * @brief  Set the synchronization mode of a slave timer.
;;;2580     * @note Macro @ref IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
;;;2581     *       a timer instance can operate as a slave timer.
;;;2582     * @rmtoll SMCR         SMS           LL_TIM_SetSlaveMode
;;;2583     * @param  TIMx Timer instance
;;;2584     * @param  SlaveMode This parameter can be one of the following values:
;;;2585     *         @arg @ref LL_TIM_SLAVEMODE_DISABLED
;;;2586     *         @arg @ref LL_TIM_SLAVEMODE_RESET
;;;2587     *         @arg @ref LL_TIM_SLAVEMODE_GATED
;;;2588     *         @arg @ref LL_TIM_SLAVEMODE_TRIGGER
;;;2589     * @retval None
;;;2590     */
;;;2591   __STATIC_INLINE void LL_TIM_SetSlaveMode(TIM_TypeDef *TIMx, uint32_t SlaveMode)
;;;2592   {
;;;2593     MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
;;;2594   }
;;;2595   
;;;2596   /**
;;;2597     * @brief  Set the selects the trigger input to be used to synchronize the counter.
;;;2598     * @note Macro @ref IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
;;;2599     *       a timer instance can operate as a slave timer.
;;;2600     * @rmtoll SMCR         TS            LL_TIM_SetTriggerInput
;;;2601     * @param  TIMx Timer instance
;;;2602     * @param  TriggerInput This parameter can be one of the following values:
;;;2603     *         @arg @ref LL_TIM_TS_ITR0
;;;2604     *         @arg @ref LL_TIM_TS_ITR1
;;;2605     *         @arg @ref LL_TIM_TS_ITR2
;;;2606     *         @arg @ref LL_TIM_TS_ITR3
;;;2607     *         @arg @ref LL_TIM_TS_TI1F_ED
;;;2608     *         @arg @ref LL_TIM_TS_TI1FP1
;;;2609     *         @arg @ref LL_TIM_TS_TI2FP2
;;;2610     *         @arg @ref LL_TIM_TS_ETRF
;;;2611     * @retval None
;;;2612     */
;;;2613   __STATIC_INLINE void LL_TIM_SetTriggerInput(TIM_TypeDef *TIMx, uint32_t TriggerInput)
;;;2614   {
;;;2615     MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
;;;2616   }
;;;2617   
;;;2618   /**
;;;2619     * @brief  Enable the Master/Slave mode.
;;;2620     * @note Macro @ref IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
;;;2621     *       a timer instance can operate as a slave timer.
;;;2622     * @rmtoll SMCR         MSM           LL_TIM_EnableMasterSlaveMode
;;;2623     * @param  TIMx Timer instance
;;;2624     * @retval None
;;;2625     */
;;;2626   __STATIC_INLINE void LL_TIM_EnableMasterSlaveMode(TIM_TypeDef *TIMx)
;;;2627   {
;;;2628     SET_BIT(TIMx->SMCR, TIM_SMCR_MSM);
;;;2629   }
;;;2630   
;;;2631   /**
;;;2632     * @brief  Disable the Master/Slave mode.
;;;2633     * @note Macro @ref IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
;;;2634     *       a timer instance can operate as a slave timer.
;;;2635     * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
;;;2636     * @param  TIMx Timer instance
;;;2637     * @retval None
;;;2638     */
;;;2639   __STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
;;;2640   {
;;;2641     CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
        0x0800073c:    6881        .h      LDR      r1,[r0,#8]
        0x0800073e:    f0210180    !...    BIC      r1,r1,#0x80
        0x08000742:    6081        .`      STR      r1,[r0,#8]
        0x08000744:    4770        pG      BX       lr
    i.LL_TIM_EnableCounter
    LL_TIM_EnableCounter
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h (1027)
        0x08000746:    6801        .h      LDR      r1,[r0,#0]
        0x08000748:    f0410101    A...    ORR      r1,r1,#1
        0x0800074c:    6001        .`      STR      r1,[r0,#0]
;;;1028   }
        0x0800074e:    4770        pG      BX       lr
    i.LL_TIM_EnableIT_UPDATE
    LL_TIM_EnableIT_UPDATE
;;;1029   
;;;1030   /**
;;;1031     * @brief  Disable timer counter.
;;;1032     * @rmtoll CR1          CEN           LL_TIM_DisableCounter
;;;1033     * @param  TIMx Timer instance
;;;1034     * @retval None
;;;1035     */
;;;1036   __STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
;;;1037   {
;;;1038     CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
;;;1039   }
;;;1040   
;;;1041   /**
;;;1042     * @brief  Indicates whether the timer counter is enabled.
;;;1043     * @rmtoll CR1          CEN           LL_TIM_IsEnabledCounter
;;;1044     * @param  TIMx Timer instance
;;;1045     * @retval State of bit (1 or 0).
;;;1046     */
;;;1047   __STATIC_INLINE uint32_t LL_TIM_IsEnabledCounter(TIM_TypeDef *TIMx)
;;;1048   {
;;;1049     return (READ_BIT(TIMx->CR1, TIM_CR1_CEN) == (TIM_CR1_CEN));
;;;1050   }
;;;1051   
;;;1052   /**
;;;1053     * @brief  Enable update event generation.
;;;1054     * @rmtoll CR1          UDIS          LL_TIM_EnableUpdateEvent
;;;1055     * @param  TIMx Timer instance
;;;1056     * @retval None
;;;1057     */
;;;1058   __STATIC_INLINE void LL_TIM_EnableUpdateEvent(TIM_TypeDef *TIMx)
;;;1059   {
;;;1060     SET_BIT(TIMx->CR1, TIM_CR1_UDIS);
;;;1061   }
;;;1062   
;;;1063   /**
;;;1064     * @brief  Disable update event generation.
;;;1065     * @rmtoll CR1          UDIS          LL_TIM_DisableUpdateEvent
;;;1066     * @param  TIMx Timer instance
;;;1067     * @retval None
;;;1068     */
;;;1069   __STATIC_INLINE void LL_TIM_DisableUpdateEvent(TIM_TypeDef *TIMx)
;;;1070   {
;;;1071     CLEAR_BIT(TIMx->CR1, TIM_CR1_UDIS);
;;;1072   }
;;;1073   
;;;1074   /**
;;;1075     * @brief  Indicates whether update event generation is enabled.
;;;1076     * @rmtoll CR1          UDIS          LL_TIM_IsEnabledUpdateEvent
;;;1077     * @param  TIMx Timer instance
;;;1078     * @retval State of bit (1 or 0).
;;;1079     */
;;;1080   __STATIC_INLINE uint32_t LL_TIM_IsEnabledUpdateEvent(TIM_TypeDef *TIMx)
;;;1081   {
;;;1082     return (READ_BIT(TIMx->CR1, TIM_CR1_UDIS) == (TIM_CR1_UDIS));
;;;1083   }
;;;1084   
;;;1085   /**
;;;1086     * @brief  Set update event source
;;;1087     * @note Update event source set to LL_TIM_UPDATESOURCE_REGULAR: any of the following events
;;;1088     *       generate an update interrupt or DMA request if enabled:
;;;1089     *        - Counter overflow/underflow
;;;1090     *        - Setting the UG bit
;;;1091     *        - Update generation through the slave mode controller
;;;1092     * @note Update event source set to LL_TIM_UPDATESOURCE_COUNTER: only counter
;;;1093     *       overflow/underflow generates an update interrupt or DMA request if enabled.
;;;1094     * @rmtoll CR1          URS           LL_TIM_SetUpdateSource
;;;1095     * @param  TIMx Timer instance
;;;1096     * @param  UpdateSource This parameter can be one of the following values:
;;;1097     *         @arg @ref LL_TIM_UPDATESOURCE_REGULAR
;;;1098     *         @arg @ref LL_TIM_UPDATESOURCE_COUNTER
;;;1099     * @retval None
;;;1100     */
;;;1101   __STATIC_INLINE void LL_TIM_SetUpdateSource(TIM_TypeDef *TIMx, uint32_t UpdateSource)
;;;1102   {
;;;1103     MODIFY_REG(TIMx->CR1, TIM_CR1_URS, UpdateSource);
;;;1104   }
;;;1105   
;;;1106   /**
;;;1107     * @brief  Get actual event update source
;;;1108     * @rmtoll CR1          URS           LL_TIM_GetUpdateSource
;;;1109     * @param  TIMx Timer instance
;;;1110     * @retval Returned value can be one of the following values:
;;;1111     *         @arg @ref LL_TIM_UPDATESOURCE_REGULAR
;;;1112     *         @arg @ref LL_TIM_UPDATESOURCE_COUNTER
;;;1113     */
;;;1114   __STATIC_INLINE uint32_t LL_TIM_GetUpdateSource(TIM_TypeDef *TIMx)
;;;1115   {
;;;1116     return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_URS));
;;;1117   }
;;;1118   
;;;1119   /**
;;;1120     * @brief  Set one pulse mode (one shot v.s. repetitive).
;;;1121     * @rmtoll CR1          OPM           LL_TIM_SetOnePulseMode
;;;1122     * @param  TIMx Timer instance
;;;1123     * @param  OnePulseMode This parameter can be one of the following values:
;;;1124     *         @arg @ref LL_TIM_ONEPULSEMODE_SINGLE
;;;1125     *         @arg @ref LL_TIM_ONEPULSEMODE_REPETITIVE
;;;1126     * @retval None
;;;1127     */
;;;1128   __STATIC_INLINE void LL_TIM_SetOnePulseMode(TIM_TypeDef *TIMx, uint32_t OnePulseMode)
;;;1129   {
;;;1130     MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
;;;1131   }
;;;1132   
;;;1133   /**
;;;1134     * @brief  Get actual one pulse mode.
;;;1135     * @rmtoll CR1          OPM           LL_TIM_GetOnePulseMode
;;;1136     * @param  TIMx Timer instance
;;;1137     * @retval Returned value can be one of the following values:
;;;1138     *         @arg @ref LL_TIM_ONEPULSEMODE_SINGLE
;;;1139     *         @arg @ref LL_TIM_ONEPULSEMODE_REPETITIVE
;;;1140     */
;;;1141   __STATIC_INLINE uint32_t LL_TIM_GetOnePulseMode(TIM_TypeDef *TIMx)
;;;1142   {
;;;1143     return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_OPM));
;;;1144   }
;;;1145   
;;;1146   /**
;;;1147     * @brief  Set the timer counter counting mode.
;;;1148     * @note Macro @ref IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx) can be used to
;;;1149     *       check whether or not the counter mode selection feature is supported
;;;1150     *       by a timer instance.
;;;1151     * @rmtoll CR1          DIR           LL_TIM_SetCounterMode\n
;;;1152     *         CR1          CMS           LL_TIM_SetCounterMode
;;;1153     * @param  TIMx Timer instance
;;;1154     * @param  CounterMode This parameter can be one of the following values:
;;;1155     *         @arg @ref LL_TIM_COUNTERMODE_UP
;;;1156     *         @arg @ref LL_TIM_COUNTERMODE_DOWN
;;;1157     *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP
;;;1158     *         @arg @ref LL_TIM_COUNTERMODE_CENTER_DOWN
;;;1159     *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP_DOWN
;;;1160     * @retval None
;;;1161     */
;;;1162   __STATIC_INLINE void LL_TIM_SetCounterMode(TIM_TypeDef *TIMx, uint32_t CounterMode)
;;;1163   {
;;;1164     MODIFY_REG(TIMx->CR1, TIM_CR1_DIR | TIM_CR1_CMS, CounterMode);
;;;1165   }
;;;1166   
;;;1167   /**
;;;1168     * @brief  Get actual counter mode.
;;;1169     * @note Macro @ref IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx) can be used to
;;;1170     *       check whether or not the counter mode selection feature is supported
;;;1171     *       by a timer instance.
;;;1172     * @rmtoll CR1          DIR           LL_TIM_GetCounterMode\n
;;;1173     *         CR1          CMS           LL_TIM_GetCounterMode
;;;1174     * @param  TIMx Timer instance
;;;1175     * @retval Returned value can be one of the following values:
;;;1176     *         @arg @ref LL_TIM_COUNTERMODE_UP
;;;1177     *         @arg @ref LL_TIM_COUNTERMODE_DOWN
;;;1178     *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP
;;;1179     *         @arg @ref LL_TIM_COUNTERMODE_CENTER_DOWN
;;;1180     *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP_DOWN
;;;1181     */
;;;1182   __STATIC_INLINE uint32_t LL_TIM_GetCounterMode(TIM_TypeDef *TIMx)
;;;1183   {
;;;1184     return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR | TIM_CR1_CMS));
;;;1185   }
;;;1186   
;;;1187   /**
;;;1188     * @brief  Enable auto-reload (ARR) preload.
;;;1189     * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
;;;1190     * @param  TIMx Timer instance
;;;1191     * @retval None
;;;1192     */
;;;1193   __STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
;;;1194   {
;;;1195     SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
;;;1196   }
;;;1197   
;;;1198   /**
;;;1199     * @brief  Disable auto-reload (ARR) preload.
;;;1200     * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
;;;1201     * @param  TIMx Timer instance
;;;1202     * @retval None
;;;1203     */
;;;1204   __STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
;;;1205   {
;;;1206     CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
;;;1207   }
;;;1208   
;;;1209   /**
;;;1210     * @brief  Indicates whether auto-reload (ARR) preload is enabled.
;;;1211     * @rmtoll CR1          ARPE          LL_TIM_IsEnabledARRPreload
;;;1212     * @param  TIMx Timer instance
;;;1213     * @retval State of bit (1 or 0).
;;;1214     */
;;;1215   __STATIC_INLINE uint32_t LL_TIM_IsEnabledARRPreload(TIM_TypeDef *TIMx)
;;;1216   {
;;;1217     return (READ_BIT(TIMx->CR1, TIM_CR1_ARPE) == (TIM_CR1_ARPE));
;;;1218   }
;;;1219   
;;;1220   /**
;;;1221     * @brief  Set the division ratio between the timer clock  and the sampling clock used by the dead-time generators (when supported) and the digital filters.
;;;1222     * @note Macro @ref IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx) can be used to check
;;;1223     *       whether or not the clock division feature is supported by the timer
;;;1224     *       instance.
;;;1225     * @rmtoll CR1          CKD           LL_TIM_SetClockDivision
;;;1226     * @param  TIMx Timer instance
;;;1227     * @param  ClockDivision This parameter can be one of the following values:
;;;1228     *         @arg @ref LL_TIM_CLOCKDIVISION_DIV1
;;;1229     *         @arg @ref LL_TIM_CLOCKDIVISION_DIV2
;;;1230     *         @arg @ref LL_TIM_CLOCKDIVISION_DIV4
;;;1231     * @retval None
;;;1232     */
;;;1233   __STATIC_INLINE void LL_TIM_SetClockDivision(TIM_TypeDef *TIMx, uint32_t ClockDivision)
;;;1234   {
;;;1235     MODIFY_REG(TIMx->CR1, TIM_CR1_CKD, ClockDivision);
;;;1236   }
;;;1237   
;;;1238   /**
;;;1239     * @brief  Get the actual division ratio between the timer clock  and the sampling clock used by the dead-time generators (when supported) and the digital filters.
;;;1240     * @note Macro @ref IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx) can be used to check
;;;1241     *       whether or not the clock division feature is supported by the timer
;;;1242     *       instance.
;;;1243     * @rmtoll CR1          CKD           LL_TIM_GetClockDivision
;;;1244     * @param  TIMx Timer instance
;;;1245     * @retval Returned value can be one of the following values:
;;;1246     *         @arg @ref LL_TIM_CLOCKDIVISION_DIV1
;;;1247     *         @arg @ref LL_TIM_CLOCKDIVISION_DIV2
;;;1248     *         @arg @ref LL_TIM_CLOCKDIVISION_DIV4
;;;1249     */
;;;1250   __STATIC_INLINE uint32_t LL_TIM_GetClockDivision(TIM_TypeDef *TIMx)
;;;1251   {
;;;1252     return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_CKD));
;;;1253   }
;;;1254   
;;;1255   /**
;;;1256     * @brief  Set the counter value.
;;;1257     * @rmtoll CNT          CNT           LL_TIM_SetCounter
;;;1258     * @param  TIMx Timer instance
;;;1259     * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF)
;;;1260     * @retval None
;;;1261     */
;;;1262   __STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
;;;1263   {
;;;1264     WRITE_REG(TIMx->CNT, Counter);
;;;1265   }
;;;1266   
;;;1267   /**
;;;1268     * @brief  Get the counter value.
;;;1269     * @rmtoll CNT          CNT           LL_TIM_GetCounter
;;;1270     * @param  TIMx Timer instance
;;;1271     * @retval Counter value (between Min_Data=0 and Max_Data=0xFFFF)
;;;1272     */
;;;1273   __STATIC_INLINE uint32_t LL_TIM_GetCounter(TIM_TypeDef *TIMx)
;;;1274   {
;;;1275     return (uint32_t)(READ_REG(TIMx->CNT));
;;;1276   }
;;;1277   
;;;1278   /**
;;;1279     * @brief  Get the current direction of the counter
;;;1280     * @rmtoll CR1          DIR           LL_TIM_GetDirection
;;;1281     * @param  TIMx Timer instance
;;;1282     * @retval Returned value can be one of the following values:
;;;1283     *         @arg @ref LL_TIM_COUNTERDIRECTION_UP
;;;1284     *         @arg @ref LL_TIM_COUNTERDIRECTION_DOWN
;;;1285     */
;;;1286   __STATIC_INLINE uint32_t LL_TIM_GetDirection(TIM_TypeDef *TIMx)
;;;1287   {
;;;1288     return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
;;;1289   }
;;;1290   
;;;1291   /**
;;;1292     * @brief  Set the prescaler value.
;;;1293     * @note The counter clock frequency CK_CNT is equal to fCK_PSC / (PSC[15:0] + 1).
;;;1294     * @note The prescaler can be changed on the fly as this control register is buffered. The new
;;;1295     *       prescaler ratio is taken into account at the next update event.
;;;1296     * @note Helper macro @ref __LL_TIM_CALC_PSC can be used to calculate the Prescaler parameter
;;;1297     * @rmtoll PSC          PSC           LL_TIM_SetPrescaler
;;;1298     * @param  TIMx Timer instance
;;;1299     * @param  Prescaler between Min_Data=0 and Max_Data=65535
;;;1300     * @retval None
;;;1301     */
;;;1302   __STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
;;;1303   {
;;;1304     WRITE_REG(TIMx->PSC, Prescaler);
;;;1305   }
;;;1306   
;;;1307   /**
;;;1308     * @brief  Get the prescaler value.
;;;1309     * @rmtoll PSC          PSC           LL_TIM_GetPrescaler
;;;1310     * @param  TIMx Timer instance
;;;1311     * @retval  Prescaler value between Min_Data=0 and Max_Data=65535
;;;1312     */
;;;1313   __STATIC_INLINE uint32_t LL_TIM_GetPrescaler(TIM_TypeDef *TIMx)
;;;1314   {
;;;1315     return (uint32_t)(READ_REG(TIMx->PSC));
;;;1316   }
;;;1317   
;;;1318   /**
;;;1319     * @brief  Set the auto-reload value.
;;;1320     * @note The counter is blocked while the auto-reload value is null.
;;;1321     * @note Helper macro @ref __LL_TIM_CALC_ARR can be used to calculate the AutoReload parameter
;;;1322     * @rmtoll ARR          ARR           LL_TIM_SetAutoReload
;;;1323     * @param  TIMx Timer instance
;;;1324     * @param  AutoReload between Min_Data=0 and Max_Data=65535
;;;1325     * @retval None
;;;1326     */
;;;1327   __STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
;;;1328   {
;;;1329     WRITE_REG(TIMx->ARR, AutoReload);
;;;1330   }
;;;1331   
;;;1332   /**
;;;1333     * @brief  Get the auto-reload value.
;;;1334     * @rmtoll ARR          ARR           LL_TIM_GetAutoReload
;;;1335     * @param  TIMx Timer instance
;;;1336     * @retval Auto-reload value
;;;1337     */
;;;1338   __STATIC_INLINE uint32_t LL_TIM_GetAutoReload(TIM_TypeDef *TIMx)
;;;1339   {
;;;1340     return (uint32_t)(READ_REG(TIMx->ARR));
;;;1341   }
;;;1342   
;;;1343   /**
;;;1344     * @brief  Set the repetition counter value.
;;;1345     * @note Macro @ref IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx) can be used to check
;;;1346     *       whether or not a timer instance supports a repetition counter.
;;;1347     * @rmtoll RCR          REP           LL_TIM_SetRepetitionCounter
;;;1348     * @param  TIMx Timer instance
;;;1349     * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
;;;1350     * @retval None
;;;1351     */
;;;1352   __STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
;;;1353   {
;;;1354     WRITE_REG(TIMx->RCR, RepetitionCounter);
;;;1355   }
;;;1356   
;;;1357   /**
;;;1358     * @brief  Get the repetition counter value.
;;;1359     * @note Macro @ref IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx) can be used to check
;;;1360     *       whether or not a timer instance supports a repetition counter.
;;;1361     * @rmtoll RCR          REP           LL_TIM_GetRepetitionCounter
;;;1362     * @param  TIMx Timer instance
;;;1363     * @retval Repetition counter value
;;;1364     */
;;;1365   __STATIC_INLINE uint32_t LL_TIM_GetRepetitionCounter(TIM_TypeDef *TIMx)
;;;1366   {
;;;1367     return (uint32_t)(READ_REG(TIMx->RCR));
;;;1368   }
;;;1369   
;;;1370   /**
;;;1371     * @}
;;;1372     */
;;;1373   
;;;1374   /** @defgroup TIM_LL_EF_Capture_Compare Capture Compare configuration
;;;1375     * @{
;;;1376     */
;;;1377   /**
;;;1378     * @brief  Enable  the capture/compare control bits (CCxE, CCxNE and OCxM) preload.
;;;1379     * @note CCxE, CCxNE and OCxM bits are preloaded, after having been written,
;;;1380     *       they are updated only when a commutation event (COM) occurs.
;;;1381     * @note Only on channels that have a complementary output.
;;;1382     * @note Macro @ref IS_TIM_COMMUTATION_EVENT_INSTANCE(TIMx) can be used to check
;;;1383     *       whether or not a timer instance is able to generate a commutation event.
;;;1384     * @rmtoll CR2          CCPC          LL_TIM_CC_EnablePreload
;;;1385     * @param  TIMx Timer instance
;;;1386     * @retval None
;;;1387     */
;;;1388   __STATIC_INLINE void LL_TIM_CC_EnablePreload(TIM_TypeDef *TIMx)
;;;1389   {
;;;1390     SET_BIT(TIMx->CR2, TIM_CR2_CCPC);
;;;1391   }
;;;1392   
;;;1393   /**
;;;1394     * @brief  Disable  the capture/compare control bits (CCxE, CCxNE and OCxM) preload.
;;;1395     * @note Macro @ref IS_TIM_COMMUTATION_EVENT_INSTANCE(TIMx) can be used to check
;;;1396     *       whether or not a timer instance is able to generate a commutation event.
;;;1397     * @rmtoll CR2          CCPC          LL_TIM_CC_DisablePreload
;;;1398     * @param  TIMx Timer instance
;;;1399     * @retval None
;;;1400     */
;;;1401   __STATIC_INLINE void LL_TIM_CC_DisablePreload(TIM_TypeDef *TIMx)
;;;1402   {
;;;1403     CLEAR_BIT(TIMx->CR2, TIM_CR2_CCPC);
;;;1404   }
;;;1405   
;;;1406   /**
;;;1407     * @brief  Set the updated source of the capture/compare control bits (CCxE, CCxNE and OCxM).
;;;1408     * @note Macro @ref IS_TIM_COMMUTATION_EVENT_INSTANCE(TIMx) can be used to check
;;;1409     *       whether or not a timer instance is able to generate a commutation event.
;;;1410     * @rmtoll CR2          CCUS          LL_TIM_CC_SetUpdate
;;;1411     * @param  TIMx Timer instance
;;;1412     * @param  CCUpdateSource This parameter can be one of the following values:
;;;1413     *         @arg @ref LL_TIM_CCUPDATESOURCE_COMG_ONLY
;;;1414     *         @arg @ref LL_TIM_CCUPDATESOURCE_COMG_AND_TRGI
;;;1415     * @retval None
;;;1416     */
;;;1417   __STATIC_INLINE void LL_TIM_CC_SetUpdate(TIM_TypeDef *TIMx, uint32_t CCUpdateSource)
;;;1418   {
;;;1419     MODIFY_REG(TIMx->CR2, TIM_CR2_CCUS, CCUpdateSource);
;;;1420   }
;;;1421   
;;;1422   /**
;;;1423     * @brief  Set the trigger of the capture/compare DMA request.
;;;1424     * @rmtoll CR2          CCDS          LL_TIM_CC_SetDMAReqTrigger
;;;1425     * @param  TIMx Timer instance
;;;1426     * @param  DMAReqTrigger This parameter can be one of the following values:
;;;1427     *         @arg @ref LL_TIM_CCDMAREQUEST_CC
;;;1428     *         @arg @ref LL_TIM_CCDMAREQUEST_UPDATE
;;;1429     * @retval None
;;;1430     */
;;;1431   __STATIC_INLINE void LL_TIM_CC_SetDMAReqTrigger(TIM_TypeDef *TIMx, uint32_t DMAReqTrigger)
;;;1432   {
;;;1433     MODIFY_REG(TIMx->CR2, TIM_CR2_CCDS, DMAReqTrigger);
;;;1434   }
;;;1435   
;;;1436   /**
;;;1437     * @brief  Get actual trigger of the capture/compare DMA request.
;;;1438     * @rmtoll CR2          CCDS          LL_TIM_CC_GetDMAReqTrigger
;;;1439     * @param  TIMx Timer instance
;;;1440     * @retval Returned value can be one of the following values:
;;;1441     *         @arg @ref LL_TIM_CCDMAREQUEST_CC
;;;1442     *         @arg @ref LL_TIM_CCDMAREQUEST_UPDATE
;;;1443     */
;;;1444   __STATIC_INLINE uint32_t LL_TIM_CC_GetDMAReqTrigger(TIM_TypeDef *TIMx)
;;;1445   {
;;;1446     return (uint32_t)(READ_BIT(TIMx->CR2, TIM_CR2_CCDS));
;;;1447   }
;;;1448   
;;;1449   /**
;;;1450     * @brief  Set the lock level to freeze the
;;;1451     *         configuration of several capture/compare parameters.
;;;1452     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;1453     *       the lock mechanism is supported by a timer instance.
;;;1454     * @rmtoll BDTR         LOCK          LL_TIM_CC_SetLockLevel
;;;1455     * @param  TIMx Timer instance
;;;1456     * @param  LockLevel This parameter can be one of the following values:
;;;1457     *         @arg @ref LL_TIM_LOCKLEVEL_OFF
;;;1458     *         @arg @ref LL_TIM_LOCKLEVEL_1
;;;1459     *         @arg @ref LL_TIM_LOCKLEVEL_2
;;;1460     *         @arg @ref LL_TIM_LOCKLEVEL_3
;;;1461     * @retval None
;;;1462     */
;;;1463   __STATIC_INLINE void LL_TIM_CC_SetLockLevel(TIM_TypeDef *TIMx, uint32_t LockLevel)
;;;1464   {
;;;1465     MODIFY_REG(TIMx->BDTR, TIM_BDTR_LOCK, LockLevel);
;;;1466   }
;;;1467   
;;;1468   /**
;;;1469     * @brief  Enable capture/compare channels.
;;;1470     * @rmtoll CCER         CC1E          LL_TIM_CC_EnableChannel\n
;;;1471     *         CCER         CC1NE         LL_TIM_CC_EnableChannel\n
;;;1472     *         CCER         CC2E          LL_TIM_CC_EnableChannel\n
;;;1473     *         CCER         CC2NE         LL_TIM_CC_EnableChannel\n
;;;1474     *         CCER         CC3E          LL_TIM_CC_EnableChannel\n
;;;1475     *         CCER         CC3NE         LL_TIM_CC_EnableChannel\n
;;;1476     *         CCER         CC4E          LL_TIM_CC_EnableChannel
;;;1477     * @param  TIMx Timer instance
;;;1478     * @param  Channels This parameter can be a combination of the following values:
;;;1479     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1480     *         @arg @ref LL_TIM_CHANNEL_CH1N
;;;1481     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1482     *         @arg @ref LL_TIM_CHANNEL_CH2N
;;;1483     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1484     *         @arg @ref LL_TIM_CHANNEL_CH3N
;;;1485     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1486     * @retval None
;;;1487     */
;;;1488   __STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
;;;1489   {
;;;1490     SET_BIT(TIMx->CCER, Channels);
;;;1491   }
;;;1492   
;;;1493   /**
;;;1494     * @brief  Disable capture/compare channels.
;;;1495     * @rmtoll CCER         CC1E          LL_TIM_CC_DisableChannel\n
;;;1496     *         CCER         CC1NE         LL_TIM_CC_DisableChannel\n
;;;1497     *         CCER         CC2E          LL_TIM_CC_DisableChannel\n
;;;1498     *         CCER         CC2NE         LL_TIM_CC_DisableChannel\n
;;;1499     *         CCER         CC3E          LL_TIM_CC_DisableChannel\n
;;;1500     *         CCER         CC3NE         LL_TIM_CC_DisableChannel\n
;;;1501     *         CCER         CC4E          LL_TIM_CC_DisableChannel
;;;1502     * @param  TIMx Timer instance
;;;1503     * @param  Channels This parameter can be a combination of the following values:
;;;1504     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1505     *         @arg @ref LL_TIM_CHANNEL_CH1N
;;;1506     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1507     *         @arg @ref LL_TIM_CHANNEL_CH2N
;;;1508     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1509     *         @arg @ref LL_TIM_CHANNEL_CH3N
;;;1510     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1511     * @retval None
;;;1512     */
;;;1513   __STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
;;;1514   {
;;;1515     CLEAR_BIT(TIMx->CCER, Channels);
;;;1516   }
;;;1517   
;;;1518   /**
;;;1519     * @brief  Indicate whether channel(s) is(are) enabled.
;;;1520     * @rmtoll CCER         CC1E          LL_TIM_CC_IsEnabledChannel\n
;;;1521     *         CCER         CC1NE         LL_TIM_CC_IsEnabledChannel\n
;;;1522     *         CCER         CC2E          LL_TIM_CC_IsEnabledChannel\n
;;;1523     *         CCER         CC2NE         LL_TIM_CC_IsEnabledChannel\n
;;;1524     *         CCER         CC3E          LL_TIM_CC_IsEnabledChannel\n
;;;1525     *         CCER         CC3NE         LL_TIM_CC_IsEnabledChannel\n
;;;1526     *         CCER         CC4E          LL_TIM_CC_IsEnabledChannel
;;;1527     * @param  TIMx Timer instance
;;;1528     * @param  Channels This parameter can be a combination of the following values:
;;;1529     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1530     *         @arg @ref LL_TIM_CHANNEL_CH1N
;;;1531     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1532     *         @arg @ref LL_TIM_CHANNEL_CH2N
;;;1533     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1534     *         @arg @ref LL_TIM_CHANNEL_CH3N
;;;1535     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1536     * @retval State of bit (1 or 0).
;;;1537     */
;;;1538   __STATIC_INLINE uint32_t LL_TIM_CC_IsEnabledChannel(TIM_TypeDef *TIMx, uint32_t Channels)
;;;1539   {
;;;1540     return (READ_BIT(TIMx->CCER, Channels) == (Channels));
;;;1541   }
;;;1542   
;;;1543   /**
;;;1544     * @}
;;;1545     */
;;;1546   
;;;1547   /** @defgroup TIM_LL_EF_Output_Channel Output channel configuration
;;;1548     * @{
;;;1549     */
;;;1550   /**
;;;1551     * @brief  Configure an output channel.
;;;1552     * @rmtoll CCMR1        CC1S          LL_TIM_OC_ConfigOutput\n
;;;1553     *         CCMR1        CC2S          LL_TIM_OC_ConfigOutput\n
;;;1554     *         CCMR2        CC3S          LL_TIM_OC_ConfigOutput\n
;;;1555     *         CCMR2        CC4S          LL_TIM_OC_ConfigOutput\n
;;;1556     *         CCER         CC1P          LL_TIM_OC_ConfigOutput\n
;;;1557     *         CCER         CC2P          LL_TIM_OC_ConfigOutput\n
;;;1558     *         CCER         CC3P          LL_TIM_OC_ConfigOutput\n
;;;1559     *         CCER         CC4P          LL_TIM_OC_ConfigOutput\n
;;;1560     *         CR2          OIS1          LL_TIM_OC_ConfigOutput\n
;;;1561     *         CR2          OIS2          LL_TIM_OC_ConfigOutput\n
;;;1562     *         CR2          OIS3          LL_TIM_OC_ConfigOutput\n
;;;1563     *         CR2          OIS4          LL_TIM_OC_ConfigOutput
;;;1564     * @param  TIMx Timer instance
;;;1565     * @param  Channel This parameter can be one of the following values:
;;;1566     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1567     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1568     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1569     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1570     * @param  Configuration This parameter must be a combination of all the following values:
;;;1571     *         @arg @ref LL_TIM_OCPOLARITY_HIGH or @ref LL_TIM_OCPOLARITY_LOW
;;;1572     *         @arg @ref LL_TIM_OCIDLESTATE_LOW or @ref LL_TIM_OCIDLESTATE_HIGH
;;;1573     * @retval None
;;;1574     */
;;;1575   __STATIC_INLINE void LL_TIM_OC_ConfigOutput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Configuration)
;;;1576   {
;;;1577     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1578     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1579     CLEAR_BIT(*pReg, (TIM_CCMR1_CC1S << SHIFT_TAB_OCxx[iChannel]));
;;;1580     MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),
;;;1581                (Configuration & TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]);
;;;1582     MODIFY_REG(TIMx->CR2, (TIM_CR2_OIS1 << SHIFT_TAB_OISx[iChannel]),
;;;1583                (Configuration & TIM_CR2_OIS1) << SHIFT_TAB_OISx[iChannel]);
;;;1584   }
;;;1585   
;;;1586   /**
;;;1587     * @brief  Define the behavior of the output reference signal OCxREF from which
;;;1588     *         OCx and OCxN (when relevant) are derived.
;;;1589     * @rmtoll CCMR1        OC1M          LL_TIM_OC_SetMode\n
;;;1590     *         CCMR1        OC2M          LL_TIM_OC_SetMode\n
;;;1591     *         CCMR2        OC3M          LL_TIM_OC_SetMode\n
;;;1592     *         CCMR2        OC4M          LL_TIM_OC_SetMode
;;;1593     * @param  TIMx Timer instance
;;;1594     * @param  Channel This parameter can be one of the following values:
;;;1595     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1596     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1597     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1598     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1599     * @param  Mode This parameter can be one of the following values:
;;;1600     *         @arg @ref LL_TIM_OCMODE_FROZEN
;;;1601     *         @arg @ref LL_TIM_OCMODE_ACTIVE
;;;1602     *         @arg @ref LL_TIM_OCMODE_INACTIVE
;;;1603     *         @arg @ref LL_TIM_OCMODE_TOGGLE
;;;1604     *         @arg @ref LL_TIM_OCMODE_FORCED_INACTIVE
;;;1605     *         @arg @ref LL_TIM_OCMODE_FORCED_ACTIVE
;;;1606     *         @arg @ref LL_TIM_OCMODE_PWM1
;;;1607     *         @arg @ref LL_TIM_OCMODE_PWM2
;;;1608     * @retval None
;;;1609     */
;;;1610   __STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
;;;1611   {
;;;1612     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1613     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1614     MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
;;;1615   }
;;;1616   
;;;1617   /**
;;;1618     * @brief  Get the output compare mode of an output channel.
;;;1619     * @rmtoll CCMR1        OC1M          LL_TIM_OC_GetMode\n
;;;1620     *         CCMR1        OC2M          LL_TIM_OC_GetMode\n
;;;1621     *         CCMR2        OC3M          LL_TIM_OC_GetMode\n
;;;1622     *         CCMR2        OC4M          LL_TIM_OC_GetMode
;;;1623     * @param  TIMx Timer instance
;;;1624     * @param  Channel This parameter can be one of the following values:
;;;1625     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1626     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1627     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1628     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1629     * @retval Returned value can be one of the following values:
;;;1630     *         @arg @ref LL_TIM_OCMODE_FROZEN
;;;1631     *         @arg @ref LL_TIM_OCMODE_ACTIVE
;;;1632     *         @arg @ref LL_TIM_OCMODE_INACTIVE
;;;1633     *         @arg @ref LL_TIM_OCMODE_TOGGLE
;;;1634     *         @arg @ref LL_TIM_OCMODE_FORCED_INACTIVE
;;;1635     *         @arg @ref LL_TIM_OCMODE_FORCED_ACTIVE
;;;1636     *         @arg @ref LL_TIM_OCMODE_PWM1
;;;1637     *         @arg @ref LL_TIM_OCMODE_PWM2
;;;1638     */
;;;1639   __STATIC_INLINE uint32_t LL_TIM_OC_GetMode(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1640   {
;;;1641     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1642     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1643     return (READ_BIT(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel])) >> SHIFT_TAB_OCxx[iChannel]);
;;;1644   }
;;;1645   
;;;1646   /**
;;;1647     * @brief  Set the polarity of an output channel.
;;;1648     * @rmtoll CCER         CC1P          LL_TIM_OC_SetPolarity\n
;;;1649     *         CCER         CC1NP         LL_TIM_OC_SetPolarity\n
;;;1650     *         CCER         CC2P          LL_TIM_OC_SetPolarity\n
;;;1651     *         CCER         CC2NP         LL_TIM_OC_SetPolarity\n
;;;1652     *         CCER         CC3P          LL_TIM_OC_SetPolarity\n
;;;1653     *         CCER         CC3NP         LL_TIM_OC_SetPolarity\n
;;;1654     *         CCER         CC4P          LL_TIM_OC_SetPolarity
;;;1655     * @param  TIMx Timer instance
;;;1656     * @param  Channel This parameter can be one of the following values:
;;;1657     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1658     *         @arg @ref LL_TIM_CHANNEL_CH1N
;;;1659     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1660     *         @arg @ref LL_TIM_CHANNEL_CH2N
;;;1661     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1662     *         @arg @ref LL_TIM_CHANNEL_CH3N
;;;1663     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1664     * @param  Polarity This parameter can be one of the following values:
;;;1665     *         @arg @ref LL_TIM_OCPOLARITY_HIGH
;;;1666     *         @arg @ref LL_TIM_OCPOLARITY_LOW
;;;1667     * @retval None
;;;1668     */
;;;1669   __STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
;;;1670   {
;;;1671     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1672     MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
;;;1673   }
;;;1674   
;;;1675   /**
;;;1676     * @brief  Get the polarity of an output channel.
;;;1677     * @rmtoll CCER         CC1P          LL_TIM_OC_GetPolarity\n
;;;1678     *         CCER         CC1NP         LL_TIM_OC_GetPolarity\n
;;;1679     *         CCER         CC2P          LL_TIM_OC_GetPolarity\n
;;;1680     *         CCER         CC2NP         LL_TIM_OC_GetPolarity\n
;;;1681     *         CCER         CC3P          LL_TIM_OC_GetPolarity\n
;;;1682     *         CCER         CC3NP         LL_TIM_OC_GetPolarity\n
;;;1683     *         CCER         CC4P          LL_TIM_OC_GetPolarity
;;;1684     * @param  TIMx Timer instance
;;;1685     * @param  Channel This parameter can be one of the following values:
;;;1686     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1687     *         @arg @ref LL_TIM_CHANNEL_CH1N
;;;1688     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1689     *         @arg @ref LL_TIM_CHANNEL_CH2N
;;;1690     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1691     *         @arg @ref LL_TIM_CHANNEL_CH3N
;;;1692     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1693     * @retval Returned value can be one of the following values:
;;;1694     *         @arg @ref LL_TIM_OCPOLARITY_HIGH
;;;1695     *         @arg @ref LL_TIM_OCPOLARITY_LOW
;;;1696     */
;;;1697   __STATIC_INLINE uint32_t LL_TIM_OC_GetPolarity(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1698   {
;;;1699     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1700     return (READ_BIT(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel])) >> SHIFT_TAB_CCxP[iChannel]);
;;;1701   }
;;;1702   
;;;1703   /**
;;;1704     * @brief  Set the IDLE state of an output channel
;;;1705     * @note This function is significant only for the timer instances
;;;1706     *       supporting the break feature. Macro @ref IS_TIM_BREAK_INSTANCE(TIMx)
;;;1707     *       can be used to check whether or not a timer instance provides
;;;1708     *       a break input.
;;;1709     * @rmtoll CR2         OIS1          LL_TIM_OC_SetIdleState\n
;;;1710     *         CR2         OIS1N         LL_TIM_OC_SetIdleState\n
;;;1711     *         CR2         OIS2          LL_TIM_OC_SetIdleState\n
;;;1712     *         CR2         OIS2N         LL_TIM_OC_SetIdleState\n
;;;1713     *         CR2         OIS3          LL_TIM_OC_SetIdleState\n
;;;1714     *         CR2         OIS3N         LL_TIM_OC_SetIdleState\n
;;;1715     *         CR2         OIS4          LL_TIM_OC_SetIdleState
;;;1716     * @param  TIMx Timer instance
;;;1717     * @param  Channel This parameter can be one of the following values:
;;;1718     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1719     *         @arg @ref LL_TIM_CHANNEL_CH1N
;;;1720     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1721     *         @arg @ref LL_TIM_CHANNEL_CH2N
;;;1722     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1723     *         @arg @ref LL_TIM_CHANNEL_CH3N
;;;1724     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1725     * @param  IdleState This parameter can be one of the following values:
;;;1726     *         @arg @ref LL_TIM_OCIDLESTATE_LOW
;;;1727     *         @arg @ref LL_TIM_OCIDLESTATE_HIGH
;;;1728     * @retval None
;;;1729     */
;;;1730   __STATIC_INLINE void LL_TIM_OC_SetIdleState(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t IdleState)
;;;1731   {
;;;1732     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1733     MODIFY_REG(TIMx->CR2, (TIM_CR2_OIS1 << SHIFT_TAB_OISx[iChannel]),  IdleState << SHIFT_TAB_OISx[iChannel]);
;;;1734   }
;;;1735   
;;;1736   /**
;;;1737     * @brief  Get the IDLE state of an output channel
;;;1738     * @rmtoll CR2         OIS1          LL_TIM_OC_GetIdleState\n
;;;1739     *         CR2         OIS1N         LL_TIM_OC_GetIdleState\n
;;;1740     *         CR2         OIS2          LL_TIM_OC_GetIdleState\n
;;;1741     *         CR2         OIS2N         LL_TIM_OC_GetIdleState\n
;;;1742     *         CR2         OIS3          LL_TIM_OC_GetIdleState\n
;;;1743     *         CR2         OIS3N         LL_TIM_OC_GetIdleState\n
;;;1744     *         CR2         OIS4          LL_TIM_OC_GetIdleState
;;;1745     * @param  TIMx Timer instance
;;;1746     * @param  Channel This parameter can be one of the following values:
;;;1747     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1748     *         @arg @ref LL_TIM_CHANNEL_CH1N
;;;1749     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1750     *         @arg @ref LL_TIM_CHANNEL_CH2N
;;;1751     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1752     *         @arg @ref LL_TIM_CHANNEL_CH3N
;;;1753     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1754     * @retval Returned value can be one of the following values:
;;;1755     *         @arg @ref LL_TIM_OCIDLESTATE_LOW
;;;1756     *         @arg @ref LL_TIM_OCIDLESTATE_HIGH
;;;1757     */
;;;1758   __STATIC_INLINE uint32_t LL_TIM_OC_GetIdleState(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1759   {
;;;1760     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1761     return (READ_BIT(TIMx->CR2, (TIM_CR2_OIS1 << SHIFT_TAB_OISx[iChannel])) >> SHIFT_TAB_OISx[iChannel]);
;;;1762   }
;;;1763   
;;;1764   /**
;;;1765     * @brief  Enable fast mode for the output channel.
;;;1766     * @note Acts only if the channel is configured in PWM1 or PWM2 mode.
;;;1767     * @rmtoll CCMR1        OC1FE          LL_TIM_OC_EnableFast\n
;;;1768     *         CCMR1        OC2FE          LL_TIM_OC_EnableFast\n
;;;1769     *         CCMR2        OC3FE          LL_TIM_OC_EnableFast\n
;;;1770     *         CCMR2        OC4FE          LL_TIM_OC_EnableFast
;;;1771     * @param  TIMx Timer instance
;;;1772     * @param  Channel This parameter can be one of the following values:
;;;1773     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1774     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1775     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1776     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1777     * @retval None
;;;1778     */
;;;1779   __STATIC_INLINE void LL_TIM_OC_EnableFast(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1780   {
;;;1781     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1782     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1783     SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
;;;1784   
;;;1785   }
;;;1786   
;;;1787   /**
;;;1788     * @brief  Disable fast mode for the output channel.
;;;1789     * @rmtoll CCMR1        OC1FE          LL_TIM_OC_DisableFast\n
;;;1790     *         CCMR1        OC2FE          LL_TIM_OC_DisableFast\n
;;;1791     *         CCMR2        OC3FE          LL_TIM_OC_DisableFast\n
;;;1792     *         CCMR2        OC4FE          LL_TIM_OC_DisableFast
;;;1793     * @param  TIMx Timer instance
;;;1794     * @param  Channel This parameter can be one of the following values:
;;;1795     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1796     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1797     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1798     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1799     * @retval None
;;;1800     */
;;;1801   __STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1802   {
;;;1803     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1804     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1805     CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
;;;1806   
;;;1807   }
;;;1808   
;;;1809   /**
;;;1810     * @brief  Indicates whether fast mode is enabled for the output channel.
;;;1811     * @rmtoll CCMR1        OC1FE          LL_TIM_OC_IsEnabledFast\n
;;;1812     *         CCMR1        OC2FE          LL_TIM_OC_IsEnabledFast\n
;;;1813     *         CCMR2        OC3FE          LL_TIM_OC_IsEnabledFast\n
;;;1814     *         CCMR2        OC4FE          LL_TIM_OC_IsEnabledFast\n
;;;1815     * @param  TIMx Timer instance
;;;1816     * @param  Channel This parameter can be one of the following values:
;;;1817     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1818     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1819     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1820     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1821     * @retval State of bit (1 or 0).
;;;1822     */
;;;1823   __STATIC_INLINE uint32_t LL_TIM_OC_IsEnabledFast(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1824   {
;;;1825     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1826     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1827     register uint32_t bitfield = TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel];
;;;1828     return (READ_BIT(*pReg, bitfield) == bitfield);
;;;1829   }
;;;1830   
;;;1831   /**
;;;1832     * @brief  Enable compare register (TIMx_CCRx) preload for the output channel.
;;;1833     * @rmtoll CCMR1        OC1PE          LL_TIM_OC_EnablePreload\n
;;;1834     *         CCMR1        OC2PE          LL_TIM_OC_EnablePreload\n
;;;1835     *         CCMR2        OC3PE          LL_TIM_OC_EnablePreload\n
;;;1836     *         CCMR2        OC4PE          LL_TIM_OC_EnablePreload
;;;1837     * @param  TIMx Timer instance
;;;1838     * @param  Channel This parameter can be one of the following values:
;;;1839     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1840     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1841     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1842     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1843     * @retval None
;;;1844     */
;;;1845   __STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1846   {
;;;1847     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1848     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1849     SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
;;;1850   }
;;;1851   
;;;1852   /**
;;;1853     * @brief  Disable compare register (TIMx_CCRx) preload for the output channel.
;;;1854     * @rmtoll CCMR1        OC1PE          LL_TIM_OC_DisablePreload\n
;;;1855     *         CCMR1        OC2PE          LL_TIM_OC_DisablePreload\n
;;;1856     *         CCMR2        OC3PE          LL_TIM_OC_DisablePreload\n
;;;1857     *         CCMR2        OC4PE          LL_TIM_OC_DisablePreload
;;;1858     * @param  TIMx Timer instance
;;;1859     * @param  Channel This parameter can be one of the following values:
;;;1860     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1861     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1862     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1863     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1864     * @retval None
;;;1865     */
;;;1866   __STATIC_INLINE void LL_TIM_OC_DisablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1867   {
;;;1868     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1869     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1870     CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
;;;1871   }
;;;1872   
;;;1873   /**
;;;1874     * @brief  Indicates whether compare register (TIMx_CCRx) preload is enabled for the output channel.
;;;1875     * @rmtoll CCMR1        OC1PE          LL_TIM_OC_IsEnabledPreload\n
;;;1876     *         CCMR1        OC2PE          LL_TIM_OC_IsEnabledPreload\n
;;;1877     *         CCMR2        OC3PE          LL_TIM_OC_IsEnabledPreload\n
;;;1878     *         CCMR2        OC4PE          LL_TIM_OC_IsEnabledPreload\n
;;;1879     * @param  TIMx Timer instance
;;;1880     * @param  Channel This parameter can be one of the following values:
;;;1881     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1882     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1883     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1884     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1885     * @retval State of bit (1 or 0).
;;;1886     */
;;;1887   __STATIC_INLINE uint32_t LL_TIM_OC_IsEnabledPreload(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1888   {
;;;1889     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1890     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1891     register uint32_t bitfield = TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel];
;;;1892     return (READ_BIT(*pReg, bitfield) == bitfield);
;;;1893   }
;;;1894   
;;;1895   /**
;;;1896     * @brief  Enable clearing the output channel on an external event.
;;;1897     * @note This function can only be used in Output compare and PWM modes. It does not work in Forced mode.
;;;1898     * @note Macro @ref IS_TIM_OCXREF_CLEAR_INSTANCE(TIMx) can be used to check whether
;;;1899     *       or not a timer instance can clear the OCxREF signal on an external event.
;;;1900     * @rmtoll CCMR1        OC1CE          LL_TIM_OC_EnableClear\n
;;;1901     *         CCMR1        OC2CE          LL_TIM_OC_EnableClear\n
;;;1902     *         CCMR2        OC3CE          LL_TIM_OC_EnableClear\n
;;;1903     *         CCMR2        OC4CE          LL_TIM_OC_EnableClear
;;;1904     * @param  TIMx Timer instance
;;;1905     * @param  Channel This parameter can be one of the following values:
;;;1906     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1907     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1908     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1909     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1910     * @retval None
;;;1911     */
;;;1912   __STATIC_INLINE void LL_TIM_OC_EnableClear(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1913   {
;;;1914     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1915     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1916     SET_BIT(*pReg, (TIM_CCMR1_OC1CE << SHIFT_TAB_OCxx[iChannel]));
;;;1917   }
;;;1918   
;;;1919   /**
;;;1920     * @brief  Disable clearing the output channel on an external event.
;;;1921     * @note Macro @ref IS_TIM_OCXREF_CLEAR_INSTANCE(TIMx) can be used to check whether
;;;1922     *       or not a timer instance can clear the OCxREF signal on an external event.
;;;1923     * @rmtoll CCMR1        OC1CE          LL_TIM_OC_DisableClear\n
;;;1924     *         CCMR1        OC2CE          LL_TIM_OC_DisableClear\n
;;;1925     *         CCMR2        OC3CE          LL_TIM_OC_DisableClear\n
;;;1926     *         CCMR2        OC4CE          LL_TIM_OC_DisableClear
;;;1927     * @param  TIMx Timer instance
;;;1928     * @param  Channel This parameter can be one of the following values:
;;;1929     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1930     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1931     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1932     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1933     * @retval None
;;;1934     */
;;;1935   __STATIC_INLINE void LL_TIM_OC_DisableClear(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1936   {
;;;1937     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1938     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1939     CLEAR_BIT(*pReg, (TIM_CCMR1_OC1CE << SHIFT_TAB_OCxx[iChannel]));
;;;1940   }
;;;1941   
;;;1942   /**
;;;1943     * @brief  Indicates clearing the output channel on an external event is enabled for the output channel.
;;;1944     * @note This function enables clearing the output channel on an external event.
;;;1945     * @note This function can only be used in Output compare and PWM modes. It does not work in Forced mode.
;;;1946     * @note Macro @ref IS_TIM_OCXREF_CLEAR_INSTANCE(TIMx) can be used to check whether
;;;1947     *       or not a timer instance can clear the OCxREF signal on an external event.
;;;1948     * @rmtoll CCMR1        OC1CE          LL_TIM_OC_IsEnabledClear\n
;;;1949     *         CCMR1        OC2CE          LL_TIM_OC_IsEnabledClear\n
;;;1950     *         CCMR2        OC3CE          LL_TIM_OC_IsEnabledClear\n
;;;1951     *         CCMR2        OC4CE          LL_TIM_OC_IsEnabledClear\n
;;;1952     * @param  TIMx Timer instance
;;;1953     * @param  Channel This parameter can be one of the following values:
;;;1954     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1955     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1956     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1957     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1958     * @retval State of bit (1 or 0).
;;;1959     */
;;;1960   __STATIC_INLINE uint32_t LL_TIM_OC_IsEnabledClear(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1961   {
;;;1962     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1963     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1964     register uint32_t bitfield = TIM_CCMR1_OC1CE << SHIFT_TAB_OCxx[iChannel];
;;;1965     return (READ_BIT(*pReg, bitfield) == bitfield);
;;;1966   }
;;;1967   
;;;1968   /**
;;;1969     * @brief  Set the dead-time delay (delay inserted between the rising edge of the OCxREF signal and the rising edge if the Ocx and OCxN signals).
;;;1970     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;1971     *       dead-time insertion feature is supported by a timer instance.
;;;1972     * @note Helper macro @ref __LL_TIM_CALC_DEADTIME can be used to calculate the DeadTime parameter
;;;1973     * @rmtoll BDTR         DTG           LL_TIM_OC_SetDeadTime
;;;1974     * @param  TIMx Timer instance
;;;1975     * @param  DeadTime between Min_Data=0 and Max_Data=255
;;;1976     * @retval None
;;;1977     */
;;;1978   __STATIC_INLINE void LL_TIM_OC_SetDeadTime(TIM_TypeDef *TIMx, uint32_t DeadTime)
;;;1979   {
;;;1980     MODIFY_REG(TIMx->BDTR, TIM_BDTR_DTG, DeadTime);
;;;1981   }
;;;1982   
;;;1983   /**
;;;1984     * @brief  Set compare value for output channel 1 (TIMx_CCR1).
;;;1985     * @note Macro @ref IS_TIM_CC1_INSTANCE(TIMx) can be used to check whether or not
;;;1986     *       output channel 1 is supported by a timer instance.
;;;1987     * @rmtoll CCR1         CCR1          LL_TIM_OC_SetCompareCH1
;;;1988     * @param  TIMx Timer instance
;;;1989     * @param  CompareValue between Min_Data=0 and Max_Data=65535
;;;1990     * @retval None
;;;1991     */
;;;1992   __STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
;;;1993   {
;;;1994     WRITE_REG(TIMx->CCR1, CompareValue);
;;;1995   }
;;;1996   
;;;1997   /**
;;;1998     * @brief  Set compare value for output channel 2 (TIMx_CCR2).
;;;1999     * @note Macro @ref IS_TIM_CC2_INSTANCE(TIMx) can be used to check whether or not
;;;2000     *       output channel 2 is supported by a timer instance.
;;;2001     * @rmtoll CCR2         CCR2          LL_TIM_OC_SetCompareCH2
;;;2002     * @param  TIMx Timer instance
;;;2003     * @param  CompareValue between Min_Data=0 and Max_Data=65535
;;;2004     * @retval None
;;;2005     */
;;;2006   __STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
;;;2007   {
;;;2008     WRITE_REG(TIMx->CCR2, CompareValue);
;;;2009   }
;;;2010   
;;;2011   /**
;;;2012     * @brief  Set compare value for output channel 3 (TIMx_CCR3).
;;;2013     * @note Macro @ref IS_TIM_CC3_INSTANCE(TIMx) can be used to check whether or not
;;;2014     *       output channel is supported by a timer instance.
;;;2015     * @rmtoll CCR3         CCR3          LL_TIM_OC_SetCompareCH3
;;;2016     * @param  TIMx Timer instance
;;;2017     * @param  CompareValue between Min_Data=0 and Max_Data=65535
;;;2018     * @retval None
;;;2019     */
;;;2020   __STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
;;;2021   {
;;;2022     WRITE_REG(TIMx->CCR3, CompareValue);
;;;2023   }
;;;2024   
;;;2025   /**
;;;2026     * @brief  Set compare value for output channel 4 (TIMx_CCR4).
;;;2027     * @note Macro @ref IS_TIM_CC4_INSTANCE(TIMx) can be used to check whether or not
;;;2028     *       output channel 4 is supported by a timer instance.
;;;2029     * @rmtoll CCR4         CCR4          LL_TIM_OC_SetCompareCH4
;;;2030     * @param  TIMx Timer instance
;;;2031     * @param  CompareValue between Min_Data=0 and Max_Data=65535
;;;2032     * @retval None
;;;2033     */
;;;2034   __STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
;;;2035   {
;;;2036     WRITE_REG(TIMx->CCR4, CompareValue);
;;;2037   }
;;;2038   
;;;2039   /**
;;;2040     * @brief  Get compare value (TIMx_CCR1) set for  output channel 1.
;;;2041     * @note Macro @ref IS_TIM_CC1_INSTANCE(TIMx) can be used to check whether or not
;;;2042     *       output channel 1 is supported by a timer instance.
;;;2043     * @rmtoll CCR1         CCR1          LL_TIM_OC_GetCompareCH1
;;;2044     * @param  TIMx Timer instance
;;;2045     * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
;;;2046     */
;;;2047   __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH1(TIM_TypeDef *TIMx)
;;;2048   {
;;;2049     return (uint32_t)(READ_REG(TIMx->CCR1));
;;;2050   }
;;;2051   
;;;2052   /**
;;;2053     * @brief  Get compare value (TIMx_CCR2) set for  output channel 2.
;;;2054     * @note Macro @ref IS_TIM_CC2_INSTANCE(TIMx) can be used to check whether or not
;;;2055     *       output channel 2 is supported by a timer instance.
;;;2056     * @rmtoll CCR2         CCR2          LL_TIM_OC_GetCompareCH2
;;;2057     * @param  TIMx Timer instance
;;;2058     * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
;;;2059     */
;;;2060   __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH2(TIM_TypeDef *TIMx)
;;;2061   {
;;;2062     return (uint32_t)(READ_REG(TIMx->CCR2));
;;;2063   }
;;;2064   
;;;2065   /**
;;;2066     * @brief  Get compare value (TIMx_CCR3) set for  output channel 3.
;;;2067     * @note Macro @ref IS_TIM_CC3_INSTANCE(TIMx) can be used to check whether or not
;;;2068     *       output channel 3 is supported by a timer instance.
;;;2069     * @rmtoll CCR3         CCR3          LL_TIM_OC_GetCompareCH3
;;;2070     * @param  TIMx Timer instance
;;;2071     * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
;;;2072     */
;;;2073   __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH3(TIM_TypeDef *TIMx)
;;;2074   {
;;;2075     return (uint32_t)(READ_REG(TIMx->CCR3));
;;;2076   }
;;;2077   
;;;2078   /**
;;;2079     * @brief  Get compare value (TIMx_CCR4) set for  output channel 4.
;;;2080     * @note Macro @ref IS_TIM_CC4_INSTANCE(TIMx) can be used to check whether or not
;;;2081     *       output channel 4 is supported by a timer instance.
;;;2082     * @rmtoll CCR4         CCR4          LL_TIM_OC_GetCompareCH4
;;;2083     * @param  TIMx Timer instance
;;;2084     * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
;;;2085     */
;;;2086   __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH4(TIM_TypeDef *TIMx)
;;;2087   {
;;;2088     return (uint32_t)(READ_REG(TIMx->CCR4));
;;;2089   }
;;;2090   
;;;2091   /**
;;;2092     * @}
;;;2093     */
;;;2094   
;;;2095   /** @defgroup TIM_LL_EF_Input_Channel Input channel configuration
;;;2096     * @{
;;;2097     */
;;;2098   /**
;;;2099     * @brief  Configure input channel.
;;;2100     * @rmtoll CCMR1        CC1S          LL_TIM_IC_Config\n
;;;2101     *         CCMR1        IC1PSC        LL_TIM_IC_Config\n
;;;2102     *         CCMR1        IC1F          LL_TIM_IC_Config\n
;;;2103     *         CCMR1        CC2S          LL_TIM_IC_Config\n
;;;2104     *         CCMR1        IC2PSC        LL_TIM_IC_Config\n
;;;2105     *         CCMR1        IC2F          LL_TIM_IC_Config\n
;;;2106     *         CCMR2        CC3S          LL_TIM_IC_Config\n
;;;2107     *         CCMR2        IC3PSC        LL_TIM_IC_Config\n
;;;2108     *         CCMR2        IC3F          LL_TIM_IC_Config\n
;;;2109     *         CCMR2        CC4S          LL_TIM_IC_Config\n
;;;2110     *         CCMR2        IC4PSC        LL_TIM_IC_Config\n
;;;2111     *         CCMR2        IC4F          LL_TIM_IC_Config\n
;;;2112     *         CCER         CC1P          LL_TIM_IC_Config\n
;;;2113     *         CCER         CC1NP         LL_TIM_IC_Config\n
;;;2114     *         CCER         CC2P          LL_TIM_IC_Config\n
;;;2115     *         CCER         CC2NP         LL_TIM_IC_Config\n
;;;2116     *         CCER         CC3P          LL_TIM_IC_Config\n
;;;2117     *         CCER         CC3NP         LL_TIM_IC_Config\n
;;;2118     *         CCER         CC4P          LL_TIM_IC_Config\n
;;;2119     * @param  TIMx Timer instance
;;;2120     * @param  Channel This parameter can be one of the following values:
;;;2121     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2122     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2123     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2124     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2125     * @param  Configuration This parameter must be a combination of all the following values:
;;;2126     *         @arg @ref LL_TIM_ACTIVEINPUT_DIRECTTI or @ref LL_TIM_ACTIVEINPUT_INDIRECTTI or @ref LL_TIM_ACTIVEINPUT_TRC
;;;2127     *         @arg @ref LL_TIM_ICPSC_DIV1 or ... or @ref LL_TIM_ICPSC_DIV8
;;;2128     *         @arg @ref LL_TIM_IC_FILTER_FDIV1 or ... or @ref LL_TIM_IC_FILTER_FDIV32_N8
;;;2129     *         @arg @ref LL_TIM_IC_POLARITY_RISING or @ref LL_TIM_IC_POLARITY_FALLING
;;;2130     * @retval None
;;;2131     */
;;;2132   __STATIC_INLINE void LL_TIM_IC_Config(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Configuration)
;;;2133   {
;;;2134     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2135     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2136     MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F | TIM_CCMR1_IC1PSC | TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]),
;;;2137                ((Configuration >> 16U) & (TIM_CCMR1_IC1F | TIM_CCMR1_IC1PSC | TIM_CCMR1_CC1S))  << SHIFT_TAB_ICxx[iChannel]);
;;;2138     MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
;;;2139                (Configuration & (TIM_CCER_CC1NP | TIM_CCER_CC1P)) << SHIFT_TAB_CCxP[iChannel]);
;;;2140   }
;;;2141   
;;;2142   /**
;;;2143     * @brief  Set the active input.
;;;2144     * @rmtoll CCMR1        CC1S          LL_TIM_IC_SetActiveInput\n
;;;2145     *         CCMR1        CC2S          LL_TIM_IC_SetActiveInput\n
;;;2146     *         CCMR2        CC3S          LL_TIM_IC_SetActiveInput\n
;;;2147     *         CCMR2        CC4S          LL_TIM_IC_SetActiveInput
;;;2148     * @param  TIMx Timer instance
;;;2149     * @param  Channel This parameter can be one of the following values:
;;;2150     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2151     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2152     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2153     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2154     * @param  ICActiveInput This parameter can be one of the following values:
;;;2155     *         @arg @ref LL_TIM_ACTIVEINPUT_DIRECTTI
;;;2156     *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
;;;2157     *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
;;;2158     * @retval None
;;;2159     */
;;;2160   __STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiveInput)
;;;2161   {
;;;2162     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2163     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2164     MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
;;;2165   }
;;;2166   
;;;2167   /**
;;;2168     * @brief  Get the current active input.
;;;2169     * @rmtoll CCMR1        CC1S          LL_TIM_IC_GetActiveInput\n
;;;2170     *         CCMR1        CC2S          LL_TIM_IC_GetActiveInput\n
;;;2171     *         CCMR2        CC3S          LL_TIM_IC_GetActiveInput\n
;;;2172     *         CCMR2        CC4S          LL_TIM_IC_GetActiveInput
;;;2173     * @param  TIMx Timer instance
;;;2174     * @param  Channel This parameter can be one of the following values:
;;;2175     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2176     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2177     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2178     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2179     * @retval Returned value can be one of the following values:
;;;2180     *         @arg @ref LL_TIM_ACTIVEINPUT_DIRECTTI
;;;2181     *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
;;;2182     *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
;;;2183     */
;;;2184   __STATIC_INLINE uint32_t LL_TIM_IC_GetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel)
;;;2185   {
;;;2186     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2187     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2188     return ((READ_BIT(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iChannel]) << 16U);
;;;2189   }
;;;2190   
;;;2191   /**
;;;2192     * @brief  Set the prescaler of input channel.
;;;2193     * @rmtoll CCMR1        IC1PSC        LL_TIM_IC_SetPrescaler\n
;;;2194     *         CCMR1        IC2PSC        LL_TIM_IC_SetPrescaler\n
;;;2195     *         CCMR2        IC3PSC        LL_TIM_IC_SetPrescaler\n
;;;2196     *         CCMR2        IC4PSC        LL_TIM_IC_SetPrescaler
;;;2197     * @param  TIMx Timer instance
;;;2198     * @param  Channel This parameter can be one of the following values:
;;;2199     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2200     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2201     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2202     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2203     * @param  ICPrescaler This parameter can be one of the following values:
;;;2204     *         @arg @ref LL_TIM_ICPSC_DIV1
;;;2205     *         @arg @ref LL_TIM_ICPSC_DIV2
;;;2206     *         @arg @ref LL_TIM_ICPSC_DIV4
;;;2207     *         @arg @ref LL_TIM_ICPSC_DIV8
;;;2208     * @retval None
;;;2209     */
;;;2210   __STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
;;;2211   {
;;;2212     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2213     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2214     MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
;;;2215   }
;;;2216   
;;;2217   /**
;;;2218     * @brief  Get the current prescaler value acting on an  input channel.
;;;2219     * @rmtoll CCMR1        IC1PSC        LL_TIM_IC_GetPrescaler\n
;;;2220     *         CCMR1        IC2PSC        LL_TIM_IC_GetPrescaler\n
;;;2221     *         CCMR2        IC3PSC        LL_TIM_IC_GetPrescaler\n
;;;2222     *         CCMR2        IC4PSC        LL_TIM_IC_GetPrescaler
;;;2223     * @param  TIMx Timer instance
;;;2224     * @param  Channel This parameter can be one of the following values:
;;;2225     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2226     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2227     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2228     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2229     * @retval Returned value can be one of the following values:
;;;2230     *         @arg @ref LL_TIM_ICPSC_DIV1
;;;2231     *         @arg @ref LL_TIM_ICPSC_DIV2
;;;2232     *         @arg @ref LL_TIM_ICPSC_DIV4
;;;2233     *         @arg @ref LL_TIM_ICPSC_DIV8
;;;2234     */
;;;2235   __STATIC_INLINE uint32_t LL_TIM_IC_GetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel)
;;;2236   {
;;;2237     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2238     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2239     return ((READ_BIT(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iChannel]) << 16U);
;;;2240   }
;;;2241   
;;;2242   /**
;;;2243     * @brief  Set the input filter duration.
;;;2244     * @rmtoll CCMR1        IC1F          LL_TIM_IC_SetFilter\n
;;;2245     *         CCMR1        IC2F          LL_TIM_IC_SetFilter\n
;;;2246     *         CCMR2        IC3F          LL_TIM_IC_SetFilter\n
;;;2247     *         CCMR2        IC4F          LL_TIM_IC_SetFilter
;;;2248     * @param  TIMx Timer instance
;;;2249     * @param  Channel This parameter can be one of the following values:
;;;2250     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2251     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2252     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2253     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2254     * @param  ICFilter This parameter can be one of the following values:
;;;2255     *         @arg @ref LL_TIM_IC_FILTER_FDIV1
;;;2256     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N2
;;;2257     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N4
;;;2258     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N8
;;;2259     *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N6
;;;2260     *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N8
;;;2261     *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N6
;;;2262     *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N8
;;;2263     *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N6
;;;2264     *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N8
;;;2265     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N5
;;;2266     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N6
;;;2267     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N8
;;;2268     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N5
;;;2269     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
;;;2270     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
;;;2271     * @retval None
;;;2272     */
;;;2273   __STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
;;;2274   {
;;;2275     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2276     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2277     MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
;;;2278   }
;;;2279   
;;;2280   /**
;;;2281     * @brief  Get the input filter duration.
;;;2282     * @rmtoll CCMR1        IC1F          LL_TIM_IC_GetFilter\n
;;;2283     *         CCMR1        IC2F          LL_TIM_IC_GetFilter\n
;;;2284     *         CCMR2        IC3F          LL_TIM_IC_GetFilter\n
;;;2285     *         CCMR2        IC4F          LL_TIM_IC_GetFilter
;;;2286     * @param  TIMx Timer instance
;;;2287     * @param  Channel This parameter can be one of the following values:
;;;2288     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2289     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2290     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2291     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2292     * @retval Returned value can be one of the following values:
;;;2293     *         @arg @ref LL_TIM_IC_FILTER_FDIV1
;;;2294     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N2
;;;2295     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N4
;;;2296     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N8
;;;2297     *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N6
;;;2298     *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N8
;;;2299     *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N6
;;;2300     *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N8
;;;2301     *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N6
;;;2302     *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N8
;;;2303     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N5
;;;2304     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N6
;;;2305     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N8
;;;2306     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N5
;;;2307     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
;;;2308     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
;;;2309     */
;;;2310   __STATIC_INLINE uint32_t LL_TIM_IC_GetFilter(TIM_TypeDef *TIMx, uint32_t Channel)
;;;2311   {
;;;2312     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2313     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2314     return ((READ_BIT(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iChannel]) << 16U);
;;;2315   }
;;;2316   
;;;2317   /**
;;;2318     * @brief  Set the input channel polarity.
;;;2319     * @rmtoll CCER         CC1P          LL_TIM_IC_SetPolarity\n
;;;2320     *         CCER         CC1NP         LL_TIM_IC_SetPolarity\n
;;;2321     *         CCER         CC2P          LL_TIM_IC_SetPolarity\n
;;;2322     *         CCER         CC2NP         LL_TIM_IC_SetPolarity\n
;;;2323     *         CCER         CC3P          LL_TIM_IC_SetPolarity\n
;;;2324     *         CCER         CC3NP         LL_TIM_IC_SetPolarity\n
;;;2325     *         CCER         CC4P          LL_TIM_IC_SetPolarity\n
;;;2326     * @param  TIMx Timer instance
;;;2327     * @param  Channel This parameter can be one of the following values:
;;;2328     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2329     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2330     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2331     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2332     * @param  ICPolarity This parameter can be one of the following values:
;;;2333     *         @arg @ref LL_TIM_IC_POLARITY_RISING
;;;2334     *         @arg @ref LL_TIM_IC_POLARITY_FALLING
;;;2335     * @retval None
;;;2336     */
;;;2337   __STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
;;;2338   {
;;;2339     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2340     MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
;;;2341                ICPolarity << SHIFT_TAB_CCxP[iChannel]);
;;;2342   }
;;;2343   
;;;2344   /**
;;;2345     * @brief  Get the current input channel polarity.
;;;2346     * @rmtoll CCER         CC1P          LL_TIM_IC_GetPolarity\n
;;;2347     *         CCER         CC1NP         LL_TIM_IC_GetPolarity\n
;;;2348     *         CCER         CC2P          LL_TIM_IC_GetPolarity\n
;;;2349     *         CCER         CC2NP         LL_TIM_IC_GetPolarity\n
;;;2350     *         CCER         CC3P          LL_TIM_IC_GetPolarity\n
;;;2351     *         CCER         CC3NP         LL_TIM_IC_GetPolarity\n
;;;2352     *         CCER         CC4P          LL_TIM_IC_GetPolarity\n
;;;2353     * @param  TIMx Timer instance
;;;2354     * @param  Channel This parameter can be one of the following values:
;;;2355     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2356     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2357     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2358     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2359     * @retval Returned value can be one of the following values:
;;;2360     *         @arg @ref LL_TIM_IC_POLARITY_RISING
;;;2361     *         @arg @ref LL_TIM_IC_POLARITY_FALLING
;;;2362     */
;;;2363   __STATIC_INLINE uint32_t LL_TIM_IC_GetPolarity(TIM_TypeDef *TIMx, uint32_t Channel)
;;;2364   {
;;;2365     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2366     return (READ_BIT(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel])) >>
;;;2367             SHIFT_TAB_CCxP[iChannel]);
;;;2368   }
;;;2369   
;;;2370   /**
;;;2371     * @brief  Connect the TIMx_CH1, CH2 and CH3 pins  to the TI1 input (XOR combination).
;;;2372     * @note Macro @ref IS_TIM_XOR_INSTANCE(TIMx) can be used to check whether or not
;;;2373     *       a timer instance provides an XOR input.
;;;2374     * @rmtoll CR2          TI1S          LL_TIM_IC_EnableXORCombination
;;;2375     * @param  TIMx Timer instance
;;;2376     * @retval None
;;;2377     */
;;;2378   __STATIC_INLINE void LL_TIM_IC_EnableXORCombination(TIM_TypeDef *TIMx)
;;;2379   {
;;;2380     SET_BIT(TIMx->CR2, TIM_CR2_TI1S);
;;;2381   }
;;;2382   
;;;2383   /**
;;;2384     * @brief  Disconnect the TIMx_CH1, CH2 and CH3 pins  from the TI1 input.
;;;2385     * @note Macro @ref IS_TIM_XOR_INSTANCE(TIMx) can be used to check whether or not
;;;2386     *       a timer instance provides an XOR input.
;;;2387     * @rmtoll CR2          TI1S          LL_TIM_IC_DisableXORCombination
;;;2388     * @param  TIMx Timer instance
;;;2389     * @retval None
;;;2390     */
;;;2391   __STATIC_INLINE void LL_TIM_IC_DisableXORCombination(TIM_TypeDef *TIMx)
;;;2392   {
;;;2393     CLEAR_BIT(TIMx->CR2, TIM_CR2_TI1S);
;;;2394   }
;;;2395   
;;;2396   /**
;;;2397     * @brief  Indicates whether the TIMx_CH1, CH2 and CH3 pins are connectected to the TI1 input.
;;;2398     * @note Macro @ref IS_TIM_XOR_INSTANCE(TIMx) can be used to check whether or not
;;;2399     * a timer instance provides an XOR input.
;;;2400     * @rmtoll CR2          TI1S          LL_TIM_IC_IsEnabledXORCombination
;;;2401     * @param  TIMx Timer instance
;;;2402     * @retval State of bit (1 or 0).
;;;2403     */
;;;2404   __STATIC_INLINE uint32_t LL_TIM_IC_IsEnabledXORCombination(TIM_TypeDef *TIMx)
;;;2405   {
;;;2406     return (READ_BIT(TIMx->CR2, TIM_CR2_TI1S) == (TIM_CR2_TI1S));
;;;2407   }
;;;2408   
;;;2409   /**
;;;2410     * @brief  Get captured value for input channel 1.
;;;2411     * @note Macro @ref IS_TIM_CC1_INSTANCE(TIMx) can be used to check whether or not
;;;2412     *       input channel 1 is supported by a timer instance.
;;;2413     * @rmtoll CCR1         CCR1          LL_TIM_IC_GetCaptureCH1
;;;2414     * @param  TIMx Timer instance
;;;2415     * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
;;;2416     */
;;;2417   __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH1(TIM_TypeDef *TIMx)
;;;2418   {
;;;2419     return (uint32_t)(READ_REG(TIMx->CCR1));
;;;2420   }
;;;2421   
;;;2422   /**
;;;2423     * @brief  Get captured value for input channel 2.
;;;2424     * @note Macro @ref IS_TIM_CC2_INSTANCE(TIMx) can be used to check whether or not
;;;2425     *       input channel 2 is supported by a timer instance.
;;;2426     * @rmtoll CCR2         CCR2          LL_TIM_IC_GetCaptureCH2
;;;2427     * @param  TIMx Timer instance
;;;2428     * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
;;;2429     */
;;;2430   __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH2(TIM_TypeDef *TIMx)
;;;2431   {
;;;2432     return (uint32_t)(READ_REG(TIMx->CCR2));
;;;2433   }
;;;2434   
;;;2435   /**
;;;2436     * @brief  Get captured value for input channel 3.
;;;2437     * @note Macro @ref IS_TIM_CC3_INSTANCE(TIMx) can be used to check whether or not
;;;2438     *       input channel 3 is supported by a timer instance.
;;;2439     * @rmtoll CCR3         CCR3          LL_TIM_IC_GetCaptureCH3
;;;2440     * @param  TIMx Timer instance
;;;2441     * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
;;;2442     */
;;;2443   __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH3(TIM_TypeDef *TIMx)
;;;2444   {
;;;2445     return (uint32_t)(READ_REG(TIMx->CCR3));
;;;2446   }
;;;2447   
;;;2448   /**
;;;2449     * @brief  Get captured value for input channel 4.
;;;2450     * @note Macro @ref IS_TIM_CC4_INSTANCE(TIMx) can be used to check whether or not
;;;2451     *       input channel 4 is supported by a timer instance.
;;;2452     * @rmtoll CCR4         CCR4          LL_TIM_IC_GetCaptureCH4
;;;2453     * @param  TIMx Timer instance
;;;2454     * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
;;;2455     */
;;;2456   __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH4(TIM_TypeDef *TIMx)
;;;2457   {
;;;2458     return (uint32_t)(READ_REG(TIMx->CCR4));
;;;2459   }
;;;2460   
;;;2461   /**
;;;2462     * @}
;;;2463     */
;;;2464   
;;;2465   /** @defgroup TIM_LL_EF_Clock_Selection Counter clock selection
;;;2466     * @{
;;;2467     */
;;;2468   /**
;;;2469     * @brief  Enable external clock mode 2.
;;;2470     * @note When external clock mode 2 is enabled the counter is clocked by any active edge on the ETRF signal.
;;;2471     * @note Macro @ref IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
;;;2472     *       whether or not a timer instance supports external clock mode2.
;;;2473     * @rmtoll SMCR         ECE           LL_TIM_EnableExternalClock
;;;2474     * @param  TIMx Timer instance
;;;2475     * @retval None
;;;2476     */
;;;2477   __STATIC_INLINE void LL_TIM_EnableExternalClock(TIM_TypeDef *TIMx)
;;;2478   {
;;;2479     SET_BIT(TIMx->SMCR, TIM_SMCR_ECE);
;;;2480   }
;;;2481   
;;;2482   /**
;;;2483     * @brief  Disable external clock mode 2.
;;;2484     * @note Macro @ref IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
;;;2485     *       whether or not a timer instance supports external clock mode2.
;;;2486     * @rmtoll SMCR         ECE           LL_TIM_DisableExternalClock
;;;2487     * @param  TIMx Timer instance
;;;2488     * @retval None
;;;2489     */
;;;2490   __STATIC_INLINE void LL_TIM_DisableExternalClock(TIM_TypeDef *TIMx)
;;;2491   {
;;;2492     CLEAR_BIT(TIMx->SMCR, TIM_SMCR_ECE);
;;;2493   }
;;;2494   
;;;2495   /**
;;;2496     * @brief  Indicate whether external clock mode 2 is enabled.
;;;2497     * @note Macro @ref IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
;;;2498     *       whether or not a timer instance supports external clock mode2.
;;;2499     * @rmtoll SMCR         ECE           LL_TIM_IsEnabledExternalClock
;;;2500     * @param  TIMx Timer instance
;;;2501     * @retval State of bit (1 or 0).
;;;2502     */
;;;2503   __STATIC_INLINE uint32_t LL_TIM_IsEnabledExternalClock(TIM_TypeDef *TIMx)
;;;2504   {
;;;2505     return (READ_BIT(TIMx->SMCR, TIM_SMCR_ECE) == (TIM_SMCR_ECE));
;;;2506   }
;;;2507   
;;;2508   /**
;;;2509     * @brief  Set the clock source of the counter clock.
;;;2510     * @note when selected clock source is external clock mode 1, the timer input
;;;2511     *       the external clock is applied is selected by calling the @ref LL_TIM_SetTriggerInput()
;;;2512     *       function. This timer input must be configured by calling
;;;2513     *       the @ref LL_TIM_IC_Config() function.
;;;2514     * @note Macro @ref IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(TIMx) can be used to check
;;;2515     *       whether or not a timer instance supports external clock mode1.
;;;2516     * @note Macro @ref IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
;;;2517     *       whether or not a timer instance supports external clock mode2.
;;;2518     * @rmtoll SMCR         SMS           LL_TIM_SetClockSource\n
;;;2519     *         SMCR         ECE           LL_TIM_SetClockSource
;;;2520     * @param  TIMx Timer instance
;;;2521     * @param  ClockSource This parameter can be one of the following values:
;;;2522     *         @arg @ref LL_TIM_CLOCKSOURCE_INTERNAL
;;;2523     *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
;;;2524     *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
;;;2525     * @retval None
;;;2526     */
;;;2527   __STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
;;;2528   {
;;;2529     MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
;;;2530   }
;;;2531   
;;;2532   /**
;;;2533     * @brief  Set the encoder interface mode.
;;;2534     * @note Macro @ref IS_TIM_ENCODER_INTERFACE_INSTANCE(TIMx) can be used to check
;;;2535     *       whether or not a timer instance supports the encoder mode.
;;;2536     * @rmtoll SMCR         SMS           LL_TIM_SetEncoderMode
;;;2537     * @param  TIMx Timer instance
;;;2538     * @param  EncoderMode This parameter can be one of the following values:
;;;2539     *         @arg @ref LL_TIM_ENCODERMODE_X2_TI1
;;;2540     *         @arg @ref LL_TIM_ENCODERMODE_X2_TI2
;;;2541     *         @arg @ref LL_TIM_ENCODERMODE_X4_TI12
;;;2542     * @retval None
;;;2543     */
;;;2544   __STATIC_INLINE void LL_TIM_SetEncoderMode(TIM_TypeDef *TIMx, uint32_t EncoderMode)
;;;2545   {
;;;2546     MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
;;;2547   }
;;;2548   
;;;2549   /**
;;;2550     * @}
;;;2551     */
;;;2552   
;;;2553   /** @defgroup TIM_LL_EF_Timer_Synchronization Timer synchronisation configuration
;;;2554     * @{
;;;2555     */
;;;2556   /**
;;;2557     * @brief  Set the trigger output (TRGO) used for timer synchronization .
;;;2558     * @note Macro @ref IS_TIM_MASTER_INSTANCE(TIMx) can be used to check
;;;2559     *       whether or not a timer instance can operate as a master timer.
;;;2560     * @rmtoll CR2          MMS           LL_TIM_SetTriggerOutput
;;;2561     * @param  TIMx Timer instance
;;;2562     * @param  TimerSynchronization This parameter can be one of the following values:
;;;2563     *         @arg @ref LL_TIM_TRGO_RESET
;;;2564     *         @arg @ref LL_TIM_TRGO_ENABLE
;;;2565     *         @arg @ref LL_TIM_TRGO_UPDATE
;;;2566     *         @arg @ref LL_TIM_TRGO_CC1IF
;;;2567     *         @arg @ref LL_TIM_TRGO_OC1REF
;;;2568     *         @arg @ref LL_TIM_TRGO_OC2REF
;;;2569     *         @arg @ref LL_TIM_TRGO_OC3REF
;;;2570     *         @arg @ref LL_TIM_TRGO_OC4REF
;;;2571     * @retval None
;;;2572     */
;;;2573   __STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
;;;2574   {
;;;2575     MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
;;;2576   }
;;;2577   
;;;2578   /**
;;;2579     * @brief  Set the synchronization mode of a slave timer.
;;;2580     * @note Macro @ref IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
;;;2581     *       a timer instance can operate as a slave timer.
;;;2582     * @rmtoll SMCR         SMS           LL_TIM_SetSlaveMode
;;;2583     * @param  TIMx Timer instance
;;;2584     * @param  SlaveMode This parameter can be one of the following values:
;;;2585     *         @arg @ref LL_TIM_SLAVEMODE_DISABLED
;;;2586     *         @arg @ref LL_TIM_SLAVEMODE_RESET
;;;2587     *         @arg @ref LL_TIM_SLAVEMODE_GATED
;;;2588     *         @arg @ref LL_TIM_SLAVEMODE_TRIGGER
;;;2589     * @retval None
;;;2590     */
;;;2591   __STATIC_INLINE void LL_TIM_SetSlaveMode(TIM_TypeDef *TIMx, uint32_t SlaveMode)
;;;2592   {
;;;2593     MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
;;;2594   }
;;;2595   
;;;2596   /**
;;;2597     * @brief  Set the selects the trigger input to be used to synchronize the counter.
;;;2598     * @note Macro @ref IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
;;;2599     *       a timer instance can operate as a slave timer.
;;;2600     * @rmtoll SMCR         TS            LL_TIM_SetTriggerInput
;;;2601     * @param  TIMx Timer instance
;;;2602     * @param  TriggerInput This parameter can be one of the following values:
;;;2603     *         @arg @ref LL_TIM_TS_ITR0
;;;2604     *         @arg @ref LL_TIM_TS_ITR1
;;;2605     *         @arg @ref LL_TIM_TS_ITR2
;;;2606     *         @arg @ref LL_TIM_TS_ITR3
;;;2607     *         @arg @ref LL_TIM_TS_TI1F_ED
;;;2608     *         @arg @ref LL_TIM_TS_TI1FP1
;;;2609     *         @arg @ref LL_TIM_TS_TI2FP2
;;;2610     *         @arg @ref LL_TIM_TS_ETRF
;;;2611     * @retval None
;;;2612     */
;;;2613   __STATIC_INLINE void LL_TIM_SetTriggerInput(TIM_TypeDef *TIMx, uint32_t TriggerInput)
;;;2614   {
;;;2615     MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
;;;2616   }
;;;2617   
;;;2618   /**
;;;2619     * @brief  Enable the Master/Slave mode.
;;;2620     * @note Macro @ref IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
;;;2621     *       a timer instance can operate as a slave timer.
;;;2622     * @rmtoll SMCR         MSM           LL_TIM_EnableMasterSlaveMode
;;;2623     * @param  TIMx Timer instance
;;;2624     * @retval None
;;;2625     */
;;;2626   __STATIC_INLINE void LL_TIM_EnableMasterSlaveMode(TIM_TypeDef *TIMx)
;;;2627   {
;;;2628     SET_BIT(TIMx->SMCR, TIM_SMCR_MSM);
;;;2629   }
;;;2630   
;;;2631   /**
;;;2632     * @brief  Disable the Master/Slave mode.
;;;2633     * @note Macro @ref IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
;;;2634     *       a timer instance can operate as a slave timer.
;;;2635     * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
;;;2636     * @param  TIMx Timer instance
;;;2637     * @retval None
;;;2638     */
;;;2639   __STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
;;;2640   {
;;;2641     CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
;;;2642   }
;;;2643   
;;;2644   /**
;;;2645     * @brief Indicates whether the Master/Slave mode is enabled.
;;;2646     * @note Macro @ref IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
;;;2647     * a timer instance can operate as a slave timer.
;;;2648     * @rmtoll SMCR         MSM           LL_TIM_IsEnabledMasterSlaveMode
;;;2649     * @param  TIMx Timer instance
;;;2650     * @retval State of bit (1 or 0).
;;;2651     */
;;;2652   __STATIC_INLINE uint32_t LL_TIM_IsEnabledMasterSlaveMode(TIM_TypeDef *TIMx)
;;;2653   {
;;;2654     return (READ_BIT(TIMx->SMCR, TIM_SMCR_MSM) == (TIM_SMCR_MSM));
;;;2655   }
;;;2656   
;;;2657   /**
;;;2658     * @brief  Configure the external trigger (ETR) input.
;;;2659     * @note Macro @ref IS_TIM_ETR_INSTANCE(TIMx) can be used to check whether or not
;;;2660     *       a timer instance provides an external trigger input.
;;;2661     * @rmtoll SMCR         ETP           LL_TIM_ConfigETR\n
;;;2662     *         SMCR         ETPS          LL_TIM_ConfigETR\n
;;;2663     *         SMCR         ETF           LL_TIM_ConfigETR
;;;2664     * @param  TIMx Timer instance
;;;2665     * @param  ETRPolarity This parameter can be one of the following values:
;;;2666     *         @arg @ref LL_TIM_ETR_POLARITY_NONINVERTED
;;;2667     *         @arg @ref LL_TIM_ETR_POLARITY_INVERTED
;;;2668     * @param  ETRPrescaler This parameter can be one of the following values:
;;;2669     *         @arg @ref LL_TIM_ETR_PRESCALER_DIV1
;;;2670     *         @arg @ref LL_TIM_ETR_PRESCALER_DIV2
;;;2671     *         @arg @ref LL_TIM_ETR_PRESCALER_DIV4
;;;2672     *         @arg @ref LL_TIM_ETR_PRESCALER_DIV8
;;;2673     * @param  ETRFilter This parameter can be one of the following values:
;;;2674     *         @arg @ref LL_TIM_ETR_FILTER_FDIV1
;;;2675     *         @arg @ref LL_TIM_ETR_FILTER_FDIV1_N2
;;;2676     *         @arg @ref LL_TIM_ETR_FILTER_FDIV1_N4
;;;2677     *         @arg @ref LL_TIM_ETR_FILTER_FDIV1_N8
;;;2678     *         @arg @ref LL_TIM_ETR_FILTER_FDIV2_N6
;;;2679     *         @arg @ref LL_TIM_ETR_FILTER_FDIV2_N8
;;;2680     *         @arg @ref LL_TIM_ETR_FILTER_FDIV4_N6
;;;2681     *         @arg @ref LL_TIM_ETR_FILTER_FDIV4_N8
;;;2682     *         @arg @ref LL_TIM_ETR_FILTER_FDIV8_N6
;;;2683     *         @arg @ref LL_TIM_ETR_FILTER_FDIV8_N8
;;;2684     *         @arg @ref LL_TIM_ETR_FILTER_FDIV16_N5
;;;2685     *         @arg @ref LL_TIM_ETR_FILTER_FDIV16_N6
;;;2686     *         @arg @ref LL_TIM_ETR_FILTER_FDIV16_N8
;;;2687     *         @arg @ref LL_TIM_ETR_FILTER_FDIV32_N5
;;;2688     *         @arg @ref LL_TIM_ETR_FILTER_FDIV32_N6
;;;2689     *         @arg @ref LL_TIM_ETR_FILTER_FDIV32_N8
;;;2690     * @retval None
;;;2691     */
;;;2692   __STATIC_INLINE void LL_TIM_ConfigETR(TIM_TypeDef *TIMx, uint32_t ETRPolarity, uint32_t ETRPrescaler,
;;;2693                                         uint32_t ETRFilter)
;;;2694   {
;;;2695     MODIFY_REG(TIMx->SMCR, TIM_SMCR_ETP | TIM_SMCR_ETPS | TIM_SMCR_ETF, ETRPolarity | ETRPrescaler | ETRFilter);
;;;2696   }
;;;2697   
;;;2698   /**
;;;2699     * @}
;;;2700     */
;;;2701   
;;;2702   /** @defgroup TIM_LL_EF_Break_Function Break function configuration
;;;2703     * @{
;;;2704     */
;;;2705   /**
;;;2706     * @brief  Enable the break function.
;;;2707     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;2708     *       a timer instance provides a break input.
;;;2709     * @rmtoll BDTR         BKE           LL_TIM_EnableBRK
;;;2710     * @param  TIMx Timer instance
;;;2711     * @retval None
;;;2712     */
;;;2713   __STATIC_INLINE void LL_TIM_EnableBRK(TIM_TypeDef *TIMx)
;;;2714   {
;;;2715     SET_BIT(TIMx->BDTR, TIM_BDTR_BKE);
;;;2716   }
;;;2717   
;;;2718   /**
;;;2719     * @brief  Disable the break function.
;;;2720     * @rmtoll BDTR         BKE           LL_TIM_DisableBRK
;;;2721     * @param  TIMx Timer instance
;;;2722     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;2723     *       a timer instance provides a break input.
;;;2724     * @retval None
;;;2725     */
;;;2726   __STATIC_INLINE void LL_TIM_DisableBRK(TIM_TypeDef *TIMx)
;;;2727   {
;;;2728     CLEAR_BIT(TIMx->BDTR, TIM_BDTR_BKE);
;;;2729   }
;;;2730   
;;;2731   /**
;;;2732     * @brief  Configure the break input.
;;;2733     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;2734     *       a timer instance provides a break input.
;;;2735     * @rmtoll BDTR         BKP           LL_TIM_ConfigBRK
;;;2736     * @param  TIMx Timer instance
;;;2737     * @param  BreakPolarity This parameter can be one of the following values:
;;;2738     *         @arg @ref LL_TIM_BREAK_POLARITY_LOW
;;;2739     *         @arg @ref LL_TIM_BREAK_POLARITY_HIGH
;;;2740     * @retval None
;;;2741     */
;;;2742   __STATIC_INLINE void LL_TIM_ConfigBRK(TIM_TypeDef *TIMx, uint32_t BreakPolarity)
;;;2743   {
;;;2744     MODIFY_REG(TIMx->BDTR, TIM_BDTR_BKP, BreakPolarity);
;;;2745   }
;;;2746   
;;;2747   /**
;;;2748     * @brief  Select the outputs off state (enabled v.s. disabled) in Idle and Run modes.
;;;2749     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;2750     *       a timer instance provides a break input.
;;;2751     * @rmtoll BDTR         OSSI          LL_TIM_SetOffStates\n
;;;2752     *         BDTR         OSSR          LL_TIM_SetOffStates
;;;2753     * @param  TIMx Timer instance
;;;2754     * @param  OffStateIdle This parameter can be one of the following values:
;;;2755     *         @arg @ref LL_TIM_OSSI_DISABLE
;;;2756     *         @arg @ref LL_TIM_OSSI_ENABLE
;;;2757     * @param  OffStateRun This parameter can be one of the following values:
;;;2758     *         @arg @ref LL_TIM_OSSR_DISABLE
;;;2759     *         @arg @ref LL_TIM_OSSR_ENABLE
;;;2760     * @retval None
;;;2761     */
;;;2762   __STATIC_INLINE void LL_TIM_SetOffStates(TIM_TypeDef *TIMx, uint32_t OffStateIdle, uint32_t OffStateRun)
;;;2763   {
;;;2764     MODIFY_REG(TIMx->BDTR, TIM_BDTR_OSSI | TIM_BDTR_OSSR, OffStateIdle | OffStateRun);
;;;2765   }
;;;2766   
;;;2767   /**
;;;2768     * @brief  Enable automatic output (MOE can be set by software or automatically when a break input is active).
;;;2769     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;2770     *       a timer instance provides a break input.
;;;2771     * @rmtoll BDTR         AOE           LL_TIM_EnableAutomaticOutput
;;;2772     * @param  TIMx Timer instance
;;;2773     * @retval None
;;;2774     */
;;;2775   __STATIC_INLINE void LL_TIM_EnableAutomaticOutput(TIM_TypeDef *TIMx)
;;;2776   {
;;;2777     SET_BIT(TIMx->BDTR, TIM_BDTR_AOE);
;;;2778   }
;;;2779   
;;;2780   /**
;;;2781     * @brief  Disable automatic output (MOE can be set only by software).
;;;2782     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;2783     *       a timer instance provides a break input.
;;;2784     * @rmtoll BDTR         AOE           LL_TIM_DisableAutomaticOutput
;;;2785     * @param  TIMx Timer instance
;;;2786     * @retval None
;;;2787     */
;;;2788   __STATIC_INLINE void LL_TIM_DisableAutomaticOutput(TIM_TypeDef *TIMx)
;;;2789   {
;;;2790     CLEAR_BIT(TIMx->BDTR, TIM_BDTR_AOE);
;;;2791   }
;;;2792   
;;;2793   /**
;;;2794     * @brief  Indicate whether automatic output is enabled.
;;;2795     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;2796     *       a timer instance provides a break input.
;;;2797     * @rmtoll BDTR         AOE           LL_TIM_IsEnabledAutomaticOutput
;;;2798     * @param  TIMx Timer instance
;;;2799     * @retval State of bit (1 or 0).
;;;2800     */
;;;2801   __STATIC_INLINE uint32_t LL_TIM_IsEnabledAutomaticOutput(TIM_TypeDef *TIMx)
;;;2802   {
;;;2803     return (READ_BIT(TIMx->BDTR, TIM_BDTR_AOE) == (TIM_BDTR_AOE));
;;;2804   }
;;;2805   
;;;2806   /**
;;;2807     * @brief  Enable the outputs (set the MOE bit in TIMx_BDTR register).
;;;2808     * @note The MOE bit in TIMx_BDTR register allows to enable /disable the outputs by
;;;2809     *       software and is reset in case of break or break2 event
;;;2810     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;2811     *       a timer instance provides a break input.
;;;2812     * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
;;;2813     * @param  TIMx Timer instance
;;;2814     * @retval None
;;;2815     */
;;;2816   __STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
;;;2817   {
;;;2818     SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
;;;2819   }
;;;2820   
;;;2821   /**
;;;2822     * @brief  Disable the outputs (reset the MOE bit in TIMx_BDTR register).
;;;2823     * @note The MOE bit in TIMx_BDTR register allows to enable /disable the outputs by
;;;2824     *       software and is reset in case of break or break2 event.
;;;2825     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;2826     *       a timer instance provides a break input.
;;;2827     * @rmtoll BDTR         MOE           LL_TIM_DisableAllOutputs
;;;2828     * @param  TIMx Timer instance
;;;2829     * @retval None
;;;2830     */
;;;2831   __STATIC_INLINE void LL_TIM_DisableAllOutputs(TIM_TypeDef *TIMx)
;;;2832   {
;;;2833     CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
;;;2834   }
;;;2835   
;;;2836   /**
;;;2837     * @brief  Indicates whether outputs are enabled.
;;;2838     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;2839     *       a timer instance provides a break input.
;;;2840     * @rmtoll BDTR         MOE           LL_TIM_IsEnabledAllOutputs
;;;2841     * @param  TIMx Timer instance
;;;2842     * @retval State of bit (1 or 0).
;;;2843     */
;;;2844   __STATIC_INLINE uint32_t LL_TIM_IsEnabledAllOutputs(TIM_TypeDef *TIMx)
;;;2845   {
;;;2846     return (READ_BIT(TIMx->BDTR, TIM_BDTR_MOE) == (TIM_BDTR_MOE));
;;;2847   }
;;;2848   
;;;2849   /**
;;;2850     * @}
;;;2851     */
;;;2852   
;;;2853   /** @defgroup TIM_LL_EF_DMA_Burst_Mode DMA burst mode configuration
;;;2854     * @{
;;;2855     */
;;;2856   /**
;;;2857     * @brief  Configures the timer DMA burst feature.
;;;2858     * @note Macro @ref IS_TIM_DMABURST_INSTANCE(TIMx) can be used to check whether or
;;;2859     *       not a timer instance supports the DMA burst mode.
;;;2860     * @rmtoll DCR          DBL           LL_TIM_ConfigDMABurst\n
;;;2861     *         DCR          DBA           LL_TIM_ConfigDMABurst
;;;2862     * @param  TIMx Timer instance
;;;2863     * @param  DMABurstBaseAddress This parameter can be one of the following values:
;;;2864     *         @arg @ref LL_TIM_DMABURST_BASEADDR_CR1
;;;2865     *         @arg @ref LL_TIM_DMABURST_BASEADDR_CR2
;;;2866     *         @arg @ref LL_TIM_DMABURST_BASEADDR_SMCR
;;;2867     *         @arg @ref LL_TIM_DMABURST_BASEADDR_DIER
;;;2868     *         @arg @ref LL_TIM_DMABURST_BASEADDR_SR
;;;2869     *         @arg @ref LL_TIM_DMABURST_BASEADDR_EGR
;;;2870     *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCMR1
;;;2871     *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCMR2
;;;2872     *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCER
;;;2873     *         @arg @ref LL_TIM_DMABURST_BASEADDR_CNT
;;;2874     *         @arg @ref LL_TIM_DMABURST_BASEADDR_PSC
;;;2875     *         @arg @ref LL_TIM_DMABURST_BASEADDR_ARR
;;;2876     *         @arg @ref LL_TIM_DMABURST_BASEADDR_RCR
;;;2877     *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCR1
;;;2878     *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCR2
;;;2879     *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCR3
;;;2880     *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCR4
;;;2881     *         @arg @ref LL_TIM_DMABURST_BASEADDR_BDTR
;;;2882     * @param  DMABurstLength This parameter can be one of the following values:
;;;2883     *         @arg @ref LL_TIM_DMABURST_LENGTH_1TRANSFER
;;;2884     *         @arg @ref LL_TIM_DMABURST_LENGTH_2TRANSFERS
;;;2885     *         @arg @ref LL_TIM_DMABURST_LENGTH_3TRANSFERS
;;;2886     *         @arg @ref LL_TIM_DMABURST_LENGTH_4TRANSFERS
;;;2887     *         @arg @ref LL_TIM_DMABURST_LENGTH_5TRANSFERS
;;;2888     *         @arg @ref LL_TIM_DMABURST_LENGTH_6TRANSFERS
;;;2889     *         @arg @ref LL_TIM_DMABURST_LENGTH_7TRANSFERS
;;;2890     *         @arg @ref LL_TIM_DMABURST_LENGTH_8TRANSFERS
;;;2891     *         @arg @ref LL_TIM_DMABURST_LENGTH_9TRANSFERS
;;;2892     *         @arg @ref LL_TIM_DMABURST_LENGTH_10TRANSFERS
;;;2893     *         @arg @ref LL_TIM_DMABURST_LENGTH_11TRANSFERS
;;;2894     *         @arg @ref LL_TIM_DMABURST_LENGTH_12TRANSFERS
;;;2895     *         @arg @ref LL_TIM_DMABURST_LENGTH_13TRANSFERS
;;;2896     *         @arg @ref LL_TIM_DMABURST_LENGTH_14TRANSFERS
;;;2897     *         @arg @ref LL_TIM_DMABURST_LENGTH_15TRANSFERS
;;;2898     *         @arg @ref LL_TIM_DMABURST_LENGTH_16TRANSFERS
;;;2899     *         @arg @ref LL_TIM_DMABURST_LENGTH_17TRANSFERS
;;;2900     *         @arg @ref LL_TIM_DMABURST_LENGTH_18TRANSFERS
;;;2901     * @retval None
;;;2902     */
;;;2903   __STATIC_INLINE void LL_TIM_ConfigDMABurst(TIM_TypeDef *TIMx, uint32_t DMABurstBaseAddress, uint32_t DMABurstLength)
;;;2904   {
;;;2905     MODIFY_REG(TIMx->DCR, TIM_DCR_DBL | TIM_DCR_DBA, DMABurstBaseAddress | DMABurstLength);
;;;2906   }
;;;2907   
;;;2908   /**
;;;2909     * @}
;;;2910     */
;;;2911   
;;;2912   
;;;2913   /**
;;;2914     * @}
;;;2915     */
;;;2916   
;;;2917   
;;;2918   /** @defgroup TIM_LL_EF_FLAG_Management FLAG-Management
;;;2919     * @{
;;;2920     */
;;;2921   /**
;;;2922     * @brief  Clear the update interrupt flag (UIF).
;;;2923     * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
;;;2924     * @param  TIMx Timer instance
;;;2925     * @retval None
;;;2926     */
;;;2927   __STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
;;;2928   {
;;;2929     WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
;;;2930   }
;;;2931   
;;;2932   /**
;;;2933     * @brief  Indicate whether update interrupt flag (UIF) is set (update interrupt is pending).
;;;2934     * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
;;;2935     * @param  TIMx Timer instance
;;;2936     * @retval State of bit (1 or 0).
;;;2937     */
;;;2938   __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
;;;2939   {
;;;2940     return (READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF));
;;;2941   }
;;;2942   
;;;2943   /**
;;;2944     * @brief  Clear the Capture/Compare 1 interrupt flag (CC1F).
;;;2945     * @rmtoll SR           CC1IF         LL_TIM_ClearFlag_CC1
;;;2946     * @param  TIMx Timer instance
;;;2947     * @retval None
;;;2948     */
;;;2949   __STATIC_INLINE void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
;;;2950   {
;;;2951     WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
;;;2952   }
;;;2953   
;;;2954   /**
;;;2955     * @brief  Indicate whether Capture/Compare 1 interrupt flag (CC1F) is set (Capture/Compare 1 interrupt is pending).
;;;2956     * @rmtoll SR           CC1IF         LL_TIM_IsActiveFlag_CC1
;;;2957     * @param  TIMx Timer instance
;;;2958     * @retval State of bit (1 or 0).
;;;2959     */
;;;2960   __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC1(TIM_TypeDef *TIMx)
;;;2961   {
;;;2962     return (READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF));
;;;2963   }
;;;2964   
;;;2965   /**
;;;2966     * @brief  Clear the Capture/Compare 2 interrupt flag (CC2F).
;;;2967     * @rmtoll SR           CC2IF         LL_TIM_ClearFlag_CC2
;;;2968     * @param  TIMx Timer instance
;;;2969     * @retval None
;;;2970     */
;;;2971   __STATIC_INLINE void LL_TIM_ClearFlag_CC2(TIM_TypeDef *TIMx)
;;;2972   {
;;;2973     WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
;;;2974   }
;;;2975   
;;;2976   /**
;;;2977     * @brief  Indicate whether Capture/Compare 2 interrupt flag (CC2F) is set (Capture/Compare 2 interrupt is pending).
;;;2978     * @rmtoll SR           CC2IF         LL_TIM_IsActiveFlag_CC2
;;;2979     * @param  TIMx Timer instance
;;;2980     * @retval State of bit (1 or 0).
;;;2981     */
;;;2982   __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC2(TIM_TypeDef *TIMx)
;;;2983   {
;;;2984     return (READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF));
;;;2985   }
;;;2986   
;;;2987   /**
;;;2988     * @brief  Clear the Capture/Compare 3 interrupt flag (CC3F).
;;;2989     * @rmtoll SR           CC3IF         LL_TIM_ClearFlag_CC3
;;;2990     * @param  TIMx Timer instance
;;;2991     * @retval None
;;;2992     */
;;;2993   __STATIC_INLINE void LL_TIM_ClearFlag_CC3(TIM_TypeDef *TIMx)
;;;2994   {
;;;2995     WRITE_REG(TIMx->SR, ~(TIM_SR_CC3IF));
;;;2996   }
;;;2997   
;;;2998   /**
;;;2999     * @brief  Indicate whether Capture/Compare 3 interrupt flag (CC3F) is set (Capture/Compare 3 interrupt is pending).
;;;3000     * @rmtoll SR           CC3IF         LL_TIM_IsActiveFlag_CC3
;;;3001     * @param  TIMx Timer instance
;;;3002     * @retval State of bit (1 or 0).
;;;3003     */
;;;3004   __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC3(TIM_TypeDef *TIMx)
;;;3005   {
;;;3006     return (READ_BIT(TIMx->SR, TIM_SR_CC3IF) == (TIM_SR_CC3IF));
;;;3007   }
;;;3008   
;;;3009   /**
;;;3010     * @brief  Clear the Capture/Compare 4 interrupt flag (CC4F).
;;;3011     * @rmtoll SR           CC4IF         LL_TIM_ClearFlag_CC4
;;;3012     * @param  TIMx Timer instance
;;;3013     * @retval None
;;;3014     */
;;;3015   __STATIC_INLINE void LL_TIM_ClearFlag_CC4(TIM_TypeDef *TIMx)
;;;3016   {
;;;3017     WRITE_REG(TIMx->SR, ~(TIM_SR_CC4IF));
;;;3018   }
;;;3019   
;;;3020   /**
;;;3021     * @brief  Indicate whether Capture/Compare 4 interrupt flag (CC4F) is set (Capture/Compare 4 interrupt is pending).
;;;3022     * @rmtoll SR           CC4IF         LL_TIM_IsActiveFlag_CC4
;;;3023     * @param  TIMx Timer instance
;;;3024     * @retval State of bit (1 or 0).
;;;3025     */
;;;3026   __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC4(TIM_TypeDef *TIMx)
;;;3027   {
;;;3028     return (READ_BIT(TIMx->SR, TIM_SR_CC4IF) == (TIM_SR_CC4IF));
;;;3029   }
;;;3030   
;;;3031   /**
;;;3032     * @brief  Clear the commutation interrupt flag (COMIF).
;;;3033     * @rmtoll SR           COMIF         LL_TIM_ClearFlag_COM
;;;3034     * @param  TIMx Timer instance
;;;3035     * @retval None
;;;3036     */
;;;3037   __STATIC_INLINE void LL_TIM_ClearFlag_COM(TIM_TypeDef *TIMx)
;;;3038   {
;;;3039     WRITE_REG(TIMx->SR, ~(TIM_SR_COMIF));
;;;3040   }
;;;3041   
;;;3042   /**
;;;3043     * @brief  Indicate whether commutation interrupt flag (COMIF) is set (commutation interrupt is pending).
;;;3044     * @rmtoll SR           COMIF         LL_TIM_IsActiveFlag_COM
;;;3045     * @param  TIMx Timer instance
;;;3046     * @retval State of bit (1 or 0).
;;;3047     */
;;;3048   __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_COM(TIM_TypeDef *TIMx)
;;;3049   {
;;;3050     return (READ_BIT(TIMx->SR, TIM_SR_COMIF) == (TIM_SR_COMIF));
;;;3051   }
;;;3052   
;;;3053   /**
;;;3054     * @brief  Clear the trigger interrupt flag (TIF).
;;;3055     * @rmtoll SR           TIF           LL_TIM_ClearFlag_TRIG
;;;3056     * @param  TIMx Timer instance
;;;3057     * @retval None
;;;3058     */
;;;3059   __STATIC_INLINE void LL_TIM_ClearFlag_TRIG(TIM_TypeDef *TIMx)
;;;3060   {
;;;3061     WRITE_REG(TIMx->SR, ~(TIM_SR_TIF));
;;;3062   }
;;;3063   
;;;3064   /**
;;;3065     * @brief  Indicate whether trigger interrupt flag (TIF) is set (trigger interrupt is pending).
;;;3066     * @rmtoll SR           TIF           LL_TIM_IsActiveFlag_TRIG
;;;3067     * @param  TIMx Timer instance
;;;3068     * @retval State of bit (1 or 0).
;;;3069     */
;;;3070   __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_TRIG(TIM_TypeDef *TIMx)
;;;3071   {
;;;3072     return (READ_BIT(TIMx->SR, TIM_SR_TIF) == (TIM_SR_TIF));
;;;3073   }
;;;3074   
;;;3075   /**
;;;3076     * @brief  Clear the break interrupt flag (BIF).
;;;3077     * @rmtoll SR           BIF           LL_TIM_ClearFlag_BRK
;;;3078     * @param  TIMx Timer instance
;;;3079     * @retval None
;;;3080     */
;;;3081   __STATIC_INLINE void LL_TIM_ClearFlag_BRK(TIM_TypeDef *TIMx)
;;;3082   {
;;;3083     WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
;;;3084   }
;;;3085   
;;;3086   /**
;;;3087     * @brief  Indicate whether break interrupt flag (BIF) is set (break interrupt is pending).
;;;3088     * @rmtoll SR           BIF           LL_TIM_IsActiveFlag_BRK
;;;3089     * @param  TIMx Timer instance
;;;3090     * @retval State of bit (1 or 0).
;;;3091     */
;;;3092   __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
;;;3093   {
;;;3094     return (READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF));
;;;3095   }
;;;3096   
;;;3097   /**
;;;3098     * @brief  Clear the Capture/Compare 1 over-capture interrupt flag (CC1OF).
;;;3099     * @rmtoll SR           CC1OF         LL_TIM_ClearFlag_CC1OVR
;;;3100     * @param  TIMx Timer instance
;;;3101     * @retval None
;;;3102     */
;;;3103   __STATIC_INLINE void LL_TIM_ClearFlag_CC1OVR(TIM_TypeDef *TIMx)
;;;3104   {
;;;3105     WRITE_REG(TIMx->SR, ~(TIM_SR_CC1OF));
;;;3106   }
;;;3107   
;;;3108   /**
;;;3109     * @brief  Indicate whether Capture/Compare 1 over-capture interrupt flag (CC1OF) is set (Capture/Compare 1 interrupt is pending).
;;;3110     * @rmtoll SR           CC1OF         LL_TIM_IsActiveFlag_CC1OVR
;;;3111     * @param  TIMx Timer instance
;;;3112     * @retval State of bit (1 or 0).
;;;3113     */
;;;3114   __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC1OVR(TIM_TypeDef *TIMx)
;;;3115   {
;;;3116     return (READ_BIT(TIMx->SR, TIM_SR_CC1OF) == (TIM_SR_CC1OF));
;;;3117   }
;;;3118   
;;;3119   /**
;;;3120     * @brief  Clear the Capture/Compare 2 over-capture interrupt flag (CC2OF).
;;;3121     * @rmtoll SR           CC2OF         LL_TIM_ClearFlag_CC2OVR
;;;3122     * @param  TIMx Timer instance
;;;3123     * @retval None
;;;3124     */
;;;3125   __STATIC_INLINE void LL_TIM_ClearFlag_CC2OVR(TIM_TypeDef *TIMx)
;;;3126   {
;;;3127     WRITE_REG(TIMx->SR, ~(TIM_SR_CC2OF));
;;;3128   }
;;;3129   
;;;3130   /**
;;;3131     * @brief  Indicate whether Capture/Compare 2 over-capture interrupt flag (CC2OF) is set (Capture/Compare 2 over-capture interrupt is pending).
;;;3132     * @rmtoll SR           CC2OF         LL_TIM_IsActiveFlag_CC2OVR
;;;3133     * @param  TIMx Timer instance
;;;3134     * @retval State of bit (1 or 0).
;;;3135     */
;;;3136   __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC2OVR(TIM_TypeDef *TIMx)
;;;3137   {
;;;3138     return (READ_BIT(TIMx->SR, TIM_SR_CC2OF) == (TIM_SR_CC2OF));
;;;3139   }
;;;3140   
;;;3141   /**
;;;3142     * @brief  Clear the Capture/Compare 3 over-capture interrupt flag (CC3OF).
;;;3143     * @rmtoll SR           CC3OF         LL_TIM_ClearFlag_CC3OVR
;;;3144     * @param  TIMx Timer instance
;;;3145     * @retval None
;;;3146     */
;;;3147   __STATIC_INLINE void LL_TIM_ClearFlag_CC3OVR(TIM_TypeDef *TIMx)
;;;3148   {
;;;3149     WRITE_REG(TIMx->SR, ~(TIM_SR_CC3OF));
;;;3150   }
;;;3151   
;;;3152   /**
;;;3153     * @brief  Indicate whether Capture/Compare 3 over-capture interrupt flag (CC3OF) is set (Capture/Compare 3 over-capture interrupt is pending).
;;;3154     * @rmtoll SR           CC3OF         LL_TIM_IsActiveFlag_CC3OVR
;;;3155     * @param  TIMx Timer instance
;;;3156     * @retval State of bit (1 or 0).
;;;3157     */
;;;3158   __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC3OVR(TIM_TypeDef *TIMx)
;;;3159   {
;;;3160     return (READ_BIT(TIMx->SR, TIM_SR_CC3OF) == (TIM_SR_CC3OF));
;;;3161   }
;;;3162   
;;;3163   /**
;;;3164     * @brief  Clear the Capture/Compare 4 over-capture interrupt flag (CC4OF).
;;;3165     * @rmtoll SR           CC4OF         LL_TIM_ClearFlag_CC4OVR
;;;3166     * @param  TIMx Timer instance
;;;3167     * @retval None
;;;3168     */
;;;3169   __STATIC_INLINE void LL_TIM_ClearFlag_CC4OVR(TIM_TypeDef *TIMx)
;;;3170   {
;;;3171     WRITE_REG(TIMx->SR, ~(TIM_SR_CC4OF));
;;;3172   }
;;;3173   
;;;3174   /**
;;;3175     * @brief  Indicate whether Capture/Compare 4 over-capture interrupt flag (CC4OF) is set (Capture/Compare 4 over-capture interrupt is pending).
;;;3176     * @rmtoll SR           CC4OF         LL_TIM_IsActiveFlag_CC4OVR
;;;3177     * @param  TIMx Timer instance
;;;3178     * @retval State of bit (1 or 0).
;;;3179     */
;;;3180   __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC4OVR(TIM_TypeDef *TIMx)
;;;3181   {
;;;3182     return (READ_BIT(TIMx->SR, TIM_SR_CC4OF) == (TIM_SR_CC4OF));
;;;3183   }
;;;3184   
;;;3185   /**
;;;3186     * @}
;;;3187     */
;;;3188   
;;;3189   /** @defgroup TIM_LL_EF_IT_Management IT-Management
;;;3190     * @{
;;;3191     */
;;;3192   /**
;;;3193     * @brief  Enable update interrupt (UIE).
;;;3194     * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
;;;3195     * @param  TIMx Timer instance
;;;3196     * @retval None
;;;3197     */
;;;3198   __STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
;;;3199   {
;;;3200     SET_BIT(TIMx->DIER, TIM_DIER_UIE);
        0x08000750:    68c1        .h      LDR      r1,[r0,#0xc]
        0x08000752:    f0410101    A...    ORR      r1,r1,#1
        0x08000756:    60c1        .`      STR      r1,[r0,#0xc]
        0x08000758:    4770        pG      BX       lr
    i.LL_TIM_EnableMasterSlaveMode
    LL_TIM_EnableMasterSlaveMode
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h (2628)
        0x0800075a:    6881        .h      LDR      r1,[r0,#8]
        0x0800075c:    f0410180    A...    ORR      r1,r1,#0x80
        0x08000760:    6081        .`      STR      r1,[r0,#8]
;;;2629   }
        0x08000762:    4770        pG      BX       lr
    i.LL_TIM_IC_SetActiveInput
    LL_TIM_IC_SetActiveInput
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h (2161)
        0x08000764:    b5f0        ..      PUSH     {r4-r7,lr}
        0x08000766:    4603        .F      MOV      r3,r0
        0x08000768:    4614        .F      MOV      r4,r2
;;;2162     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
        0x0800076a:    2901        .)      CMP      r1,#1
        0x0800076c:    d101        ..      BNE      0x8000772 ; LL_TIM_IC_SetActiveInput + 14
        0x0800076e:    2500        .%      MOVS     r5,#0
        0x08000770:    e016        ..      B        0x80007a0 ; LL_TIM_IC_SetActiveInput + 60
        0x08000772:    2904        .)      CMP      r1,#4
        0x08000774:    d101        ..      BNE      0x800077a ; LL_TIM_IC_SetActiveInput + 22
        0x08000776:    2501        .%      MOVS     r5,#1
        0x08000778:    e012        ..      B        0x80007a0 ; LL_TIM_IC_SetActiveInput + 60
        0x0800077a:    2910        .)      CMP      r1,#0x10
        0x0800077c:    d101        ..      BNE      0x8000782 ; LL_TIM_IC_SetActiveInput + 30
        0x0800077e:    2502        .%      MOVS     r5,#2
        0x08000780:    e00e        ..      B        0x80007a0 ; LL_TIM_IC_SetActiveInput + 60
        0x08000782:    2940        @)      CMP      r1,#0x40
        0x08000784:    d101        ..      BNE      0x800078a ; LL_TIM_IC_SetActiveInput + 38
        0x08000786:    2503        .%      MOVS     r5,#3
        0x08000788:    e00a        ..      B        0x80007a0 ; LL_TIM_IC_SetActiveInput + 60
        0x0800078a:    f5b17f80    ....    CMP      r1,#0x100
        0x0800078e:    d101        ..      BNE      0x8000794 ; LL_TIM_IC_SetActiveInput + 48
        0x08000790:    2504        .%      MOVS     r5,#4
        0x08000792:    e005        ..      B        0x80007a0 ; LL_TIM_IC_SetActiveInput + 60
        0x08000794:    f5b16f80    ...o    CMP      r1,#0x400
        0x08000798:    d101        ..      BNE      0x800079e ; LL_TIM_IC_SetActiveInput + 58
        0x0800079a:    2505        .%      MOVS     r5,#5
        0x0800079c:    e000        ..      B        0x80007a0 ; LL_TIM_IC_SetActiveInput + 60
        0x0800079e:    2506        .%      MOVS     r5,#6
        0x080007a0:    4628        (F      MOV      r0,r5
;;;2163     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
        0x080007a2:    4d09        .M      LDR      r5,[pc,#36] ; [0x80007c8] = 0x80022a7
        0x080007a4:    5c2e        .\      LDRB     r6,[r5,r0]
        0x080007a6:    f1030518    ....    ADD      r5,r3,#0x18
        0x080007aa:    1972        r.      ADDS     r2,r6,r5
;;;2164     MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
        0x080007ac:    4e07        .N      LDR      r6,[pc,#28] ; [0x80007cc] = 0x80022b5
        0x080007ae:    5c37        7\      LDRB     r7,[r6,r0]
        0x080007b0:    2603        .&      MOVS     r6,#3
        0x080007b2:    40be        .@      LSLS     r6,r6,r7
        0x080007b4:    6815        .h      LDR      r5,[r2,#0]
        0x080007b6:    43b5        .C      BICS     r5,r5,r6
        0x080007b8:    0c26        &.      LSRS     r6,r4,#16
        0x080007ba:    4f04        .O      LDR      r7,[pc,#16] ; [0x80007cc] = 0x80022b5
        0x080007bc:    5c3f        ?\      LDRB     r7,[r7,r0]
        0x080007be:    40be        .@      LSLS     r6,r6,r7
        0x080007c0:    4335        5C      ORRS     r5,r5,r6
        0x080007c2:    6015        .`      STR      r5,[r2,#0]
;;;2165   }
        0x080007c4:    bdf0        ..      POP      {r4-r7,pc}
    $d
        0x080007c6:    0000        ..      DCW    0
        0x080007c8:    080022a7    ."..    DCD    134226599
        0x080007cc:    080022b5    ."..    DCD    134226613
    $t
    i.LL_TIM_IC_SetFilter
    LL_TIM_IC_SetFilter
;;;2166   
;;;2167   /**
;;;2168     * @brief  Get the current active input.
;;;2169     * @rmtoll CCMR1        CC1S          LL_TIM_IC_GetActiveInput\n
;;;2170     *         CCMR1        CC2S          LL_TIM_IC_GetActiveInput\n
;;;2171     *         CCMR2        CC3S          LL_TIM_IC_GetActiveInput\n
;;;2172     *         CCMR2        CC4S          LL_TIM_IC_GetActiveInput
;;;2173     * @param  TIMx Timer instance
;;;2174     * @param  Channel This parameter can be one of the following values:
;;;2175     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2176     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2177     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2178     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2179     * @retval Returned value can be one of the following values:
;;;2180     *         @arg @ref LL_TIM_ACTIVEINPUT_DIRECTTI
;;;2181     *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
;;;2182     *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
;;;2183     */
;;;2184   __STATIC_INLINE uint32_t LL_TIM_IC_GetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel)
;;;2185   {
;;;2186     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2187     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2188     return ((READ_BIT(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iChannel]) << 16U);
;;;2189   }
;;;2190   
;;;2191   /**
;;;2192     * @brief  Set the prescaler of input channel.
;;;2193     * @rmtoll CCMR1        IC1PSC        LL_TIM_IC_SetPrescaler\n
;;;2194     *         CCMR1        IC2PSC        LL_TIM_IC_SetPrescaler\n
;;;2195     *         CCMR2        IC3PSC        LL_TIM_IC_SetPrescaler\n
;;;2196     *         CCMR2        IC4PSC        LL_TIM_IC_SetPrescaler
;;;2197     * @param  TIMx Timer instance
;;;2198     * @param  Channel This parameter can be one of the following values:
;;;2199     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2200     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2201     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2202     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2203     * @param  ICPrescaler This parameter can be one of the following values:
;;;2204     *         @arg @ref LL_TIM_ICPSC_DIV1
;;;2205     *         @arg @ref LL_TIM_ICPSC_DIV2
;;;2206     *         @arg @ref LL_TIM_ICPSC_DIV4
;;;2207     *         @arg @ref LL_TIM_ICPSC_DIV8
;;;2208     * @retval None
;;;2209     */
;;;2210   __STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
;;;2211   {
;;;2212     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2213     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2214     MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
;;;2215   }
;;;2216   
;;;2217   /**
;;;2218     * @brief  Get the current prescaler value acting on an  input channel.
;;;2219     * @rmtoll CCMR1        IC1PSC        LL_TIM_IC_GetPrescaler\n
;;;2220     *         CCMR1        IC2PSC        LL_TIM_IC_GetPrescaler\n
;;;2221     *         CCMR2        IC3PSC        LL_TIM_IC_GetPrescaler\n
;;;2222     *         CCMR2        IC4PSC        LL_TIM_IC_GetPrescaler
;;;2223     * @param  TIMx Timer instance
;;;2224     * @param  Channel This parameter can be one of the following values:
;;;2225     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2226     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2227     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2228     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2229     * @retval Returned value can be one of the following values:
;;;2230     *         @arg @ref LL_TIM_ICPSC_DIV1
;;;2231     *         @arg @ref LL_TIM_ICPSC_DIV2
;;;2232     *         @arg @ref LL_TIM_ICPSC_DIV4
;;;2233     *         @arg @ref LL_TIM_ICPSC_DIV8
;;;2234     */
;;;2235   __STATIC_INLINE uint32_t LL_TIM_IC_GetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel)
;;;2236   {
;;;2237     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2238     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2239     return ((READ_BIT(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iChannel]) << 16U);
;;;2240   }
;;;2241   
;;;2242   /**
;;;2243     * @brief  Set the input filter duration.
;;;2244     * @rmtoll CCMR1        IC1F          LL_TIM_IC_SetFilter\n
;;;2245     *         CCMR1        IC2F          LL_TIM_IC_SetFilter\n
;;;2246     *         CCMR2        IC3F          LL_TIM_IC_SetFilter\n
;;;2247     *         CCMR2        IC4F          LL_TIM_IC_SetFilter
;;;2248     * @param  TIMx Timer instance
;;;2249     * @param  Channel This parameter can be one of the following values:
;;;2250     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2251     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2252     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2253     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2254     * @param  ICFilter This parameter can be one of the following values:
;;;2255     *         @arg @ref LL_TIM_IC_FILTER_FDIV1
;;;2256     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N2
;;;2257     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N4
;;;2258     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N8
;;;2259     *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N6
;;;2260     *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N8
;;;2261     *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N6
;;;2262     *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N8
;;;2263     *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N6
;;;2264     *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N8
;;;2265     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N5
;;;2266     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N6
;;;2267     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N8
;;;2268     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N5
;;;2269     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
;;;2270     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
;;;2271     * @retval None
;;;2272     */
;;;2273   __STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
;;;2274   {
        0x080007d0:    b5f0        ..      PUSH     {r4-r7,lr}
        0x080007d2:    4603        .F      MOV      r3,r0
        0x080007d4:    4614        .F      MOV      r4,r2
;;;2275     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
        0x080007d6:    2901        .)      CMP      r1,#1
        0x080007d8:    d101        ..      BNE      0x80007de ; LL_TIM_IC_SetFilter + 14
        0x080007da:    2500        .%      MOVS     r5,#0
        0x080007dc:    e016        ..      B        0x800080c ; LL_TIM_IC_SetFilter + 60
        0x080007de:    2904        .)      CMP      r1,#4
        0x080007e0:    d101        ..      BNE      0x80007e6 ; LL_TIM_IC_SetFilter + 22
        0x080007e2:    2501        .%      MOVS     r5,#1
        0x080007e4:    e012        ..      B        0x800080c ; LL_TIM_IC_SetFilter + 60
        0x080007e6:    2910        .)      CMP      r1,#0x10
        0x080007e8:    d101        ..      BNE      0x80007ee ; LL_TIM_IC_SetFilter + 30
        0x080007ea:    2502        .%      MOVS     r5,#2
        0x080007ec:    e00e        ..      B        0x800080c ; LL_TIM_IC_SetFilter + 60
        0x080007ee:    2940        @)      CMP      r1,#0x40
        0x080007f0:    d101        ..      BNE      0x80007f6 ; LL_TIM_IC_SetFilter + 38
        0x080007f2:    2503        .%      MOVS     r5,#3
        0x080007f4:    e00a        ..      B        0x800080c ; LL_TIM_IC_SetFilter + 60
        0x080007f6:    f5b17f80    ....    CMP      r1,#0x100
        0x080007fa:    d101        ..      BNE      0x8000800 ; LL_TIM_IC_SetFilter + 48
        0x080007fc:    2504        .%      MOVS     r5,#4
        0x080007fe:    e005        ..      B        0x800080c ; LL_TIM_IC_SetFilter + 60
        0x08000800:    f5b16f80    ...o    CMP      r1,#0x400
        0x08000804:    d101        ..      BNE      0x800080a ; LL_TIM_IC_SetFilter + 58
        0x08000806:    2505        .%      MOVS     r5,#5
        0x08000808:    e000        ..      B        0x800080c ; LL_TIM_IC_SetFilter + 60
        0x0800080a:    2506        .%      MOVS     r5,#6
        0x0800080c:    4628        (F      MOV      r0,r5
;;;2276     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
        0x0800080e:    4d09        .M      LDR      r5,[pc,#36] ; [0x8000834] = 0x80022a7
        0x08000810:    5c2e        .\      LDRB     r6,[r5,r0]
        0x08000812:    f1030518    ....    ADD      r5,r3,#0x18
        0x08000816:    1972        r.      ADDS     r2,r6,r5
;;;2277     MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
        0x08000818:    4e07        .N      LDR      r6,[pc,#28] ; [0x8000838] = 0x80022b5
        0x0800081a:    5c37        7\      LDRB     r7,[r6,r0]
        0x0800081c:    26f0        .&      MOVS     r6,#0xf0
        0x0800081e:    40be        .@      LSLS     r6,r6,r7
        0x08000820:    6815        .h      LDR      r5,[r2,#0]
        0x08000822:    43b5        .C      BICS     r5,r5,r6
        0x08000824:    0c26        &.      LSRS     r6,r4,#16
        0x08000826:    4f04        .O      LDR      r7,[pc,#16] ; [0x8000838] = 0x80022b5
        0x08000828:    5c3f        ?\      LDRB     r7,[r7,r0]
        0x0800082a:    40be        .@      LSLS     r6,r6,r7
        0x0800082c:    4335        5C      ORRS     r5,r5,r6
        0x0800082e:    6015        .`      STR      r5,[r2,#0]
;;;2278   }
        0x08000830:    bdf0        ..      POP      {r4-r7,pc}
    $d
        0x08000832:    0000        ..      DCW    0
        0x08000834:    080022a7    ."..    DCD    134226599
        0x08000838:    080022b5    ."..    DCD    134226613
    $t
    i.LL_TIM_IC_SetPolarity
    LL_TIM_IC_SetPolarity
;;;2279   
;;;2280   /**
;;;2281     * @brief  Get the input filter duration.
;;;2282     * @rmtoll CCMR1        IC1F          LL_TIM_IC_GetFilter\n
;;;2283     *         CCMR1        IC2F          LL_TIM_IC_GetFilter\n
;;;2284     *         CCMR2        IC3F          LL_TIM_IC_GetFilter\n
;;;2285     *         CCMR2        IC4F          LL_TIM_IC_GetFilter
;;;2286     * @param  TIMx Timer instance
;;;2287     * @param  Channel This parameter can be one of the following values:
;;;2288     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2289     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2290     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2291     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2292     * @retval Returned value can be one of the following values:
;;;2293     *         @arg @ref LL_TIM_IC_FILTER_FDIV1
;;;2294     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N2
;;;2295     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N4
;;;2296     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N8
;;;2297     *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N6
;;;2298     *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N8
;;;2299     *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N6
;;;2300     *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N8
;;;2301     *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N6
;;;2302     *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N8
;;;2303     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N5
;;;2304     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N6
;;;2305     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N8
;;;2306     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N5
;;;2307     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
;;;2308     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
;;;2309     */
;;;2310   __STATIC_INLINE uint32_t LL_TIM_IC_GetFilter(TIM_TypeDef *TIMx, uint32_t Channel)
;;;2311   {
;;;2312     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2313     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2314     return ((READ_BIT(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iChannel]) << 16U);
;;;2315   }
;;;2316   
;;;2317   /**
;;;2318     * @brief  Set the input channel polarity.
;;;2319     * @rmtoll CCER         CC1P          LL_TIM_IC_SetPolarity\n
;;;2320     *         CCER         CC1NP         LL_TIM_IC_SetPolarity\n
;;;2321     *         CCER         CC2P          LL_TIM_IC_SetPolarity\n
;;;2322     *         CCER         CC2NP         LL_TIM_IC_SetPolarity\n
;;;2323     *         CCER         CC3P          LL_TIM_IC_SetPolarity\n
;;;2324     *         CCER         CC3NP         LL_TIM_IC_SetPolarity\n
;;;2325     *         CCER         CC4P          LL_TIM_IC_SetPolarity\n
;;;2326     * @param  TIMx Timer instance
;;;2327     * @param  Channel This parameter can be one of the following values:
;;;2328     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2329     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2330     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2331     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2332     * @param  ICPolarity This parameter can be one of the following values:
;;;2333     *         @arg @ref LL_TIM_IC_POLARITY_RISING
;;;2334     *         @arg @ref LL_TIM_IC_POLARITY_FALLING
;;;2335     * @retval None
;;;2336     */
;;;2337   __STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
;;;2338   {
        0x0800083c:    b570        p.      PUSH     {r4-r6,lr}
;;;2339     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
        0x0800083e:    2901        .)      CMP      r1,#1
        0x08000840:    d101        ..      BNE      0x8000846 ; LL_TIM_IC_SetPolarity + 10
        0x08000842:    2400        .$      MOVS     r4,#0
        0x08000844:    e016        ..      B        0x8000874 ; LL_TIM_IC_SetPolarity + 56
        0x08000846:    2904        .)      CMP      r1,#4
        0x08000848:    d101        ..      BNE      0x800084e ; LL_TIM_IC_SetPolarity + 18
        0x0800084a:    2401        .$      MOVS     r4,#1
        0x0800084c:    e012        ..      B        0x8000874 ; LL_TIM_IC_SetPolarity + 56
        0x0800084e:    2910        .)      CMP      r1,#0x10
        0x08000850:    d101        ..      BNE      0x8000856 ; LL_TIM_IC_SetPolarity + 26
        0x08000852:    2402        .$      MOVS     r4,#2
        0x08000854:    e00e        ..      B        0x8000874 ; LL_TIM_IC_SetPolarity + 56
        0x08000856:    2940        @)      CMP      r1,#0x40
        0x08000858:    d101        ..      BNE      0x800085e ; LL_TIM_IC_SetPolarity + 34
        0x0800085a:    2403        .$      MOVS     r4,#3
        0x0800085c:    e00a        ..      B        0x8000874 ; LL_TIM_IC_SetPolarity + 56
        0x0800085e:    f5b17f80    ....    CMP      r1,#0x100
        0x08000862:    d101        ..      BNE      0x8000868 ; LL_TIM_IC_SetPolarity + 44
        0x08000864:    2404        .$      MOVS     r4,#4
        0x08000866:    e005        ..      B        0x8000874 ; LL_TIM_IC_SetPolarity + 56
        0x08000868:    f5b16f80    ...o    CMP      r1,#0x400
        0x0800086c:    d101        ..      BNE      0x8000872 ; LL_TIM_IC_SetPolarity + 54
        0x0800086e:    2405        .$      MOVS     r4,#5
        0x08000870:    e000        ..      B        0x8000874 ; LL_TIM_IC_SetPolarity + 56
        0x08000872:    2406        .$      MOVS     r4,#6
        0x08000874:    4623        #F      MOV      r3,r4
;;;2340     MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
        0x08000876:    6a04        .j      LDR      r4,[r0,#0x20]
        0x08000878:    4d05        .M      LDR      r5,[pc,#20] ; [0x8000890] = 0x80022bc
        0x0800087a:    5cee        .\      LDRB     r6,[r5,r3]
        0x0800087c:    250a        .%      MOVS     r5,#0xa
        0x0800087e:    40b5        .@      LSLS     r5,r5,r6
        0x08000880:    43ac        .C      BICS     r4,r4,r5
        0x08000882:    4d03        .M      LDR      r5,[pc,#12] ; [0x8000890] = 0x80022bc
        0x08000884:    5ced        .\      LDRB     r5,[r5,r3]
        0x08000886:    fa02f505    ....    LSL      r5,r2,r5
        0x0800088a:    432c        ,C      ORRS     r4,r4,r5
        0x0800088c:    6204        .b      STR      r4,[r0,#0x20]
;;;2341                ICPolarity << SHIFT_TAB_CCxP[iChannel]);
;;;2342   }
        0x0800088e:    bd70        p.      POP      {r4-r6,pc}
    $d
        0x08000890:    080022bc    ."..    DCD    134226620
    $t
    i.LL_TIM_IC_SetPrescaler
    LL_TIM_IC_SetPrescaler
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h (2211)
        0x08000894:    b5f0        ..      PUSH     {r4-r7,lr}
        0x08000896:    4603        .F      MOV      r3,r0
        0x08000898:    4614        .F      MOV      r4,r2
;;;2212     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
        0x0800089a:    2901        .)      CMP      r1,#1
        0x0800089c:    d101        ..      BNE      0x80008a2 ; LL_TIM_IC_SetPrescaler + 14
        0x0800089e:    2500        .%      MOVS     r5,#0
        0x080008a0:    e016        ..      B        0x80008d0 ; LL_TIM_IC_SetPrescaler + 60
        0x080008a2:    2904        .)      CMP      r1,#4
        0x080008a4:    d101        ..      BNE      0x80008aa ; LL_TIM_IC_SetPrescaler + 22
        0x080008a6:    2501        .%      MOVS     r5,#1
        0x080008a8:    e012        ..      B        0x80008d0 ; LL_TIM_IC_SetPrescaler + 60
        0x080008aa:    2910        .)      CMP      r1,#0x10
        0x080008ac:    d101        ..      BNE      0x80008b2 ; LL_TIM_IC_SetPrescaler + 30
        0x080008ae:    2502        .%      MOVS     r5,#2
        0x080008b0:    e00e        ..      B        0x80008d0 ; LL_TIM_IC_SetPrescaler + 60
        0x080008b2:    2940        @)      CMP      r1,#0x40
        0x080008b4:    d101        ..      BNE      0x80008ba ; LL_TIM_IC_SetPrescaler + 38
        0x080008b6:    2503        .%      MOVS     r5,#3
        0x080008b8:    e00a        ..      B        0x80008d0 ; LL_TIM_IC_SetPrescaler + 60
        0x080008ba:    f5b17f80    ....    CMP      r1,#0x100
        0x080008be:    d101        ..      BNE      0x80008c4 ; LL_TIM_IC_SetPrescaler + 48
        0x080008c0:    2504        .%      MOVS     r5,#4
        0x080008c2:    e005        ..      B        0x80008d0 ; LL_TIM_IC_SetPrescaler + 60
        0x080008c4:    f5b16f80    ...o    CMP      r1,#0x400
        0x080008c8:    d101        ..      BNE      0x80008ce ; LL_TIM_IC_SetPrescaler + 58
        0x080008ca:    2505        .%      MOVS     r5,#5
        0x080008cc:    e000        ..      B        0x80008d0 ; LL_TIM_IC_SetPrescaler + 60
        0x080008ce:    2506        .%      MOVS     r5,#6
        0x080008d0:    4628        (F      MOV      r0,r5
;;;2213     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
        0x080008d2:    4d09        .M      LDR      r5,[pc,#36] ; [0x80008f8] = 0x80022a7
        0x080008d4:    5c2e        .\      LDRB     r6,[r5,r0]
        0x080008d6:    f1030518    ....    ADD      r5,r3,#0x18
        0x080008da:    1972        r.      ADDS     r2,r6,r5
;;;2214     MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
        0x080008dc:    4e07        .N      LDR      r6,[pc,#28] ; [0x80008fc] = 0x80022b5
        0x080008de:    5c37        7\      LDRB     r7,[r6,r0]
        0x080008e0:    260c        .&      MOVS     r6,#0xc
        0x080008e2:    40be        .@      LSLS     r6,r6,r7
        0x080008e4:    6815        .h      LDR      r5,[r2,#0]
        0x080008e6:    43b5        .C      BICS     r5,r5,r6
        0x080008e8:    0c26        &.      LSRS     r6,r4,#16
        0x080008ea:    4f04        .O      LDR      r7,[pc,#16] ; [0x80008fc] = 0x80022b5
        0x080008ec:    5c3f        ?\      LDRB     r7,[r7,r0]
        0x080008ee:    40be        .@      LSLS     r6,r6,r7
        0x080008f0:    4335        5C      ORRS     r5,r5,r6
        0x080008f2:    6015        .`      STR      r5,[r2,#0]
;;;2215   }
        0x080008f4:    bdf0        ..      POP      {r4-r7,pc}
    $d
        0x080008f6:    0000        ..      DCW    0
        0x080008f8:    080022a7    ."..    DCD    134226599
        0x080008fc:    080022b5    ."..    DCD    134226613
    $t
    i.LL_TIM_Init
    LL_TIM_Init
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_tim.c
;;;341    {
        0x08000900:    b510        ..      PUSH     {r4,lr}
        0x08000902:    4602        .F      MOV      r2,r0
;;;342      uint32_t tmpcr1 = 0U;
        0x08000904:    2300        .#      MOVS     r3,#0
;;;343    
;;;344      /* Check the parameters */
;;;345      assert_param(IS_TIM_INSTANCE(TIMx));
;;;346      assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
;;;347      assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));
;;;348    
;;;349      tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
        0x08000906:    6813        .h      LDR      r3,[r2,#0]
;;;350    
;;;351      if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
        0x08000908:    481b        .H      LDR      r0,[pc,#108] ; [0x8000978] = 0x40012c00
        0x0800090a:    4282        .B      CMP      r2,r0
        0x0800090c:    d008        ..      BEQ      0x8000920 ; LL_TIM_Init + 32
        0x0800090e:    f1b24f80    ...O    CMP      r2,#0x40000000
        0x08000912:    d005        ..      BEQ      0x8000920 ; LL_TIM_Init + 32
        0x08000914:    4819        .H      LDR      r0,[pc,#100] ; [0x800097c] = 0x40000400
        0x08000916:    4282        .B      CMP      r2,r0
        0x08000918:    d002        ..      BEQ      0x8000920 ; LL_TIM_Init + 32
        0x0800091a:    4819        .H      LDR      r0,[pc,#100] ; [0x8000980] = 0x40000800
        0x0800091c:    4282        .B      CMP      r2,r0
        0x0800091e:    d104        ..      BNE      0x800092a ; LL_TIM_Init + 42
;;;352      {
;;;353        /* Select the Counter Mode */
;;;354        MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
        0x08000920:    f0230070    #.p.    BIC      r0,r3,#0x70
        0x08000924:    684c        Lh      LDR      r4,[r1,#4]
        0x08000926:    ea400304    @...    ORR      r3,r0,r4
;;;355      }
;;;356    
;;;357      if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
        0x0800092a:    4813        .H      LDR      r0,[pc,#76] ; [0x8000978] = 0x40012c00
        0x0800092c:    4282        .B      CMP      r2,r0
        0x0800092e:    d008        ..      BEQ      0x8000942 ; LL_TIM_Init + 66
        0x08000930:    f1b24f80    ...O    CMP      r2,#0x40000000
        0x08000934:    d005        ..      BEQ      0x8000942 ; LL_TIM_Init + 66
        0x08000936:    4811        .H      LDR      r0,[pc,#68] ; [0x800097c] = 0x40000400
        0x08000938:    4282        .B      CMP      r2,r0
        0x0800093a:    d002        ..      BEQ      0x8000942 ; LL_TIM_Init + 66
        0x0800093c:    4810        .H      LDR      r0,[pc,#64] ; [0x8000980] = 0x40000800
        0x0800093e:    4282        .B      CMP      r2,r0
        0x08000940:    d104        ..      BNE      0x800094c ; LL_TIM_Init + 76
;;;358      {
;;;359        /* Set the clock division */
;;;360        MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
        0x08000942:    f4237040    #.@p    BIC      r0,r3,#0x300
        0x08000946:    68cc        .h      LDR      r4,[r1,#0xc]
        0x08000948:    ea400304    @...    ORR      r3,r0,r4
;;;361      }
;;;362    
;;;363      /* Write to TIMx CR1 */
;;;364      LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
        0x0800094c:    6013        .`      STR      r3,[r2,#0]
;;;365    
;;;366      /* Set the Autoreload value */
;;;367      LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
        0x0800094e:    6888        .h      LDR      r0,[r1,#8]
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;1329     WRITE_REG(TIMx->ARR, AutoReload);
        0x08000950:    62d0        .b      STR      r0,[r2,#0x2c]
;;;1330   }
        0x08000952:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_tim.c
;;;370      LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
        0x08000954:    8808        ..      LDRH     r0,[r1,#0]
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;1304     WRITE_REG(TIMx->PSC, Prescaler);
        0x08000956:    6290        .b      STR      r0,[r2,#0x28]
;;;1305   }
        0x08000958:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_tim.c
;;;372      if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
        0x0800095a:    4807        .H      LDR      r0,[pc,#28] ; [0x8000978] = 0x40012c00
        0x0800095c:    4282        .B      CMP      r2,r0
        0x0800095e:    d103        ..      BNE      0x8000968 ; LL_TIM_Init + 104
;;;373      {
;;;374        /* Set the Repetition Counter value */
;;;375        LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
        0x08000960:    7c08        .|      LDRB     r0,[r1,#0x10]
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;1354     WRITE_REG(TIMx->RCR, RepetitionCounter);
        0x08000962:    6310        .c      STR      r0,[r2,#0x30]
;;;1355   }
        0x08000964:    bf00        ..      NOP      
        0x08000966:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_tim.c
;;;380      LL_TIM_GenerateEvent_UPDATE(TIMx);
        0x08000968:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;3709     SET_BIT(TIMx->EGR, TIM_EGR_UG);
        0x0800096a:    6950        Pi      LDR      r0,[r2,#0x14]
        0x0800096c:    f0400001    @...    ORR      r0,r0,#1
        0x08000970:    6150        Pa      STR      r0,[r2,#0x14]
;;;3710   }
        0x08000972:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_tim.c
;;;382      return SUCCESS;
        0x08000974:    2001        .       MOVS     r0,#1
;;;383    }
        0x08000976:    bd10        ..      POP      {r4,pc}
    $d
        0x08000978:    40012c00    .,.@    DCD    1073818624
        0x0800097c:    40000400    ...@    DCD    1073742848
        0x08000980:    40000800    ...@    DCD    1073743872
    $t
    i.LL_TIM_IsActiveFlag_UPDATE
    LL_TIM_IsActiveFlag_UPDATE
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;2939   {
        0x08000984:    4601        .F      MOV      r1,r0
;;;2940     return (READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF));
        0x08000986:    6908        .i      LDR      r0,[r1,#0x10]
        0x08000988:    f0000001    ....    AND      r0,r0,#1
;;;2941   }
        0x0800098c:    4770        pG      BX       lr
        0x0800098e:    0000        ..      MOVS     r0,r0
    i.LL_TIM_OC_DisableFast
    LL_TIM_OC_DisableFast
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h (1802)
        0x08000990:    b570        p.      PUSH     {r4-r6,lr}
        0x08000992:    4602        .F      MOV      r2,r0
;;;1803     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
        0x08000994:    2901        .)      CMP      r1,#1
        0x08000996:    d101        ..      BNE      0x800099c ; LL_TIM_OC_DisableFast + 12
        0x08000998:    2400        .$      MOVS     r4,#0
        0x0800099a:    e016        ..      B        0x80009ca ; LL_TIM_OC_DisableFast + 58
        0x0800099c:    2904        .)      CMP      r1,#4
        0x0800099e:    d101        ..      BNE      0x80009a4 ; LL_TIM_OC_DisableFast + 20
        0x080009a0:    2401        .$      MOVS     r4,#1
        0x080009a2:    e012        ..      B        0x80009ca ; LL_TIM_OC_DisableFast + 58
        0x080009a4:    2910        .)      CMP      r1,#0x10
        0x080009a6:    d101        ..      BNE      0x80009ac ; LL_TIM_OC_DisableFast + 28
        0x080009a8:    2402        .$      MOVS     r4,#2
        0x080009aa:    e00e        ..      B        0x80009ca ; LL_TIM_OC_DisableFast + 58
        0x080009ac:    2940        @)      CMP      r1,#0x40
        0x080009ae:    d101        ..      BNE      0x80009b4 ; LL_TIM_OC_DisableFast + 36
        0x080009b0:    2403        .$      MOVS     r4,#3
        0x080009b2:    e00a        ..      B        0x80009ca ; LL_TIM_OC_DisableFast + 58
        0x080009b4:    f5b17f80    ....    CMP      r1,#0x100
        0x080009b8:    d101        ..      BNE      0x80009be ; LL_TIM_OC_DisableFast + 46
        0x080009ba:    2404        .$      MOVS     r4,#4
        0x080009bc:    e005        ..      B        0x80009ca ; LL_TIM_OC_DisableFast + 58
        0x080009be:    f5b16f80    ...o    CMP      r1,#0x400
        0x080009c2:    d101        ..      BNE      0x80009c8 ; LL_TIM_OC_DisableFast + 56
        0x080009c4:    2405        .$      MOVS     r4,#5
        0x080009c6:    e000        ..      B        0x80009ca ; LL_TIM_OC_DisableFast + 58
        0x080009c8:    2406        .$      MOVS     r4,#6
        0x080009ca:    4623        #F      MOV      r3,r4
;;;1804     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
        0x080009cc:    4c06        .L      LDR      r4,[pc,#24] ; [0x80009e8] = 0x80022a7
        0x080009ce:    5ce5        .\      LDRB     r5,[r4,r3]
        0x080009d0:    f1020418    ....    ADD      r4,r2,#0x18
        0x080009d4:    1928        (.      ADDS     r0,r5,r4
;;;1805     CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
        0x080009d6:    4d05        .M      LDR      r5,[pc,#20] ; [0x80009ec] = 0x80022ae
        0x080009d8:    5cee        .\      LDRB     r6,[r5,r3]
        0x080009da:    2504        .%      MOVS     r5,#4
        0x080009dc:    40b5        .@      LSLS     r5,r5,r6
        0x080009de:    6804        .h      LDR      r4,[r0,#0]
        0x080009e0:    43ac        .C      BICS     r4,r4,r5
        0x080009e2:    6004        .`      STR      r4,[r0,#0]
;;;1806   
;;;1807   }
        0x080009e4:    bd70        p.      POP      {r4-r6,pc}
    $d
        0x080009e6:    0000        ..      DCW    0
        0x080009e8:    080022a7    ."..    DCD    134226599
        0x080009ec:    080022ae    ."..    DCD    134226606
    $t
    i.LL_TIM_OC_EnablePreload
    LL_TIM_OC_EnablePreload
;;;1808   
;;;1809   /**
;;;1810     * @brief  Indicates whether fast mode is enabled for the output channel.
;;;1811     * @rmtoll CCMR1        OC1FE          LL_TIM_OC_IsEnabledFast\n
;;;1812     *         CCMR1        OC2FE          LL_TIM_OC_IsEnabledFast\n
;;;1813     *         CCMR2        OC3FE          LL_TIM_OC_IsEnabledFast\n
;;;1814     *         CCMR2        OC4FE          LL_TIM_OC_IsEnabledFast\n
;;;1815     * @param  TIMx Timer instance
;;;1816     * @param  Channel This parameter can be one of the following values:
;;;1817     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1818     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1819     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1820     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1821     * @retval State of bit (1 or 0).
;;;1822     */
;;;1823   __STATIC_INLINE uint32_t LL_TIM_OC_IsEnabledFast(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1824   {
;;;1825     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1826     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1827     register uint32_t bitfield = TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel];
;;;1828     return (READ_BIT(*pReg, bitfield) == bitfield);
;;;1829   }
;;;1830   
;;;1831   /**
;;;1832     * @brief  Enable compare register (TIMx_CCRx) preload for the output channel.
;;;1833     * @rmtoll CCMR1        OC1PE          LL_TIM_OC_EnablePreload\n
;;;1834     *         CCMR1        OC2PE          LL_TIM_OC_EnablePreload\n
;;;1835     *         CCMR2        OC3PE          LL_TIM_OC_EnablePreload\n
;;;1836     *         CCMR2        OC4PE          LL_TIM_OC_EnablePreload
;;;1837     * @param  TIMx Timer instance
;;;1838     * @param  Channel This parameter can be one of the following values:
;;;1839     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1840     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1841     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1842     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1843     * @retval None
;;;1844     */
;;;1845   __STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1846   {
        0x080009f0:    b570        p.      PUSH     {r4-r6,lr}
        0x080009f2:    4602        .F      MOV      r2,r0
;;;1847     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
        0x080009f4:    2901        .)      CMP      r1,#1
        0x080009f6:    d101        ..      BNE      0x80009fc ; LL_TIM_OC_EnablePreload + 12
        0x080009f8:    2400        .$      MOVS     r4,#0
        0x080009fa:    e016        ..      B        0x8000a2a ; LL_TIM_OC_EnablePreload + 58
        0x080009fc:    2904        .)      CMP      r1,#4
        0x080009fe:    d101        ..      BNE      0x8000a04 ; LL_TIM_OC_EnablePreload + 20
        0x08000a00:    2401        .$      MOVS     r4,#1
        0x08000a02:    e012        ..      B        0x8000a2a ; LL_TIM_OC_EnablePreload + 58
        0x08000a04:    2910        .)      CMP      r1,#0x10
        0x08000a06:    d101        ..      BNE      0x8000a0c ; LL_TIM_OC_EnablePreload + 28
        0x08000a08:    2402        .$      MOVS     r4,#2
        0x08000a0a:    e00e        ..      B        0x8000a2a ; LL_TIM_OC_EnablePreload + 58
        0x08000a0c:    2940        @)      CMP      r1,#0x40
        0x08000a0e:    d101        ..      BNE      0x8000a14 ; LL_TIM_OC_EnablePreload + 36
        0x08000a10:    2403        .$      MOVS     r4,#3
        0x08000a12:    e00a        ..      B        0x8000a2a ; LL_TIM_OC_EnablePreload + 58
        0x08000a14:    f5b17f80    ....    CMP      r1,#0x100
        0x08000a18:    d101        ..      BNE      0x8000a1e ; LL_TIM_OC_EnablePreload + 46
        0x08000a1a:    2404        .$      MOVS     r4,#4
        0x08000a1c:    e005        ..      B        0x8000a2a ; LL_TIM_OC_EnablePreload + 58
        0x08000a1e:    f5b16f80    ...o    CMP      r1,#0x400
        0x08000a22:    d101        ..      BNE      0x8000a28 ; LL_TIM_OC_EnablePreload + 56
        0x08000a24:    2405        .$      MOVS     r4,#5
        0x08000a26:    e000        ..      B        0x8000a2a ; LL_TIM_OC_EnablePreload + 58
        0x08000a28:    2406        .$      MOVS     r4,#6
        0x08000a2a:    4623        #F      MOV      r3,r4
;;;1848     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
        0x08000a2c:    4c06        .L      LDR      r4,[pc,#24] ; [0x8000a48] = 0x80022a7
        0x08000a2e:    5ce5        .\      LDRB     r5,[r4,r3]
        0x08000a30:    f1020418    ....    ADD      r4,r2,#0x18
        0x08000a34:    1928        (.      ADDS     r0,r5,r4
;;;1849     SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
        0x08000a36:    4d05        .M      LDR      r5,[pc,#20] ; [0x8000a4c] = 0x80022ae
        0x08000a38:    5cee        .\      LDRB     r6,[r5,r3]
        0x08000a3a:    2508        .%      MOVS     r5,#8
        0x08000a3c:    40b5        .@      LSLS     r5,r5,r6
        0x08000a3e:    6804        .h      LDR      r4,[r0,#0]
        0x08000a40:    432c        ,C      ORRS     r4,r4,r5
        0x08000a42:    6004        .`      STR      r4,[r0,#0]
;;;1850   }
        0x08000a44:    bd70        p.      POP      {r4-r6,pc}
    $d
        0x08000a46:    0000        ..      DCW    0
        0x08000a48:    080022a7    ."..    DCD    134226599
        0x08000a4c:    080022ae    ."..    DCD    134226606
    $t
    i.LL_TIM_OC_Init
    LL_TIM_OC_Init
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_tim.c
;;;418    {
        0x08000a50:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x08000a54:    4606        .F      MOV      r6,r0
        0x08000a56:    460c        .F      MOV      r4,r1
        0x08000a58:    4615        .F      MOV      r5,r2
;;;419      ErrorStatus result = ERROR;
        0x08000a5a:    2700        .'      MOVS     r7,#0
;;;420    
;;;421      switch (Channel)
        0x08000a5c:    2c01        .,      CMP      r4,#1
        0x08000a5e:    d008        ..      BEQ      0x8000a72 ; LL_TIM_OC_Init + 34
        0x08000a60:    2c10        .,      CMP      r4,#0x10
        0x08000a62:    d00c        ..      BEQ      0x8000a7e ; LL_TIM_OC_Init + 46
        0x08000a64:    f5b47f80    ....    CMP      r4,#0x100
        0x08000a68:    d00f        ..      BEQ      0x8000a8a ; LL_TIM_OC_Init + 58
        0x08000a6a:    f5b45f80    ..._    CMP      r4,#0x1000
        0x08000a6e:    d118        ..      BNE      0x8000aa2 ; LL_TIM_OC_Init + 82
        0x08000a70:    e011        ..      B        0x8000a96 ; LL_TIM_OC_Init + 70
;;;422      {
;;;423        case LL_TIM_CHANNEL_CH1:
;;;424          result = OC1Config(TIMx, TIM_OC_InitStruct);
        0x08000a72:    4629        )F      MOV      r1,r5
        0x08000a74:    4630        0F      MOV      r0,r6
        0x08000a76:    f000fbb1    ....    BL       OC1Config ; 0x80011dc
        0x08000a7a:    4607        .F      MOV      r7,r0
;;;425          break;
        0x08000a7c:    e012        ..      B        0x8000aa4 ; LL_TIM_OC_Init + 84
;;;426        case LL_TIM_CHANNEL_CH2:
;;;427          result = OC2Config(TIMx, TIM_OC_InitStruct);
        0x08000a7e:    4629        )F      MOV      r1,r5
        0x08000a80:    4630        0F      MOV      r0,r6
        0x08000a82:    f000fbe9    ....    BL       OC2Config ; 0x8001258
        0x08000a86:    4607        .F      MOV      r7,r0
;;;428          break;
        0x08000a88:    e00c        ..      B        0x8000aa4 ; LL_TIM_OC_Init + 84
;;;429        case LL_TIM_CHANNEL_CH3:
;;;430          result = OC3Config(TIMx, TIM_OC_InitStruct);
        0x08000a8a:    4629        )F      MOV      r1,r5
        0x08000a8c:    4630        0F      MOV      r0,r6
        0x08000a8e:    f000fc27    ..'.    BL       OC3Config ; 0x80012e0
        0x08000a92:    4607        .F      MOV      r7,r0
;;;431          break;
        0x08000a94:    e006        ..      B        0x8000aa4 ; LL_TIM_OC_Init + 84
;;;432        case LL_TIM_CHANNEL_CH4:
;;;433          result = OC4Config(TIMx, TIM_OC_InitStruct);
        0x08000a96:    4629        )F      MOV      r1,r5
        0x08000a98:    4630        0F      MOV      r0,r6
        0x08000a9a:    f000fc5f    .._.    BL       OC4Config ; 0x800135c
        0x08000a9e:    4607        .F      MOV      r7,r0
;;;434          break;
        0x08000aa0:    e000        ..      B        0x8000aa4 ; LL_TIM_OC_Init + 84
;;;435        default:
;;;436          break;
        0x08000aa2:    bf00        ..      NOP      
        0x08000aa4:    bf00        ..      NOP      
;;;437      }
;;;438    
;;;439      return result;
        0x08000aa6:    4638        8F      MOV      r0,r7
;;;440    }
        0x08000aa8:    e8bd81f0    ....    POP      {r4-r8,pc}
    i.LL_TIM_OC_SetCompareCH2
    LL_TIM_OC_SetCompareCH2
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;2008     WRITE_REG(TIMx->CCR2, CompareValue);
        0x08000aac:    6381        .c      STR      r1,[r0,#0x38]
;;;2009   }
        0x08000aae:    4770        pG      BX       lr
    i.LL_TIM_SetClockSource
    LL_TIM_SetClockSource
;;;2010   
;;;2011   /**
;;;2012     * @brief  Set compare value for output channel 3 (TIMx_CCR3).
;;;2013     * @note Macro @ref IS_TIM_CC3_INSTANCE(TIMx) can be used to check whether or not
;;;2014     *       output channel is supported by a timer instance.
;;;2015     * @rmtoll CCR3         CCR3          LL_TIM_OC_SetCompareCH3
;;;2016     * @param  TIMx Timer instance
;;;2017     * @param  CompareValue between Min_Data=0 and Max_Data=65535
;;;2018     * @retval None
;;;2019     */
;;;2020   __STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
;;;2021   {
;;;2022     WRITE_REG(TIMx->CCR3, CompareValue);
;;;2023   }
;;;2024   
;;;2025   /**
;;;2026     * @brief  Set compare value for output channel 4 (TIMx_CCR4).
;;;2027     * @note Macro @ref IS_TIM_CC4_INSTANCE(TIMx) can be used to check whether or not
;;;2028     *       output channel 4 is supported by a timer instance.
;;;2029     * @rmtoll CCR4         CCR4          LL_TIM_OC_SetCompareCH4
;;;2030     * @param  TIMx Timer instance
;;;2031     * @param  CompareValue between Min_Data=0 and Max_Data=65535
;;;2032     * @retval None
;;;2033     */
;;;2034   __STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
;;;2035   {
;;;2036     WRITE_REG(TIMx->CCR4, CompareValue);
;;;2037   }
;;;2038   
;;;2039   /**
;;;2040     * @brief  Get compare value (TIMx_CCR1) set for  output channel 1.
;;;2041     * @note Macro @ref IS_TIM_CC1_INSTANCE(TIMx) can be used to check whether or not
;;;2042     *       output channel 1 is supported by a timer instance.
;;;2043     * @rmtoll CCR1         CCR1          LL_TIM_OC_GetCompareCH1
;;;2044     * @param  TIMx Timer instance
;;;2045     * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
;;;2046     */
;;;2047   __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH1(TIM_TypeDef *TIMx)
;;;2048   {
;;;2049     return (uint32_t)(READ_REG(TIMx->CCR1));
;;;2050   }
;;;2051   
;;;2052   /**
;;;2053     * @brief  Get compare value (TIMx_CCR2) set for  output channel 2.
;;;2054     * @note Macro @ref IS_TIM_CC2_INSTANCE(TIMx) can be used to check whether or not
;;;2055     *       output channel 2 is supported by a timer instance.
;;;2056     * @rmtoll CCR2         CCR2          LL_TIM_OC_GetCompareCH2
;;;2057     * @param  TIMx Timer instance
;;;2058     * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
;;;2059     */
;;;2060   __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH2(TIM_TypeDef *TIMx)
;;;2061   {
;;;2062     return (uint32_t)(READ_REG(TIMx->CCR2));
;;;2063   }
;;;2064   
;;;2065   /**
;;;2066     * @brief  Get compare value (TIMx_CCR3) set for  output channel 3.
;;;2067     * @note Macro @ref IS_TIM_CC3_INSTANCE(TIMx) can be used to check whether or not
;;;2068     *       output channel 3 is supported by a timer instance.
;;;2069     * @rmtoll CCR3         CCR3          LL_TIM_OC_GetCompareCH3
;;;2070     * @param  TIMx Timer instance
;;;2071     * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
;;;2072     */
;;;2073   __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH3(TIM_TypeDef *TIMx)
;;;2074   {
;;;2075     return (uint32_t)(READ_REG(TIMx->CCR3));
;;;2076   }
;;;2077   
;;;2078   /**
;;;2079     * @brief  Get compare value (TIMx_CCR4) set for  output channel 4.
;;;2080     * @note Macro @ref IS_TIM_CC4_INSTANCE(TIMx) can be used to check whether or not
;;;2081     *       output channel 4 is supported by a timer instance.
;;;2082     * @rmtoll CCR4         CCR4          LL_TIM_OC_GetCompareCH4
;;;2083     * @param  TIMx Timer instance
;;;2084     * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
;;;2085     */
;;;2086   __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH4(TIM_TypeDef *TIMx)
;;;2087   {
;;;2088     return (uint32_t)(READ_REG(TIMx->CCR4));
;;;2089   }
;;;2090   
;;;2091   /**
;;;2092     * @}
;;;2093     */
;;;2094   
;;;2095   /** @defgroup TIM_LL_EF_Input_Channel Input channel configuration
;;;2096     * @{
;;;2097     */
;;;2098   /**
;;;2099     * @brief  Configure input channel.
;;;2100     * @rmtoll CCMR1        CC1S          LL_TIM_IC_Config\n
;;;2101     *         CCMR1        IC1PSC        LL_TIM_IC_Config\n
;;;2102     *         CCMR1        IC1F          LL_TIM_IC_Config\n
;;;2103     *         CCMR1        CC2S          LL_TIM_IC_Config\n
;;;2104     *         CCMR1        IC2PSC        LL_TIM_IC_Config\n
;;;2105     *         CCMR1        IC2F          LL_TIM_IC_Config\n
;;;2106     *         CCMR2        CC3S          LL_TIM_IC_Config\n
;;;2107     *         CCMR2        IC3PSC        LL_TIM_IC_Config\n
;;;2108     *         CCMR2        IC3F          LL_TIM_IC_Config\n
;;;2109     *         CCMR2        CC4S          LL_TIM_IC_Config\n
;;;2110     *         CCMR2        IC4PSC        LL_TIM_IC_Config\n
;;;2111     *         CCMR2        IC4F          LL_TIM_IC_Config\n
;;;2112     *         CCER         CC1P          LL_TIM_IC_Config\n
;;;2113     *         CCER         CC1NP         LL_TIM_IC_Config\n
;;;2114     *         CCER         CC2P          LL_TIM_IC_Config\n
;;;2115     *         CCER         CC2NP         LL_TIM_IC_Config\n
;;;2116     *         CCER         CC3P          LL_TIM_IC_Config\n
;;;2117     *         CCER         CC3NP         LL_TIM_IC_Config\n
;;;2118     *         CCER         CC4P          LL_TIM_IC_Config\n
;;;2119     * @param  TIMx Timer instance
;;;2120     * @param  Channel This parameter can be one of the following values:
;;;2121     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2122     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2123     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2124     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2125     * @param  Configuration This parameter must be a combination of all the following values:
;;;2126     *         @arg @ref LL_TIM_ACTIVEINPUT_DIRECTTI or @ref LL_TIM_ACTIVEINPUT_INDIRECTTI or @ref LL_TIM_ACTIVEINPUT_TRC
;;;2127     *         @arg @ref LL_TIM_ICPSC_DIV1 or ... or @ref LL_TIM_ICPSC_DIV8
;;;2128     *         @arg @ref LL_TIM_IC_FILTER_FDIV1 or ... or @ref LL_TIM_IC_FILTER_FDIV32_N8
;;;2129     *         @arg @ref LL_TIM_IC_POLARITY_RISING or @ref LL_TIM_IC_POLARITY_FALLING
;;;2130     * @retval None
;;;2131     */
;;;2132   __STATIC_INLINE void LL_TIM_IC_Config(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Configuration)
;;;2133   {
;;;2134     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2135     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2136     MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F | TIM_CCMR1_IC1PSC | TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]),
;;;2137                ((Configuration >> 16U) & (TIM_CCMR1_IC1F | TIM_CCMR1_IC1PSC | TIM_CCMR1_CC1S))  << SHIFT_TAB_ICxx[iChannel]);
;;;2138     MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
;;;2139                (Configuration & (TIM_CCER_CC1NP | TIM_CCER_CC1P)) << SHIFT_TAB_CCxP[iChannel]);
;;;2140   }
;;;2141   
;;;2142   /**
;;;2143     * @brief  Set the active input.
;;;2144     * @rmtoll CCMR1        CC1S          LL_TIM_IC_SetActiveInput\n
;;;2145     *         CCMR1        CC2S          LL_TIM_IC_SetActiveInput\n
;;;2146     *         CCMR2        CC3S          LL_TIM_IC_SetActiveInput\n
;;;2147     *         CCMR2        CC4S          LL_TIM_IC_SetActiveInput
;;;2148     * @param  TIMx Timer instance
;;;2149     * @param  Channel This parameter can be one of the following values:
;;;2150     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2151     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2152     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2153     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2154     * @param  ICActiveInput This parameter can be one of the following values:
;;;2155     *         @arg @ref LL_TIM_ACTIVEINPUT_DIRECTTI
;;;2156     *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
;;;2157     *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
;;;2158     * @retval None
;;;2159     */
;;;2160   __STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiveInput)
;;;2161   {
;;;2162     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2163     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2164     MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
;;;2165   }
;;;2166   
;;;2167   /**
;;;2168     * @brief  Get the current active input.
;;;2169     * @rmtoll CCMR1        CC1S          LL_TIM_IC_GetActiveInput\n
;;;2170     *         CCMR1        CC2S          LL_TIM_IC_GetActiveInput\n
;;;2171     *         CCMR2        CC3S          LL_TIM_IC_GetActiveInput\n
;;;2172     *         CCMR2        CC4S          LL_TIM_IC_GetActiveInput
;;;2173     * @param  TIMx Timer instance
;;;2174     * @param  Channel This parameter can be one of the following values:
;;;2175     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2176     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2177     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2178     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2179     * @retval Returned value can be one of the following values:
;;;2180     *         @arg @ref LL_TIM_ACTIVEINPUT_DIRECTTI
;;;2181     *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
;;;2182     *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
;;;2183     */
;;;2184   __STATIC_INLINE uint32_t LL_TIM_IC_GetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel)
;;;2185   {
;;;2186     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2187     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2188     return ((READ_BIT(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iChannel]) << 16U);
;;;2189   }
;;;2190   
;;;2191   /**
;;;2192     * @brief  Set the prescaler of input channel.
;;;2193     * @rmtoll CCMR1        IC1PSC        LL_TIM_IC_SetPrescaler\n
;;;2194     *         CCMR1        IC2PSC        LL_TIM_IC_SetPrescaler\n
;;;2195     *         CCMR2        IC3PSC        LL_TIM_IC_SetPrescaler\n
;;;2196     *         CCMR2        IC4PSC        LL_TIM_IC_SetPrescaler
;;;2197     * @param  TIMx Timer instance
;;;2198     * @param  Channel This parameter can be one of the following values:
;;;2199     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2200     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2201     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2202     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2203     * @param  ICPrescaler This parameter can be one of the following values:
;;;2204     *         @arg @ref LL_TIM_ICPSC_DIV1
;;;2205     *         @arg @ref LL_TIM_ICPSC_DIV2
;;;2206     *         @arg @ref LL_TIM_ICPSC_DIV4
;;;2207     *         @arg @ref LL_TIM_ICPSC_DIV8
;;;2208     * @retval None
;;;2209     */
;;;2210   __STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
;;;2211   {
;;;2212     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2213     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2214     MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
;;;2215   }
;;;2216   
;;;2217   /**
;;;2218     * @brief  Get the current prescaler value acting on an  input channel.
;;;2219     * @rmtoll CCMR1        IC1PSC        LL_TIM_IC_GetPrescaler\n
;;;2220     *         CCMR1        IC2PSC        LL_TIM_IC_GetPrescaler\n
;;;2221     *         CCMR2        IC3PSC        LL_TIM_IC_GetPrescaler\n
;;;2222     *         CCMR2        IC4PSC        LL_TIM_IC_GetPrescaler
;;;2223     * @param  TIMx Timer instance
;;;2224     * @param  Channel This parameter can be one of the following values:
;;;2225     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2226     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2227     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2228     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2229     * @retval Returned value can be one of the following values:
;;;2230     *         @arg @ref LL_TIM_ICPSC_DIV1
;;;2231     *         @arg @ref LL_TIM_ICPSC_DIV2
;;;2232     *         @arg @ref LL_TIM_ICPSC_DIV4
;;;2233     *         @arg @ref LL_TIM_ICPSC_DIV8
;;;2234     */
;;;2235   __STATIC_INLINE uint32_t LL_TIM_IC_GetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel)
;;;2236   {
;;;2237     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2238     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2239     return ((READ_BIT(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iChannel]) << 16U);
;;;2240   }
;;;2241   
;;;2242   /**
;;;2243     * @brief  Set the input filter duration.
;;;2244     * @rmtoll CCMR1        IC1F          LL_TIM_IC_SetFilter\n
;;;2245     *         CCMR1        IC2F          LL_TIM_IC_SetFilter\n
;;;2246     *         CCMR2        IC3F          LL_TIM_IC_SetFilter\n
;;;2247     *         CCMR2        IC4F          LL_TIM_IC_SetFilter
;;;2248     * @param  TIMx Timer instance
;;;2249     * @param  Channel This parameter can be one of the following values:
;;;2250     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2251     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2252     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2253     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2254     * @param  ICFilter This parameter can be one of the following values:
;;;2255     *         @arg @ref LL_TIM_IC_FILTER_FDIV1
;;;2256     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N2
;;;2257     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N4
;;;2258     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N8
;;;2259     *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N6
;;;2260     *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N8
;;;2261     *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N6
;;;2262     *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N8
;;;2263     *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N6
;;;2264     *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N8
;;;2265     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N5
;;;2266     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N6
;;;2267     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N8
;;;2268     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N5
;;;2269     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
;;;2270     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
;;;2271     * @retval None
;;;2272     */
;;;2273   __STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
;;;2274   {
;;;2275     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2276     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2277     MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
;;;2278   }
;;;2279   
;;;2280   /**
;;;2281     * @brief  Get the input filter duration.
;;;2282     * @rmtoll CCMR1        IC1F          LL_TIM_IC_GetFilter\n
;;;2283     *         CCMR1        IC2F          LL_TIM_IC_GetFilter\n
;;;2284     *         CCMR2        IC3F          LL_TIM_IC_GetFilter\n
;;;2285     *         CCMR2        IC4F          LL_TIM_IC_GetFilter
;;;2286     * @param  TIMx Timer instance
;;;2287     * @param  Channel This parameter can be one of the following values:
;;;2288     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2289     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2290     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2291     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2292     * @retval Returned value can be one of the following values:
;;;2293     *         @arg @ref LL_TIM_IC_FILTER_FDIV1
;;;2294     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N2
;;;2295     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N4
;;;2296     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N8
;;;2297     *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N6
;;;2298     *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N8
;;;2299     *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N6
;;;2300     *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N8
;;;2301     *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N6
;;;2302     *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N8
;;;2303     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N5
;;;2304     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N6
;;;2305     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N8
;;;2306     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N5
;;;2307     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
;;;2308     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
;;;2309     */
;;;2310   __STATIC_INLINE uint32_t LL_TIM_IC_GetFilter(TIM_TypeDef *TIMx, uint32_t Channel)
;;;2311   {
;;;2312     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2313     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2314     return ((READ_BIT(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iChannel]) << 16U);
;;;2315   }
;;;2316   
;;;2317   /**
;;;2318     * @brief  Set the input channel polarity.
;;;2319     * @rmtoll CCER         CC1P          LL_TIM_IC_SetPolarity\n
;;;2320     *         CCER         CC1NP         LL_TIM_IC_SetPolarity\n
;;;2321     *         CCER         CC2P          LL_TIM_IC_SetPolarity\n
;;;2322     *         CCER         CC2NP         LL_TIM_IC_SetPolarity\n
;;;2323     *         CCER         CC3P          LL_TIM_IC_SetPolarity\n
;;;2324     *         CCER         CC3NP         LL_TIM_IC_SetPolarity\n
;;;2325     *         CCER         CC4P          LL_TIM_IC_SetPolarity\n
;;;2326     * @param  TIMx Timer instance
;;;2327     * @param  Channel This parameter can be one of the following values:
;;;2328     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2329     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2330     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2331     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2332     * @param  ICPolarity This parameter can be one of the following values:
;;;2333     *         @arg @ref LL_TIM_IC_POLARITY_RISING
;;;2334     *         @arg @ref LL_TIM_IC_POLARITY_FALLING
;;;2335     * @retval None
;;;2336     */
;;;2337   __STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
;;;2338   {
;;;2339     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2340     MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
;;;2341                ICPolarity << SHIFT_TAB_CCxP[iChannel]);
;;;2342   }
;;;2343   
;;;2344   /**
;;;2345     * @brief  Get the current input channel polarity.
;;;2346     * @rmtoll CCER         CC1P          LL_TIM_IC_GetPolarity\n
;;;2347     *         CCER         CC1NP         LL_TIM_IC_GetPolarity\n
;;;2348     *         CCER         CC2P          LL_TIM_IC_GetPolarity\n
;;;2349     *         CCER         CC2NP         LL_TIM_IC_GetPolarity\n
;;;2350     *         CCER         CC3P          LL_TIM_IC_GetPolarity\n
;;;2351     *         CCER         CC3NP         LL_TIM_IC_GetPolarity\n
;;;2352     *         CCER         CC4P          LL_TIM_IC_GetPolarity\n
;;;2353     * @param  TIMx Timer instance
;;;2354     * @param  Channel This parameter can be one of the following values:
;;;2355     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2356     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2357     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2358     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2359     * @retval Returned value can be one of the following values:
;;;2360     *         @arg @ref LL_TIM_IC_POLARITY_RISING
;;;2361     *         @arg @ref LL_TIM_IC_POLARITY_FALLING
;;;2362     */
;;;2363   __STATIC_INLINE uint32_t LL_TIM_IC_GetPolarity(TIM_TypeDef *TIMx, uint32_t Channel)
;;;2364   {
;;;2365     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2366     return (READ_BIT(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel])) >>
;;;2367             SHIFT_TAB_CCxP[iChannel]);
;;;2368   }
;;;2369   
;;;2370   /**
;;;2371     * @brief  Connect the TIMx_CH1, CH2 and CH3 pins  to the TI1 input (XOR combination).
;;;2372     * @note Macro @ref IS_TIM_XOR_INSTANCE(TIMx) can be used to check whether or not
;;;2373     *       a timer instance provides an XOR input.
;;;2374     * @rmtoll CR2          TI1S          LL_TIM_IC_EnableXORCombination
;;;2375     * @param  TIMx Timer instance
;;;2376     * @retval None
;;;2377     */
;;;2378   __STATIC_INLINE void LL_TIM_IC_EnableXORCombination(TIM_TypeDef *TIMx)
;;;2379   {
;;;2380     SET_BIT(TIMx->CR2, TIM_CR2_TI1S);
;;;2381   }
;;;2382   
;;;2383   /**
;;;2384     * @brief  Disconnect the TIMx_CH1, CH2 and CH3 pins  from the TI1 input.
;;;2385     * @note Macro @ref IS_TIM_XOR_INSTANCE(TIMx) can be used to check whether or not
;;;2386     *       a timer instance provides an XOR input.
;;;2387     * @rmtoll CR2          TI1S          LL_TIM_IC_DisableXORCombination
;;;2388     * @param  TIMx Timer instance
;;;2389     * @retval None
;;;2390     */
;;;2391   __STATIC_INLINE void LL_TIM_IC_DisableXORCombination(TIM_TypeDef *TIMx)
;;;2392   {
;;;2393     CLEAR_BIT(TIMx->CR2, TIM_CR2_TI1S);
;;;2394   }
;;;2395   
;;;2396   /**
;;;2397     * @brief  Indicates whether the TIMx_CH1, CH2 and CH3 pins are connectected to the TI1 input.
;;;2398     * @note Macro @ref IS_TIM_XOR_INSTANCE(TIMx) can be used to check whether or not
;;;2399     * a timer instance provides an XOR input.
;;;2400     * @rmtoll CR2          TI1S          LL_TIM_IC_IsEnabledXORCombination
;;;2401     * @param  TIMx Timer instance
;;;2402     * @retval State of bit (1 or 0).
;;;2403     */
;;;2404   __STATIC_INLINE uint32_t LL_TIM_IC_IsEnabledXORCombination(TIM_TypeDef *TIMx)
;;;2405   {
;;;2406     return (READ_BIT(TIMx->CR2, TIM_CR2_TI1S) == (TIM_CR2_TI1S));
;;;2407   }
;;;2408   
;;;2409   /**
;;;2410     * @brief  Get captured value for input channel 1.
;;;2411     * @note Macro @ref IS_TIM_CC1_INSTANCE(TIMx) can be used to check whether or not
;;;2412     *       input channel 1 is supported by a timer instance.
;;;2413     * @rmtoll CCR1         CCR1          LL_TIM_IC_GetCaptureCH1
;;;2414     * @param  TIMx Timer instance
;;;2415     * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
;;;2416     */
;;;2417   __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH1(TIM_TypeDef *TIMx)
;;;2418   {
;;;2419     return (uint32_t)(READ_REG(TIMx->CCR1));
;;;2420   }
;;;2421   
;;;2422   /**
;;;2423     * @brief  Get captured value for input channel 2.
;;;2424     * @note Macro @ref IS_TIM_CC2_INSTANCE(TIMx) can be used to check whether or not
;;;2425     *       input channel 2 is supported by a timer instance.
;;;2426     * @rmtoll CCR2         CCR2          LL_TIM_IC_GetCaptureCH2
;;;2427     * @param  TIMx Timer instance
;;;2428     * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
;;;2429     */
;;;2430   __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH2(TIM_TypeDef *TIMx)
;;;2431   {
;;;2432     return (uint32_t)(READ_REG(TIMx->CCR2));
;;;2433   }
;;;2434   
;;;2435   /**
;;;2436     * @brief  Get captured value for input channel 3.
;;;2437     * @note Macro @ref IS_TIM_CC3_INSTANCE(TIMx) can be used to check whether or not
;;;2438     *       input channel 3 is supported by a timer instance.
;;;2439     * @rmtoll CCR3         CCR3          LL_TIM_IC_GetCaptureCH3
;;;2440     * @param  TIMx Timer instance
;;;2441     * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
;;;2442     */
;;;2443   __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH3(TIM_TypeDef *TIMx)
;;;2444   {
;;;2445     return (uint32_t)(READ_REG(TIMx->CCR3));
;;;2446   }
;;;2447   
;;;2448   /**
;;;2449     * @brief  Get captured value for input channel 4.
;;;2450     * @note Macro @ref IS_TIM_CC4_INSTANCE(TIMx) can be used to check whether or not
;;;2451     *       input channel 4 is supported by a timer instance.
;;;2452     * @rmtoll CCR4         CCR4          LL_TIM_IC_GetCaptureCH4
;;;2453     * @param  TIMx Timer instance
;;;2454     * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
;;;2455     */
;;;2456   __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH4(TIM_TypeDef *TIMx)
;;;2457   {
;;;2458     return (uint32_t)(READ_REG(TIMx->CCR4));
;;;2459   }
;;;2460   
;;;2461   /**
;;;2462     * @}
;;;2463     */
;;;2464   
;;;2465   /** @defgroup TIM_LL_EF_Clock_Selection Counter clock selection
;;;2466     * @{
;;;2467     */
;;;2468   /**
;;;2469     * @brief  Enable external clock mode 2.
;;;2470     * @note When external clock mode 2 is enabled the counter is clocked by any active edge on the ETRF signal.
;;;2471     * @note Macro @ref IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
;;;2472     *       whether or not a timer instance supports external clock mode2.
;;;2473     * @rmtoll SMCR         ECE           LL_TIM_EnableExternalClock
;;;2474     * @param  TIMx Timer instance
;;;2475     * @retval None
;;;2476     */
;;;2477   __STATIC_INLINE void LL_TIM_EnableExternalClock(TIM_TypeDef *TIMx)
;;;2478   {
;;;2479     SET_BIT(TIMx->SMCR, TIM_SMCR_ECE);
;;;2480   }
;;;2481   
;;;2482   /**
;;;2483     * @brief  Disable external clock mode 2.
;;;2484     * @note Macro @ref IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
;;;2485     *       whether or not a timer instance supports external clock mode2.
;;;2486     * @rmtoll SMCR         ECE           LL_TIM_DisableExternalClock
;;;2487     * @param  TIMx Timer instance
;;;2488     * @retval None
;;;2489     */
;;;2490   __STATIC_INLINE void LL_TIM_DisableExternalClock(TIM_TypeDef *TIMx)
;;;2491   {
;;;2492     CLEAR_BIT(TIMx->SMCR, TIM_SMCR_ECE);
;;;2493   }
;;;2494   
;;;2495   /**
;;;2496     * @brief  Indicate whether external clock mode 2 is enabled.
;;;2497     * @note Macro @ref IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
;;;2498     *       whether or not a timer instance supports external clock mode2.
;;;2499     * @rmtoll SMCR         ECE           LL_TIM_IsEnabledExternalClock
;;;2500     * @param  TIMx Timer instance
;;;2501     * @retval State of bit (1 or 0).
;;;2502     */
;;;2503   __STATIC_INLINE uint32_t LL_TIM_IsEnabledExternalClock(TIM_TypeDef *TIMx)
;;;2504   {
;;;2505     return (READ_BIT(TIMx->SMCR, TIM_SMCR_ECE) == (TIM_SMCR_ECE));
;;;2506   }
;;;2507   
;;;2508   /**
;;;2509     * @brief  Set the clock source of the counter clock.
;;;2510     * @note when selected clock source is external clock mode 1, the timer input
;;;2511     *       the external clock is applied is selected by calling the @ref LL_TIM_SetTriggerInput()
;;;2512     *       function. This timer input must be configured by calling
;;;2513     *       the @ref LL_TIM_IC_Config() function.
;;;2514     * @note Macro @ref IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(TIMx) can be used to check
;;;2515     *       whether or not a timer instance supports external clock mode1.
;;;2516     * @note Macro @ref IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
;;;2517     *       whether or not a timer instance supports external clock mode2.
;;;2518     * @rmtoll SMCR         SMS           LL_TIM_SetClockSource\n
;;;2519     *         SMCR         ECE           LL_TIM_SetClockSource
;;;2520     * @param  TIMx Timer instance
;;;2521     * @param  ClockSource This parameter can be one of the following values:
;;;2522     *         @arg @ref LL_TIM_CLOCKSOURCE_INTERNAL
;;;2523     *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
;;;2524     *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
;;;2525     * @retval None
;;;2526     */
;;;2527   __STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
;;;2528   {
;;;2529     MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
        0x08000ab0:    6882        .h      LDR      r2,[r0,#8]
        0x08000ab2:    f2440307    D...    MOV      r3,#0x4007
        0x08000ab6:    439a        .C      BICS     r2,r2,r3
        0x08000ab8:    430a        .C      ORRS     r2,r2,r1
        0x08000aba:    6082        .`      STR      r2,[r0,#8]
;;;2530   }
        0x08000abc:    4770        pG      BX       lr
    i.LL_TIM_SetSlaveMode
    LL_TIM_SetSlaveMode
;;;2531   
;;;2532   /**
;;;2533     * @brief  Set the encoder interface mode.
;;;2534     * @note Macro @ref IS_TIM_ENCODER_INTERFACE_INSTANCE(TIMx) can be used to check
;;;2535     *       whether or not a timer instance supports the encoder mode.
;;;2536     * @rmtoll SMCR         SMS           LL_TIM_SetEncoderMode
;;;2537     * @param  TIMx Timer instance
;;;2538     * @param  EncoderMode This parameter can be one of the following values:
;;;2539     *         @arg @ref LL_TIM_ENCODERMODE_X2_TI1
;;;2540     *         @arg @ref LL_TIM_ENCODERMODE_X2_TI2
;;;2541     *         @arg @ref LL_TIM_ENCODERMODE_X4_TI12
;;;2542     * @retval None
;;;2543     */
;;;2544   __STATIC_INLINE void LL_TIM_SetEncoderMode(TIM_TypeDef *TIMx, uint32_t EncoderMode)
;;;2545   {
;;;2546     MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
;;;2547   }
;;;2548   
;;;2549   /**
;;;2550     * @}
;;;2551     */
;;;2552   
;;;2553   /** @defgroup TIM_LL_EF_Timer_Synchronization Timer synchronisation configuration
;;;2554     * @{
;;;2555     */
;;;2556   /**
;;;2557     * @brief  Set the trigger output (TRGO) used for timer synchronization .
;;;2558     * @note Macro @ref IS_TIM_MASTER_INSTANCE(TIMx) can be used to check
;;;2559     *       whether or not a timer instance can operate as a master timer.
;;;2560     * @rmtoll CR2          MMS           LL_TIM_SetTriggerOutput
;;;2561     * @param  TIMx Timer instance
;;;2562     * @param  TimerSynchronization This parameter can be one of the following values:
;;;2563     *         @arg @ref LL_TIM_TRGO_RESET
;;;2564     *         @arg @ref LL_TIM_TRGO_ENABLE
;;;2565     *         @arg @ref LL_TIM_TRGO_UPDATE
;;;2566     *         @arg @ref LL_TIM_TRGO_CC1IF
;;;2567     *         @arg @ref LL_TIM_TRGO_OC1REF
;;;2568     *         @arg @ref LL_TIM_TRGO_OC2REF
;;;2569     *         @arg @ref LL_TIM_TRGO_OC3REF
;;;2570     *         @arg @ref LL_TIM_TRGO_OC4REF
;;;2571     * @retval None
;;;2572     */
;;;2573   __STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
;;;2574   {
;;;2575     MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
;;;2576   }
;;;2577   
;;;2578   /**
;;;2579     * @brief  Set the synchronization mode of a slave timer.
;;;2580     * @note Macro @ref IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
;;;2581     *       a timer instance can operate as a slave timer.
;;;2582     * @rmtoll SMCR         SMS           LL_TIM_SetSlaveMode
;;;2583     * @param  TIMx Timer instance
;;;2584     * @param  SlaveMode This parameter can be one of the following values:
;;;2585     *         @arg @ref LL_TIM_SLAVEMODE_DISABLED
;;;2586     *         @arg @ref LL_TIM_SLAVEMODE_RESET
;;;2587     *         @arg @ref LL_TIM_SLAVEMODE_GATED
;;;2588     *         @arg @ref LL_TIM_SLAVEMODE_TRIGGER
;;;2589     * @retval None
;;;2590     */
;;;2591   __STATIC_INLINE void LL_TIM_SetSlaveMode(TIM_TypeDef *TIMx, uint32_t SlaveMode)
;;;2592   {
;;;2593     MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
        0x08000abe:    6882        .h      LDR      r2,[r0,#8]
        0x08000ac0:    f0220207    "...    BIC      r2,r2,#7
        0x08000ac4:    430a        .C      ORRS     r2,r2,r1
        0x08000ac6:    6082        .`      STR      r2,[r0,#8]
;;;2594   }
        0x08000ac8:    4770        pG      BX       lr
    i.LL_TIM_SetSlaveMode
    LL_TIM_SetSlaveMode
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h (2593)
        0x08000aca:    6882        .h      LDR      r2,[r0,#8]
        0x08000acc:    f0220207    "...    BIC      r2,r2,#7
        0x08000ad0:    430a        .C      ORRS     r2,r2,r1
        0x08000ad2:    6082        .`      STR      r2,[r0,#8]
;;;2594   }
        0x08000ad4:    4770        pG      BX       lr
    i.LL_TIM_SetTriggerInput
    LL_TIM_SetTriggerInput
;;;2595   
;;;2596   /**
;;;2597     * @brief  Set the selects the trigger input to be used to synchronize the counter.
;;;2598     * @note Macro @ref IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
;;;2599     *       a timer instance can operate as a slave timer.
;;;2600     * @rmtoll SMCR         TS            LL_TIM_SetTriggerInput
;;;2601     * @param  TIMx Timer instance
;;;2602     * @param  TriggerInput This parameter can be one of the following values:
;;;2603     *         @arg @ref LL_TIM_TS_ITR0
;;;2604     *         @arg @ref LL_TIM_TS_ITR1
;;;2605     *         @arg @ref LL_TIM_TS_ITR2
;;;2606     *         @arg @ref LL_TIM_TS_ITR3
;;;2607     *         @arg @ref LL_TIM_TS_TI1F_ED
;;;2608     *         @arg @ref LL_TIM_TS_TI1FP1
;;;2609     *         @arg @ref LL_TIM_TS_TI2FP2
;;;2610     *         @arg @ref LL_TIM_TS_ETRF
;;;2611     * @retval None
;;;2612     */
;;;2613   __STATIC_INLINE void LL_TIM_SetTriggerInput(TIM_TypeDef *TIMx, uint32_t TriggerInput)
;;;2614   {
;;;2615     MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
        0x08000ad6:    6882        .h      LDR      r2,[r0,#8]
        0x08000ad8:    f0220270    ".p.    BIC      r2,r2,#0x70
        0x08000adc:    430a        .C      ORRS     r2,r2,r1
        0x08000ade:    6082        .`      STR      r2,[r0,#8]
;;;2616   }
        0x08000ae0:    4770        pG      BX       lr
    i.LL_TIM_SetTriggerOutput
    LL_TIM_SetTriggerOutput
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h (2575)
        0x08000ae2:    6842        Bh      LDR      r2,[r0,#4]
        0x08000ae4:    f0220270    ".p.    BIC      r2,r2,#0x70
        0x08000ae8:    430a        .C      ORRS     r2,r2,r1
        0x08000aea:    6042        B`      STR      r2,[r0,#4]
;;;2576   }
        0x08000aec:    4770        pG      BX       lr
    i.LL_mDelay
    LL_mDelay
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_utils.c
;;;201    {
        0x08000aee:    b508        ..      PUSH     {r3,lr}
;;;202      __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
        0x08000af0:    f04f21e0    O..!    MOV      r1,#0xe000e000
        0x08000af4:    6909        .i      LDR      r1,[r1,#0x10]
        0x08000af6:    9100        ..      STR      r1,[sp,#0]
;;;203      /* Add this code to indicate that local variable is not used */
;;;204      ((void)tmp);
        0x08000af8:    bf00        ..      NOP      
;;;205    
;;;206      /* Add a period to guaranty minimum wait */
;;;207      if (Delay < LL_MAX_DELAY)
        0x08000afa:    1c41        A.      ADDS     r1,r0,#1
        0x08000afc:    b101        ..      CBZ      r1,0x8000b00 ; LL_mDelay + 18
;;;208      {
;;;209        Delay++;
        0x08000afe:    1c40        @.      ADDS     r0,r0,#1
;;;210      }
;;;211    
;;;212      while (Delay)
        0x08000b00:    e006        ..      B        0x8000b10 ; LL_mDelay + 34
        0x08000b02:    f04f21e0    O..!    MOV      r1,#0xe000e000
        0x08000b06:    6909        .i      LDR      r1,[r1,#0x10]
        0x08000b08:    f4013180    ...1    AND      r1,r1,#0x10000
        0x08000b0c:    b101        ..      CBZ      r1,0x8000b10 ; LL_mDelay + 34
        0x08000b0e:    1e40        @.      SUBS     r0,r0,#1
        0x08000b10:    2800        .(      CMP      r0,#0
        0x08000b12:    d1f6        ..      BNE      0x8000b02 ; LL_mDelay + 20
;;;213      {
;;;214        if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
;;;215        {
;;;216          Delay--;
;;;217        }
;;;218      }
;;;219    }
        0x08000b14:    bd08        ..      POP      {r3,pc}
        0x08000b16:    0000        ..      MOVS     r0,r0
    i.MX_DMA_Init
    MX_DMA_Init
;;; .\../Src/main.c
;;;738    {
        0x08000b18:    b538        8.      PUSH     {r3-r5,lr}
;;;739      /* Init with LL driver */
;;;740      /* DMA controller clock enable */
;;;741      LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
        0x08000b1a:    2001        .       MOVS     r0,#1
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h
;;;288      SET_BIT(RCC->AHBENR, Periphs);
        0x08000b1c:    490d        .I      LDR      r1,[pc,#52] ; [0x8000b54] = 0x40021000
        0x08000b1e:    6949        Ii      LDR      r1,[r1,#0x14]
        0x08000b20:    4301        .C      ORRS     r1,r1,r0
        0x08000b22:    4a0c        .J      LDR      r2,[pc,#48] ; [0x8000b54] = 0x40021000
        0x08000b24:    6151        Qa      STR      r1,[r2,#0x14]
;;;289      /* Delay after an RCC peripheral clock enabling */
;;;290      tmpreg = READ_BIT(RCC->AHBENR, Periphs);
        0x08000b26:    4611        .F      MOV      r1,r2
        0x08000b28:    6949        Ii      LDR      r1,[r1,#0x14]
        0x08000b2a:    4001        .@      ANDS     r1,r1,r0
        0x08000b2c:    9100        ..      STR      r1,[sp,#0]
;;;291      (void)tmpreg;
        0x08000b2e:    bf00        ..      NOP      
;;;292    }
        0x08000b30:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;745      NVIC_SetPriority(DMA1_Channel4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
        0x08000b32:    f000fb37    ..7.    BL       NVIC_GetPriorityGrouping ; 0x80011a4
        0x08000b36:    4605        .F      MOV      r5,r0
        0x08000b38:    2200        ."      MOVS     r2,#0
        0x08000b3a:    2102        .!      MOVS     r1,#2
        0x08000b3c:    f000fb11    ....    BL       NVIC_EncodePriority ; 0x8001162
        0x08000b40:    4604        .F      MOV      r4,r0
        0x08000b42:    4621        !F      MOV      r1,r4
        0x08000b44:    200e        .       MOVS     r0,#0xe
        0x08000b46:    f000fb35    ..5.    BL       NVIC_SetPriority ; 0x80011b4
;;;746      NVIC_EnableIRQ(DMA1_Channel4_IRQn);
        0x08000b4a:    200e        .       MOVS     r0,#0xe
        0x08000b4c:    f000fafe    ....    BL       NVIC_EnableIRQ ; 0x800114c
;;;747    
;;;748    }
        0x08000b50:    bd38        8.      POP      {r3-r5,pc}
    $d
        0x08000b52:    0000        ..      DCW    0
        0x08000b54:    40021000    ...@    DCD    1073876992
    $t
    i.MX_GPIO_Init
    MX_GPIO_Init
;;;749    
;;;750    /** Configure pins as 
;;;751            * Analog 
;;;752            * Input 
;;;753            * Output
;;;754            * EVENT_OUT
;;;755            * EXTI
;;;756            * Free pins are configured automatically as Analog (this feature is enabled through 
;;;757            * the Code Generation settings)
;;;758    */
;;;759    static void MX_GPIO_Init(void)
;;;760    {
        0x08000b58:    b500        ..      PUSH     {lr}
        0x08000b5a:    b085        ..      SUB      sp,sp,#0x14
;;;761    
;;;762      LL_GPIO_InitTypeDef GPIO_InitStruct;
;;;763    
;;;764      /* GPIO Ports Clock Enable */
;;;765      LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
        0x08000b5c:    2010        .       MOVS     r0,#0x10
        0x08000b5e:    f7fffbc9    ....    BL       LL_APB2_GRP1_EnableClock ; 0x80002f4
;;;766      LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
        0x08000b62:    2020                MOVS     r0,#0x20
        0x08000b64:    f7fffbc6    ....    BL       LL_APB2_GRP1_EnableClock ; 0x80002f4
;;;767      LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
        0x08000b68:    2004        .       MOVS     r0,#4
        0x08000b6a:    f7fffbc3    ....    BL       LL_APB2_GRP1_EnableClock ; 0x80002f4
;;;768      LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
        0x08000b6e:    2008        .       MOVS     r0,#8
        0x08000b70:    f7fffbc0    ....    BL       LL_APB2_GRP1_EnableClock ; 0x80002f4
;;;769    
;;;770      /**/
;;;771      LL_GPIO_ResetOutputPin(GPIOC, LED_Pin|MOTOR_X_DIR_Pin);
        0x08000b74:    492b        +I      LDR      r1,[pc,#172] ; [0x8000c24] = 0x4a000a0
        0x08000b76:    482c        ,H      LDR      r0,[pc,#176] ; [0x8000c28] = 0x40011000
        0x08000b78:    f7fffc68    ..h.    BL       LL_GPIO_ResetOutputPin ; 0x800044c
;;;772    
;;;773      /**/
;;;774      LL_GPIO_ResetOutputPin(GPIOA, MOTOR_X_ENABLE_Pin|MOTOR_Z_DIR_Pin);
        0x08000b7c:    f2482182    H..!    MOV      r1,#0x8282
        0x08000b80:    482a        *H      LDR      r0,[pc,#168] ; [0x8000c2c] = 0x40010800
        0x08000b82:    f7fffc63    ..c.    BL       LL_GPIO_ResetOutputPin ; 0x800044c
;;;775    
;;;776      /**/
;;;777      LL_GPIO_ResetOutputPin(MOTOR_Z_ENABLE_GPIO_Port, MOTOR_Z_ENABLE_Pin);
        0x08000b86:    f2402102    @..!    MOV      r1,#0x202
        0x08000b8a:    4829        )H      LDR      r0,[pc,#164] ; [0x8000c30] = 0x40010c00
        0x08000b8c:    f7fffc5e    ..^.    BL       LL_GPIO_ResetOutputPin ; 0x800044c
;;;778    
;;;779      /**/
;;;780      GPIO_InitStruct.Pin = LED_Pin|MOTOR_X_DIR_Pin;
        0x08000b90:    4824        $H      LDR      r0,[pc,#144] ; [0x8000c24] = 0x4a000a0
        0x08000b92:    9000        ..      STR      r0,[sp,#0]
;;;781      GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
        0x08000b94:    2001        .       MOVS     r0,#1
        0x08000b96:    9001        ..      STR      r0,[sp,#4]
;;;782      GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
        0x08000b98:    2002        .       MOVS     r0,#2
        0x08000b9a:    9002        ..      STR      r0,[sp,#8]
;;;783      GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
        0x08000b9c:    2000        .       MOVS     r0,#0
        0x08000b9e:    9003        ..      STR      r0,[sp,#0xc]
;;;784      LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
        0x08000ba0:    4669        iF      MOV      r1,sp
        0x08000ba2:    4821        !H      LDR      r0,[pc,#132] ; [0x8000c28] = 0x40011000
        0x08000ba4:    f7fffbb4    ....    BL       LL_GPIO_Init ; 0x8000310
;;;785    
;;;786      /**/
;;;787      GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
        0x08000ba8:    4822        "H      LDR      r0,[pc,#136] ; [0x8000c34] = 0x4400040
        0x08000baa:    9000        ..      STR      r0,[sp,#0]
;;;788      GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
        0x08000bac:    2000        .       MOVS     r0,#0
        0x08000bae:    9001        ..      STR      r0,[sp,#4]
;;;789      LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
        0x08000bb0:    4669        iF      MOV      r1,sp
        0x08000bb2:    481d        .H      LDR      r0,[pc,#116] ; [0x8000c28] = 0x40011000
        0x08000bb4:    f7fffbac    ....    BL       LL_GPIO_Init ; 0x8000310
;;;790    
;;;791      /**/
;;;792      GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_4 
        0x08000bb8:    481f        .H      LDR      r0,[pc,#124] ; [0x8000c38] = 0x49c3dbd
        0x08000bba:    9000        ..      STR      r0,[sp,#0]
;;;793                              |LL_GPIO_PIN_5|LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12 
;;;794                              |LL_GPIO_PIN_15;
;;;795      GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
        0x08000bbc:    2000        .       MOVS     r0,#0
        0x08000bbe:    9001        ..      STR      r0,[sp,#4]
;;;796      LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
        0x08000bc0:    4669        iF      MOV      r1,sp
        0x08000bc2:    481a        .H      LDR      r0,[pc,#104] ; [0x8000c2c] = 0x40010800
        0x08000bc4:    f7fffba4    ....    BL       LL_GPIO_Init ; 0x8000310
;;;797    
;;;798      /**/
;;;799      GPIO_InitStruct.Pin = MOTOR_X_ENABLE_Pin|MOTOR_Z_DIR_Pin;
        0x08000bc8:    f2482082    H..     MOV      r0,#0x8282
        0x08000bcc:    9000        ..      STR      r0,[sp,#0]
;;;800      GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
        0x08000bce:    2001        .       MOVS     r0,#1
        0x08000bd0:    9001        ..      STR      r0,[sp,#4]
;;;801      GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
        0x08000bd2:    2002        .       MOVS     r0,#2
        0x08000bd4:    9002        ..      STR      r0,[sp,#8]
;;;802      GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
        0x08000bd6:    2000        .       MOVS     r0,#0
        0x08000bd8:    9003        ..      STR      r0,[sp,#0xc]
;;;803      LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
        0x08000bda:    4669        iF      MOV      r1,sp
        0x08000bdc:    4813        .H      LDR      r0,[pc,#76] ; [0x8000c2c] = 0x40010800
        0x08000bde:    f7fffb97    ....    BL       LL_GPIO_Init ; 0x8000310
;;;804    
;;;805      /**/
;;;806      GPIO_InitStruct.Pin = MOTOR_Z_ENABLE_Pin;
        0x08000be2:    f2402002    @..     MOV      r0,#0x202
        0x08000be6:    9000        ..      STR      r0,[sp,#0]
;;;807      GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
        0x08000be8:    2001        .       MOVS     r0,#1
        0x08000bea:    9001        ..      STR      r0,[sp,#4]
;;;808      GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
        0x08000bec:    2002        .       MOVS     r0,#2
        0x08000bee:    9002        ..      STR      r0,[sp,#8]
;;;809      GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
        0x08000bf0:    2000        .       MOVS     r0,#0
        0x08000bf2:    9003        ..      STR      r0,[sp,#0xc]
;;;810      LL_GPIO_Init(MOTOR_Z_ENABLE_GPIO_Port, &GPIO_InitStruct);
        0x08000bf4:    4669        iF      MOV      r1,sp
        0x08000bf6:    480e        .H      LDR      r0,[pc,#56] ; [0x8000c30] = 0x40010c00
        0x08000bf8:    f7fffb8a    ....    BL       LL_GPIO_Init ; 0x8000310
;;;811    
;;;812      /**/
;;;813      GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14 
        0x08000bfc:    480f        .H      LDR      r0,[pc,#60] ; [0x8000c3c] = 0x4f23cfe
        0x08000bfe:    9000        ..      STR      r0,[sp,#0]
;;;814                              |LL_GPIO_PIN_15|LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5 
;;;815                              |LL_GPIO_PIN_9;
;;;816      GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
        0x08000c00:    2000        .       MOVS     r0,#0
        0x08000c02:    9001        ..      STR      r0,[sp,#4]
;;;817      LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
        0x08000c04:    4669        iF      MOV      r1,sp
        0x08000c06:    480a        .H      LDR      r0,[pc,#40] ; [0x8000c30] = 0x40010c00
        0x08000c08:    f7fffb82    ....    BL       LL_GPIO_Init ; 0x8000310
;;;818    
;;;819      /**/
;;;820      GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin;
        0x08000c0c:    480c        .H      LDR      r0,[pc,#48] ; [0x8000c40] = 0x4030003
        0x08000c0e:    9000        ..      STR      r0,[sp,#0]
;;;821      GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
        0x08000c10:    2008        .       MOVS     r0,#8
        0x08000c12:    9001        ..      STR      r0,[sp,#4]
;;;822      GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
        0x08000c14:    2001        .       MOVS     r0,#1
        0x08000c16:    9004        ..      STR      r0,[sp,#0x10]
;;;823      LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
        0x08000c18:    4669        iF      MOV      r1,sp
        0x08000c1a:    4804        .H      LDR      r0,[pc,#16] ; [0x8000c2c] = 0x40010800
        0x08000c1c:    f7fffb78    ..x.    BL       LL_GPIO_Init ; 0x8000310
;;;824    
;;;825    }
        0x08000c20:    b005        ..      ADD      sp,sp,#0x14
        0x08000c22:    bd00        ..      POP      {pc}
    $d
        0x08000c24:    04a000a0    ....    DCD    77594784
        0x08000c28:    40011000    ...@    DCD    1073811456
        0x08000c2c:    40010800    ...@    DCD    1073809408
        0x08000c30:    40010c00    ...@    DCD    1073810432
        0x08000c34:    04400040    @.@.    DCD    71303232
        0x08000c38:    049c3dbd    .=..    DCD    77348285
        0x08000c3c:    04f23cfe    .<..    DCD    82984190
        0x08000c40:    04030003    ....    DCD    67305475
    $t
    i.MX_I2C2_Init
    MX_I2C2_Init
;;; .\../Src/main.c (440)
        0x08000c44:    b530        0.      PUSH     {r4,r5,lr}
        0x08000c46:    b08b        ..      SUB      sp,sp,#0x2c
;;;441    
;;;442      LL_I2C_InitTypeDef I2C_InitStruct;
;;;443    
;;;444      LL_GPIO_InitTypeDef GPIO_InitStruct;
;;;445    
;;;446      /**I2C2 GPIO Configuration  
;;;447      PB10   ------> I2C2_SCL
;;;448      PB11   ------> I2C2_SDA 
;;;449      */
;;;450      GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
        0x08000c48:    485a        ZH      LDR      r0,[pc,#360] ; [0x8000db4] = 0x40c000c
        0x08000c4a:    9000        ..      STR      r0,[sp,#0]
;;;451      GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
        0x08000c4c:    2009        .       MOVS     r0,#9
        0x08000c4e:    9001        ..      STR      r0,[sp,#4]
;;;452      GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
        0x08000c50:    2003        .       MOVS     r0,#3
        0x08000c52:    9002        ..      STR      r0,[sp,#8]
;;;453      GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
        0x08000c54:    2004        .       MOVS     r0,#4
        0x08000c56:    9003        ..      STR      r0,[sp,#0xc]
;;;454      LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
        0x08000c58:    4669        iF      MOV      r1,sp
        0x08000c5a:    4857        WH      LDR      r0,[pc,#348] ; [0x8000db8] = 0x40010c00
        0x08000c5c:    f7fffb58    ..X.    BL       LL_GPIO_Init ; 0x8000310
;;;455    
;;;456      /* Peripheral clock enable */
;;;457      LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
        0x08000c60:    f44f0080    O...    MOV      r0,#0x400000
        0x08000c64:    f7fffb38    ..8.    BL       LL_APB1_GRP1_EnableClock ; 0x80002d8
;;;458    
;;;459      /* I2C2 DMA Init */
;;;460      
;;;461      /* I2C2_TX Init */
;;;462      LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_4, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
        0x08000c68:    4854        TH      LDR      r0,[pc,#336] ; [0x8000dbc] = 0x40020000
        0x08000c6a:    2104        .!      MOVS     r1,#4
        0x08000c6c:    2210        ."      MOVS     r2,#0x10
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h
;;;571      MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
        0x08000c6e:    1e4b        K.      SUBS     r3,r1,#1
        0x08000c70:    4c53        SL      LDR      r4,[pc,#332] ; [0x8000dc0] = 0x80022a0
        0x08000c72:    5ce3        .\      LDRB     r3,[r4,r3]
        0x08000c74:    58c3        .X      LDR      r3,[r0,r3]
        0x08000c76:    f2440410    D...    MOV      r4,#0x4010
        0x08000c7a:    43a3        .C      BICS     r3,r3,r4
        0x08000c7c:    4313        .C      ORRS     r3,r3,r2
        0x08000c7e:    1e4c        L.      SUBS     r4,r1,#1
        0x08000c80:    4d4f        OM      LDR      r5,[pc,#316] ; [0x8000dc0] = 0x80022a0
        0x08000c82:    5d2c        ,]      LDRB     r4,[r5,r4]
        0x08000c84:    5103        .Q      STR      r3,[r0,r4]
;;;572                 DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
;;;573    }
        0x08000c86:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;464      LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PRIORITY_LOW);
        0x08000c88:    2200        ."      MOVS     r2,#0
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h
;;;851      MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
        0x08000c8a:    1e4b        K.      SUBS     r3,r1,#1
        0x08000c8c:    462c        ,F      MOV      r4,r5
        0x08000c8e:    5ce3        .\      LDRB     r3,[r4,r3]
        0x08000c90:    58c3        .X      LDR      r3,[r0,r3]
        0x08000c92:    f4235340    #.@S    BIC      r3,r3,#0x3000
        0x08000c96:    4313        .C      ORRS     r3,r3,r2
        0x08000c98:    1e4c        L.      SUBS     r4,r1,#1
        0x08000c9a:    5d2c        ,]      LDRB     r4,[r5,r4]
        0x08000c9c:    5103        .Q      STR      r3,[r0,r4]
;;;852                 Priority);
;;;853    }
        0x08000c9e:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;466      LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MODE_NORMAL);
        0x08000ca0:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h
;;;620      MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
        0x08000ca2:    1e4b        K.      SUBS     r3,r1,#1
        0x08000ca4:    462c        ,F      MOV      r4,r5
        0x08000ca6:    5ce3        .\      LDRB     r3,[r4,r3]
        0x08000ca8:    58c3        .X      LDR      r3,[r0,r3]
        0x08000caa:    f0230320    #. .    BIC      r3,r3,#0x20
        0x08000cae:    4313        .C      ORRS     r3,r3,r2
        0x08000cb0:    1e4c        L.      SUBS     r4,r1,#1
        0x08000cb2:    5d2c        ,]      LDRB     r4,[r5,r4]
        0x08000cb4:    5103        .Q      STR      r3,[r0,r4]
;;;621                 Mode);
;;;622    }
        0x08000cb6:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;468      LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PERIPH_NOINCREMENT);
        0x08000cb8:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h
;;;665      MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
        0x08000cba:    1e4b        K.      SUBS     r3,r1,#1
        0x08000cbc:    462c        ,F      MOV      r4,r5
        0x08000cbe:    5ce3        .\      LDRB     r3,[r4,r3]
        0x08000cc0:    58c3        .X      LDR      r3,[r0,r3]
        0x08000cc2:    f0230340    #.@.    BIC      r3,r3,#0x40
        0x08000cc6:    4313        .C      ORRS     r3,r3,r2
        0x08000cc8:    1e4c        L.      SUBS     r4,r1,#1
        0x08000cca:    5d2c        ,]      LDRB     r4,[r5,r4]
        0x08000ccc:    5103        .Q      STR      r3,[r0,r4]
;;;666                 PeriphOrM2MSrcIncMode);
;;;667    }
        0x08000cce:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;470      LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MEMORY_INCREMENT);
        0x08000cd0:    2280        ."      MOVS     r2,#0x80
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h
;;;710      MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
        0x08000cd2:    1e4b        K.      SUBS     r3,r1,#1
        0x08000cd4:    462c        ,F      MOV      r4,r5
        0x08000cd6:    5ce3        .\      LDRB     r3,[r4,r3]
        0x08000cd8:    58c3        .X      LDR      r3,[r0,r3]
        0x08000cda:    f0230380    #...    BIC      r3,r3,#0x80
        0x08000cde:    4313        .C      ORRS     r3,r3,r2
        0x08000ce0:    1e4c        L.      SUBS     r4,r1,#1
        0x08000ce2:    5d2c        ,]      LDRB     r4,[r5,r4]
        0x08000ce4:    5103        .Q      STR      r3,[r0,r4]
;;;711                 MemoryOrM2MDstIncMode);
;;;712    }
        0x08000ce6:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;472      LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PDATAALIGN_BYTE);
        0x08000ce8:    2200        ."      MOVS     r2,#0
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h
;;;756      MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
        0x08000cea:    1e4b        K.      SUBS     r3,r1,#1
        0x08000cec:    462c        ,F      MOV      r4,r5
        0x08000cee:    5ce3        .\      LDRB     r3,[r4,r3]
        0x08000cf0:    58c3        .X      LDR      r3,[r0,r3]
        0x08000cf2:    f4237340    #.@s    BIC      r3,r3,#0x300
        0x08000cf6:    4313        .C      ORRS     r3,r3,r2
        0x08000cf8:    1e4c        L.      SUBS     r4,r1,#1
        0x08000cfa:    5d2c        ,]      LDRB     r4,[r5,r4]
        0x08000cfc:    5103        .Q      STR      r3,[r0,r4]
;;;757                 PeriphOrM2MSrcDataSize);
;;;758    }
        0x08000cfe:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;474      LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MDATAALIGN_BYTE);
        0x08000d00:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h
;;;803      MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
        0x08000d02:    1e4b        K.      SUBS     r3,r1,#1
        0x08000d04:    462c        ,F      MOV      r4,r5
        0x08000d06:    5ce3        .\      LDRB     r3,[r4,r3]
        0x08000d08:    58c3        .X      LDR      r3,[r0,r3]
        0x08000d0a:    f4236340    #.@c    BIC      r3,r3,#0xc00
        0x08000d0e:    4313        .C      ORRS     r3,r3,r2
        0x08000d10:    1e4c        L.      SUBS     r4,r1,#1
        0x08000d12:    5d2c        ,]      LDRB     r4,[r5,r4]
        0x08000d14:    5103        .Q      STR      r3,[r0,r4]
;;;804                 MemoryOrM2MDstDataSize);
;;;805    }
        0x08000d16:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;477      NVIC_SetPriority(I2C2_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
        0x08000d18:    f000fa44    ..D.    BL       NVIC_GetPriorityGrouping ; 0x80011a4
        0x08000d1c:    4605        .F      MOV      r5,r0
        0x08000d1e:    2200        ."      MOVS     r2,#0
        0x08000d20:    2102        .!      MOVS     r1,#2
        0x08000d22:    f000fa1e    ....    BL       NVIC_EncodePriority ; 0x8001162
        0x08000d26:    4604        .F      MOV      r4,r0
        0x08000d28:    4621        !F      MOV      r1,r4
        0x08000d2a:    2021        !       MOVS     r0,#0x21
        0x08000d2c:    f000fa42    ..B.    BL       NVIC_SetPriority ; 0x80011b4
;;;478      NVIC_EnableIRQ(I2C2_EV_IRQn);
        0x08000d30:    2021        !       MOVS     r0,#0x21
        0x08000d32:    f000fa0b    ....    BL       NVIC_EnableIRQ ; 0x800114c
;;;479      NVIC_SetPriority(I2C2_ER_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
        0x08000d36:    f000fa35    ..5.    BL       NVIC_GetPriorityGrouping ; 0x80011a4
        0x08000d3a:    4605        .F      MOV      r5,r0
        0x08000d3c:    2200        ."      MOVS     r2,#0
        0x08000d3e:    2102        .!      MOVS     r1,#2
        0x08000d40:    f000fa0f    ....    BL       NVIC_EncodePriority ; 0x8001162
        0x08000d44:    4604        .F      MOV      r4,r0
        0x08000d46:    4621        !F      MOV      r1,r4
        0x08000d48:    2022        "       MOVS     r0,#0x22
        0x08000d4a:    f000fa33    ..3.    BL       NVIC_SetPriority ; 0x80011b4
;;;480      NVIC_EnableIRQ(I2C2_ER_IRQn);
        0x08000d4e:    2022        "       MOVS     r0,#0x22
        0x08000d50:    f000f9fc    ....    BL       NVIC_EnableIRQ ; 0x800114c
;;;481    
;;;482        /**I2C Initialization 
;;;483        */
;;;484      LL_I2C_DisableOwnAddress2(I2C2);
        0x08000d54:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;590      CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
        0x08000d56:    481b        .H      LDR      r0,[pc,#108] ; [0x8000dc4] = 0x40005800
        0x08000d58:    68c0        .h      LDR      r0,[r0,#0xc]
        0x08000d5a:    f0200001     ...    BIC      r0,r0,#1
        0x08000d5e:    4919        .I      LDR      r1,[pc,#100] ; [0x8000dc4] = 0x40005800
        0x08000d60:    60c8        .`      STR      r0,[r1,#0xc]
;;;591    }
        0x08000d62:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;486      LL_I2C_DisableGeneralCall(I2C2);
        0x08000d64:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;526      CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
        0x08000d66:    4608        .F      MOV      r0,r1
        0x08000d68:    6800        .h      LDR      r0,[r0,#0]
        0x08000d6a:    f0200040     .@.    BIC      r0,r0,#0x40
        0x08000d6e:    6008        .`      STR      r0,[r1,#0]
;;;527    }
        0x08000d70:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;488      LL_I2C_EnableClockStretching(I2C2);
        0x08000d72:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;479      CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
        0x08000d74:    4608        .F      MOV      r0,r1
        0x08000d76:    6800        .h      LDR      r0,[r0,#0]
        0x08000d78:    f0200080     ...    BIC      r0,r0,#0x80
        0x08000d7c:    6008        .`      STR      r0,[r1,#0]
;;;480    }
        0x08000d7e:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;490      I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
        0x08000d80:    2000        .       MOVS     r0,#0
        0x08000d82:    9005        ..      STR      r0,[sp,#0x14]
;;;491      I2C_InitStruct.ClockSpeed = 400000;
        0x08000d84:    4810        .H      LDR      r0,[pc,#64] ; [0x8000dc8] = 0x61a80
        0x08000d86:    9006        ..      STR      r0,[sp,#0x18]
;;;492      I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
        0x08000d88:    2000        .       MOVS     r0,#0
        0x08000d8a:    9007        ..      STR      r0,[sp,#0x1c]
;;;493      I2C_InitStruct.OwnAddress1 = 0;
        0x08000d8c:    9008        ..      STR      r0,[sp,#0x20]
;;;494      I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
        0x08000d8e:    1508        ..      ASRS     r0,r1,#20
        0x08000d90:    9009        ..      STR      r0,[sp,#0x24]
;;;495      I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
        0x08000d92:    0100        ..      LSLS     r0,r0,#4
        0x08000d94:    900a        ..      STR      r0,[sp,#0x28]
;;;496      LL_I2C_Init(I2C2, &I2C_InitStruct);
        0x08000d96:    a905        ..      ADD      r1,sp,#0x14
        0x08000d98:    480a        .H      LDR      r0,[pc,#40] ; [0x8000dc4] = 0x40005800
        0x08000d9a:    f7fffbb9    ....    BL       LL_I2C_Init ; 0x8000510
;;;497    
;;;498      LL_I2C_SetOwnAddress2(I2C2, 0);
        0x08000d9e:    2000        .       MOVS     r0,#0
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;568      MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
        0x08000da0:    4908        .I      LDR      r1,[pc,#32] ; [0x8000dc4] = 0x40005800
        0x08000da2:    68c9        .h      LDR      r1,[r1,#0xc]
        0x08000da4:    f02101fe    !...    BIC      r1,r1,#0xfe
        0x08000da8:    4301        .C      ORRS     r1,r1,r0
        0x08000daa:    4a06        .J      LDR      r2,[pc,#24] ; [0x8000dc4] = 0x40005800
        0x08000dac:    60d1        .`      STR      r1,[r2,#0xc]
;;;569    }
        0x08000dae:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;500    }
        0x08000db0:    b00b        ..      ADD      sp,sp,#0x2c
        0x08000db2:    bd30        0.      POP      {r4,r5,pc}
    $d
        0x08000db4:    040c000c    ....    DCD    67895308
        0x08000db8:    40010c00    ...@    DCD    1073810432
        0x08000dbc:    40020000    ...@    DCD    1073872896
        0x08000dc0:    080022a0    ."..    DCD    134226592
        0x08000dc4:    40005800    .X.@    DCD    1073764352
        0x08000dc8:    00061a80    ....    DCD    400000
    $t
    i.MX_TIM1_Init
    MX_TIM1_Init
;;;501    
;;;502    /* TIM1 init function */
;;;503    static void MX_TIM1_Init(void)
;;;504    {
        0x08000dcc:    b530        0.      PUSH     {r4,r5,lr}
        0x08000dce:    b093        ..      SUB      sp,sp,#0x4c
;;;505    
;;;506      LL_TIM_InitTypeDef TIM_InitStruct;
;;;507      LL_TIM_OC_InitTypeDef TIM_OC_InitStruct;
;;;508      LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct;
;;;509    
;;;510      /* Peripheral clock enable */
;;;511      LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
        0x08000dd0:    f44f6000    O..`    MOV      r0,#0x800
        0x08000dd4:    f7fffa8e    ....    BL       LL_APB2_GRP1_EnableClock ; 0x80002f4
;;;512    
;;;513      /* TIM1 interrupt Init */
;;;514      NVIC_SetPriority(TIM1_UP_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
        0x08000dd8:    f000f9e4    ....    BL       NVIC_GetPriorityGrouping ; 0x80011a4
        0x08000ddc:    4605        .F      MOV      r5,r0
        0x08000dde:    2200        ."      MOVS     r2,#0
        0x08000de0:    210f        .!      MOVS     r1,#0xf
        0x08000de2:    f000f9be    ....    BL       NVIC_EncodePriority ; 0x8001162
        0x08000de6:    4604        .F      MOV      r4,r0
        0x08000de8:    4621        !F      MOV      r1,r4
        0x08000dea:    2019        .       MOVS     r0,#0x19
        0x08000dec:    f000f9e2    ....    BL       NVIC_SetPriority ; 0x80011b4
;;;515      NVIC_EnableIRQ(TIM1_UP_IRQn);
        0x08000df0:    2019        .       MOVS     r0,#0x19
        0x08000df2:    f000f9ab    ....    BL       NVIC_EnableIRQ ; 0x800114c
;;;516    
;;;517      TIM_InitStruct.Prescaler = 720;
        0x08000df6:    f44f7034    O.4p    MOV      r0,#0x2d0
        0x08000dfa:    f8ad0038    ..8.    STRH     r0,[sp,#0x38]
;;;518      TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
        0x08000dfe:    2000        .       MOVS     r0,#0
        0x08000e00:    900f        ..      STR      r0,[sp,#0x3c]
;;;519      TIM_InitStruct.Autoreload = 0;
        0x08000e02:    9010        ..      STR      r0,[sp,#0x40]
;;;520      TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
        0x08000e04:    9011        ..      STR      r0,[sp,#0x44]
;;;521      TIM_InitStruct.RepetitionCounter = 0;
        0x08000e06:    f88d0048    ..H.    STRB     r0,[sp,#0x48]
;;;522      LL_TIM_Init(TIM1, &TIM_InitStruct);
        0x08000e0a:    a90e        ..      ADD      r1,sp,#0x38
        0x08000e0c:    481d        .H      LDR      r0,[pc,#116] ; [0x8000e84] = 0x40012c00
        0x08000e0e:    f7fffd77    ..w.    BL       LL_TIM_Init ; 0x8000900
;;;523    
;;;524      LL_TIM_DisableARRPreload(TIM1);
        0x08000e12:    481c        .H      LDR      r0,[pc,#112] ; [0x8000e84] = 0x40012c00
        0x08000e14:    f7fffc8d    ....    BL       LL_TIM_DisableARRPreload ; 0x8000732
;;;525    
;;;526      LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
        0x08000e18:    2100        .!      MOVS     r1,#0
        0x08000e1a:    481a        .H      LDR      r0,[pc,#104] ; [0x8000e84] = 0x40012c00
        0x08000e1c:    f7fffe48    ..H.    BL       LL_TIM_SetClockSource ; 0x8000ab0
;;;527    
;;;528      LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
        0x08000e20:    2101        .!      MOVS     r1,#1
        0x08000e22:    4818        .H      LDR      r0,[pc,#96] ; [0x8000e84] = 0x40012c00
        0x08000e24:    f7fffde4    ....    BL       LL_TIM_OC_EnablePreload ; 0x80009f0
;;;529    
;;;530      TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
        0x08000e28:    2060        `       MOVS     r0,#0x60
        0x08000e2a:    9006        ..      STR      r0,[sp,#0x18]
;;;531      TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
        0x08000e2c:    2000        .       MOVS     r0,#0
        0x08000e2e:    9007        ..      STR      r0,[sp,#0x1c]
;;;532      TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
        0x08000e30:    9008        ..      STR      r0,[sp,#0x20]
;;;533      TIM_OC_InitStruct.CompareValue = 0;
        0x08000e32:    9009        ..      STR      r0,[sp,#0x24]
;;;534      TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
        0x08000e34:    900a        ..      STR      r0,[sp,#0x28]
;;;535      TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
        0x08000e36:    900b        ..      STR      r0,[sp,#0x2c]
;;;536      TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
        0x08000e38:    900c        ..      STR      r0,[sp,#0x30]
;;;537      TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
        0x08000e3a:    900d        ..      STR      r0,[sp,#0x34]
;;;538      LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
        0x08000e3c:    aa06        ..      ADD      r2,sp,#0x18
        0x08000e3e:    2101        .!      MOVS     r1,#1
        0x08000e40:    4810        .H      LDR      r0,[pc,#64] ; [0x8000e84] = 0x40012c00
        0x08000e42:    f7fffe05    ....    BL       LL_TIM_OC_Init ; 0x8000a50
;;;539    
;;;540      LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
        0x08000e46:    2101        .!      MOVS     r1,#1
        0x08000e48:    480e        .H      LDR      r0,[pc,#56] ; [0x8000e84] = 0x40012c00
        0x08000e4a:    f7fffda1    ....    BL       LL_TIM_OC_DisableFast ; 0x8000990
;;;541    
;;;542      LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
        0x08000e4e:    2100        .!      MOVS     r1,#0
        0x08000e50:    480c        .H      LDR      r0,[pc,#48] ; [0x8000e84] = 0x40012c00
        0x08000e52:    f7fffe46    ..F.    BL       LL_TIM_SetTriggerOutput ; 0x8000ae2
;;;543    
;;;544      LL_TIM_DisableMasterSlaveMode(TIM1);
        0x08000e56:    480b        .H      LDR      r0,[pc,#44] ; [0x8000e84] = 0x40012c00
        0x08000e58:    f7fffc70    ..p.    BL       LL_TIM_DisableMasterSlaveMode ; 0x800073c
;;;545    
;;;546      TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
        0x08000e5c:    2000        .       MOVS     r0,#0
        0x08000e5e:    9000        ..      STR      r0,[sp,#0]
;;;547      TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
        0x08000e60:    9001        ..      STR      r0,[sp,#4]
;;;548      TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
        0x08000e62:    9002        ..      STR      r0,[sp,#8]
;;;549      TIM_BDTRInitStruct.DeadTime = 0;
        0x08000e64:    f88d000c    ....    STRB     r0,[sp,#0xc]
;;;550      TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
        0x08000e68:    f8ad000e    ....    STRH     r0,[sp,#0xe]
;;;551      TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
        0x08000e6c:    f44f5000    O..P    MOV      r0,#0x2000
        0x08000e70:    9004        ..      STR      r0,[sp,#0x10]
;;;552      TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
        0x08000e72:    2000        .       MOVS     r0,#0
        0x08000e74:    9005        ..      STR      r0,[sp,#0x14]
;;;553      LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
        0x08000e76:    4669        iF      MOV      r1,sp
        0x08000e78:    4802        .H      LDR      r0,[pc,#8] ; [0x8000e84] = 0x40012c00
        0x08000e7a:    f7fffc29    ..).    BL       LL_TIM_BDTR_Init ; 0x80006d0
;;;554    
;;;555    }
        0x08000e7e:    b013        ..      ADD      sp,sp,#0x4c
        0x08000e80:    bd30        0.      POP      {r4,r5,pc}
    $d
        0x08000e82:    0000        ..      DCW    0
        0x08000e84:    40012c00    .,.@    DCD    1073818624
    $t
    i.MX_TIM2_Init
    MX_TIM2_Init
;;;556    
;;;557    /* TIM2 init function */
;;;558    static void MX_TIM2_Init(void)
;;;559    {
        0x08000e88:    b530        0.      PUSH     {r4,r5,lr}
        0x08000e8a:    b08d        ..      SUB      sp,sp,#0x34
;;;560    
;;;561      LL_TIM_InitTypeDef TIM_InitStruct;
;;;562      LL_TIM_OC_InitTypeDef TIM_OC_InitStruct;
;;;563    
;;;564      /* Peripheral clock enable */
;;;565      LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
        0x08000e8c:    2001        .       MOVS     r0,#1
        0x08000e8e:    f7fffa23    ..#.    BL       LL_APB1_GRP1_EnableClock ; 0x80002d8
;;;566    
;;;567      /* TIM2 interrupt Init */
;;;568      NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
        0x08000e92:    f000f987    ....    BL       NVIC_GetPriorityGrouping ; 0x80011a4
        0x08000e96:    4605        .F      MOV      r5,r0
        0x08000e98:    2200        ."      MOVS     r2,#0
        0x08000e9a:    4611        .F      MOV      r1,r2
        0x08000e9c:    f000f961    ..a.    BL       NVIC_EncodePriority ; 0x8001162
        0x08000ea0:    4604        .F      MOV      r4,r0
        0x08000ea2:    4621        !F      MOV      r1,r4
        0x08000ea4:    201c        .       MOVS     r0,#0x1c
        0x08000ea6:    f000f985    ....    BL       NVIC_SetPriority ; 0x80011b4
;;;569      NVIC_EnableIRQ(TIM2_IRQn);
        0x08000eaa:    201c        .       MOVS     r0,#0x1c
        0x08000eac:    f000f94e    ..N.    BL       NVIC_EnableIRQ ; 0x800114c
;;;570    
;;;571      TIM_InitStruct.Prescaler = 720;
        0x08000eb0:    f44f7034    O.4p    MOV      r0,#0x2d0
        0x08000eb4:    f8ad0020    .. .    STRH     r0,[sp,#0x20]
;;;572      TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
        0x08000eb8:    2000        .       MOVS     r0,#0
        0x08000eba:    9009        ..      STR      r0,[sp,#0x24]
;;;573      TIM_InitStruct.Autoreload = 0;
        0x08000ebc:    900a        ..      STR      r0,[sp,#0x28]
;;;574      TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
        0x08000ebe:    900b        ..      STR      r0,[sp,#0x2c]
;;;575      LL_TIM_Init(TIM2, &TIM_InitStruct);
        0x08000ec0:    a908        ..      ADD      r1,sp,#0x20
        0x08000ec2:    f04f4080    O..@    MOV      r0,#0x40000000
        0x08000ec6:    f7fffd1b    ....    BL       LL_TIM_Init ; 0x8000900
;;;576    
;;;577      LL_TIM_EnableARRPreload(TIM2);
        0x08000eca:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;1195     SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
        0x08000ecc:    f04f4080    O..@    MOV      r0,#0x40000000
        0x08000ed0:    6800        .h      LDR      r0,[r0,#0]
        0x08000ed2:    f0400080    @...    ORR      r0,r0,#0x80
        0x08000ed6:    f04f4180    O..A    MOV      r1,#0x40000000
        0x08000eda:    6008        .`      STR      r0,[r1,#0]
;;;1196   }
        0x08000edc:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;579      LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
        0x08000ede:    2100        .!      MOVS     r1,#0
        0x08000ee0:    f04f4080    O..@    MOV      r0,#0x40000000
        0x08000ee4:    f7fffde4    ....    BL       LL_TIM_SetClockSource ; 0x8000ab0
;;;580    
;;;581      LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
        0x08000ee8:    2101        .!      MOVS     r1,#1
        0x08000eea:    0788        ..      LSLS     r0,r1,#30
        0x08000eec:    f7fffd80    ....    BL       LL_TIM_OC_EnablePreload ; 0x80009f0
;;;582    
;;;583      TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM2;
        0x08000ef0:    2070        p       MOVS     r0,#0x70
        0x08000ef2:    9000        ..      STR      r0,[sp,#0]
;;;584      TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
        0x08000ef4:    2000        .       MOVS     r0,#0
        0x08000ef6:    9001        ..      STR      r0,[sp,#4]
;;;585      TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
        0x08000ef8:    9002        ..      STR      r0,[sp,#8]
;;;586      TIM_OC_InitStruct.CompareValue = 0;
        0x08000efa:    9003        ..      STR      r0,[sp,#0xc]
;;;587      TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
        0x08000efc:    9004        ..      STR      r0,[sp,#0x10]
;;;588      LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
        0x08000efe:    466a        jF      MOV      r2,sp
        0x08000f00:    2101        .!      MOVS     r1,#1
        0x08000f02:    0788        ..      LSLS     r0,r1,#30
        0x08000f04:    f7fffda4    ....    BL       LL_TIM_OC_Init ; 0x8000a50
;;;589    
;;;590      LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
        0x08000f08:    2101        .!      MOVS     r1,#1
        0x08000f0a:    0788        ..      LSLS     r0,r1,#30
        0x08000f0c:    f7fffd40    ..@.    BL       LL_TIM_OC_DisableFast ; 0x8000990
;;;591    
;;;592      LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
        0x08000f10:    2120         !      MOVS     r1,#0x20
        0x08000f12:    0648        H.      LSLS     r0,r1,#25
        0x08000f14:    f7fffde5    ....    BL       LL_TIM_SetTriggerOutput ; 0x8000ae2
;;;593    
;;;594      LL_TIM_EnableMasterSlaveMode(TIM2);
        0x08000f18:    f04f4080    O..@    MOV      r0,#0x40000000
        0x08000f1c:    f7fffc1d    ....    BL       LL_TIM_EnableMasterSlaveMode ; 0x800075a
;;;595    
;;;596    }
        0x08000f20:    b00d        ..      ADD      sp,sp,#0x34
        0x08000f22:    bd30        0.      POP      {r4,r5,pc}
    i.MX_TIM3_Init
    MX_TIM3_Init
;;;597    
;;;598    /* TIM3 init function */
;;;599    static void MX_TIM3_Init(void)
;;;600    {
        0x08000f24:    b500        ..      PUSH     {lr}
        0x08000f26:    b093        ..      SUB      sp,sp,#0x4c
;;;601    
;;;602      LL_TIM_InitTypeDef TIM_InitStruct;
;;;603      LL_TIM_OC_InitTypeDef TIM_OC_InitStruct;
;;;604    
;;;605      LL_GPIO_InitTypeDef GPIO_InitStruct;
;;;606    
;;;607      /* Peripheral clock enable */
;;;608      LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
        0x08000f28:    2002        .       MOVS     r0,#2
        0x08000f2a:    f7fff9d5    ....    BL       LL_APB1_GRP1_EnableClock ; 0x80002d8
;;;609    
;;;610      TIM_InitStruct.Prescaler = 0;
        0x08000f2e:    2000        .       MOVS     r0,#0
        0x08000f30:    f8ad0038    ..8.    STRH     r0,[sp,#0x38]
;;;611      TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
        0x08000f34:    900f        ..      STR      r0,[sp,#0x3c]
;;;612      TIM_InitStruct.Autoreload = min_pulse * 5;
        0x08000f36:    f24020d5    @..     MOV      r0,#0x2d5
        0x08000f3a:    9010        ..      STR      r0,[sp,#0x40]
;;;613      TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
        0x08000f3c:    2000        .       MOVS     r0,#0
        0x08000f3e:    9011        ..      STR      r0,[sp,#0x44]
;;;614      LL_TIM_Init(TIM3, &TIM_InitStruct);
        0x08000f40:    a90e        ..      ADD      r1,sp,#0x38
        0x08000f42:    483a        :H      LDR      r0,[pc,#232] ; [0x800102c] = 0x40000400
        0x08000f44:    f7fffcdc    ....    BL       LL_TIM_Init ; 0x8000900
;;;615    
;;;616      LL_TIM_DisableARRPreload(TIM3);
        0x08000f48:    4838        8H      LDR      r0,[pc,#224] ; [0x800102c] = 0x40000400
        0x08000f4a:    f7fffbf2    ....    BL       LL_TIM_DisableARRPreload ; 0x8000732
;;;617    
;;;618      LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH1);
        0x08000f4e:    2101        .!      MOVS     r1,#1
        0x08000f50:    4836        6H      LDR      r0,[pc,#216] ; [0x800102c] = 0x40000400
        0x08000f52:    f7fffd4d    ..M.    BL       LL_TIM_OC_EnablePreload ; 0x80009f0
;;;619    
;;;620      TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM2;
        0x08000f56:    2070        p       MOVS     r0,#0x70
        0x08000f58:    9006        ..      STR      r0,[sp,#0x18]
;;;621      TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
        0x08000f5a:    2000        .       MOVS     r0,#0
        0x08000f5c:    9007        ..      STR      r0,[sp,#0x1c]
;;;622      TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
        0x08000f5e:    9008        ..      STR      r0,[sp,#0x20]
;;;623      TIM_OC_InitStruct.CompareValue = 0;
        0x08000f60:    9009        ..      STR      r0,[sp,#0x24]
;;;624      TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
        0x08000f62:    900a        ..      STR      r0,[sp,#0x28]
;;;625      LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
        0x08000f64:    aa06        ..      ADD      r2,sp,#0x18
        0x08000f66:    2101        .!      MOVS     r1,#1
        0x08000f68:    4830        0H      LDR      r0,[pc,#192] ; [0x800102c] = 0x40000400
        0x08000f6a:    f7fffd71    ..q.    BL       LL_TIM_OC_Init ; 0x8000a50
;;;626    
;;;627      LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
        0x08000f6e:    2101        .!      MOVS     r1,#1
        0x08000f70:    482e        .H      LDR      r0,[pc,#184] ; [0x800102c] = 0x40000400
        0x08000f72:    f7fffd0d    ....    BL       LL_TIM_OC_DisableFast ; 0x8000990
;;;628    
;;;629      LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH3);
        0x08000f76:    f44f7180    O..q    MOV      r1,#0x100
        0x08000f7a:    482c        ,H      LDR      r0,[pc,#176] ; [0x800102c] = 0x40000400
        0x08000f7c:    f7fffd38    ..8.    BL       LL_TIM_OC_EnablePreload ; 0x80009f0
;;;630    
;;;631      TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
        0x08000f80:    2000        .       MOVS     r0,#0
        0x08000f82:    9007        ..      STR      r0,[sp,#0x1c]
;;;632      TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
        0x08000f84:    9008        ..      STR      r0,[sp,#0x20]
;;;633      LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
        0x08000f86:    aa06        ..      ADD      r2,sp,#0x18
        0x08000f88:    f44f7180    O..q    MOV      r1,#0x100
        0x08000f8c:    4827        'H      LDR      r0,[pc,#156] ; [0x800102c] = 0x40000400
        0x08000f8e:    f7fffd5f    .._.    BL       LL_TIM_OC_Init ; 0x8000a50
;;;634    
;;;635      LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH3);
        0x08000f92:    f44f7180    O..q    MOV      r1,#0x100
        0x08000f96:    4825        %H      LDR      r0,[pc,#148] ; [0x800102c] = 0x40000400
        0x08000f98:    f7fffcfa    ....    BL       LL_TIM_OC_DisableFast ; 0x8000990
;;;636    
;;;637      LL_TIM_SetOnePulseMode(TIM3, LL_TIM_ONEPULSEMODE_SINGLE);
        0x08000f9c:    2008        .       MOVS     r0,#8
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;1130     MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
        0x08000f9e:    4923        #I      LDR      r1,[pc,#140] ; [0x800102c] = 0x40000400
        0x08000fa0:    6809        .h      LDR      r1,[r1,#0]
        0x08000fa2:    f0210108    !...    BIC      r1,r1,#8
        0x08000fa6:    4301        .C      ORRS     r1,r1,r0
        0x08000fa8:    4a20         J      LDR      r2,[pc,#128] ; [0x800102c] = 0x40000400
        0x08000faa:    6011        .`      STR      r1,[r2,#0]
;;;1131   }
        0x08000fac:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;639      LL_TIM_SetTriggerInput(TIM3, LL_TIM_TS_ITR3);
        0x08000fae:    2030        0       MOVS     r0,#0x30
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;2615     MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
        0x08000fb0:    4611        .F      MOV      r1,r2
        0x08000fb2:    6889        .h      LDR      r1,[r1,#8]
        0x08000fb4:    f0210170    !.p.    BIC      r1,r1,#0x70
        0x08000fb8:    4301        .C      ORRS     r1,r1,r0
        0x08000fba:    6091        .`      STR      r1,[r2,#8]
;;;2616   }
        0x08000fbc:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;641      LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_TRIGGER);
        0x08000fbe:    2106        .!      MOVS     r1,#6
        0x08000fc0:    4610        .F      MOV      r0,r2
        0x08000fc2:    f7fffd82    ....    BL       LL_TIM_SetSlaveMode ; 0x8000aca
;;;642    
;;;643      LL_TIM_DisableIT_TRIG(TIM3);
        0x08000fc6:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;3409     CLEAR_BIT(TIMx->DIER, TIM_DIER_TIE);
        0x08000fc8:    4818        .H      LDR      r0,[pc,#96] ; [0x800102c] = 0x40000400
        0x08000fca:    68c0        .h      LDR      r0,[r0,#0xc]
        0x08000fcc:    f0200040     .@.    BIC      r0,r0,#0x40
        0x08000fd0:    4916        .I      LDR      r1,[pc,#88] ; [0x800102c] = 0x40000400
        0x08000fd2:    60c8        .`      STR      r0,[r1,#0xc]
;;;3410   }
        0x08000fd4:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;645      LL_TIM_DisableDMAReq_TRIG(TIM3);
        0x08000fd6:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;3680     CLEAR_BIT(TIMx->DIER, TIM_DIER_TDE);
        0x08000fd8:    4608        .F      MOV      r0,r1
        0x08000fda:    68c0        .h      LDR      r0,[r0,#0xc]
        0x08000fdc:    f4204080     ..@    BIC      r0,r0,#0x4000
        0x08000fe0:    60c8        .`      STR      r0,[r1,#0xc]
;;;3681   }
        0x08000fe2:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;647      LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
        0x08000fe4:    2100        .!      MOVS     r1,#0
        0x08000fe6:    4811        .H      LDR      r0,[pc,#68] ; [0x800102c] = 0x40000400
        0x08000fe8:    f7fffd7b    ..{.    BL       LL_TIM_SetTriggerOutput ; 0x8000ae2
;;;648    
;;;649      LL_TIM_DisableMasterSlaveMode(TIM3);
        0x08000fec:    480f        .H      LDR      r0,[pc,#60] ; [0x800102c] = 0x40000400
        0x08000fee:    f7fffba5    ....    BL       LL_TIM_DisableMasterSlaveMode ; 0x800073c
;;;650    
;;;651      /**TIM3 GPIO Configuration  
;;;652      PA6   ------> TIM3_CH1
;;;653      PB0   ------> TIM3_CH3 
;;;654      */
;;;655      GPIO_InitStruct.Pin = MOTOR_X_STEP_Pin;
        0x08000ff2:    f2440040    D.@.    MOV      r0,#0x4040
        0x08000ff6:    9001        ..      STR      r0,[sp,#4]
;;;656      GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
        0x08000ff8:    2009        .       MOVS     r0,#9
        0x08000ffa:    9002        ..      STR      r0,[sp,#8]
;;;657      GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
        0x08000ffc:    2003        .       MOVS     r0,#3
        0x08000ffe:    9003        ..      STR      r0,[sp,#0xc]
;;;658      GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
        0x08001000:    2000        .       MOVS     r0,#0
        0x08001002:    9004        ..      STR      r0,[sp,#0x10]
;;;659      LL_GPIO_Init(MOTOR_X_STEP_GPIO_Port, &GPIO_InitStruct);
        0x08001004:    a901        ..      ADD      r1,sp,#4
        0x08001006:    480a        .H      LDR      r0,[pc,#40] ; [0x8001030] = 0x40010800
        0x08001008:    f7fff982    ....    BL       LL_GPIO_Init ; 0x8000310
;;;660    
;;;661      GPIO_InitStruct.Pin = MOTOR_Z_STEP_Pin;
        0x0800100c:    f2401001    @...    MOV      r0,#0x101
        0x08001010:    9001        ..      STR      r0,[sp,#4]
;;;662      GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
        0x08001012:    2009        .       MOVS     r0,#9
        0x08001014:    9002        ..      STR      r0,[sp,#8]
;;;663      GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
        0x08001016:    2003        .       MOVS     r0,#3
        0x08001018:    9003        ..      STR      r0,[sp,#0xc]
;;;664      GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
        0x0800101a:    2000        .       MOVS     r0,#0
        0x0800101c:    9004        ..      STR      r0,[sp,#0x10]
;;;665      LL_GPIO_Init(MOTOR_Z_STEP_GPIO_Port, &GPIO_InitStruct);
        0x0800101e:    a901        ..      ADD      r1,sp,#4
        0x08001020:    4804        .H      LDR      r0,[pc,#16] ; [0x8001034] = 0x40010c00
        0x08001022:    f7fff975    ..u.    BL       LL_GPIO_Init ; 0x8000310
;;;666    
;;;667    }
        0x08001026:    b013        ..      ADD      sp,sp,#0x4c
        0x08001028:    bd00        ..      POP      {pc}
    $d
        0x0800102a:    0000        ..      DCW    0
        0x0800102c:    40000400    ...@    DCD    1073742848
        0x08001030:    40010800    ...@    DCD    1073809408
        0x08001034:    40010c00    ...@    DCD    1073810432
    $t
    i.MX_TIM4_Init
    MX_TIM4_Init
;;;668    
;;;669    /* TIM4 init function */
;;;670    static void MX_TIM4_Init(void)
;;;671    {
        0x08001038:    b530        0.      PUSH     {r4,r5,lr}
        0x0800103a:    b08b        ..      SUB      sp,sp,#0x2c
;;;672    
;;;673      LL_TIM_InitTypeDef TIM_InitStruct;
;;;674    
;;;675      LL_GPIO_InitTypeDef GPIO_InitStruct;
;;;676    
;;;677      /* Peripheral clock enable */
;;;678      LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
        0x0800103c:    2004        .       MOVS     r0,#4
        0x0800103e:    f7fff94b    ..K.    BL       LL_APB1_GRP1_EnableClock ; 0x80002d8
;;;679      
;;;680      /**TIM4 GPIO Configuration  
;;;681      PB6   ------> TIM4_CH1
;;;682      PB7   ------> TIM4_CH2
;;;683      PB8   ------> TIM4_CH3 
;;;684      */
;;;685      GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin|ENC_ZERO_Pin;
        0x08001042:    483f        ?H      LDR      r0,[pc,#252] ; [0x8001140] = 0x401c0c1
        0x08001044:    9001        ..      STR      r0,[sp,#4]
;;;686      GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
        0x08001046:    2008        .       MOVS     r0,#8
        0x08001048:    9002        ..      STR      r0,[sp,#8]
;;;687      GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
        0x0800104a:    2001        .       MOVS     r0,#1
        0x0800104c:    9005        ..      STR      r0,[sp,#0x14]
;;;688      LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
        0x0800104e:    a901        ..      ADD      r1,sp,#4
        0x08001050:    483c        <H      LDR      r0,[pc,#240] ; [0x8001144] = 0x40010c00
        0x08001052:    f7fff95d    ..].    BL       LL_GPIO_Init ; 0x8000310
;;;689    
;;;690      /* TIM4 interrupt Init */
;;;691      NVIC_SetPriority(TIM4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
        0x08001056:    f000f8a5    ....    BL       NVIC_GetPriorityGrouping ; 0x80011a4
        0x0800105a:    4605        .F      MOV      r5,r0
        0x0800105c:    2200        ."      MOVS     r2,#0
        0x0800105e:    4611        .F      MOV      r1,r2
        0x08001060:    f000f87f    ....    BL       NVIC_EncodePriority ; 0x8001162
        0x08001064:    4604        .F      MOV      r4,r0
        0x08001066:    4621        !F      MOV      r1,r4
        0x08001068:    201e        .       MOVS     r0,#0x1e
        0x0800106a:    f000f8a3    ....    BL       NVIC_SetPriority ; 0x80011b4
;;;692      NVIC_EnableIRQ(TIM4_IRQn);
        0x0800106e:    201e        .       MOVS     r0,#0x1e
        0x08001070:    f000f86c    ..l.    BL       NVIC_EnableIRQ ; 0x800114c
;;;693    
;;;694      TIM_InitStruct.Prescaler = 0;
        0x08001074:    2000        .       MOVS     r0,#0
        0x08001076:    f8ad0018    ....    STRH     r0,[sp,#0x18]
;;;695      TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
        0x0800107a:    9007        ..      STR      r0,[sp,#0x1c]
;;;696      TIM_InitStruct.Autoreload = 8;
        0x0800107c:    2008        .       MOVS     r0,#8
        0x0800107e:    9008        ..      STR      r0,[sp,#0x20]
;;;697      TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
        0x08001080:    2000        .       MOVS     r0,#0
        0x08001082:    9009        ..      STR      r0,[sp,#0x24]
;;;698      LL_TIM_Init(TIM4, &TIM_InitStruct);
        0x08001084:    a906        ..      ADD      r1,sp,#0x18
        0x08001086:    4830        0H      LDR      r0,[pc,#192] ; [0x8001148] = 0x40000800
        0x08001088:    f7fffc3a    ..:.    BL       LL_TIM_Init ; 0x8000900
;;;699    
;;;700      LL_TIM_DisableARRPreload(TIM4);
        0x0800108c:    482e        .H      LDR      r0,[pc,#184] ; [0x8001148] = 0x40000800
        0x0800108e:    f7fffb50    ..P.    BL       LL_TIM_DisableARRPreload ; 0x8000732
;;;701    
;;;702      LL_TIM_SetEncoderMode(TIM4, LL_TIM_ENCODERMODE_X2_TI1);
        0x08001092:    2001        .       MOVS     r0,#1
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;2546     MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
        0x08001094:    492c        ,I      LDR      r1,[pc,#176] ; [0x8001148] = 0x40000800
        0x08001096:    6889        .h      LDR      r1,[r1,#8]
        0x08001098:    f0210107    !...    BIC      r1,r1,#7
        0x0800109c:    4301        .C      ORRS     r1,r1,r0
        0x0800109e:    4a2a        *J      LDR      r2,[pc,#168] ; [0x8001148] = 0x40000800
        0x080010a0:    6091        .`      STR      r1,[r2,#8]
;;;2547   }
        0x080010a2:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;704      LL_TIM_IC_SetActiveInput(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
        0x080010a4:    0402        ..      LSLS     r2,r0,#16
        0x080010a6:    2101        .!      MOVS     r1,#1
        0x080010a8:    4827        'H      LDR      r0,[pc,#156] ; [0x8001148] = 0x40000800
        0x080010aa:    f7fffb5b    ..[.    BL       LL_TIM_IC_SetActiveInput ; 0x8000764
;;;705    
;;;706      LL_TIM_IC_SetPrescaler(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
        0x080010ae:    2200        ."      MOVS     r2,#0
        0x080010b0:    2101        .!      MOVS     r1,#1
        0x080010b2:    4825        %H      LDR      r0,[pc,#148] ; [0x8001148] = 0x40000800
        0x080010b4:    f7fffbee    ....    BL       LL_TIM_IC_SetPrescaler ; 0x8000894
;;;707    
;;;708      LL_TIM_IC_SetFilter(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV32_N8);
        0x080010b8:    f44f0270    O.p.    MOV      r2,#0xf00000
        0x080010bc:    2101        .!      MOVS     r1,#1
        0x080010be:    4822        "H      LDR      r0,[pc,#136] ; [0x8001148] = 0x40000800
        0x080010c0:    f7fffb86    ....    BL       LL_TIM_IC_SetFilter ; 0x80007d0
;;;709    
;;;710      LL_TIM_IC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
        0x080010c4:    2200        ."      MOVS     r2,#0
        0x080010c6:    2101        .!      MOVS     r1,#1
        0x080010c8:    481f        .H      LDR      r0,[pc,#124] ; [0x8001148] = 0x40000800
        0x080010ca:    f7fffbb7    ....    BL       LL_TIM_IC_SetPolarity ; 0x800083c
;;;711    
;;;712      LL_TIM_IC_SetActiveInput(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
        0x080010ce:    f44f3280    O..2    MOV      r2,#0x10000
        0x080010d2:    2110        .!      MOVS     r1,#0x10
        0x080010d4:    481c        .H      LDR      r0,[pc,#112] ; [0x8001148] = 0x40000800
        0x080010d6:    f7fffb45    ..E.    BL       LL_TIM_IC_SetActiveInput ; 0x8000764
;;;713    
;;;714      LL_TIM_IC_SetPrescaler(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
        0x080010da:    2200        ."      MOVS     r2,#0
        0x080010dc:    2110        .!      MOVS     r1,#0x10
        0x080010de:    481a        .H      LDR      r0,[pc,#104] ; [0x8001148] = 0x40000800
        0x080010e0:    f7fffbd8    ....    BL       LL_TIM_IC_SetPrescaler ; 0x8000894
;;;715    
;;;716      LL_TIM_IC_SetFilter(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV32_N8);
        0x080010e4:    f44f0270    O.p.    MOV      r2,#0xf00000
        0x080010e8:    2110        .!      MOVS     r1,#0x10
        0x080010ea:    4817        .H      LDR      r0,[pc,#92] ; [0x8001148] = 0x40000800
        0x080010ec:    f7fffb70    ..p.    BL       LL_TIM_IC_SetFilter ; 0x80007d0
;;;717    
;;;718      LL_TIM_IC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
        0x080010f0:    2200        ."      MOVS     r2,#0
        0x080010f2:    2110        .!      MOVS     r1,#0x10
        0x080010f4:    4814        .H      LDR      r0,[pc,#80] ; [0x8001148] = 0x40000800
        0x080010f6:    f7fffba1    ....    BL       LL_TIM_IC_SetPolarity ; 0x800083c
;;;719    
;;;720      LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_UPDATE);
        0x080010fa:    2120         !      MOVS     r1,#0x20
        0x080010fc:    4812        .H      LDR      r0,[pc,#72] ; [0x8001148] = 0x40000800
        0x080010fe:    f7fffcf0    ....    BL       LL_TIM_SetTriggerOutput ; 0x8000ae2
;;;721    
;;;722      LL_TIM_EnableMasterSlaveMode(TIM4);
        0x08001102:    4811        .H      LDR      r0,[pc,#68] ; [0x8001148] = 0x40000800
        0x08001104:    f7fffb29    ..).    BL       LL_TIM_EnableMasterSlaveMode ; 0x800075a
;;;723    
;;;724      LL_TIM_IC_SetActiveInput(TIM4, LL_TIM_CHANNEL_CH3, LL_TIM_ACTIVEINPUT_DIRECTTI);
        0x08001108:    f44f3280    O..2    MOV      r2,#0x10000
        0x0800110c:    1211        ..      ASRS     r1,r2,#8
        0x0800110e:    480e        .H      LDR      r0,[pc,#56] ; [0x8001148] = 0x40000800
        0x08001110:    f7fffb28    ..(.    BL       LL_TIM_IC_SetActiveInput ; 0x8000764
;;;725    
;;;726      LL_TIM_IC_SetPrescaler(TIM4, LL_TIM_CHANNEL_CH3, LL_TIM_ICPSC_DIV1);
        0x08001114:    2200        ."      MOVS     r2,#0
        0x08001116:    f44f7180    O..q    MOV      r1,#0x100
        0x0800111a:    480b        .H      LDR      r0,[pc,#44] ; [0x8001148] = 0x40000800
        0x0800111c:    f7fffbba    ....    BL       LL_TIM_IC_SetPrescaler ; 0x8000894
;;;727    
;;;728      LL_TIM_IC_SetFilter(TIM4, LL_TIM_CHANNEL_CH3, LL_TIM_IC_FILTER_FDIV32_N8);
        0x08001120:    f44f0270    O.p.    MOV      r2,#0xf00000
        0x08001124:    f44f7180    O..q    MOV      r1,#0x100
        0x08001128:    4807        .H      LDR      r0,[pc,#28] ; [0x8001148] = 0x40000800
        0x0800112a:    f7fffb51    ..Q.    BL       LL_TIM_IC_SetFilter ; 0x80007d0
;;;729    
;;;730      LL_TIM_IC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH3, LL_TIM_IC_POLARITY_RISING);
        0x0800112e:    2200        ."      MOVS     r2,#0
        0x08001130:    f44f7180    O..q    MOV      r1,#0x100
        0x08001134:    4804        .H      LDR      r0,[pc,#16] ; [0x8001148] = 0x40000800
        0x08001136:    f7fffb81    ....    BL       LL_TIM_IC_SetPolarity ; 0x800083c
;;;731    
;;;732    }
        0x0800113a:    b00b        ..      ADD      sp,sp,#0x2c
        0x0800113c:    bd30        0.      POP      {r4,r5,pc}
    $d
        0x0800113e:    0000        ..      DCW    0
        0x08001140:    0401c0c1    ....    DCD    67223745
        0x08001144:    40010c00    ...@    DCD    1073810432
        0x08001148:    40000800    ...@    DCD    1073743872
    $t
    i.NVIC_EnableIRQ
    NVIC_EnableIRQ
;;; ../Drivers/CMSIS/Include/core_cm3.h
;;;1454     NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
        0x0800114c:    f000021f    ....    AND      r2,r0,#0x1f
        0x08001150:    2101        .!      MOVS     r1,#1
        0x08001152:    4091        .@      LSLS     r1,r1,r2
        0x08001154:    0942        B.      LSRS     r2,r0,#5
        0x08001156:    0092        ..      LSLS     r2,r2,#2
        0x08001158:    f10222e0    ..."    ADD      r2,r2,#0xe000e000
        0x0800115c:    f8c21100    ....    STR      r1,[r2,#0x100]
;;;1455   }
        0x08001160:    4770        pG      BX       lr
    i.NVIC_EncodePriority
    NVIC_EncodePriority
;;;1456   
;;;1457   
;;;1458   /**
;;;1459     \brief   Disable External Interrupt
;;;1460     \details Disables a device-specific interrupt in the NVIC interrupt controller.
;;;1461     \param [in]      IRQn  External interrupt number. Value cannot be negative.
;;;1462    */
;;;1463   __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
;;;1464   {
;;;1465     NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
;;;1466   }
;;;1467   
;;;1468   
;;;1469   /**
;;;1470     \brief   Get Pending Interrupt
;;;1471     \details Reads the pending register in the NVIC and returns the pending bit for the specified interrupt.
;;;1472     \param [in]      IRQn  Interrupt number.
;;;1473     \return             0  Interrupt status is not pending.
;;;1474     \return             1  Interrupt status is pending.
;;;1475    */
;;;1476   __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
;;;1477   {
;;;1478     return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
;;;1479   }
;;;1480   
;;;1481   
;;;1482   /**
;;;1483     \brief   Set Pending Interrupt
;;;1484     \details Sets the pending bit of an external interrupt.
;;;1485     \param [in]      IRQn  Interrupt number. Value cannot be negative.
;;;1486    */
;;;1487   __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
;;;1488   {
;;;1489     NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
;;;1490   }
;;;1491   
;;;1492   
;;;1493   /**
;;;1494     \brief   Clear Pending Interrupt
;;;1495     \details Clears the pending bit of an external interrupt.
;;;1496     \param [in]      IRQn  External interrupt number. Value cannot be negative.
;;;1497    */
;;;1498   __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
;;;1499   {
;;;1500     NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
;;;1501   }
;;;1502   
;;;1503   
;;;1504   /**
;;;1505     \brief   Get Active Interrupt
;;;1506     \details Reads the active register in NVIC and returns the active bit.
;;;1507     \param [in]      IRQn  Interrupt number.
;;;1508     \return             0  Interrupt status is not active.
;;;1509     \return             1  Interrupt status is active.
;;;1510    */
;;;1511   __STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
;;;1512   {
;;;1513     return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
;;;1514   }
;;;1515   
;;;1516   
;;;1517   /**
;;;1518     \brief   Set Interrupt Priority
;;;1519     \details Sets the priority of an interrupt.
;;;1520     \note    The priority cannot be set for every core interrupt.
;;;1521     \param [in]      IRQn  Interrupt number.
;;;1522     \param [in]  priority  Priority to set.
;;;1523    */
;;;1524   __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
;;;1525   {
;;;1526     if ((int32_t)(IRQn) < 0)
;;;1527     {
;;;1528       SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
;;;1529     }
;;;1530     else
;;;1531     {
;;;1532       NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
;;;1533     }
;;;1534   }
;;;1535   
;;;1536   
;;;1537   /**
;;;1538     \brief   Get Interrupt Priority
;;;1539     \details Reads the priority of an interrupt.
;;;1540              The interrupt number can be positive to specify an external (device specific) interrupt,
;;;1541              or negative to specify an internal (core) interrupt.
;;;1542     \param [in]   IRQn  Interrupt number.
;;;1543     \return             Interrupt Priority.
;;;1544                         Value is aligned automatically to the implemented priority bits of the microcontroller.
;;;1545    */
;;;1546   __STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
;;;1547   {
;;;1548   
;;;1549     if ((int32_t)(IRQn) < 0)
;;;1550     {
;;;1551       return(((uint32_t)SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
;;;1552     }
;;;1553     else
;;;1554     {
;;;1555       return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
;;;1556     }
;;;1557   }
;;;1558   
;;;1559   
;;;1560   /**
;;;1561     \brief   Encode Priority
;;;1562     \details Encodes the priority for an interrupt with the given priority group,
;;;1563              preemptive priority value, and subpriority value.
;;;1564              In case of a conflict between priority grouping and available
;;;1565              priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
;;;1566     \param [in]     PriorityGroup  Used priority group.
;;;1567     \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
;;;1568     \param [in]       SubPriority  Subpriority value (starting from 0).
;;;1569     \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
;;;1570    */
;;;1571   __STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
;;;1572   {
        0x08001162:    b5f0        ..      PUSH     {r4-r7,lr}
        0x08001164:    4603        .F      MOV      r3,r0
        0x08001166:    460c        .F      MOV      r4,r1
;;;1573     uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
        0x08001168:    f0030107    ....    AND      r1,r3,#7
;;;1574     uint32_t PreemptPriorityBits;
;;;1575     uint32_t SubPriorityBits;
;;;1576   
;;;1577     PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
        0x0800116c:    f1c10007    ....    RSB      r0,r1,#7
        0x08001170:    2804        .(      CMP      r0,#4
        0x08001172:    d901        ..      BLS      0x8001178 ; NVIC_EncodePriority + 22
        0x08001174:    2004        .       MOVS     r0,#4
        0x08001176:    e001        ..      B        0x800117c ; NVIC_EncodePriority + 26
        0x08001178:    f1c10007    ....    RSB      r0,r1,#7
        0x0800117c:    4606        .F      MOV      r6,r0
;;;1578     SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
        0x0800117e:    1d08        ..      ADDS     r0,r1,#4
        0x08001180:    2807        .(      CMP      r0,#7
        0x08001182:    d201        ..      BCS      0x8001188 ; NVIC_EncodePriority + 38
        0x08001184:    2000        .       MOVS     r0,#0
        0x08001186:    e000        ..      B        0x800118a ; NVIC_EncodePriority + 40
        0x08001188:    1ec8        ..      SUBS     r0,r1,#3
        0x0800118a:    4605        .F      MOV      r5,r0
;;;1579   
;;;1580     return (
        0x0800118c:    2001        .       MOVS     r0,#1
        0x0800118e:    40b0        .@      LSLS     r0,r0,r6
        0x08001190:    1e40        @.      SUBS     r0,r0,#1
        0x08001192:    4020         @      ANDS     r0,r0,r4
        0x08001194:    40a8        .@      LSLS     r0,r0,r5
        0x08001196:    2701        .'      MOVS     r7,#1
        0x08001198:    40af        .@      LSLS     r7,r7,r5
        0x0800119a:    1e7f        ..      SUBS     r7,r7,#1
        0x0800119c:    4017        .@      ANDS     r7,r7,r2
        0x0800119e:    4338        8C      ORRS     r0,r0,r7
;;;1581              ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
;;;1582              ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
;;;1583            );
;;;1584   }
        0x080011a0:    bdf0        ..      POP      {r4-r7,pc}
        0x080011a2:    0000        ..      MOVS     r0,r0
    i.NVIC_GetPriorityGrouping
    NVIC_GetPriorityGrouping
;;; ../Drivers/CMSIS/Include/core_cm3.h (1443)
        0x080011a4:    4802        .H      LDR      r0,[pc,#8] ; [0x80011b0] = 0xe000ed0c
        0x080011a6:    6800        .h      LDR      r0,[r0,#0]
        0x080011a8:    f3c02002    ...     UBFX     r0,r0,#8,#3
;;;1444   }
        0x080011ac:    4770        pG      BX       lr
    $d
        0x080011ae:    0000        ..      DCW    0
        0x080011b0:    e000ed0c    ....    DCD    3758157068
    $t
    i.NVIC_SetPriority
    NVIC_SetPriority
;;;1445   
;;;1446   
;;;1447   /**
;;;1448     \brief   Enable External Interrupt
;;;1449     \details Enables a device-specific interrupt in the NVIC interrupt controller.
;;;1450     \param [in]      IRQn  External interrupt number. Value cannot be negative.
;;;1451    */
;;;1452   __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
;;;1453   {
;;;1454     NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
;;;1455   }
;;;1456   
;;;1457   
;;;1458   /**
;;;1459     \brief   Disable External Interrupt
;;;1460     \details Disables a device-specific interrupt in the NVIC interrupt controller.
;;;1461     \param [in]      IRQn  External interrupt number. Value cannot be negative.
;;;1462    */
;;;1463   __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
;;;1464   {
;;;1465     NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
;;;1466   }
;;;1467   
;;;1468   
;;;1469   /**
;;;1470     \brief   Get Pending Interrupt
;;;1471     \details Reads the pending register in the NVIC and returns the pending bit for the specified interrupt.
;;;1472     \param [in]      IRQn  Interrupt number.
;;;1473     \return             0  Interrupt status is not pending.
;;;1474     \return             1  Interrupt status is pending.
;;;1475    */
;;;1476   __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
;;;1477   {
;;;1478     return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
;;;1479   }
;;;1480   
;;;1481   
;;;1482   /**
;;;1483     \brief   Set Pending Interrupt
;;;1484     \details Sets the pending bit of an external interrupt.
;;;1485     \param [in]      IRQn  Interrupt number. Value cannot be negative.
;;;1486    */
;;;1487   __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
;;;1488   {
;;;1489     NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
;;;1490   }
;;;1491   
;;;1492   
;;;1493   /**
;;;1494     \brief   Clear Pending Interrupt
;;;1495     \details Clears the pending bit of an external interrupt.
;;;1496     \param [in]      IRQn  External interrupt number. Value cannot be negative.
;;;1497    */
;;;1498   __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
;;;1499   {
;;;1500     NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
;;;1501   }
;;;1502   
;;;1503   
;;;1504   /**
;;;1505     \brief   Get Active Interrupt
;;;1506     \details Reads the active register in NVIC and returns the active bit.
;;;1507     \param [in]      IRQn  Interrupt number.
;;;1508     \return             0  Interrupt status is not active.
;;;1509     \return             1  Interrupt status is active.
;;;1510    */
;;;1511   __STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
;;;1512   {
;;;1513     return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
;;;1514   }
;;;1515   
;;;1516   
;;;1517   /**
;;;1518     \brief   Set Interrupt Priority
;;;1519     \details Sets the priority of an interrupt.
;;;1520     \note    The priority cannot be set for every core interrupt.
;;;1521     \param [in]      IRQn  Interrupt number.
;;;1522     \param [in]  priority  Priority to set.
;;;1523    */
;;;1524   __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
;;;1525   {
        0x080011b4:    b510        ..      PUSH     {r4,lr}
;;;1526     if ((int32_t)(IRQn) < 0)
        0x080011b6:    2800        .(      CMP      r0,#0
        0x080011b8:    da07        ..      BGE      0x80011ca ; NVIC_SetPriority + 22
;;;1527     {
;;;1528       SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
        0x080011ba:    070a        ..      LSLS     r2,r1,#28
        0x080011bc:    0e14        ..      LSRS     r4,r2,#24
        0x080011be:    4a05        .J      LDR      r2,[pc,#20] ; [0x80011d4] = 0xe000ed18
        0x080011c0:    f000030f    ....    AND      r3,r0,#0xf
        0x080011c4:    1f1b        ..      SUBS     r3,r3,#4
        0x080011c6:    54d4        .T      STRB     r4,[r2,r3]
        0x080011c8:    e003        ..      B        0x80011d2 ; NVIC_SetPriority + 30
;;;1529     }
;;;1530     else
;;;1531     {
;;;1532       NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
        0x080011ca:    070a        ..      LSLS     r2,r1,#28
        0x080011cc:    0e13        ..      LSRS     r3,r2,#24
        0x080011ce:    4a02        .J      LDR      r2,[pc,#8] ; [0x80011d8] = 0xe000e400
        0x080011d0:    5413        .T      STRB     r3,[r2,r0]
;;;1533     }
;;;1534   }
        0x080011d2:    bd10        ..      POP      {r4,pc}
    $d
        0x080011d4:    e000ed18    ....    DCD    3758157080
        0x080011d8:    e000e400    ....    DCD    3758154752
    $t
    i.OC1Config
    OC1Config
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_tim.c
;;;766    {
        0x080011dc:    b570        p.      PUSH     {r4-r6,lr}
        0x080011de:    4602        .F      MOV      r2,r0
;;;767      uint32_t tmpccmr1 = 0U;
        0x080011e0:    2400        .$      MOVS     r4,#0
;;;768      uint32_t tmpccer = 0U;
        0x080011e2:    2300        .#      MOVS     r3,#0
;;;769      uint32_t tmpcr2 = 0U;
        0x080011e4:    2500        .%      MOVS     r5,#0
;;;770    
;;;771      /* Check the parameters */
;;;772      assert_param(IS_TIM_CC1_INSTANCE(TIMx));
;;;773      assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
;;;774      assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
;;;775      assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
;;;776      assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
;;;777      assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
;;;778    
;;;779      /* Disable the Channel 1: Reset the CC1E Bit */
;;;780      CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
        0x080011e6:    6a10        .j      LDR      r0,[r2,#0x20]
        0x080011e8:    f0200001     ...    BIC      r0,r0,#1
        0x080011ec:    6210        .b      STR      r0,[r2,#0x20]
;;;781    
;;;782      /* Get the TIMx CCER register value */
;;;783      tmpccer = LL_TIM_ReadReg(TIMx, CCER);
        0x080011ee:    6a13        .j      LDR      r3,[r2,#0x20]
;;;784    
;;;785      /* Get the TIMx CR2 register value */
;;;786      tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
        0x080011f0:    6855        Uh      LDR      r5,[r2,#4]
;;;787    
;;;788      /* Get the TIMx CCMR1 register value */
;;;789      tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
        0x080011f2:    6994        .i      LDR      r4,[r2,#0x18]
;;;790    
;;;791      /* Reset Capture/Compare selection Bits */
;;;792      CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
        0x080011f4:    f0240403    $...    BIC      r4,r4,#3
;;;793    
;;;794      /* Set the Output Compare Mode */
;;;795      MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
        0x080011f8:    f0240070    $.p.    BIC      r0,r4,#0x70
        0x080011fc:    680e        .h      LDR      r6,[r1,#0]
        0x080011fe:    ea400406    @...    ORR      r4,r0,r6
;;;796    
;;;797      /* Set the Output Compare Polarity */
;;;798      MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
        0x08001202:    f0230002    #...    BIC      r0,r3,#2
        0x08001206:    690e        .i      LDR      r6,[r1,#0x10]
        0x08001208:    ea400306    @...    ORR      r3,r0,r6
;;;799    
;;;800      /* Set the Output State */
;;;801      MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
        0x0800120c:    f0230001    #...    BIC      r0,r3,#1
        0x08001210:    684e        Nh      LDR      r6,[r1,#4]
        0x08001212:    ea400306    @...    ORR      r3,r0,r6
;;;802    
;;;803      if (IS_TIM_BREAK_INSTANCE(TIMx))
        0x08001216:    480f        .H      LDR      r0,[pc,#60] ; [0x8001254] = 0x40012c00
        0x08001218:    4282        .B      CMP      r2,r0
        0x0800121a:    d113        ..      BNE      0x8001244 ; OC1Config + 104
;;;804      {
;;;805        assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
;;;806        assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));
;;;807    
;;;808        /* Set the complementary output Polarity */
;;;809        MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
        0x0800121c:    f0230008    #...    BIC      r0,r3,#8
        0x08001220:    694e        Ni      LDR      r6,[r1,#0x14]
        0x08001222:    ea400386    @...    ORR      r3,r0,r6,LSL #2
;;;810    
;;;811        /* Set the complementary output State */
;;;812        MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
        0x08001226:    f0230004    #...    BIC      r0,r3,#4
        0x0800122a:    688e        .h      LDR      r6,[r1,#8]
        0x0800122c:    ea400386    @...    ORR      r3,r0,r6,LSL #2
;;;813    
;;;814        /* Set the Output Idle state */
;;;815        MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
        0x08001230:    f4257080    %..p    BIC      r0,r5,#0x100
        0x08001234:    698e        .i      LDR      r6,[r1,#0x18]
        0x08001236:    ea400506    @...    ORR      r5,r0,r6
;;;816    
;;;817        /* Set the complementary output Idle state */
;;;818        MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
        0x0800123a:    f4257000    %..p    BIC      r0,r5,#0x200
        0x0800123e:    69ce        .i      LDR      r6,[r1,#0x1c]
        0x08001240:    ea400546    @.F.    ORR      r5,r0,r6,LSL #1
;;;819      }
;;;820    
;;;821      /* Write to TIMx CR2 */
;;;822      LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
        0x08001244:    6055        U`      STR      r5,[r2,#4]
;;;823    
;;;824      /* Write to TIMx CCMR1 */
;;;825      LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
        0x08001246:    6194        .a      STR      r4,[r2,#0x18]
;;;826    
;;;827      /* Set the Capture Compare Register value */
;;;828      LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
        0x08001248:    68c8        .h      LDR      r0,[r1,#0xc]
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;1994     WRITE_REG(TIMx->CCR1, CompareValue);
        0x0800124a:    6350        Pc      STR      r0,[r2,#0x34]
;;;1995   }
        0x0800124c:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_tim.c
;;;831      LL_TIM_WriteReg(TIMx, CCER, tmpccer);
        0x0800124e:    6213        .b      STR      r3,[r2,#0x20]
;;;832    
;;;833      return SUCCESS;
        0x08001250:    2001        .       MOVS     r0,#1
;;;834    }
        0x08001252:    bd70        p.      POP      {r4-r6,pc}
    $d
        0x08001254:    40012c00    .,.@    DCD    1073818624
    $t
    i.OC2Config
    OC2Config
;;;835    
;;;836    /**
;;;837      * @brief  Configure the TIMx output channel 2.
;;;838      * @param  TIMx Timer Instance
;;;839      * @param  TIM_OCInitStruct pointer to the the TIMx output channel 2 configuration data structure
;;;840      * @retval An ErrorStatus enumeration value:
;;;841      *          - SUCCESS: TIMx registers are de-initialized
;;;842      *          - ERROR: not applicable
;;;843      */
;;;844    static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
;;;845    {
        0x08001258:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x0800125c:    4604        .F      MOV      r4,r0
        0x0800125e:    460d        .F      MOV      r5,r1
;;;846      uint32_t tmpccmr1 = 0U;
        0x08001260:    2700        .'      MOVS     r7,#0
;;;847      uint32_t tmpccer = 0U;
        0x08001262:    2600        .&      MOVS     r6,#0
;;;848      uint32_t tmpcr2 = 0U;
        0x08001264:    46b0        .F      MOV      r8,r6
;;;849    
;;;850      /* Check the parameters */
;;;851      assert_param(IS_TIM_CC2_INSTANCE(TIMx));
;;;852      assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
;;;853      assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
;;;854      assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
;;;855      assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
;;;856      assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
;;;857    
;;;858      /* Disable the Channel 2: Reset the CC2E Bit */
;;;859      CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
        0x08001266:    6a20         j      LDR      r0,[r4,#0x20]
        0x08001268:    f0200010     ...    BIC      r0,r0,#0x10
        0x0800126c:    6220         b      STR      r0,[r4,#0x20]
;;;860    
;;;861      /* Get the TIMx CCER register value */
;;;862      tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
        0x0800126e:    6a26        &j      LDR      r6,[r4,#0x20]
;;;863    
;;;864      /* Get the TIMx CR2 register value */
;;;865      tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
        0x08001270:    f8d48004    ....    LDR      r8,[r4,#4]
;;;866    
;;;867      /* Get the TIMx CCMR1 register value */
;;;868      tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
        0x08001274:    69a7        .i      LDR      r7,[r4,#0x18]
;;;869    
;;;870      /* Reset Capture/Compare selection Bits */
;;;871      CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
        0x08001276:    f4277740    '.@w    BIC      r7,r7,#0x300
;;;872    
;;;873      /* Select the Output Compare Mode */
;;;874      MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
        0x0800127a:    f42740e0    '..@    BIC      r0,r7,#0x7000
        0x0800127e:    6829        )h      LDR      r1,[r5,#0]
        0x08001280:    ea402701    @..'    ORR      r7,r0,r1,LSL #8
;;;875    
;;;876      /* Set the Output Compare Polarity */
;;;877      MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
        0x08001284:    f0260020    &. .    BIC      r0,r6,#0x20
        0x08001288:    6929        )i      LDR      r1,[r5,#0x10]
        0x0800128a:    ea401601    @...    ORR      r6,r0,r1,LSL #4
;;;878    
;;;879      /* Set the Output State */
;;;880      MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
        0x0800128e:    f0260010    &...    BIC      r0,r6,#0x10
        0x08001292:    6869        ih      LDR      r1,[r5,#4]
        0x08001294:    ea401601    @...    ORR      r6,r0,r1,LSL #4
;;;881    
;;;882      if (IS_TIM_BREAK_INSTANCE(TIMx))
        0x08001298:    4810        .H      LDR      r0,[pc,#64] ; [0x80012dc] = 0x40012c00
        0x0800129a:    4284        .B      CMP      r4,r0
        0x0800129c:    d113        ..      BNE      0x80012c6 ; OC2Config + 110
;;;883      {
;;;884        assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
;;;885        assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));
;;;886    
;;;887        /* Set the complementary output Polarity */
;;;888        MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
        0x0800129e:    f0260080    &...    BIC      r0,r6,#0x80
        0x080012a2:    6969        ii      LDR      r1,[r5,#0x14]
        0x080012a4:    ea401681    @...    ORR      r6,r0,r1,LSL #6
;;;889    
;;;890        /* Set the complementary output State */
;;;891        MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
        0x080012a8:    f0260040    &.@.    BIC      r0,r6,#0x40
        0x080012ac:    68a9        .h      LDR      r1,[r5,#8]
        0x080012ae:    ea401681    @...    ORR      r6,r0,r1,LSL #6
;;;892    
;;;893        /* Set the Output Idle state */
;;;894        MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
        0x080012b2:    f4286080    (..`    BIC      r0,r8,#0x400
        0x080012b6:    69a9        .i      LDR      r1,[r5,#0x18]
        0x080012b8:    ea400881    @...    ORR      r8,r0,r1,LSL #2
;;;895    
;;;896        /* Set the complementary output Idle state */
;;;897        MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
        0x080012bc:    f4286000    (..`    BIC      r0,r8,#0x800
        0x080012c0:    69e9        .i      LDR      r1,[r5,#0x1c]
        0x080012c2:    ea4008c1    @...    ORR      r8,r0,r1,LSL #3
;;;898      }
;;;899    
;;;900      /* Write to TIMx CR2 */
;;;901      LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
        0x080012c6:    f8c48004    ....    STR      r8,[r4,#4]
;;;902    
;;;903      /* Write to TIMx CCMR1 */
;;;904      LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
        0x080012ca:    61a7        .a      STR      r7,[r4,#0x18]
;;;905    
;;;906      /* Set the Capture Compare Register value */
;;;907      LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
        0x080012cc:    4620         F      MOV      r0,r4
        0x080012ce:    68e9        .h      LDR      r1,[r5,#0xc]
        0x080012d0:    f7fffbec    ....    BL       LL_TIM_OC_SetCompareCH2 ; 0x8000aac
;;;908    
;;;909      /* Write to TIMx CCER */
;;;910      LL_TIM_WriteReg(TIMx, CCER, tmpccer);
        0x080012d4:    6226        &b      STR      r6,[r4,#0x20]
;;;911    
;;;912      return SUCCESS;
        0x080012d6:    2001        .       MOVS     r0,#1
;;;913    }
        0x080012d8:    e8bd81f0    ....    POP      {r4-r8,pc}
    $d
        0x080012dc:    40012c00    .,.@    DCD    1073818624
    $t
    i.OC3Config
    OC3Config
;;;914    
;;;915    /**
;;;916      * @brief  Configure the TIMx output channel 3.
;;;917      * @param  TIMx Timer Instance
;;;918      * @param  TIM_OCInitStruct pointer to the the TIMx output channel 3 configuration data structure
;;;919      * @retval An ErrorStatus enumeration value:
;;;920      *          - SUCCESS: TIMx registers are de-initialized
;;;921      *          - ERROR: not applicable
;;;922      */
;;;923    static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
;;;924    {
        0x080012e0:    b570        p.      PUSH     {r4-r6,lr}
        0x080012e2:    4602        .F      MOV      r2,r0
;;;925      uint32_t tmpccmr2 = 0U;
        0x080012e4:    2400        .$      MOVS     r4,#0
;;;926      uint32_t tmpccer = 0U;
        0x080012e6:    2300        .#      MOVS     r3,#0
;;;927      uint32_t tmpcr2 = 0U;
        0x080012e8:    2500        .%      MOVS     r5,#0
;;;928    
;;;929      /* Check the parameters */
;;;930      assert_param(IS_TIM_CC3_INSTANCE(TIMx));
;;;931      assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
;;;932      assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
;;;933      assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
;;;934      assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
;;;935      assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
;;;936    
;;;937      /* Disable the Channel 3: Reset the CC3E Bit */
;;;938      CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
        0x080012ea:    6a10        .j      LDR      r0,[r2,#0x20]
        0x080012ec:    f4207080     ..p    BIC      r0,r0,#0x100
        0x080012f0:    6210        .b      STR      r0,[r2,#0x20]
;;;939    
;;;940      /* Get the TIMx CCER register value */
;;;941      tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
        0x080012f2:    6a13        .j      LDR      r3,[r2,#0x20]
;;;942    
;;;943      /* Get the TIMx CR2 register value */
;;;944      tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
        0x080012f4:    6855        Uh      LDR      r5,[r2,#4]
;;;945    
;;;946      /* Get the TIMx CCMR2 register value */
;;;947      tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
        0x080012f6:    69d4        .i      LDR      r4,[r2,#0x1c]
;;;948    
;;;949      /* Reset Capture/Compare selection Bits */
;;;950      CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
        0x080012f8:    f0240403    $...    BIC      r4,r4,#3
;;;951    
;;;952      /* Select the Output Compare Mode */
;;;953      MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
        0x080012fc:    f0240070    $.p.    BIC      r0,r4,#0x70
        0x08001300:    680e        .h      LDR      r6,[r1,#0]
        0x08001302:    ea400406    @...    ORR      r4,r0,r6
;;;954    
;;;955      /* Set the Output Compare Polarity */
;;;956      MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
        0x08001306:    f4237000    #..p    BIC      r0,r3,#0x200
        0x0800130a:    690e        .i      LDR      r6,[r1,#0x10]
        0x0800130c:    ea402306    @..#    ORR      r3,r0,r6,LSL #8
;;;957    
;;;958      /* Set the Output State */
;;;959      MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
        0x08001310:    f4237080    #..p    BIC      r0,r3,#0x100
        0x08001314:    684e        Nh      LDR      r6,[r1,#4]
        0x08001316:    ea402306    @..#    ORR      r3,r0,r6,LSL #8
;;;960    
;;;961      if (IS_TIM_BREAK_INSTANCE(TIMx))
        0x0800131a:    480f        .H      LDR      r0,[pc,#60] ; [0x8001358] = 0x40012c00
        0x0800131c:    4282        .B      CMP      r2,r0
        0x0800131e:    d113        ..      BNE      0x8001348 ; OC3Config + 104
;;;962      {
;;;963        assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
;;;964        assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));
;;;965    
;;;966        /* Set the complementary output Polarity */
;;;967        MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
        0x08001320:    f4236000    #..`    BIC      r0,r3,#0x800
        0x08001324:    694e        Ni      LDR      r6,[r1,#0x14]
        0x08001326:    ea402386    @..#    ORR      r3,r0,r6,LSL #10
;;;968    
;;;969        /* Set the complementary output State */
;;;970        MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
        0x0800132a:    f4236080    #..`    BIC      r0,r3,#0x400
        0x0800132e:    688e        .h      LDR      r6,[r1,#8]
        0x08001330:    ea402386    @..#    ORR      r3,r0,r6,LSL #10
;;;971    
;;;972        /* Set the Output Idle state */
;;;973        MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
        0x08001334:    f4255080    %..P    BIC      r0,r5,#0x1000
        0x08001338:    698e        .i      LDR      r6,[r1,#0x18]
        0x0800133a:    ea401506    @...    ORR      r5,r0,r6,LSL #4
;;;974    
;;;975        /* Set the complementary output Idle state */
;;;976        MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
        0x0800133e:    f4255000    %..P    BIC      r0,r5,#0x2000
        0x08001342:    69ce        .i      LDR      r6,[r1,#0x1c]
        0x08001344:    ea401546    @.F.    ORR      r5,r0,r6,LSL #5
;;;977      }
;;;978    
;;;979      /* Write to TIMx CR2 */
;;;980      LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
        0x08001348:    6055        U`      STR      r5,[r2,#4]
;;;981    
;;;982      /* Write to TIMx CCMR2 */
;;;983      LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
        0x0800134a:    61d4        .a      STR      r4,[r2,#0x1c]
;;;984    
;;;985      /* Set the Capture Compare Register value */
;;;986      LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
        0x0800134c:    68c8        .h      LDR      r0,[r1,#0xc]
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;2022     WRITE_REG(TIMx->CCR3, CompareValue);
        0x0800134e:    63d0        .c      STR      r0,[r2,#0x3c]
;;;2023   }
        0x08001350:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_tim.c
;;;989      LL_TIM_WriteReg(TIMx, CCER, tmpccer);
        0x08001352:    6213        .b      STR      r3,[r2,#0x20]
;;;990    
;;;991      return SUCCESS;
        0x08001354:    2001        .       MOVS     r0,#1
;;;992    }
        0x08001356:    bd70        p.      POP      {r4-r6,pc}
    $d
        0x08001358:    40012c00    .,.@    DCD    1073818624
    $t
    i.OC4Config
    OC4Config
;;;993    
;;;994    /**
;;;995      * @brief  Configure the TIMx output channel 4.
;;;996      * @param  TIMx Timer Instance
;;;997      * @param  TIM_OCInitStruct pointer to the the TIMx output channel 4 configuration data structure
;;;998      * @retval An ErrorStatus enumeration value:
;;;999      *          - SUCCESS: TIMx registers are de-initialized
;;;1000     *          - ERROR: not applicable
;;;1001     */
;;;1002   static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
;;;1003   {
        0x0800135c:    b570        p.      PUSH     {r4-r6,lr}
        0x0800135e:    4602        .F      MOV      r2,r0
;;;1004     uint32_t tmpccmr2 = 0U;
        0x08001360:    2300        .#      MOVS     r3,#0
;;;1005     uint32_t tmpccer = 0U;
        0x08001362:    2400        .$      MOVS     r4,#0
;;;1006     uint32_t tmpcr2 = 0U;
        0x08001364:    2500        .%      MOVS     r5,#0
;;;1007   
;;;1008     /* Check the parameters */
;;;1009     assert_param(IS_TIM_CC4_INSTANCE(TIMx));
;;;1010     assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
;;;1011     assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
;;;1012     assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
;;;1013     assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
;;;1014     assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
;;;1015   
;;;1016     /* Disable the Channel 4: Reset the CC4E Bit */
;;;1017     CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
        0x08001366:    6a10        .j      LDR      r0,[r2,#0x20]
        0x08001368:    f4205080     ..P    BIC      r0,r0,#0x1000
        0x0800136c:    6210        .b      STR      r0,[r2,#0x20]
;;;1018   
;;;1019     /* Get the TIMx CCER register value */
;;;1020     tmpccer = LL_TIM_ReadReg(TIMx, CCER);
        0x0800136e:    6a14        .j      LDR      r4,[r2,#0x20]
;;;1021   
;;;1022     /* Get the TIMx CR2 register value */
;;;1023     tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
        0x08001370:    6855        Uh      LDR      r5,[r2,#4]
;;;1024   
;;;1025     /* Get the TIMx CCMR2 register value */
;;;1026     tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
        0x08001372:    69d3        .i      LDR      r3,[r2,#0x1c]
;;;1027   
;;;1028     /* Reset Capture/Compare selection Bits */
;;;1029     CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
        0x08001374:    f4237340    #.@s    BIC      r3,r3,#0x300
;;;1030   
;;;1031     /* Select the Output Compare Mode */
;;;1032     MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
        0x08001378:    f42340e0    #..@    BIC      r0,r3,#0x7000
        0x0800137c:    680e        .h      LDR      r6,[r1,#0]
        0x0800137e:    ea402306    @..#    ORR      r3,r0,r6,LSL #8
;;;1033   
;;;1034     /* Set the Output Compare Polarity */
;;;1035     MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
        0x08001382:    f4245000    $..P    BIC      r0,r4,#0x2000
        0x08001386:    690e        .i      LDR      r6,[r1,#0x10]
        0x08001388:    ea403406    @..4    ORR      r4,r0,r6,LSL #12
;;;1036   
;;;1037     /* Set the Output State */
;;;1038     MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
        0x0800138c:    f4245080    $..P    BIC      r0,r4,#0x1000
        0x08001390:    684e        Nh      LDR      r6,[r1,#4]
        0x08001392:    ea403406    @..4    ORR      r4,r0,r6,LSL #12
;;;1039   
;;;1040     if (IS_TIM_BREAK_INSTANCE(TIMx))
        0x08001396:    4808        .H      LDR      r0,[pc,#32] ; [0x80013b8] = 0x40012c00
        0x08001398:    4282        .B      CMP      r2,r0
        0x0800139a:    d104        ..      BNE      0x80013a6 ; OC4Config + 74
;;;1041     {
;;;1042       assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
;;;1043       assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));
;;;1044   
;;;1045       /* Set the Output Idle state */
;;;1046       MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
        0x0800139c:    f4254080    %..@    BIC      r0,r5,#0x4000
        0x080013a0:    698e        .i      LDR      r6,[r1,#0x18]
        0x080013a2:    ea401586    @...    ORR      r5,r0,r6,LSL #6
;;;1047     }
;;;1048   
;;;1049     /* Write to TIMx CR2 */
;;;1050     LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
        0x080013a6:    6055        U`      STR      r5,[r2,#4]
;;;1051   
;;;1052     /* Write to TIMx CCMR2 */
;;;1053     LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
        0x080013a8:    61d3        .a      STR      r3,[r2,#0x1c]
;;;1054   
;;;1055     /* Set the Capture Compare Register value */
;;;1056     LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
        0x080013aa:    68c8        .h      LDR      r0,[r1,#0xc]
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;2036     WRITE_REG(TIMx->CCR4, CompareValue);
        0x080013ac:    6410        .d      STR      r0,[r2,#0x40]
;;;2037   }
        0x080013ae:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_tim.c
;;;1059     LL_TIM_WriteReg(TIMx, CCER, tmpccer);
        0x080013b0:    6214        .b      STR      r4,[r2,#0x20]
;;;1060   
;;;1061     return SUCCESS;
        0x080013b2:    2001        .       MOVS     r0,#1
;;;1062   }
        0x080013b4:    bd70        p.      POP      {r4-r6,pc}
    $d
        0x080013b6:    0000        ..      DCW    0
        0x080013b8:    40012c00    .,.@    DCD    1073818624
    $t
    i.PendSV_Handler
    PendSV_Handler
;;; .\../Src/stm32f1xx_it.c
;;;109    }
        0x080013bc:    4770        pG      BX       lr
        0x080013be:    0000        ..      MOVS     r0,r0
    i.RCC_GetHCLKClockFreq
    RCC_GetHCLKClockFreq
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_rcc.c
;;;388    {
        0x080013c0:    4601        .F      MOV      r1,r0
;;;389      /* HCLK clock frequency */
;;;390      return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
        0x080013c2:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;1116     return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
        0x080013c4:    4804        .H      LDR      r0,[pc,#16] ; [0x80013d8] = 0x40021000
        0x080013c6:    6840        @h      LDR      r0,[r0,#4]
        0x080013c8:    f00000f0    ....    AND      r0,r0,#0xf0
        0x080013cc:    0900        ..      LSRS     r0,r0,#4
        0x080013ce:    4a03        .J      LDR      r2,[pc,#12] ; [0x80013dc] = 0x8002258
        0x080013d0:    5c12        .\      LDRB     r2,[r2,r0]
        0x080013d2:    fa21f002    !...    LSR      r0,r1,r2
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_rcc.c
;;;391    }
        0x080013d6:    4770        pG      BX       lr
    $d
        0x080013d8:    40021000    ...@    DCD    1073876992
        0x080013dc:    08002258    X"..    DCD    134226520
    $t
    i.RCC_GetPCLK1ClockFreq
    RCC_GetPCLK1ClockFreq
;;;392    
;;;393    /**
;;;394      * @brief  Return PCLK1 clock frequency
;;;395      * @param  HCLK_Frequency HCLK clock frequency
;;;396      * @retval PCLK1 clock frequency (in Hz)
;;;397      */
;;;398    uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
;;;399    {
        0x080013e0:    4601        .F      MOV      r1,r0
;;;400      /* PCLK1 clock frequency */
;;;401      return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
        0x080013e2:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;1131     return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
        0x080013e4:    4805        .H      LDR      r0,[pc,#20] ; [0x80013fc] = 0x40021000
        0x080013e6:    6840        @h      LDR      r0,[r0,#4]
        0x080013e8:    f40060e0    ...`    AND      r0,r0,#0x700
        0x080013ec:    4a04        .J      LDR      r2,[pc,#16] ; [0x8001400] = 0x8002268
        0x080013ee:    eb022010    ...     ADD      r0,r2,r0,LSR #8
        0x080013f2:    7802        .x      LDRB     r2,[r0,#0]
        0x080013f4:    fa21f002    !...    LSR      r0,r1,r2
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_rcc.c
;;;402    }
        0x080013f8:    4770        pG      BX       lr
    $d
        0x080013fa:    0000        ..      DCW    0
        0x080013fc:    40021000    ...@    DCD    1073876992
        0x08001400:    08002268    h"..    DCD    134226536
    $t
    i.RCC_GetPCLK2ClockFreq
    RCC_GetPCLK2ClockFreq
;;;403    
;;;404    /**
;;;405      * @brief  Return PCLK2 clock frequency
;;;406      * @param  HCLK_Frequency HCLK clock frequency
;;;407      * @retval PCLK2 clock frequency (in Hz)
;;;408      */
;;;409    uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
;;;410    {
        0x08001404:    4601        .F      MOV      r1,r0
;;;411      /* PCLK2 clock frequency */
;;;412      return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
        0x08001406:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;1146     return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
        0x08001408:    4805        .H      LDR      r0,[pc,#20] ; [0x8001420] = 0x40021000
        0x0800140a:    6840        @h      LDR      r0,[r0,#4]
        0x0800140c:    f4005060    ..`P    AND      r0,r0,#0x3800
        0x08001410:    4a04        .J      LDR      r2,[pc,#16] ; [0x8001424] = 0x8002268
        0x08001412:    eb0220d0    ...     ADD      r0,r2,r0,LSR #11
        0x08001416:    7802        .x      LDRB     r2,[r0,#0]
        0x08001418:    fa21f002    !...    LSR      r0,r1,r2
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_rcc.c
;;;413    }
        0x0800141c:    4770        pG      BX       lr
    $d
        0x0800141e:    0000        ..      DCW    0
        0x08001420:    40021000    ...@    DCD    1073876992
        0x08001424:    08002268    h"..    DCD    134226536
    $t
    i.RCC_GetSystemClockFreq
    RCC_GetSystemClockFreq
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_rcc.c (356)
        0x08001428:    b510        ..      PUSH     {r4,lr}
;;;357      uint32_t frequency = 0U;
        0x0800142a:    2400        .$      MOVS     r4,#0
;;;358    
;;;359      /* Get SYSCLK source -------------------------------------------------------*/
;;;360      switch (LL_RCC_GetSysClkSource())
        0x0800142c:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;1045     return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
        0x0800142e:    480b        .H      LDR      r0,[pc,#44] ; [0x800145c] = 0x40021000
        0x08001430:    6840        @h      LDR      r0,[r0,#4]
        0x08001432:    f000000c    ....    AND      r0,r0,#0xc
        0x08001436:    b120         .      CBZ      r0,0x8001442 ; RCC_GetSystemClockFreq + 26
        0x08001438:    2804        .(      CMP      r0,#4
        0x0800143a:    d004        ..      BEQ      0x8001446 ; RCC_GetSystemClockFreq + 30
        0x0800143c:    2808        .(      CMP      r0,#8
        0x0800143e:    d108        ..      BNE      0x8001452 ; RCC_GetSystemClockFreq + 42
        0x08001440:    e003        ..      B        0x800144a ; RCC_GetSystemClockFreq + 34
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_rcc.c
;;;363          frequency = HSI_VALUE;
        0x08001442:    4c07        .L      LDR      r4,[pc,#28] ; [0x8001460] = 0x7a1200
;;;364          break;
        0x08001444:    e007        ..      B        0x8001456 ; RCC_GetSystemClockFreq + 46
;;;365    
;;;366        case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
;;;367          frequency = HSE_VALUE;
        0x08001446:    4c06        .L      LDR      r4,[pc,#24] ; [0x8001460] = 0x7a1200
;;;368          break;
        0x08001448:    e005        ..      B        0x8001456 ; RCC_GetSystemClockFreq + 46
;;;369    
;;;370        case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
;;;371          frequency = RCC_PLL_GetFreqDomain_SYS();
        0x0800144a:    f000f80b    ....    BL       RCC_PLL_GetFreqDomain_SYS ; 0x8001464
        0x0800144e:    4604        .F      MOV      r4,r0
;;;372          break;
        0x08001450:    e001        ..      B        0x8001456 ; RCC_GetSystemClockFreq + 46
;;;373    
;;;374        default:
;;;375          frequency = HSI_VALUE;
        0x08001452:    4c03        .L      LDR      r4,[pc,#12] ; [0x8001460] = 0x7a1200
;;;376          break;
        0x08001454:    bf00        ..      NOP      
        0x08001456:    bf00        ..      NOP      
;;;377      }
;;;378    
;;;379      return frequency;
        0x08001458:    4620         F      MOV      r0,r4
;;;380    }
        0x0800145a:    bd10        ..      POP      {r4,pc}
    $d
        0x0800145c:    40021000    ...@    DCD    1073876992
        0x08001460:    007a1200    ..z.    DCD    8000000
    $t
    i.RCC_PLL_GetFreqDomain_SYS
    RCC_PLL_GetFreqDomain_SYS
;;;381    
;;;382    /**
;;;383      * @brief  Return HCLK clock frequency
;;;384      * @param  SYSCLK_Frequency SYSCLK clock frequency
;;;385      * @retval HCLK clock frequency (in Hz)
;;;386      */
;;;387    uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
;;;388    {
;;;389      /* HCLK clock frequency */
;;;390      return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
;;;391    }
;;;392    
;;;393    /**
;;;394      * @brief  Return PCLK1 clock frequency
;;;395      * @param  HCLK_Frequency HCLK clock frequency
;;;396      * @retval PCLK1 clock frequency (in Hz)
;;;397      */
;;;398    uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
;;;399    {
;;;400      /* PCLK1 clock frequency */
;;;401      return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
;;;402    }
;;;403    
;;;404    /**
;;;405      * @brief  Return PCLK2 clock frequency
;;;406      * @param  HCLK_Frequency HCLK clock frequency
;;;407      * @retval PCLK2 clock frequency (in Hz)
;;;408      */
;;;409    uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
;;;410    {
;;;411      /* PCLK2 clock frequency */
;;;412      return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
;;;413    }
;;;414    
;;;415    /**
;;;416      * @brief  Return PLL clock frequency used for system domain
;;;417      * @retval PLL clock frequency (in Hz)
;;;418      */
;;;419    uint32_t RCC_PLL_GetFreqDomain_SYS(void)
;;;420    {
;;;421      uint32_t pllinputfreq = 0U, pllsource = 0U;
        0x08001464:    2100        .!      MOVS     r1,#0
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_rcc.c (421)
        0x08001466:    2200        ."      MOVS     r2,#0
;;;422    
;;;423      /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */
;;;424    
;;;425      /* Get PLL source */
;;;426      pllsource = LL_RCC_PLL_GetMainSource();
        0x08001468:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;1543     return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
        0x0800146a:    4811        .H      LDR      r0,[pc,#68] ; [0x80014b0] = 0x40021000
        0x0800146c:    6840        @h      LDR      r0,[r0,#4]
        0x0800146e:    f4003080    ...0    AND      r0,r0,#0x10000
        0x08001472:    4602        .F      MOV      r2,r0
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_rcc.c
;;;428      switch (pllsource)
        0x08001474:    b11a        ..      CBZ      r2,0x800147e ; RCC_PLL_GetFreqDomain_SYS + 26
        0x08001476:    f5b23f80    ...?    CMP      r2,#0x10000
        0x0800147a:    d10c        ..      BNE      0x8001496 ; RCC_PLL_GetFreqDomain_SYS + 50
        0x0800147c:    e001        ..      B        0x8001482 ; RCC_PLL_GetFreqDomain_SYS + 30
;;;429      {
;;;430        case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
;;;431          pllinputfreq = HSI_VALUE / 2U;
        0x0800147e:    490d        .I      LDR      r1,[pc,#52] ; [0x80014b4] = 0x3d0900
;;;432          break;
        0x08001480:    e00b        ..      B        0x800149a ; RCC_PLL_GetFreqDomain_SYS + 54
;;;433    
;;;434        case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
;;;435          pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
        0x08001482:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;1605     return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE));
        0x08001484:    480a        .H      LDR      r0,[pc,#40] ; [0x80014b0] = 0x40021000
        0x08001486:    6840        @h      LDR      r0,[r0,#4]
        0x08001488:    f4003000    ...0    AND      r0,r0,#0x20000
        0x0800148c:    1c40        @.      ADDS     r0,r0,#1
        0x0800148e:    4b0a        .K      LDR      r3,[pc,#40] ; [0x80014b8] = 0x7a1200
        0x08001490:    fbb3f1f0    ....    UDIV     r1,r3,r0
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_rcc.c
;;;436          break;
        0x08001494:    e001        ..      B        0x800149a ; RCC_PLL_GetFreqDomain_SYS + 54
;;;437    
;;;438    #if defined(RCC_PLL2_SUPPORT)
;;;439        case LL_RCC_PLLSOURCE_PLL2:       /* PLL2 used as PLL clock source */
;;;440          pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
;;;441          break;
;;;442    #endif /* RCC_PLL2_SUPPORT */
;;;443    
;;;444        default:
;;;445          pllinputfreq = HSI_VALUE / 2U;
        0x08001496:    4907        .I      LDR      r1,[pc,#28] ; [0x80014b4] = 0x3d0900
;;;446          break;
        0x08001498:    bf00        ..      NOP      
        0x0800149a:    bf00        ..      NOP      
;;;447      }
;;;448      return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
        0x0800149c:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;1572     return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
        0x0800149e:    4804        .H      LDR      r0,[pc,#16] ; [0x80014b0] = 0x40021000
        0x080014a0:    6840        @h      LDR      r0,[r0,#4]
        0x080014a2:    f4001070    ..p.    AND      r0,r0,#0x3c0000
        0x080014a6:    2302        .#      MOVS     r3,#2
        0x080014a8:    eb034090    ...@    ADD      r0,r3,r0,LSR #18
        0x080014ac:    4348        HC      MULS     r0,r1,r0
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_rcc.c
;;;449    }
        0x080014ae:    4770        pG      BX       lr
    $d
        0x080014b0:    40021000    ...@    DCD    1073876992
        0x080014b4:    003d0900    ..=.    DCD    4000000
        0x080014b8:    007a1200    ..z.    DCD    8000000
    $t
    i.SVC_Handler
    SVC_Handler
;;; .\../Src/stm32f1xx_it.c
;;;96     }
        0x080014bc:    4770        pG      BX       lr
        0x080014be:    0000        ..      MOVS     r0,r0
    i.SysTick_Handler
    SysTick_Handler
;;;97     
;;;98     /**
;;;99     * @brief This function handles Pendable request for system service.
;;;100    */
;;;101    void PendSV_Handler(void)
;;;102    {
;;;103      /* USER CODE BEGIN PendSV_IRQn 0 */
;;;104    
;;;105      /* USER CODE END PendSV_IRQn 0 */
;;;106      /* USER CODE BEGIN PendSV_IRQn 1 */
;;;107    
;;;108      /* USER CODE END PendSV_IRQn 1 */
;;;109    }
;;;110    
;;;111    /**
;;;112    * @brief This function handles System tick timer.
;;;113    */
;;;114    void SysTick_Handler(void)
;;;115    {
;;;116      /* USER CODE BEGIN SysTick_IRQn 0 */
;;;117    
;;;118      /* USER CODE END SysTick_IRQn 0 */
;;;119      
;;;120      /* USER CODE BEGIN SysTick_IRQn 1 */
;;;121    
;;;122    /*
;;;123    #if  defined ( _SIMU )
;;;124    
;;;125    //simulate spindle
;;;126    	if(++tacho_cnt == 1800 ) {
;;;127    		tacho_debug = 1;
;;;128    		tacho_cnt = 0;
;;;129    		TIM4_IRQHandler();
;;;130    	}
;;;131    	if(++TIM4->CNT > TIM4->ARR) {
;;;132    		TIM4->CNT = 0; // overflow emulation
;;;133    		encoder = true;
;;;134    		TIM4_IRQHandler();
;;;135    	}
;;;136    #endif
;;;137    */
;;;138    //      if(auto_mode_delay > 0)
;;;139    //              auto_mode_delay--;
;;;140    	for(int a = 0; a<BT_TOTAL;a++){
        0x080014c0:    2000        .       MOVS     r0,#0
;;; .\../Src/stm32f1xx_it.c (140)
        0x080014c2:    e00e        ..      B        0x80014e2 ; SysTick_Handler + 34
        0x080014c4:    4908        .I      LDR      r1,[pc,#32] ; [0x80014e8] = 0x200004a8
        0x080014c6:    eb011140    ..@.    ADD      r1,r1,r0,LSL #5
        0x080014ca:    6909        .i      LDR      r1,[r1,#0x10]
        0x080014cc:    b141        A.      CBZ      r1,0x80014e0 ; SysTick_Handler + 32
        0x080014ce:    4906        .I      LDR      r1,[pc,#24] ; [0x80014e8] = 0x200004a8
        0x080014d0:    eb011140    ..@.    ADD      r1,r1,r0,LSL #5
        0x080014d4:    6909        .i      LDR      r1,[r1,#0x10]
        0x080014d6:    1c49        I.      ADDS     r1,r1,#1
        0x080014d8:    4a03        .J      LDR      r2,[pc,#12] ; [0x80014e8] = 0x200004a8
        0x080014da:    eb021240    ..@.    ADD      r2,r2,r0,LSL #5
        0x080014de:    6111        .a      STR      r1,[r2,#0x10]
        0x080014e0:    1c40        @.      ADDS     r0,r0,#1
        0x080014e2:    2801        .(      CMP      r0,#1
        0x080014e4:    dbee        ..      BLT      0x80014c4 ; SysTick_Handler + 4
;;;141    		if( bt[a].buttons_mstick > 0 )
;;;142    			bt[a].buttons_mstick++;
;;;143    	}
;;;144      /* USER CODE END SysTick_IRQn 1 */
;;;145    }
        0x080014e6:    4770        pG      BX       lr
    $d
        0x080014e8:    200004a8    ...     DCD    536872104
    $t
    i.SystemClock_Config
    SystemClock_Config
;;; .\../Src/main.c
;;;391    {
        0x080014ec:    b570        p.      PUSH     {r4-r6,lr}
;;;392    
;;;393      LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
        0x080014ee:    2002        .       MOVS     r0,#2
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_system.h
;;;488      MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
        0x080014f0:    494a        JI      LDR      r1,[pc,#296] ; [0x800161c] = 0x40022000
        0x080014f2:    6809        .h      LDR      r1,[r1,#0]
        0x080014f4:    f0210107    !...    BIC      r1,r1,#7
        0x080014f8:    4301        .C      ORRS     r1,r1,r0
        0x080014fa:    4a48        HJ      LDR      r2,[pc,#288] ; [0x800161c] = 0x40022000
        0x080014fc:    6011        .`      STR      r1,[r2,#0]
;;;489    }
        0x080014fe:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;395       if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2)
        0x08001500:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_system.h
;;;501      return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
        0x08001502:    4610        .F      MOV      r0,r2
        0x08001504:    6800        .h      LDR      r0,[r0,#0]
        0x08001506:    f0000007    ....    AND      r0,r0,#7
        0x0800150a:    2802        .(      CMP      r0,#2
        0x0800150c:    d004        ..      BEQ      0x8001518 ; SystemClock_Config + 44
;;; .\../Src/main.c
;;;397        Error_Handler();  
        0x0800150e:    f240118d    @...    MOV      r1,#0x18d
        0x08001512:    a043        C.      ADR      r0,{pc}+0x10e ; 0x8001620
        0x08001514:    f000f948    ..H.    BL       _Error_Handler ; 0x80017a8
;;;398      }
;;;399      LL_RCC_HSE_Enable();
        0x08001518:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;792      SET_BIT(RCC->CR, RCC_CR_HSEON);
        0x0800151a:    4845        EH      LDR      r0,[pc,#276] ; [0x8001630] = 0x40021000
        0x0800151c:    6800        .h      LDR      r0,[r0,#0]
        0x0800151e:    f4403080    @..0    ORR      r0,r0,#0x10000
        0x08001522:    4943        CI      LDR      r1,[pc,#268] ; [0x8001630] = 0x40021000
        0x08001524:    6008        .`      STR      r0,[r1,#0]
;;;793    }
        0x08001526:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;402      while(LL_RCC_HSE_IsReady() != 1)
        0x08001528:    bf00        ..      NOP      
        0x0800152a:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;812      return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
        0x0800152c:    4840        @H      LDR      r0,[pc,#256] ; [0x8001630] = 0x40021000
        0x0800152e:    6800        .h      LDR      r0,[r0,#0]
        0x08001530:    f3c04040    ..@@    UBFX     r0,r0,#17,#1
        0x08001534:    2800        .(      CMP      r0,#0
        0x08001536:    d0f8        ..      BEQ      0x800152a ; SystemClock_Config + 62
;;; .\../Src/main.c
;;;406      LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
        0x08001538:    f44f3080    O..0    MOV      r0,#0x10000
        0x0800153c:    f44f11e0    O...    MOV      r1,#0x1c0000
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;1495     MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
        0x08001540:    4a3b        ;J      LDR      r2,[pc,#236] ; [0x8001630] = 0x40021000
        0x08001542:    6852        Rh      LDR      r2,[r2,#4]
        0x08001544:    f422127c    ".|.    BIC      r2,r2,#0x3f0000
        0x08001548:    f4003340    ..@3    AND      r3,r0,#0x30000
        0x0800154c:    430b        .C      ORRS     r3,r3,r1
        0x0800154e:    431a        .C      ORRS     r2,r2,r3
        0x08001550:    4b37        7K      LDR      r3,[pc,#220] ; [0x8001630] = 0x40021000
        0x08001552:    605a        Z`      STR      r2,[r3,#4]
;;;1496                (Source & (RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE)) | PLLMul);
;;;1497   #if defined(RCC_CFGR2_PREDIV1)
;;;1498   #if defined(RCC_CFGR2_PREDIV1SRC)
;;;1499     MODIFY_REG(RCC->CFGR2, (RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC),
;;;1500                (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
;;;1501   #else
;;;1502     MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
;;;1503   #endif /*RCC_CFGR2_PREDIV1SRC*/
;;;1504   #endif /*RCC_CFGR2_PREDIV1*/
;;;1505   }
        0x08001554:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;408      LL_RCC_PLL_Enable();
        0x08001556:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;1405     SET_BIT(RCC->CR, RCC_CR_PLLON);
        0x08001558:    4618        .F      MOV      r0,r3
        0x0800155a:    6800        .h      LDR      r0,[r0,#0]
        0x0800155c:    f0407080    @..p    ORR      r0,r0,#0x1000000
        0x08001560:    4619        .F      MOV      r1,r3
        0x08001562:    6008        .`      STR      r0,[r1,#0]
;;;1406   }
        0x08001564:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;411      while(LL_RCC_PLL_IsReady() != 1)
        0x08001566:    bf00        ..      NOP      
        0x08001568:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;1426     return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
        0x0800156a:    4831        1H      LDR      r0,[pc,#196] ; [0x8001630] = 0x40021000
        0x0800156c:    6800        .h      LDR      r0,[r0,#0]
        0x0800156e:    f3c06040    ..@`    UBFX     r0,r0,#25,#1
        0x08001572:    2800        .(      CMP      r0,#0
        0x08001574:    d0f8        ..      BEQ      0x8001568 ; SystemClock_Config + 124
;;; .\../Src/main.c
;;;415      LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
        0x08001576:    2000        .       MOVS     r0,#0
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;1065     MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
        0x08001578:    492d        -I      LDR      r1,[pc,#180] ; [0x8001630] = 0x40021000
        0x0800157a:    6849        Ih      LDR      r1,[r1,#4]
        0x0800157c:    f02101f0    !...    BIC      r1,r1,#0xf0
        0x08001580:    4301        .C      ORRS     r1,r1,r0
        0x08001582:    4a2b        +J      LDR      r2,[pc,#172] ; [0x8001630] = 0x40021000
        0x08001584:    6051        Q`      STR      r1,[r2,#4]
;;;1066   }
        0x08001586:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;417      LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
        0x08001588:    1510        ..      ASRS     r0,r2,#20
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;1081     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
        0x0800158a:    4611        .F      MOV      r1,r2
        0x0800158c:    6849        Ih      LDR      r1,[r1,#4]
        0x0800158e:    f42161e0    !..a    BIC      r1,r1,#0x700
        0x08001592:    4301        .C      ORRS     r1,r1,r0
        0x08001594:    6051        Q`      STR      r1,[r2,#4]
;;;1082   }
        0x08001596:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;419      LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
        0x08001598:    2000        .       MOVS     r0,#0
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;1097     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
        0x0800159a:    4611        .F      MOV      r1,r2
        0x0800159c:    6849        Ih      LDR      r1,[r1,#4]
        0x0800159e:    f4215160    !.`Q    BIC      r1,r1,#0x3800
        0x080015a2:    4301        .C      ORRS     r1,r1,r0
        0x080015a4:    6051        Q`      STR      r1,[r2,#4]
;;;1098   }
        0x080015a6:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;421      LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
        0x080015a8:    2002        .       MOVS     r0,#2
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;1032     MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
        0x080015aa:    4611        .F      MOV      r1,r2
        0x080015ac:    6849        Ih      LDR      r1,[r1,#4]
        0x080015ae:    f0210103    !...    BIC      r1,r1,#3
        0x080015b2:    4301        .C      ORRS     r1,r1,r0
        0x080015b4:    6051        Q`      STR      r1,[r2,#4]
;;;1033   }
        0x080015b6:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;424      while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
        0x080015b8:    bf00        ..      NOP      
        0x080015ba:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;1045     return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
        0x080015bc:    481c        .H      LDR      r0,[pc,#112] ; [0x8001630] = 0x40021000
        0x080015be:    6840        @h      LDR      r0,[r0,#4]
        0x080015c0:    f000000c    ....    AND      r0,r0,#0xc
        0x080015c4:    2808        .(      CMP      r0,#8
        0x080015c6:    d1f8        ..      BNE      0x80015ba ; SystemClock_Config + 206
;;; .\../Src/main.c
;;;428      LL_Init1msTick(72000000);
        0x080015c8:    481a        .H      LDR      r0,[pc,#104] ; [0x8001634] = 0x44aa200
        0x080015ca:    f7fff85b    ..[.    BL       LL_Init1msTick ; 0x8000684
;;;429    
;;;430      LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
        0x080015ce:    2004        .       MOVS     r0,#4
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_cortex.h
;;;262      if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
        0x080015d0:    2804        .(      CMP      r0,#4
        0x080015d2:    d108        ..      BNE      0x80015e6 ; SystemClock_Config + 250
;;;263      {
;;;264        SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
        0x080015d4:    f04f21e0    O..!    MOV      r1,#0xe000e000
        0x080015d8:    6909        .i      LDR      r1,[r1,#0x10]
        0x080015da:    f0410104    A...    ORR      r1,r1,#4
        0x080015de:    f04f22e0    O.."    MOV      r2,#0xe000e000
        0x080015e2:    6111        .a      STR      r1,[r2,#0x10]
        0x080015e4:    e007        ..      B        0x80015f6 ; SystemClock_Config + 266
;;;265      }
;;;266      else
;;;267      {
;;;268        CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
        0x080015e6:    f04f21e0    O..!    MOV      r1,#0xe000e000
        0x080015ea:    6909        .i      LDR      r1,[r1,#0x10]
        0x080015ec:    f0210104    !...    BIC      r1,r1,#4
        0x080015f0:    f04f22e0    O.."    MOV      r2,#0xe000e000
        0x080015f4:    6111        .a      STR      r1,[r2,#0x10]
;;;269      }
;;;270    }
        0x080015f6:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;432      LL_SetSystemCoreClock(72000000);
        0x080015f8:    480e        .H      LDR      r0,[pc,#56] ; [0x8001634] = 0x44aa200
        0x080015fa:    f7fff863    ..c.    BL       LL_SetSystemCoreClock ; 0x80006c4
;;;433    
;;;434      /* SysTick_IRQn interrupt configuration */
;;;435      NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
        0x080015fe:    f7fffdd1    ....    BL       NVIC_GetPriorityGrouping ; 0x80011a4
        0x08001602:    4605        .F      MOV      r5,r0
        0x08001604:    2200        ."      MOVS     r2,#0
        0x08001606:    4611        .F      MOV      r1,r2
        0x08001608:    f7fffdab    ....    BL       NVIC_EncodePriority ; 0x8001162
        0x0800160c:    4604        .F      MOV      r4,r0
        0x0800160e:    4621        !F      MOV      r1,r4
        0x08001610:    f04f30ff    O..0    MOV      r0,#0xffffffff
        0x08001614:    f7fffdce    ....    BL       NVIC_SetPriority ; 0x80011b4
;;;436    }
        0x08001618:    bd70        p.      POP      {r4-r6,pc}
    $d
        0x0800161a:    0000        ..      DCW    0
        0x0800161c:    40022000    . .@    DCD    1073881088
        0x08001620:    532f2e2e    ../S    DCD    1395600942
        0x08001624:    6d2f6372    rc/m    DCD    1831822194
        0x08001628:    2e6e6961    ain.    DCD    778987873
        0x0800162c:    00000063    c...    DCD    99
        0x08001630:    40021000    ...@    DCD    1073876992
        0x08001634:    044aa200    ..J.    DCD    72000000
    $t
    i.SystemInit
    SystemInit
;;; .\..//Src/system_stm32f1xx.c
;;;179      RCC->CR |= (uint32_t)0x00000001;
        0x08001638:    4811        .H      LDR      r0,[pc,#68] ; [0x8001680] = 0x40021000
        0x0800163a:    6800        .h      LDR      r0,[r0,#0]
        0x0800163c:    f0400001    @...    ORR      r0,r0,#1
        0x08001640:    490f        .I      LDR      r1,[pc,#60] ; [0x8001680] = 0x40021000
        0x08001642:    6008        .`      STR      r0,[r1,#0]
;;;180    
;;;181      /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
;;;182    #if !defined(STM32F105xC) && !defined(STM32F107xC)
;;;183      RCC->CFGR &= (uint32_t)0xF8FF0000;
        0x08001644:    4608        .F      MOV      r0,r1
        0x08001646:    6840        @h      LDR      r0,[r0,#4]
        0x08001648:    490e        .I      LDR      r1,[pc,#56] ; [0x8001684] = 0xf8ff0000
        0x0800164a:    4008        .@      ANDS     r0,r0,r1
        0x0800164c:    490c        .I      LDR      r1,[pc,#48] ; [0x8001680] = 0x40021000
        0x0800164e:    6048        H`      STR      r0,[r1,#4]
;;;184    #else
;;;185      RCC->CFGR &= (uint32_t)0xF0FF0000;
;;;186    #endif /* STM32F105xC */   
;;;187      
;;;188      /* Reset HSEON, CSSON and PLLON bits */
;;;189      RCC->CR &= (uint32_t)0xFEF6FFFF;
        0x08001650:    4608        .F      MOV      r0,r1
        0x08001652:    6800        .h      LDR      r0,[r0,#0]
        0x08001654:    490c        .I      LDR      r1,[pc,#48] ; [0x8001688] = 0xfef6ffff
        0x08001656:    4008        .@      ANDS     r0,r0,r1
        0x08001658:    4909        .I      LDR      r1,[pc,#36] ; [0x8001680] = 0x40021000
        0x0800165a:    6008        .`      STR      r0,[r1,#0]
;;;190    
;;;191      /* Reset HSEBYP bit */
;;;192      RCC->CR &= (uint32_t)0xFFFBFFFF;
        0x0800165c:    4608        .F      MOV      r0,r1
        0x0800165e:    6800        .h      LDR      r0,[r0,#0]
        0x08001660:    f4202080     ..     BIC      r0,r0,#0x40000
        0x08001664:    6008        .`      STR      r0,[r1,#0]
;;;193    
;;;194      /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
;;;195      RCC->CFGR &= (uint32_t)0xFF80FFFF;
        0x08001666:    4608        .F      MOV      r0,r1
        0x08001668:    6840        @h      LDR      r0,[r0,#4]
        0x0800166a:    f42000fe     ...    BIC      r0,r0,#0x7f0000
        0x0800166e:    6048        H`      STR      r0,[r1,#4]
;;;196    
;;;197    #if defined(STM32F105xC) || defined(STM32F107xC)
;;;198      /* Reset PLL2ON and PLL3ON bits */
;;;199      RCC->CR &= (uint32_t)0xEBFFFFFF;
;;;200    
;;;201      /* Disable all interrupts and clear pending bits  */
;;;202      RCC->CIR = 0x00FF0000;
;;;203    
;;;204      /* Reset CFGR2 register */
;;;205      RCC->CFGR2 = 0x00000000;
;;;206    #elif defined(STM32F100xB) || defined(STM32F100xE)
;;;207      /* Disable all interrupts and clear pending bits  */
;;;208      RCC->CIR = 0x009F0000;
;;;209    
;;;210      /* Reset CFGR2 register */
;;;211      RCC->CFGR2 = 0x00000000;      
;;;212    #else
;;;213      /* Disable all interrupts and clear pending bits  */
;;;214      RCC->CIR = 0x009F0000;
        0x08001670:    f44f001f    O...    MOV      r0,#0x9f0000
        0x08001674:    6088        .`      STR      r0,[r1,#8]
;;;215    #endif /* STM32F105xC */
;;;216        
;;;217    #if defined(STM32F100xE) || defined(STM32F101xE) || defined(STM32F101xG) || defined(STM32F103xE) || defined(STM32F103xG)
;;;218      #ifdef DATA_IN_ExtSRAM
;;;219        SystemInit_ExtMemCtl(); 
;;;220      #endif /* DATA_IN_ExtSRAM */
;;;221    #endif 
;;;222    
;;;223    #ifdef VECT_TAB_SRAM
;;;224      SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
;;;225    #else
;;;226      SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
        0x08001676:    03c8        ..      LSLS     r0,r1,#15
        0x08001678:    4904        .I      LDR      r1,[pc,#16] ; [0x800168c] = 0xe000ed08
        0x0800167a:    6008        .`      STR      r0,[r1,#0]
;;;227    #endif 
;;;228    }
        0x0800167c:    4770        pG      BX       lr
    $d
        0x0800167e:    0000        ..      DCW    0
        0x08001680:    40021000    ...@    DCD    1073876992
        0x08001684:    f8ff0000    ....    DCD    4177461248
        0x08001688:    fef6ffff    ....    DCD    4277600255
        0x0800168c:    e000ed08    ....    DCD    3758157064
    $t
    i.TIM1_UP_IRQHandler
    TIM1_UP_IRQHandler
;;; .\../Src/stm32f1xx_it.c
;;;182    {
        0x08001690:    b510        ..      PUSH     {r4,lr}
;;;183      /* USER CODE BEGIN TIM1_UP_IRQn 0 */
;;;184    
;;;185      /* USER CODE END TIM1_UP_IRQn 0 */
;;;186      /* USER CODE BEGIN TIM1_UP_IRQn 1 */
;;;187      if(LL_TIM_IsActiveFlag_UPDATE(TIM1) == 1)
        0x08001692:    4806        .H      LDR      r0,[pc,#24] ; [0x80016ac] = 0x40012c00
        0x08001694:    f7fff976    ..v.    BL       LL_TIM_IsActiveFlag_UPDATE ; 0x8000984
        0x08001698:    2801        .(      CMP      r0,#1
        0x0800169a:    d105        ..      BNE      0x80016a8 ; TIM1_UP_IRQHandler + 24
;;;188      {
;;;189        /* Clear the update interrupt flag*/
;;;190        LL_TIM_ClearFlag_UPDATE(TIM1);
        0x0800169c:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;2929     WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
        0x0800169e:    1ec0        ..      SUBS     r0,r0,#3
        0x080016a0:    4902        .I      LDR      r1,[pc,#8] ; [0x80016ac] = 0x40012c00
        0x080016a2:    6108        .a      STR      r0,[r1,#0x10]
;;;2930   }
        0x080016a4:    bf00        ..      NOP      
        0x080016a6:    bf00        ..      NOP      
;;; .\../Src/stm32f1xx_it.c
;;;194    }
        0x080016a8:    bd10        ..      POP      {r4,pc}
    $d
        0x080016aa:    0000        ..      DCW    0
        0x080016ac:    40012c00    .,.@    DCD    1073818624
    $t
    i.TIM2_IRQHandler
    TIM2_IRQHandler
;;;195    
;;;196    /**
;;;197    * @brief This function handles TIM2 global interrupt.
;;;198    */
;;;199    void TIM2_IRQHandler(void)
;;;200    {
        0x080016b0:    b510        ..      PUSH     {r4,lr}
;;;201      /* USER CODE BEGIN TIM2_IRQn 0 */
;;;202    // prescaler=((((speed=72000000)/((period=20000)/(1/hz=1)))+0,5)-1)
;;;203    //	if ( async_z == 1) {
;;;204    	if ( state.async_z == 1) {
        0x080016b2:    480f        .H      LDR      r0,[pc,#60] ; [0x80016f0] = 0x20000044
        0x080016b4:    6840        @h      LDR      r0,[r0,#4]
        0x080016b6:    2801        .(      CMP      r0,#1
        0x080016b8:    d10c        ..      BNE      0x80016d4 ; TIM2_IRQHandler + 36
;;;205    //		state.f_encoder = encoder;
;;;206    //		state.f_tacho = t4sr[TIM_SR_CC3IF_Pos];
;;;207    //		LED_GPIO_Port->BSRR = LED_Pin;   // led off
;;;208    //		LED_GPIO_Port->BRR = LED_Pin;
;;;209    //    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
;;;210    //    LL_GPIO_TogglePin( LED_GPIO_Port, LED_Pin);
;;;211    
;;;212    		state.function(&state);
        0x080016ba:    480d        .H      LDR      r0,[pc,#52] ; [0x80016f0] = 0x20000044
        0x080016bc:    6801        .h      LDR      r1,[r0,#0]
        0x080016be:    4788        .G      BLX      r1
;;;213    
;;;214    		TIM2->ARR = state.z_period;
        0x080016c0:    480b        .H      LDR      r0,[pc,#44] ; [0x80016f0] = 0x20000044
        0x080016c2:    7b00        .{      LDRB     r0,[r0,#0xc]
        0x080016c4:    f04f4180    O..A    MOV      r1,#0x40000000
        0x080016c8:    62c8        .b      STR      r0,[r1,#0x2c]
;;;215    		TIM2->EGR |= TIM_EGR_UG;
        0x080016ca:    4608        .F      MOV      r0,r1
        0x080016cc:    6940        @i      LDR      r0,[r0,#0x14]
        0x080016ce:    f0400001    @...    ORR      r0,r0,#1
        0x080016d2:    6148        Ha      STR      r0,[r1,#0x14]
;;;216    
;;;217    //		text_buffer[tbc++] = TIM2->ARR;
;;;218    	}
;;;219    
;;;220      /* USER CODE END TIM2_IRQn 0 */
;;;221      /* USER CODE BEGIN TIM2_IRQn 1 */
;;;222      /* Check whether update interrupt is pending */
;;;223      if(LL_TIM_IsActiveFlag_UPDATE(TIM2) == 1)
        0x080016d4:    f04f4080    O..@    MOV      r0,#0x40000000
        0x080016d8:    f7fff954    ..T.    BL       LL_TIM_IsActiveFlag_UPDATE ; 0x8000984
        0x080016dc:    2801        .(      CMP      r0,#1
        0x080016de:    d106        ..      BNE      0x80016ee ; TIM2_IRQHandler + 62
;;;224      {
;;;225        /* Clear the update interrupt flag*/
;;;226        LL_TIM_ClearFlag_UPDATE(TIM2);
        0x080016e0:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;2929     WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
        0x080016e2:    1ec0        ..      SUBS     r0,r0,#3
        0x080016e4:    f04f4180    O..A    MOV      r1,#0x40000000
        0x080016e8:    6108        .a      STR      r0,[r1,#0x10]
;;;2930   }
        0x080016ea:    bf00        ..      NOP      
        0x080016ec:    bf00        ..      NOP      
;;; .\../Src/stm32f1xx_it.c
;;;229    }
        0x080016ee:    bd10        ..      POP      {r4,pc}
    $d
        0x080016f0:    20000044    D..     DCD    536870980
    $t
    i.TIM4_IRQHandler
    TIM4_IRQHandler
;;;230    
;;;231    /**
;;;232    * @brief This function handles TIM4 global interrupt.
;;;233    */
;;;234    void TIM4_IRQHandler(void)
;;;235    {
        0x080016f4:    b510        ..      PUSH     {r4,lr}
;;;236      /* USER CODE BEGIN TIM4_IRQn 0 */
;;;237    //	_Bool dir = t4cr1[TIM_CR1_DIR_Pos];
;;;238    //	if(t4sr[TIM_SR_CC3IF_Pos]){
;;;239    //		do_fsm_wait_tacho(&state);
;;;240    //	}
;;;241    	if (state.sync == true) {
        0x080016f6:    480d        .H      LDR      r0,[pc,#52] ; [0x800172c] = 0x20000044
        0x080016f8:    7c00        .|      LDRB     r0,[r0,#0x10]
        0x080016fa:    2801        .(      CMP      r0,#1
        0x080016fc:    d112        ..      BNE      0x8001724 ; TIM4_IRQHandler + 48
;;;242    		state.spindle_dir = t4cr1[TIM_CR1_DIR_Pos];
        0x080016fe:    480c        .H      LDR      r0,[pc,#48] ; [0x8001730] = 0x42010000
        0x08001700:    6900        .i      LDR      r0,[r0,#0x10]
        0x08001702:    b108        ..      CBZ      r0,0x8001708 ; TIM4_IRQHandler + 20
        0x08001704:    2001        .       MOVS     r0,#1
        0x08001706:    e000        ..      B        0x800170a ; TIM4_IRQHandler + 22
        0x08001708:    2000        .       MOVS     r0,#0
        0x0800170a:    4908        .I      LDR      r1,[pc,#32] ; [0x800172c] = 0x20000044
        0x0800170c:    73c8        .s      STRB     r0,[r1,#0xf]
;;;243    //		state.f_encoder = encoder;
;;;244    		state.f_tacho = t4sr[TIM_SR_CC3IF_Pos];
        0x0800170e:    4809        .H      LDR      r0,[pc,#36] ; [0x8001734] = 0x4201020c
        0x08001710:    6800        .h      LDR      r0,[r0,#0]
        0x08001712:    b108        ..      CBZ      r0,0x8001718 ; TIM4_IRQHandler + 36
        0x08001714:    2001        .       MOVS     r0,#1
        0x08001716:    e000        ..      B        0x800171a ; TIM4_IRQHandler + 38
        0x08001718:    2000        .       MOVS     r0,#0
        0x0800171a:    4904        .I      LDR      r1,[pc,#16] ; [0x800172c] = 0x20000044
        0x0800171c:    7388        .s      STRB     r0,[r1,#0xe]
;;;245    		state.function(&state);
        0x0800171e:    4608        .F      MOV      r0,r1
        0x08001720:    6801        .h      LDR      r1,[r0,#0]
        0x08001722:    4788        .G      BLX      r1
;;;246    	}
;;;247    //	TIM4->SR &= ~TIM_SR_UIF; //Сбрасываем бит вызова прерывания. 
;;;248    
;;;249      /* USER CODE END TIM4_IRQn 0 */
;;;250      /* USER CODE BEGIN TIM4_IRQn 1 */
;;;251      /* Check whether update interrupt is pending */
;;;252    //	if(LL_TIM_IsActiveFlag_CC2OVR(TIM4) == 1){
;;;253    //		TIM4->SR = 0;
;;;254    //	}
;;;255    	TIM4->SR = 0;
        0x08001724:    2000        .       MOVS     r0,#0
        0x08001726:    4904        .I      LDR      r1,[pc,#16] ; [0x8001738] = 0x40000810
        0x08001728:    6008        .`      STR      r0,[r1,#0]
;;;256    /*
;;;257    	if(LL_TIM_IsActiveFlag_CC2(TIM4) == 1)
;;;258        LL_TIM_ClearFlag_CC2(TIM4);
;;;259    	if(LL_TIM_IsActiveFlag_CC3(TIM4) == 1)
;;;260        LL_TIM_ClearFlag_CC3(TIM4);
;;;261    	if(LL_TIM_IsActiveFlag_UPDATE(TIM4) == 1)
;;;262      {
;;;263        LL_TIM_ClearFlag_UPDATE(TIM4); //Clear the update interrupt flag
;;;264      }
;;;265    */
;;;266      /* USER CODE END TIM4_IRQn 1 */
;;;267    }
        0x0800172a:    bd10        ..      POP      {r4,pc}
    $d
        0x0800172c:    20000044    D..     DCD    536870980
        0x08001730:    42010000    ...B    DCD    1107361792
        0x08001734:    4201020c    ...B    DCD    1107362316
        0x08001738:    40000810    ...@    DCD    1073743888
    $t
    i.Transfer_Complete_Callback
    Transfer_Complete_Callback
;;; .\..\Src\i2c_interface.c
;;;321    {
        0x0800173c:    b510        ..      PUSH     {r4,lr}
;;;322      /* Generate Stop condition */
;;;323    	while(!LL_I2C_IsActiveFlag_BTF(I2C2))
        0x0800173e:    bf00        ..      NOP      
        0x08001740:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;1160     return (READ_BIT(I2Cx->SR1, I2C_SR1_BTF) == (I2C_SR1_BTF));
        0x08001742:    480f        .H      LDR      r0,[pc,#60] ; [0x8001780] = 0x40005800
        0x08001744:    6940        @i      LDR      r0,[r0,#0x14]
        0x08001746:    f3c00080    ....    UBFX     r0,r0,#2,#1
        0x0800174a:    2800        .(      CMP      r0,#0
        0x0800174c:    d0f8        ..      BEQ      0x8001740 ; Transfer_Complete_Callback + 4
;;; .\..\Src\i2c_interface.c
;;;326      LL_I2C_GenerateStopCondition(I2C2);
        0x0800174e:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;1596     SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
        0x08001750:    480b        .H      LDR      r0,[pc,#44] ; [0x8001780] = 0x40005800
        0x08001752:    6800        .h      LDR      r0,[r0,#0]
        0x08001754:    f4407000    @..p    ORR      r0,r0,#0x200
        0x08001758:    4909        .I      LDR      r1,[pc,#36] ; [0x8001780] = 0x40005800
        0x0800175a:    6008        .`      STR      r0,[r1,#0]
;;;1597   }
        0x0800175c:    bf00        ..      NOP      
;;; .\..\Src\i2c_interface.c
;;;327      LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_4);
        0x0800175e:    4809        .H      LDR      r0,[pc,#36] ; [0x8001784] = 0x40020000
        0x08001760:    2104        .!      MOVS     r1,#4
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h
;;;491      CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
        0x08001762:    1e4a        J.      SUBS     r2,r1,#1
        0x08001764:    4b08        .K      LDR      r3,[pc,#32] ; [0x8001788] = 0x8002270
        0x08001766:    5c9a        .\      LDRB     r2,[r3,r2]
        0x08001768:    5882        .X      LDR      r2,[r0,r2]
        0x0800176a:    f0220301    "...    BIC      r3,r2,#1
        0x0800176e:    1e4a        J.      SUBS     r2,r1,#1
        0x08001770:    4c05        .L      LDR      r4,[pc,#20] ; [0x8001788] = 0x8002270
        0x08001772:    5ca2        .\      LDRB     r2,[r4,r2]
        0x08001774:    5083        .P      STR      r3,[r0,r2]
;;;492    }
        0x08001776:    bf00        ..      NOP      
;;; .\..\Src\i2c_interface.c
;;;329      ubTransferComplete = 1;
        0x08001778:    2001        .       MOVS     r0,#1
        0x0800177a:    4904        .I      LDR      r1,[pc,#16] ; [0x800178c] = 0x20000017
        0x0800177c:    7008        .p      STRB     r0,[r1,#0]
;;;330    }
        0x0800177e:    bd10        ..      POP      {r4,pc}
    $d
        0x08001780:    40005800    .X.@    DCD    1073764352
        0x08001784:    40020000    ...@    DCD    1073872896
        0x08001788:    08002270    p"..    DCD    134226544
        0x0800178c:    20000017    ...     DCD    536870935
    $t
    i.Transfer_Error_Callback
    Transfer_Error_Callback
;;;331    
;;;332    /**
;;;333      * @brief  DMA transfer error callback
;;;334      * @note   This function is executed when the transfer error interrupt
;;;335      *         is generated during DMA transfer
;;;336      * @retval None
;;;337      */
;;;338    void Transfer_Error_Callback()
;;;339    {
;;;340      /* Disable DMA1_Channel4_IRQn */
;;;341      NVIC_DisableIRQ(DMA1_Channel4_IRQn);
        0x08001790:    200e        .       MOVS     r0,#0xe
;;; ../Drivers/CMSIS/Include/core_cm3.h
;;;1465     NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
        0x08001792:    2101        .!      MOVS     r1,#1
        0x08001794:    4081        .@      LSLS     r1,r1,r0
        0x08001796:    4a03        .J      LDR      r2,[pc,#12] ; [0x80017a4] = 0xe000e180
        0x08001798:    0943        C.      LSRS     r3,r0,#5
        0x0800179a:    f8421023    B.#.    STR      r1,[r2,r3,LSL #2]
;;;1466   }
        0x0800179e:    bf00        ..      NOP      
;;; .\..\Src\i2c_interface.c
;;;343      while(1){};
        0x080017a0:    bf00        ..      NOP      
;;; .\..\Src\i2c_interface.c (343)
        0x080017a2:    e7fe        ..      B        0x80017a2 ; Transfer_Error_Callback + 18
    $d
        0x080017a4:    e000e180    ....    DCD    3758154112
    $t
    i._Error_Handler
    _Error_Handler
;;; .\../Src/main.c
;;;851    	while (1) {
        0x080017a8:    bf00        ..      NOP      
;;; .\../Src/main.c (851)
        0x080017aa:    e7fe        ..      B        0x80017aa ; _Error_Handler + 2
    i.__scatterload_copy
    __scatterload_copy
        0x080017ac:    e002        ..      B        0x80017b4 ; __scatterload_copy + 8
        0x080017ae:    c808        ..      LDM      r0!,{r3}
        0x080017b0:    1f12        ..      SUBS     r2,r2,#4
        0x080017b2:    c108        ..      STM      r1!,{r3}
        0x080017b4:    2a00        .*      CMP      r2,#0
        0x080017b6:    d1fa        ..      BNE      0x80017ae ; __scatterload_copy + 2
        0x080017b8:    4770        pG      BX       lr
    i.__scatterload_null
    __scatterload_null
        0x080017ba:    4770        pG      BX       lr
    i.__scatterload_zeroinit
    __scatterload_zeroinit
        0x080017bc:    2000        .       MOVS     r0,#0
        0x080017be:    e001        ..      B        0x80017c4 ; __scatterload_zeroinit + 8
        0x080017c0:    c101        ..      STM      r1!,{r0}
        0x080017c2:    1f12        ..      SUBS     r2,r2,#4
        0x080017c4:    2a00        .*      CMP      r2,#0
        0x080017c6:    d1fb        ..      BNE      0x80017c0 ; __scatterload_zeroinit + 4
        0x080017c8:    4770        pG      BX       lr
        0x080017ca:    0000        ..      MOVS     r0,r0
    i.do_fsm_menu
    do_fsm_menu
;;; .\..\Src\fsm.c
;;;67     {
        0x080017cc:    b570        p.      PUSH     {r4-r6,lr}
        0x080017ce:    4604        .F      MOV      r4,r0
;;;68     	uint8_t level = Thread_Info[Menu_Step].level;
        0x080017d0:    4873        sH      LDR      r0,[pc,#460] ; [0x80019a0] = 0x20000080
        0x080017d2:    4974        tI      LDR      r1,[pc,#464] ; [0x80019a4] = 0x200004a0
        0x080017d4:    7809        .x      LDRB     r1,[r1,#0]
        0x080017d6:    eb001041    ..A.    ADD      r0,r0,r1,LSL #5
        0x080017da:    7c45        E|      LDRB     r5,[r0,#0x11]
;;;69     #ifdef _SIMU
;;;70     	buttons_flag_set = long_press_start_Msk;
        0x080017dc:    2001        .       MOVS     r0,#1
        0x080017de:    4972        rI      LDR      r1,[pc,#456] ; [0x80019a8] = 0x200005dc
        0x080017e0:    6008        .`      STR      r0,[r1,#0]
;;;71     #endif	
;;;72     	switch(buttons_flag_set) {
        0x080017e2:    4608        .F      MOV      r0,r1
        0x080017e4:    6800        .h      LDR      r0,[r0,#0]
        0x080017e6:    2808        .(      CMP      r0,#8
        0x080017e8:    d077        w.      BEQ      0x80018da ; do_fsm_menu + 270
        0x080017ea:    dc06        ..      BGT      0x80017fa ; do_fsm_menu + 46
        0x080017ec:    2801        .(      CMP      r0,#1
        0x080017ee:    d07f        ..      BEQ      0x80018f0 ; do_fsm_menu + 292
        0x080017f0:    2802        .(      CMP      r0,#2
        0x080017f2:    d070        p.      BEQ      0x80018d6 ; do_fsm_menu + 266
        0x080017f4:    2804        .(      CMP      r0,#4
        0x080017f6:    d110        ..      BNE      0x800181a ; do_fsm_menu + 78
        0x080017f8:    e01a        ..      B        0x8001830 ; do_fsm_menu + 100
        0x080017fa:    2811        .(      CMP      r0,#0x11
        0x080017fc:    d077        w.      BEQ      0x80018ee ; do_fsm_menu + 290
        0x080017fe:    2840        @(      CMP      r0,#0x40
        0x08001800:    d00c        ..      BEQ      0x800181c ; do_fsm_menu + 80
        0x08001802:    f5b06f80    ...o    CMP      r0,#0x400
        0x08001806:    d1f6        ..      BNE      0x80017f6 ; do_fsm_menu + 42
;;;73     	case single_click_Msk3: {
;;;74     		feed_direction = feed_direction == feed_direction_left ? feed_direction_right : feed_direction_left;
        0x08001808:    4868        hH      LDR      r0,[pc,#416] ; [0x80019ac] = 0x2000006d
        0x0800180a:    7800        .x      LDRB     r0,[r0,#0]
        0x0800180c:    f0800001    ....    EOR      r0,r0,#1
        0x08001810:    4966        fI      LDR      r1,[pc,#408] ; [0x80019ac] = 0x2000006d
        0x08001812:    7008        .p      STRB     r0,[r1,#0]
;;;75     		menu_changed = 1;
        0x08001814:    2001        .       MOVS     r0,#1
        0x08001816:    4966        fI      LDR      r1,[pc,#408] ; [0x80019b0] = 0x20000070
        0x08001818:    6008        .`      STR      r0,[r1,#0]
;;;76     		break;
        0x0800181a:    e0bf        ..      B        0x800199c ; do_fsm_menu + 464
;;;77     	}
;;;78     	case single_click_Msk2: {
;;;79     		feed_direction = feed_direction == feed_direction_left ? feed_direction_right : feed_direction_left;
        0x0800181c:    4863        cH      LDR      r0,[pc,#396] ; [0x80019ac] = 0x2000006d
        0x0800181e:    7800        .x      LDRB     r0,[r0,#0]
        0x08001820:    f0800001    ....    EOR      r0,r0,#1
        0x08001824:    4961        aI      LDR      r1,[pc,#388] ; [0x80019ac] = 0x2000006d
        0x08001826:    7008        .p      STRB     r0,[r1,#0]
;;;80     		menu_changed = 1;
        0x08001828:    2001        .       MOVS     r0,#1
        0x0800182a:    4961        aI      LDR      r1,[pc,#388] ; [0x80019b0] = 0x20000070
        0x0800182c:    6008        .`      STR      r0,[r1,#0]
;;;81     		break;
        0x0800182e:    e0b5        ..      B        0x800199c ; do_fsm_menu + 464
;;;82     	}
;;;83     	case single_click_Msk: {
;;;84     		if(z_axis.end_pos != 0) {
        0x08001830:    4860        `H      LDR      r0,[pc,#384] ; [0x80019b4] = 0x200005e0
        0x08001832:    6840        @h      LDR      r0,[r0,#4]
        0x08001834:    b1e0        ..      CBZ      r0,0x8001870 ; do_fsm_menu + 164
;;;85     			// first pass of thread cut was complete, so just use single click
;;;86     			//	to switch between modes to process all other cuts
;;;87     
;;;88     //			z_move(feed_direction, z_axis.end_pos, s->main_feed_direction == feed_direction ? true : false, true);
;;;89     			if(demo)
        0x08001836:    4860        `H      LDR      r0,[pc,#384] ; [0x80019b8] = 0x20000041
        0x08001838:    7800        .x      LDRB     r0,[r0,#0]
        0x0800183a:    b140        @.      CBZ      r0,0x800184e ; do_fsm_menu + 130
;;;90     				z_move(feed_direction, z_axis.end_pos, false, true); //test case, always async
        0x0800183c:    485d        ]H      LDR      r0,[pc,#372] ; [0x80019b4] = 0x200005e0
        0x0800183e:    2301        .#      MOVS     r3,#1
        0x08001840:    2200        ."      MOVS     r2,#0
        0x08001842:    6841        Ah      LDR      r1,[r0,#4]
        0x08001844:    4859        YH      LDR      r0,[pc,#356] ; [0x80019ac] = 0x2000006d
        0x08001846:    7800        .x      LDRB     r0,[r0,#0]
        0x08001848:    f000fcb0    ....    BL       z_move ; 0x80021ac
        0x0800184c:    e040        @.      B        0x80018d0 ; do_fsm_menu + 260
;;;91     			else
;;;92     				z_move(feed_direction, z_axis.end_pos, s->main_feed_direction == feed_direction ? true : false, true);
        0x0800184e:    7c60        `|      LDRB     r0,[r4,#0x11]
        0x08001850:    4b56        VK      LDR      r3,[pc,#344] ; [0x80019ac] = 0x2000006d
        0x08001852:    781b        .x      LDRB     r3,[r3,#0]
        0x08001854:    4298        .B      CMP      r0,r3
        0x08001856:    d101        ..      BNE      0x800185c ; do_fsm_menu + 144
        0x08001858:    2001        .       MOVS     r0,#1
        0x0800185a:    e000        ..      B        0x800185e ; do_fsm_menu + 146
        0x0800185c:    2000        .       MOVS     r0,#0
        0x0800185e:    4602        .F      MOV      r2,r0
        0x08001860:    4854        TH      LDR      r0,[pc,#336] ; [0x80019b4] = 0x200005e0
        0x08001862:    2301        .#      MOVS     r3,#1
        0x08001864:    6841        Ah      LDR      r1,[r0,#4]
        0x08001866:    4851        QH      LDR      r0,[pc,#324] ; [0x80019ac] = 0x2000006d
        0x08001868:    7800        .x      LDRB     r0,[r0,#0]
        0x0800186a:    f000fc9f    ....    BL       z_move ; 0x80021ac
        0x0800186e:    e02f        /.      B        0x80018d0 ; do_fsm_menu + 260
;;;93     //			z_move(feed_direction, 400*2, false, true);
;;;94     		} else { // controller in initial state, scroll menu
;;;95     			s->function = do_fsm_menu_lps;
        0x08001870:    4852        RH      LDR      r0,[pc,#328] ; [0x80019bc] = 0x80019cd
        0x08001872:    6020         `      STR      r0,[r4,#0]
;;;96     			for (int a = Menu_Step+1; a<Menu_size; a++) {
        0x08001874:    494b        KI      LDR      r1,[pc,#300] ; [0x80019a4] = 0x200004a0
        0x08001876:    7809        .x      LDRB     r1,[r1,#0]
        0x08001878:    1c48        H.      ADDS     r0,r1,#1
        0x0800187a:    e00c        ..      B        0x8001896 ; do_fsm_menu + 202
;;;97     				if(Thread_Info[a].level == level) {
        0x0800187c:    4948        HI      LDR      r1,[pc,#288] ; [0x80019a0] = 0x20000080
        0x0800187e:    eb011140    ..@.    ADD      r1,r1,r0,LSL #5
        0x08001882:    7c49        I|      LDRB     r1,[r1,#0x11]
        0x08001884:    42a9        .B      CMP      r1,r5
        0x08001886:    d105        ..      BNE      0x8001894 ; do_fsm_menu + 200
;;;98     					Menu_Step = a;
        0x08001888:    4a46        FJ      LDR      r2,[pc,#280] ; [0x80019a4] = 0x200004a0
        0x0800188a:    7010        .p      STRB     r0,[r2,#0]
;;;99     					menu_changed = 1;
        0x0800188c:    2101        .!      MOVS     r1,#1
        0x0800188e:    4a48        HJ      LDR      r2,[pc,#288] ; [0x80019b0] = 0x20000070
        0x08001890:    6011        .`      STR      r1,[r2,#0]
;;;100    					break;
        0x08001892:    e004        ..      B        0x800189e ; do_fsm_menu + 210
        0x08001894:    1c40        @.      ADDS     r0,r0,#1
        0x08001896:    494a        JI      LDR      r1,[pc,#296] ; [0x80019c0] = 0x80022ca
        0x08001898:    7809        .x      LDRB     r1,[r1,#0]
        0x0800189a:    4288        .B      CMP      r0,r1
        0x0800189c:    dbee        ..      BLT      0x800187c ; do_fsm_menu + 176
        0x0800189e:    bf00        ..      NOP      
;;;101    				}
;;;102    			}
;;;103    			if(menu_changed != 1) {
        0x080018a0:    4843        CH      LDR      r0,[pc,#268] ; [0x80019b0] = 0x20000070
        0x080018a2:    6800        .h      LDR      r0,[r0,#0]
        0x080018a4:    2801        .(      CMP      r0,#1
        0x080018a6:    d013        ..      BEQ      0x80018d0 ; do_fsm_menu + 260
;;;104    				for (int a = 0; a<Menu_Step; a++) {
        0x080018a8:    2000        .       MOVS     r0,#0
        0x080018aa:    e00c        ..      B        0x80018c6 ; do_fsm_menu + 250
;;;105    					if(Thread_Info[a].level == level) {
        0x080018ac:    493c        <I      LDR      r1,[pc,#240] ; [0x80019a0] = 0x20000080
        0x080018ae:    eb011140    ..@.    ADD      r1,r1,r0,LSL #5
        0x080018b2:    7c49        I|      LDRB     r1,[r1,#0x11]
        0x080018b4:    42a9        .B      CMP      r1,r5
        0x080018b6:    d105        ..      BNE      0x80018c4 ; do_fsm_menu + 248
;;;106    						Menu_Step = a;
        0x080018b8:    4a3a        :J      LDR      r2,[pc,#232] ; [0x80019a4] = 0x200004a0
        0x080018ba:    7010        .p      STRB     r0,[r2,#0]
;;;107    						menu_changed = 1;
        0x080018bc:    2101        .!      MOVS     r1,#1
        0x080018be:    4a3c        <J      LDR      r2,[pc,#240] ; [0x80019b0] = 0x20000070
        0x080018c0:    6011        .`      STR      r1,[r2,#0]
;;;108    						break;
        0x080018c2:    e004        ..      B        0x80018ce ; do_fsm_menu + 258
        0x080018c4:    1c40        @.      ADDS     r0,r0,#1
        0x080018c6:    4937        7I      LDR      r1,[pc,#220] ; [0x80019a4] = 0x200004a0
        0x080018c8:    7809        .x      LDRB     r1,[r1,#0]
        0x080018ca:    4288        .B      CMP      r0,r1
        0x080018cc:    dbee        ..      BLT      0x80018ac ; do_fsm_menu + 224
        0x080018ce:    bf00        ..      NOP      
;;;109    					}
;;;110    				}
;;;111    			}
;;;112    		}
;;;113    		break;
        0x080018d0:    e064        d.      B        0x800199c ; do_fsm_menu + 464
        0x080018d2:    e002        ..      B        0x80018da ; do_fsm_menu + 270
        0x080018d4:    e00c        ..      B        0x80018f0 ; do_fsm_menu + 292
        0x080018d6:    e05a        Z.      B        0x800198e ; do_fsm_menu + 450
        0x080018d8:    e009        ..      B        0x80018ee ; do_fsm_menu + 290
;;;114    	}
;;;115    	case double_click_Msk: {
;;;116    		feed_direction = feed_direction == feed_direction_left ? feed_direction_right : feed_direction_left;
        0x080018da:    4834        4H      LDR      r0,[pc,#208] ; [0x80019ac] = 0x2000006d
        0x080018dc:    7800        .x      LDRB     r0,[r0,#0]
        0x080018de:    f0800001    ....    EOR      r0,r0,#1
        0x080018e2:    4932        2I      LDR      r1,[pc,#200] ; [0x80019ac] = 0x2000006d
        0x080018e4:    7008        .p      STRB     r0,[r1,#0]
;;;117    		menu_changed = 1;
        0x080018e6:    2001        .       MOVS     r0,#1
        0x080018e8:    4931        1I      LDR      r1,[pc,#196] ; [0x80019b0] = 0x20000070
        0x080018ea:    6008        .`      STR      r0,[r1,#0]
;;;118    		break;
        0x080018ec:    e056        V.      B        0x800199c ; do_fsm_menu + 464
;;;119    	}
;;;120    	case (long_press_start_Msk | long_press_start_Msk2): { // two buttons long pressed same time
;;;121    		// todo check if it work
;;;122    		break;
        0x080018ee:    e055        U.      B        0x800199c ; do_fsm_menu + 464
;;;123    	}
;;;124    	case long_press_start_Msk: {
;;;125    		if(s->function == do_fsm_menu_lps){
        0x080018f0:    4932        2I      LDR      r1,[pc,#200] ; [0x80019bc] = 0x80019cd
        0x080018f2:    6820         h      LDR      r0,[r4,#0]
        0x080018f4:    4288        .B      CMP      r0,r1
        0x080018f6:    d149        I.      BNE      0x800198c ; do_fsm_menu + 448
;;;126    			if(Thread_Info[Menu_Step].Q824 != 0) { // long press detected, start new thread from current position
        0x080018f8:    4829        )H      LDR      r0,[pc,#164] ; [0x80019a0] = 0x20000080
        0x080018fa:    492a        *I      LDR      r1,[pc,#168] ; [0x80019a4] = 0x200004a0
        0x080018fc:    7809        .x      LDRB     r1,[r1,#0]
        0x080018fe:    eb001041    ..A.    ADD      r0,r0,r1,LSL #5
        0x08001902:    6800        .h      LDR      r0,[r0,#0]
        0x08001904:    b340        @.      CBZ      r0,0x8001958 ; do_fsm_menu + 396
;;;127    
;;;128    				z_axis.Q824set = Thread_Info[Menu_Step].Q824;
        0x08001906:    4826        &H      LDR      r0,[pc,#152] ; [0x80019a0] = 0x20000080
        0x08001908:    4926        &I      LDR      r1,[pc,#152] ; [0x80019a4] = 0x200004a0
        0x0800190a:    7809        .x      LDRB     r1,[r1,#0]
        0x0800190c:    eb001041    ..A.    ADD      r0,r0,r1,LSL #5
        0x08001910:    6800        .h      LDR      r0,[r0,#0]
        0x08001912:    4928        (I      LDR      r1,[pc,#160] ; [0x80019b4] = 0x200005e0
        0x08001914:    60c8        .`      STR      r0,[r1,#0xc]
;;;129    				const uint64_t upl = (uint64_t)3600 << 48; //calculate some constants for prolong mode
        0x08001916:    bf00        ..      NOP      
;;;130    				z_axis.prolong_addSteps = upl / (fixedptud)z_axis.Q824set;
        0x08001918:    4608        .F      MOV      r0,r1
        0x0800191a:    68c6        .h      LDR      r6,[r0,#0xc]
        0x0800191c:    4632        2F      MOV      r2,r6
        0x0800191e:    2300        .#      MOVS     r3,#0
        0x08001920:    4618        .F      MOV      r0,r3
        0x08001922:    f04f6161    O.aa    MOV      r1,#0xe100000
        0x08001926:    f7fefbfd    ....    BL       __aeabi_uldivmod ; 0x8000124
        0x0800192a:    4a22        "J      LDR      r2,[pc,#136] ; [0x80019b4] = 0x200005e0
        0x0800192c:    e9c20106    ....    STRD     r0,r1,[r2,#0x18]
;;;131    				// 200*step_divider*z_feed_screw(mm)*len(mm) = desired length in steps, in my case its 200*2*1*x
;;;132    
;;;133    				if(demo)
        0x08001930:    4821        !H      LDR      r0,[pc,#132] ; [0x80019b8] = 0x20000041
        0x08001932:    7800        .x      LDRB     r0,[r0,#0]
        0x08001934:    b140        @.      CBZ      r0,0x8001948 ; do_fsm_menu + 380
;;;134    					z_move(feed_direction, 400*3, false, true); //test case, move async 10mm
        0x08001936:    2301        .#      MOVS     r3,#1
        0x08001938:    2200        ."      MOVS     r2,#0
        0x0800193a:    f44f6196    O..a    MOV      r1,#0x4b0
        0x0800193e:    481b        .H      LDR      r0,[pc,#108] ; [0x80019ac] = 0x2000006d
        0x08001940:    7800        .x      LDRB     r0,[r0,#0]
        0x08001942:    f000fc33    ..3.    BL       z_move ; 0x80021ac
        0x08001946:    e006        ..      B        0x8001956 ; do_fsm_menu + 394
;;;135    //					z_move(feed_direction, 31, false, true); //test case, move async 10mm
;;;136    				else
;;;137    					z_move(feed_direction, 0, true, true);
        0x08001948:    2301        .#      MOVS     r3,#1
        0x0800194a:    461a        .F      MOV      r2,r3
        0x0800194c:    2100        .!      MOVS     r1,#0
        0x0800194e:    4817        .H      LDR      r0,[pc,#92] ; [0x80019ac] = 0x2000006d
        0x08001950:    7800        .x      LDRB     r0,[r0,#0]
        0x08001952:    f000fc2b    ..+.    BL       z_move ; 0x80021ac
;;;138    
;;;139    				//do_fsm_move_start
;;;140    			} else { // goto submenu
        0x08001956:    e019        ..      B        0x800198c ; do_fsm_menu + 448
;;;141    				for (int a = 0; a<Menu_size; a++) {
        0x08001958:    2000        .       MOVS     r0,#0
        0x0800195a:    e012        ..      B        0x8001982 ; do_fsm_menu + 438
;;;142    					if(Thread_Info[a].level == Thread_Info[Menu_Step].submenu) {
        0x0800195c:    4910        .I      LDR      r1,[pc,#64] ; [0x80019a0] = 0x20000080
        0x0800195e:    eb011140    ..@.    ADD      r1,r1,r0,LSL #5
        0x08001962:    7c49        I|      LDRB     r1,[r1,#0x11]
        0x08001964:    4a0e        .J      LDR      r2,[pc,#56] ; [0x80019a0] = 0x20000080
        0x08001966:    4b0f        .K      LDR      r3,[pc,#60] ; [0x80019a4] = 0x200004a0
        0x08001968:    781b        .x      LDRB     r3,[r3,#0]
        0x0800196a:    eb021243    ..C.    ADD      r2,r2,r3,LSL #5
        0x0800196e:    7912        .y      LDRB     r2,[r2,#4]
        0x08001970:    4291        .B      CMP      r1,r2
        0x08001972:    d105        ..      BNE      0x8001980 ; do_fsm_menu + 436
;;;143    						Menu_Step = a;
        0x08001974:    4a0b        .J      LDR      r2,[pc,#44] ; [0x80019a4] = 0x200004a0
        0x08001976:    7010        .p      STRB     r0,[r2,#0]
;;;144    						menu_changed = 1;
        0x08001978:    2101        .!      MOVS     r1,#1
        0x0800197a:    4a0d        .J      LDR      r2,[pc,#52] ; [0x80019b0] = 0x20000070
        0x0800197c:    6011        .`      STR      r1,[r2,#0]
;;;145    						break;
        0x0800197e:    e004        ..      B        0x800198a ; do_fsm_menu + 446
        0x08001980:    1c40        @.      ADDS     r0,r0,#1
        0x08001982:    490f        .I      LDR      r1,[pc,#60] ; [0x80019c0] = 0x80022ca
        0x08001984:    7809        .x      LDRB     r1,[r1,#0]
        0x08001986:    4288        .B      CMP      r0,r1
        0x08001988:    dbe8        ..      BLT      0x800195c ; do_fsm_menu + 400
        0x0800198a:    bf00        ..      NOP      
;;;146    					}
;;;147    				}
;;;148    			}
;;;149    		} 
;;;150    /* todo prolong
;;;151    		else if(s->function == do_fsm_main_cut_back){
;;;152    			s->function = do_fsm_main_cut_back_prolong; // go to 48 mode to add threads until long_press end
;;;153    		}
;;;154    */
;;;155    		break;
        0x0800198c:    e006        ..      B        0x800199c ; do_fsm_menu + 464
;;;156    	}
;;;157    	case long_press_end_Msk: {
;;;158    		if(s->function == do_fsm_move)
        0x0800198e:    490d        .I      LDR      r1,[pc,#52] ; [0x80019c4] = 0x80019d1
        0x08001990:    6820         h      LDR      r0,[r4,#0]
        0x08001992:    4288        .B      CMP      r0,r1
        0x08001994:    d101        ..      BNE      0x800199a ; do_fsm_menu + 462
;;;159    			s->function = do_long_press_end_callback;
        0x08001996:    480c        .H      LDR      r0,[pc,#48] ; [0x80019c8] = 0x8001cb5
        0x08001998:    6020         `      STR      r0,[r4,#0]
;;;160    		break;
        0x0800199a:    bf00        ..      NOP      
        0x0800199c:    bf00        ..      NOP      
;;;161    	}
;;;162    	}
;;;163    }
        0x0800199e:    bd70        p.      POP      {r4-r6,pc}
    $d
        0x080019a0:    20000080    ...     DCD    536871040
        0x080019a4:    200004a0    ...     DCD    536872096
        0x080019a8:    200005dc    ...     DCD    536872412
        0x080019ac:    2000006d    m..     DCD    536871021
        0x080019b0:    20000070    p..     DCD    536871024
        0x080019b4:    200005e0    ...     DCD    536872416
        0x080019b8:    20000041    A..     DCD    536870977
        0x080019bc:    080019cd    ....    DCD    134224333
        0x080019c0:    080022ca    ."..    DCD    134226634
        0x080019c4:    080019d1    ....    DCD    134224337
        0x080019c8:    08001cb5    ....    DCD    134225077
    $t
    i.do_fsm_menu_lps
    do_fsm_menu_lps
;;;164    
;;;165    void do_fsm_menu_lps(state_t* s)
;;;166    {
;;;167    }
        0x080019cc:    4770        pG      BX       lr
        0x080019ce:    0000        ..      MOVS     r0,r0
    i.do_fsm_move
    do_fsm_move
;;;168    
;;;169    /*
;;;170    void do_fsm_main_cut_back_prolong(state_t* s)   // reverse movement: main part with prolong activated. todo split it with 46 mode?
;;;171    {
;;;172    	MOTOR_Z_SetPulse();
;;;173    	--z_axis.current_pos;
;;;174    	if(z_axis.current_pos == z_axis.ramp_step) { // we reach end of main path and have long_pressed key, so just add additional thread full turn to shift initial start point
;;;175    		z_axis.prolong_fract += z_axis.prolong_addSteps; // fract part from prev step
;;;176    		uint32_t prolong_fixpart = z_axis.prolong_fract >> 24;
;;;177    		z_axis.current_pos += prolong_fixpart; // add fixed part
;;;178    		z_axis.end_pos += prolong_fixpart;
;;;179    		z_axis.prolong_fract &= FIXEDPT_FMASK; // leave fract part to accumulate with next dividing cycle
;;;180    		// when long_press end, get back to 46 mode to proceed
;;;181    	}
;;;182    }
;;;183    */
;;;184    
;;;185    void do_fsm_wait_sclick(state_t* s)
;;;186    {
;;;187    }
;;;188    
;;;189    void z_move(uint32_t direction, uint32_t length, bool sync, bool autostart){
;;;190    	MOTOR_X_Enable();
;;;191    	MOTOR_Z_Enable(); // time to wakeup motor from sleep is quite high(1.7ms), so enable it as soon as possible
;;;192    
;;;193    	if(direction == feed_direction_left) {
;;;194    		feed_direction = feed_direction_left;
;;;195    		MOTOR_Z_Reverse();
;;;196    		MOTOR_X_Reverse();
;;;197    	} else {
;;;198    		feed_direction = feed_direction_right;
;;;199    		MOTOR_Z_Forward();
;;;200    		MOTOR_X_Forward();
;;;201    	}
;;;202    	LL_mDelay(2);
;;;203    
;;;204    	state.sync = sync;
;;;205    	if(sync){
;;;206    		state.main_feed_direction = feed_direction;
;;;207    	}
;;;208    	
;;;209    	z_axis.current_pos = 0;
;;;210    	z_axis.end_pos = length;
;;;211    	if(z_axis.end_pos > 0){
;;;212    		z_axis.end_pos &= 0xFFFFFFFF - step_divider + 1;
;;;213    		z_axis.end_pos |= step_divider; // to make sure that we'll not stop between full steps
;;;214    	} else {
;;;215    		state.sync = true;
;;;216    	}
;;;217    	
;;;218    	do_fsm_move_start(&state);
;;;219    
;;;220    }
;;;221    
;;;222    //---------------------------------------------------------------------------------------------
;;;223    void do_fsm_move_start(state_t* s){
;;;224    	if(s->sync && !s->f_tacho){
;;;225    		s->function = do_fsm_move_start;// return here from interrupt when TACHO event
;;;226    		// enable and wait tacho event on spindle encoder
;;;227    		LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH3);	// configure TACHO events on channel 3
;;;228    		return;
;;;229    	}
;;;230    
;;;231    	if(s->f_tacho || !s->sync) { // if tacho event or we going to start back feed to initial position with async clock
;;;232    		LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_DISABLED);
;;;233    		if(s->sync && s->f_tacho) {
;;;234    			s->function = do_fsm_ramp_up;
;;;235    			s->async_z = 0;
;;;236    			s->syncbase = TIM4; 									// sync with spindle
;;;237    
;;;238    			LL_TIM_SetTriggerInput(TIM3, LL_TIM_TS_ITR3); 				//trigger by spindle encoder timer TIM4(sync mode)
;;;239    
;;;240    // disable TACHO events, we dont need'em until next start			
;;;241    			LL_TIM_CC_DisableChannel(TIM4, LL_TIM_CHANNEL_CH3);	// configure TACHO events on channel 3
;;;242    			enable_encoder_ticks(); 									// enable thread specific interrupt controlled by Q824set
;;;243    		} else {
;;;244    			s->function = do_fsm_ramp_up_async;
;;;245    			s->async_z = 1;
;;;246    			s->syncbase = TIM2; 									// sync with internal clock source(virtual spindle, "async" to main spindle)
;;;247    
;;;248    			LL_TIM_SetTriggerInput(TIM3, LL_TIM_TS_ITR1); 				//trigger by TIM2(async mode)
;;;249    			LL_TIM_EnableCounter(TIM2); /* Enable counter */
;;;250    		}
;;;251    
;;;252    		MOTOR_Z_AllowPulse();
;;;253    		MOTOR_X_AllowPulse();
;;;254    		LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_TRIGGER);
;;;255    		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH3);
;;;256    		s->syncbase->ARR = 1; 					// start stepper motor ramp up procedure immediately after tacho event
;;;257    		LL_TIM_GenerateEvent_UPDATE(s->syncbase); /* Force update generation */
;;;258    	}	
;;;259    }
;;;260    
;;;261    void do_fsm_ramp_up(state_t* s)
;;;262    {
;;;263    	z_axis.current_pos++;
;;;264    	if(z_axis_ramp_up2(s)) {
;;;265    		s->function = do_fsm_move;
;;;266    	}
;;;267    }
;;;268    
;;;269    void do_fsm_move(state_t* s)
;;;270    {
        0x080019d0:    b510        ..      PUSH     {r4,lr}
        0x080019d2:    4604        .F      MOV      r4,r0
;;;271    //	if(s->spindle_dir)	z_axis.current_pos++;
;;;272    //	else z_axis.current_pos--;
;;;273    	if( ++z_axis.current_pos <= ( z_axis.end_pos - z_axis.ramp_step ) ) { // when end_pos is zero, end_pos-ramp_step= 4294967296 - ramp_step, so it will be much more lager then current_pos
        0x080019d4:    4811        .H      LDR      r0,[pc,#68] ; [0x8001a1c] = 0x200005e0
        0x080019d6:    6840        @h      LDR      r0,[r0,#4]
        0x080019d8:    4910        .I      LDR      r1,[pc,#64] ; [0x8001a1c] = 0x200005e0
        0x080019da:    f8911028    ..(.    LDRB     r1,[r1,#0x28]
        0x080019de:    1a41        A.      SUBS     r1,r0,r1
        0x080019e0:    480e        .H      LDR      r0,[pc,#56] ; [0x8001a1c] = 0x200005e0
        0x080019e2:    6800        .h      LDR      r0,[r0,#0]
        0x080019e4:    1c40        @.      ADDS     r0,r0,#1
        0x080019e6:    4a0d        .J      LDR      r2,[pc,#52] ; [0x8001a1c] = 0x200005e0
        0x080019e8:    6010        .`      STR      r0,[r2,#0]
        0x080019ea:    4281        .B      CMP      r1,r0
        0x080019ec:    d303        ..      BCC      0x80019f6 ; do_fsm_move + 38
;;;274    		z_axis_move2(s);
        0x080019ee:    4620         F      MOV      r0,r4
        0x080019f0:    f000fb70    ..p.    BL       z_axis_move2 ; 0x80020d4
        0x080019f4:    e011        ..      B        0x8001a1a ; do_fsm_move + 74
;;;275    	} else {
;;;276    		if(z_axis_ramp_down2(s)) {
        0x080019f6:    4620         F      MOV      r0,r4
        0x080019f8:    f000fb86    ....    BL       z_axis_ramp_down2 ; 0x8002108
        0x080019fc:    b158        X.      CBZ      r0,0x8001a16 ; do_fsm_move + 70
;;;277    			if(z_axis.end_pos != z_axis.current_pos) {
        0x080019fe:    4807        .H      LDR      r0,[pc,#28] ; [0x8001a1c] = 0x200005e0
        0x08001a00:    6840        @h      LDR      r0,[r0,#4]
        0x08001a02:    4906        .I      LDR      r1,[pc,#24] ; [0x8001a1c] = 0x200005e0
        0x08001a04:    6809        .h      LDR      r1,[r1,#0]
        0x08001a06:    4288        .B      CMP      r0,r1
        0x08001a08:    d003        ..      BEQ      0x8001a12 ; do_fsm_move + 66
;;;278    				z_axis.end_pos = z_axis.current_pos;
        0x08001a0a:    4804        .H      LDR      r0,[pc,#16] ; [0x8001a1c] = 0x200005e0
        0x08001a0c:    6800        .h      LDR      r0,[r0,#0]
        0x08001a0e:    4903        .I      LDR      r1,[pc,#12] ; [0x8001a1c] = 0x200005e0
        0x08001a10:    6048        H`      STR      r0,[r1,#4]
;;;279    			}
;;;280    			s->function = do_fsm_move_end;
        0x08001a12:    4803        .H      LDR      r0,[pc,#12] ; [0x8001a20] = 0x8001a59
        0x08001a14:    6020         `      STR      r0,[r4,#0]
;;;281    		}
;;;282    		s->function = do_fsm_ramp_down;
        0x08001a16:    4803        .H      LDR      r0,[pc,#12] ; [0x8001a24] = 0x8001bb1
        0x08001a18:    6020         `      STR      r0,[r4,#0]
;;;283    	}
;;;284    }
        0x08001a1a:    bd10        ..      POP      {r4,pc}
    $d
        0x08001a1c:    200005e0    ...     DCD    536872416
        0x08001a20:    08001a59    Y...    DCD    134224473
        0x08001a24:    08001bb1    ....    DCD    134224817
    $t
    i.do_fsm_move_async
    do_fsm_move_async
;;;285    
;;;286    void do_long_press_end_callback(state_t* s)          // direct movement: first pass, thread recording: long press release callback
;;;287    {
;;;288    	// для 1/2 микрошага нужно что бы общее количество шагов в цикле резьбы было кратно 2,(для 1/4 кратно 4 и тп).
;;;289    	// это нужно для того что бы в конце шаговый мотор остановился на одном из двухсот устойчивых шагов,
;;;290    	// не перескакивая на соседние шаги при потере питания.
;;;291    	if(z_axis.end_pos == 0) //s->sync?
;;;292    		z_axis.end_pos = ( z_axis.ramp_step + z_axis.current_pos ) | (step_divider - 1);
;;;293    	s->function = do_fsm_move;
;;;294    	do_fsm_move(s);
;;;295    }
;;;296    
;;;297    
;;;298    void do_fsm_ramp_down(state_t* s)
;;;299    {
;;;300    //	if(s->spindle_dir)	
;;;301    		z_axis.current_pos++;
;;;302    //	else 
;;;303    //		z_axis.current_pos--;
;;;304    	if(z_axis_ramp_down2(s)) {
;;;305    		if(z_axis.end_pos != z_axis.current_pos) {
;;;306    			z_axis.end_pos = z_axis.current_pos;
;;;307    		}
;;;308    		s->function = do_fsm_move_end;
;;;309    	}
;;;310    }
;;;311    
;;;312    void do_fsm_move_end(state_t* s){
;;;313    	s->async_z = 0;
;;;314      LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_DISABLED);
;;;315    
;;;316    	//	MOTOR_Z_BlockPulse();
;;;317    	if (s->sync) {
;;;318    		disable_encoder_ticks(); 										//reset interrupt for encoder ticks, only tacho todo async mode not compatible now
;;;319    		LL_TIM_CC_DisableChannel(TIM4, LL_TIM_CHANNEL_CH3);	// configure TACHO events on channel 3
;;;320    	} else {
;;;321    		LL_TIM_DisableCounter(TIM2); // pause async timer
;;;322    //		LL_TIM_DisableIT_UPDATE(TIM2);
;;;323    	}
;;;324    	s->syncbase = 0; // reset syncbase to stop calling it from timer interrupt
;;;325    
;;;326      MOTOR_Z_Disable(); 									//disable motor later on next tacho event (or after some ticks count?) to completely process last step
;;;327      MOTOR_X_Disable(); 									//disable motor later on next tacho event (or after some ticks count?) to completely process last step
;;;328    //	feed_direction = feed_direction == feed_direction_left ? feed_direction_right : feed_direction_left;
;;;329    	feed_direction = !feed_direction; 					//autochange feed direction
;;;330    	menu_changed = 1; 													//update menu
;;;331    	s->function = do_fsm_wait_sclick;
;;;332    
;;;333    //	z_axis.current_pos = 0;
;;;334    }
;;;335    
;;;336    
;;;337    _Bool z_axis_ramp_up2(state_t* s)
;;;338    {
;;;339    	const fixedptu  set_with_fract = sync_ramp_profile[z_axis.ramp_step] << 24;
;;;340    	if(z_axis.Q824set > set_with_fract || z_axis.ramp_step == sync_ramp_profile_len) { 	// reach desired speed or end of ramp map
;;;341    		s->syncbase->ARR = fixedpt_toint(z_axis.Q824set) - 1; 			// update register ARR
;;;342    //		s->syncbase->EGR |= TIM_EGR_UG;
;;;343    		z_axis.fract_part = fixedpt_fracpart(z_axis.Q824set); 								// save fract part for future use on next step
;;;344    //		z_axis.end_minus_ramp_delta =
;;;345    		return true;
;;;346    	} else {
;;;347    		z_axis.ramp_step++;
;;;348    		s->syncbase->ARR = fixedpt_toint(set_with_fract) - 1; 			// update register ARR
;;;349    //		s->syncbase->EGR |= TIM_EGR_UG;
;;;350    //		z_axis.fract_part = fixedpt_fracpart( set_with_fract ); 						// save fract part for future use on next step
;;;351    	}
;;;352    	return false;
;;;353    }
;;;354    
;;;355    _Bool z_axis_ramp_down2(state_t* s)
;;;356    {
;;;357    	if (z_axis.ramp_step == 0)
;;;358    		return true;
;;;359    //	const fixedptu set_with_fract = ramp2[--z_axis.ramp_step] << 24;
;;;360    //	s->syncbase->ARR = fixedpt_toint(set_with_fract) - 1; // update register ARR
;;;361    
;;;362    	s->syncbase->ARR = sync_ramp_profile[--z_axis.ramp_step];
;;;363    	//	s->syncbase->EGR |= TIM_EGR_UG;
;;;364    //	z_axis.fract_part = fixedpt_fracpart( set_with_fract ); // save fract part for future use on next step
;;;365    	if(z_axis.ramp_step == 0)
;;;366    		return true;
;;;367    	return false;
;;;368    }
;;;369    
;;;370    void z_axis_move2(state_t* s)
;;;371    {
;;;372    	const fixedptu set_with_fract = fixedpt_add(z_axis.Q824set, z_axis.fract_part); // calculate new step delay with fract from previous step
;;;373    	s->syncbase->ARR = fixedpt_toint(set_with_fract) - 1; // update register ARR
;;;374    	s->syncbase->CNT = 0;
;;;375    	s->syncbase->EGR |= TIM_EGR_UG;
;;;376    	z_axis.fract_part = fixedpt_fracpart( set_with_fract ); // save fract part for future use on next step
;;;377    }
;;;378    
;;;379    
;;;380    
;;;381    
;;;382    
;;;383    //------------------------------------ ASYNC block -----------------------------------
;;;384    //------------------------------------ ASYNC block -----------------------------------
;;;385    //------------------------------------ ASYNC block -----------------------------------
;;;386    void do_fsm_ramp_up_async(state_t* s)
;;;387    {
;;;388    //	MOTOR_Z_SetPulse();
;;;389    	z_axis.current_pos++;
;;;390    	const uint8_t z_arr = async_ramp_profile[z_axis.ramp_step];
;;;391    	if(z_arr < slew_speed_period) { 	// reach desired speed
;;;392    		s->z_period = slew_speed_period;
;;;393    		s->function = do_fsm_move_async;
;;;394    	} else {
;;;395    		z_axis.ramp_step++;
;;;396    		s->z_period = z_arr;
;;;397    	}
;;;398    }
;;;399    
;;;400    void do_fsm_move_async(state_t* s)
;;;401    {
;;;402    	// todo precalculate delta: z_axis.end_pos - z_axis.ramp_step
;;;403    	if( ++z_axis.current_pos < ( z_axis.end_pos - z_axis.ramp_step ) ) { // when end_pos is zero, end_pos-ramp_step= 4294967296 - ramp_step, so it will be much more lager then current_pos
        0x08001a28:    4909        .I      LDR      r1,[pc,#36] ; [0x8001a50] = 0x200005e0
        0x08001a2a:    6849        Ih      LDR      r1,[r1,#4]
        0x08001a2c:    4a08        .J      LDR      r2,[pc,#32] ; [0x8001a50] = 0x200005e0
        0x08001a2e:    f8922028    ..(     LDRB     r2,[r2,#0x28]
        0x08001a32:    1a8a        ..      SUBS     r2,r1,r2
        0x08001a34:    4906        .I      LDR      r1,[pc,#24] ; [0x8001a50] = 0x200005e0
        0x08001a36:    6809        .h      LDR      r1,[r1,#0]
        0x08001a38:    1c49        I.      ADDS     r1,r1,#1
        0x08001a3a:    4b05        .K      LDR      r3,[pc,#20] ; [0x8001a50] = 0x200005e0
        0x08001a3c:    6019        .`      STR      r1,[r3,#0]
        0x08001a3e:    428a        .B      CMP      r2,r1
        0x08001a40:    d902        ..      BLS      0x8001a48 ; do_fsm_move_async + 32
;;;404    		s->z_period = slew_speed_period;
        0x08001a42:    2132        2!      MOVS     r1,#0x32
        0x08001a44:    7301        .s      STRB     r1,[r0,#0xc]
        0x08001a46:    e001        ..      B        0x8001a4c ; do_fsm_move_async + 36
;;;405    	} else {
;;;406    		s->function = do_fsm_ramp_down_async;
        0x08001a48:    4902        .I      LDR      r1,[pc,#8] ; [0x8001a54] = 0x8001be9
        0x08001a4a:    6001        .`      STR      r1,[r0,#0]
;;;407    	}
;;;408    }
        0x08001a4c:    4770        pG      BX       lr
    $d
        0x08001a4e:    0000        ..      DCW    0
        0x08001a50:    200005e0    ...     DCD    536872416
        0x08001a54:    08001be9    ....    DCD    134224873
    $t
    i.do_fsm_move_end
    do_fsm_move_end
;;; .\..\Src\fsm.c (312)
        0x08001a58:    b510        ..      PUSH     {r4,lr}
        0x08001a5a:    4604        .F      MOV      r4,r0
;;;313    	s->async_z = 0;
        0x08001a5c:    2000        .       MOVS     r0,#0
        0x08001a5e:    6060        ``      STR      r0,[r4,#4]
;;;314      LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_DISABLED);
        0x08001a60:    2100        .!      MOVS     r1,#0
        0x08001a62:    4816        .H      LDR      r0,[pc,#88] ; [0x8001abc] = 0x40000400
        0x08001a64:    f7fff82b    ..+.    BL       LL_TIM_SetSlaveMode ; 0x8000abe
;;;315    
;;;316    	//	MOTOR_Z_BlockPulse();
;;;317    	if (s->sync) {
        0x08001a68:    7c20         |      LDRB     r0,[r4,#0x10]
        0x08001a6a:    b140        @.      CBZ      r0,0x8001a7e ; do_fsm_move_end + 38
;;;318    		disable_encoder_ticks(); 										//reset interrupt for encoder ticks, only tacho todo async mode not compatible now
        0x08001a6c:    2000        .       MOVS     r0,#0
        0x08001a6e:    4914        .I      LDR      r1,[pc,#80] ; [0x8001ac0] = 0x42010180
        0x08001a70:    6008        .`      STR      r0,[r1,#0]
;;;319    		LL_TIM_CC_DisableChannel(TIM4, LL_TIM_CHANNEL_CH3);	// configure TACHO events on channel 3
        0x08001a72:    f44f7180    O..q    MOV      r1,#0x100
        0x08001a76:    4813        .H      LDR      r0,[pc,#76] ; [0x8001ac4] = 0x40000800
        0x08001a78:    f7fefe53    ..S.    BL       LL_TIM_CC_DisableChannel ; 0x8000722
        0x08001a7c:    e00a        ..      B        0x8001a94 ; do_fsm_move_end + 60
;;;320    	} else {
;;;321    		LL_TIM_DisableCounter(TIM2); // pause async timer
        0x08001a7e:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;1038     CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
        0x08001a80:    f04f4080    O..@    MOV      r0,#0x40000000
        0x08001a84:    6800        .h      LDR      r0,[r0,#0]
        0x08001a86:    f0200001     ...    BIC      r0,r0,#1
        0x08001a8a:    f04f4180    O..A    MOV      r1,#0x40000000
        0x08001a8e:    6008        .`      STR      r0,[r1,#0]
;;;1039   }
        0x08001a90:    bf00        ..      NOP      
        0x08001a92:    bf00        ..      NOP      
;;; .\..\Src\fsm.c
;;;324    	s->syncbase = 0; // reset syncbase to stop calling it from timer interrupt
        0x08001a94:    2000        .       MOVS     r0,#0
        0x08001a96:    6160        `a      STR      r0,[r4,#0x14]
;;;325    
;;;326      MOTOR_Z_Disable(); 									//disable motor later on next tacho event (or after some ticks count?) to completely process last step
        0x08001a98:    f2402002    @..     MOV      r0,#0x202
        0x08001a9c:    490a        .I      LDR      r1,[pc,#40] ; [0x8001ac8] = 0x40010c14
        0x08001a9e:    6008        .`      STR      r0,[r1,#0]
;;;327      MOTOR_X_Disable(); 									//disable motor later on next tacho event (or after some ticks count?) to completely process last step
        0x08001aa0:    490a        .I      LDR      r1,[pc,#40] ; [0x8001acc] = 0x40010814
        0x08001aa2:    6008        .`      STR      r0,[r1,#0]
;;;328    //	feed_direction = feed_direction == feed_direction_left ? feed_direction_right : feed_direction_left;
;;;329    	feed_direction = !feed_direction; 					//autochange feed direction
        0x08001aa4:    480a        .H      LDR      r0,[pc,#40] ; [0x8001ad0] = 0x2000006d
        0x08001aa6:    7800        .x      LDRB     r0,[r0,#0]
        0x08001aa8:    f0800001    ....    EOR      r0,r0,#1
        0x08001aac:    4908        .I      LDR      r1,[pc,#32] ; [0x8001ad0] = 0x2000006d
        0x08001aae:    7008        .p      STRB     r0,[r1,#0]
;;;330    	menu_changed = 1; 													//update menu
        0x08001ab0:    2001        .       MOVS     r0,#1
        0x08001ab2:    4908        .I      LDR      r1,[pc,#32] ; [0x8001ad4] = 0x20000070
        0x08001ab4:    6008        .`      STR      r0,[r1,#0]
;;;331    	s->function = do_fsm_wait_sclick;
        0x08001ab6:    4808        .H      LDR      r0,[pc,#32] ; [0x8001ad8] = 0x8001cb1
        0x08001ab8:    6020         `      STR      r0,[r4,#0]
;;;332    
;;;333    //	z_axis.current_pos = 0;
;;;334    }
        0x08001aba:    bd10        ..      POP      {r4,pc}
    $d
        0x08001abc:    40000400    ...@    DCD    1073742848
        0x08001ac0:    42010180    ...B    DCD    1107362176
        0x08001ac4:    40000800    ...@    DCD    1073743872
        0x08001ac8:    40010c14    ...@    DCD    1073810452
        0x08001acc:    40010814    ...@    DCD    1073809428
        0x08001ad0:    2000006d    m..     DCD    536871021
        0x08001ad4:    20000070    p..     DCD    536871024
        0x08001ad8:    08001cb1    ....    DCD    134225073
    $t
    i.do_fsm_move_start
    do_fsm_move_start
;;; .\..\Src\fsm.c (223)
        0x08001adc:    b510        ..      PUSH     {r4,lr}
        0x08001ade:    4604        .F      MOV      r4,r0
;;;224    	if(s->sync && !s->f_tacho){
        0x08001ae0:    7c20         |      LDRB     r0,[r4,#0x10]
        0x08001ae2:    b150        P.      CBZ      r0,0x8001afa ; do_fsm_move_start + 30
        0x08001ae4:    7ba0        .{      LDRB     r0,[r4,#0xe]
        0x08001ae6:    b940        @.      CBNZ     r0,0x8001afa ; do_fsm_move_start + 30
;;;225    		s->function = do_fsm_move_start;// return here from interrupt when TACHO event
        0x08001ae8:    f2af000f    ....    ADR      r0,{pc}-0xb ; 0x8001add
        0x08001aec:    6020         `      STR      r0,[r4,#0]
;;;226    		// enable and wait tacho event on spindle encoder
;;;227    		LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH3);	// configure TACHO events on channel 3
        0x08001aee:    f44f7180    O..q    MOV      r1,#0x100
        0x08001af2:    482a        *H      LDR      r0,[pc,#168] ; [0x8001b9c] = 0x40000800
        0x08001af4:    f7fefe19    ....    BL       LL_TIM_CC_EnableChannel ; 0x800072a
        0x08001af8:    bd10        ..      POP      {r4,pc}
;;;228    		return;
;;;229    	}
;;;230    
;;;231    	if(s->f_tacho || !s->sync) { // if tacho event or we going to start back feed to initial position with async clock
        0x08001afa:    7ba0        .{      LDRB     r0,[r4,#0xe]
        0x08001afc:    b910        ..      CBNZ     r0,0x8001b04 ; do_fsm_move_start + 40
        0x08001afe:    7c20         |      LDRB     r0,[r4,#0x10]
        0x08001b00:    2800        .(      CMP      r0,#0
        0x08001b02:    d149        I.      BNE      0x8001b98 ; do_fsm_move_start + 188
;;;232    		LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_DISABLED);
        0x08001b04:    2100        .!      MOVS     r1,#0
        0x08001b06:    4826        &H      LDR      r0,[pc,#152] ; [0x8001ba0] = 0x40000400
        0x08001b08:    f7feffd9    ....    BL       LL_TIM_SetSlaveMode ; 0x8000abe
;;;233    		if(s->sync && s->f_tacho) {
        0x08001b0c:    7c20         |      LDRB     r0,[r4,#0x10]
        0x08001b0e:    b1a0        ..      CBZ      r0,0x8001b3a ; do_fsm_move_start + 94
        0x08001b10:    7ba0        .{      LDRB     r0,[r4,#0xe]
        0x08001b12:    b190        ..      CBZ      r0,0x8001b3a ; do_fsm_move_start + 94
;;;234    			s->function = do_fsm_ramp_up;
        0x08001b14:    4823        #H      LDR      r0,[pc,#140] ; [0x8001ba4] = 0x8001c4d
        0x08001b16:    6020         `      STR      r0,[r4,#0]
;;;235    			s->async_z = 0;
        0x08001b18:    2000        .       MOVS     r0,#0
        0x08001b1a:    6060        ``      STR      r0,[r4,#4]
;;;236    			s->syncbase = TIM4; 									// sync with spindle
        0x08001b1c:    481f        .H      LDR      r0,[pc,#124] ; [0x8001b9c] = 0x40000800
        0x08001b1e:    6160        `a      STR      r0,[r4,#0x14]
;;;237    
;;;238    			LL_TIM_SetTriggerInput(TIM3, LL_TIM_TS_ITR3); 				//trigger by spindle encoder timer TIM4(sync mode)
        0x08001b20:    2130        0!      MOVS     r1,#0x30
        0x08001b22:    481f        .H      LDR      r0,[pc,#124] ; [0x8001ba0] = 0x40000400
        0x08001b24:    f7feffd7    ....    BL       LL_TIM_SetTriggerInput ; 0x8000ad6
;;;239    
;;;240    // disable TACHO events, we dont need'em until next start			
;;;241    			LL_TIM_CC_DisableChannel(TIM4, LL_TIM_CHANNEL_CH3);	// configure TACHO events on channel 3
        0x08001b28:    f44f7180    O..q    MOV      r1,#0x100
        0x08001b2c:    481b        .H      LDR      r0,[pc,#108] ; [0x8001b9c] = 0x40000800
        0x08001b2e:    f7fefdf8    ....    BL       LL_TIM_CC_DisableChannel ; 0x8000722
;;;242    			enable_encoder_ticks(); 									// enable thread specific interrupt controlled by Q824set
        0x08001b32:    2001        .       MOVS     r0,#1
        0x08001b34:    491c        .I      LDR      r1,[pc,#112] ; [0x8001ba8] = 0x42010180
        0x08001b36:    6008        .`      STR      r0,[r1,#0]
        0x08001b38:    e014        ..      B        0x8001b64 ; do_fsm_move_start + 136
;;;243    		} else {
;;;244    			s->function = do_fsm_ramp_up_async;
        0x08001b3a:    481c        .H      LDR      r0,[pc,#112] ; [0x8001bac] = 0x8001c71
        0x08001b3c:    6020         `      STR      r0,[r4,#0]
;;;245    			s->async_z = 1;
        0x08001b3e:    2001        .       MOVS     r0,#1
        0x08001b40:    6060        ``      STR      r0,[r4,#4]
;;;246    			s->syncbase = TIM2; 									// sync with internal clock source(virtual spindle, "async" to main spindle)
        0x08001b42:    0780        ..      LSLS     r0,r0,#30
        0x08001b44:    6160        `a      STR      r0,[r4,#0x14]
;;;247    
;;;248    			LL_TIM_SetTriggerInput(TIM3, LL_TIM_TS_ITR1); 				//trigger by TIM2(async mode)
        0x08001b46:    2110        .!      MOVS     r1,#0x10
        0x08001b48:    4815        .H      LDR      r0,[pc,#84] ; [0x8001ba0] = 0x40000400
        0x08001b4a:    f7feffc4    ....    BL       LL_TIM_SetTriggerInput ; 0x8000ad6
;;;249    			LL_TIM_EnableCounter(TIM2); /* Enable counter */
        0x08001b4e:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;1027     SET_BIT(TIMx->CR1, TIM_CR1_CEN);
        0x08001b50:    f04f4080    O..@    MOV      r0,#0x40000000
        0x08001b54:    6800        .h      LDR      r0,[r0,#0]
        0x08001b56:    f0400001    @...    ORR      r0,r0,#1
        0x08001b5a:    f04f4180    O..A    MOV      r1,#0x40000000
        0x08001b5e:    6008        .`      STR      r0,[r1,#0]
;;;1028   }
        0x08001b60:    bf00        ..      NOP      
        0x08001b62:    bf00        ..      NOP      
;;; .\..\Src\fsm.c
;;;252    		MOTOR_Z_AllowPulse();
        0x08001b64:    2001        .       MOVS     r0,#1
        0x08001b66:    490e        .I      LDR      r1,[pc,#56] ; [0x8001ba0] = 0x40000400
        0x08001b68:    313c        <1      ADDS     r1,r1,#0x3c
        0x08001b6a:    6008        .`      STR      r0,[r1,#0]
;;;253    		MOTOR_X_AllowPulse();
        0x08001b6c:    490c        .I      LDR      r1,[pc,#48] ; [0x8001ba0] = 0x40000400
        0x08001b6e:    3134        41      ADDS     r1,r1,#0x34
        0x08001b70:    6008        .`      STR      r0,[r1,#0]
;;;254    		LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_TRIGGER);
        0x08001b72:    2106        .!      MOVS     r1,#6
        0x08001b74:    480a        .H      LDR      r0,[pc,#40] ; [0x8001ba0] = 0x40000400
        0x08001b76:    f7feffa2    ....    BL       LL_TIM_SetSlaveMode ; 0x8000abe
;;;255    		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH3);
        0x08001b7a:    f44f7180    O..q    MOV      r1,#0x100
        0x08001b7e:    4808        .H      LDR      r0,[pc,#32] ; [0x8001ba0] = 0x40000400
        0x08001b80:    f7fefdd3    ....    BL       LL_TIM_CC_EnableChannel ; 0x800072a
;;;256    		s->syncbase->ARR = 1; 					// start stepper motor ramp up procedure immediately after tacho event
        0x08001b84:    2001        .       MOVS     r0,#1
        0x08001b86:    6961        ai      LDR      r1,[r4,#0x14]
        0x08001b88:    62c8        .b      STR      r0,[r1,#0x2c]
;;;257    		LL_TIM_GenerateEvent_UPDATE(s->syncbase); /* Force update generation */
        0x08001b8a:    6960        `i      LDR      r0,[r4,#0x14]
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;3709     SET_BIT(TIMx->EGR, TIM_EGR_UG);
        0x08001b8c:    6941        Ai      LDR      r1,[r0,#0x14]
        0x08001b8e:    f0410101    A...    ORR      r1,r1,#1
        0x08001b92:    6141        Aa      STR      r1,[r0,#0x14]
;;;3710   }
        0x08001b94:    bf00        ..      NOP      
        0x08001b96:    bf00        ..      NOP      
;;; .\..\Src\fsm.c
;;;259    }
        0x08001b98:    bf00        ..      NOP      
        0x08001b9a:    e7ad        ..      B        0x8001af8 ; do_fsm_move_start + 28
    $d
        0x08001b9c:    40000800    ...@    DCD    1073743872
        0x08001ba0:    40000400    ...@    DCD    1073742848
        0x08001ba4:    08001c4d    M...    DCD    134224973
        0x08001ba8:    42010180    ...B    DCD    1107362176
        0x08001bac:    08001c71    q...    DCD    134225009
    $t
    i.do_fsm_ramp_down
    do_fsm_ramp_down
;;;260    
;;;261    void do_fsm_ramp_up(state_t* s)
;;;262    {
;;;263    	z_axis.current_pos++;
;;;264    	if(z_axis_ramp_up2(s)) {
;;;265    		s->function = do_fsm_move;
;;;266    	}
;;;267    }
;;;268    
;;;269    void do_fsm_move(state_t* s)
;;;270    {
;;;271    //	if(s->spindle_dir)	z_axis.current_pos++;
;;;272    //	else z_axis.current_pos--;
;;;273    	if( ++z_axis.current_pos <= ( z_axis.end_pos - z_axis.ramp_step ) ) { // when end_pos is zero, end_pos-ramp_step= 4294967296 - ramp_step, so it will be much more lager then current_pos
;;;274    		z_axis_move2(s);
;;;275    	} else {
;;;276    		if(z_axis_ramp_down2(s)) {
;;;277    			if(z_axis.end_pos != z_axis.current_pos) {
;;;278    				z_axis.end_pos = z_axis.current_pos;
;;;279    			}
;;;280    			s->function = do_fsm_move_end;
;;;281    		}
;;;282    		s->function = do_fsm_ramp_down;
;;;283    	}
;;;284    }
;;;285    
;;;286    void do_long_press_end_callback(state_t* s)          // direct movement: first pass, thread recording: long press release callback
;;;287    {
;;;288    	// для 1/2 микрошага нужно что бы общее количество шагов в цикле резьбы было кратно 2,(для 1/4 кратно 4 и тп).
;;;289    	// это нужно для того что бы в конце шаговый мотор остановился на одном из двухсот устойчивых шагов,
;;;290    	// не перескакивая на соседние шаги при потере питания.
;;;291    	if(z_axis.end_pos == 0) //s->sync?
;;;292    		z_axis.end_pos = ( z_axis.ramp_step + z_axis.current_pos ) | (step_divider - 1);
;;;293    	s->function = do_fsm_move;
;;;294    	do_fsm_move(s);
;;;295    }
;;;296    
;;;297    
;;;298    void do_fsm_ramp_down(state_t* s)
;;;299    {
        0x08001bb0:    b500        ..      PUSH     {lr}
        0x08001bb2:    4603        .F      MOV      r3,r0
;;;300    //	if(s->spindle_dir)	
;;;301    		z_axis.current_pos++;
        0x08001bb4:    480a        .H      LDR      r0,[pc,#40] ; [0x8001be0] = 0x200005e0
        0x08001bb6:    6800        .h      LDR      r0,[r0,#0]
        0x08001bb8:    1c40        @.      ADDS     r0,r0,#1
        0x08001bba:    4909        .I      LDR      r1,[pc,#36] ; [0x8001be0] = 0x200005e0
        0x08001bbc:    6008        .`      STR      r0,[r1,#0]
;;;302    //	else 
;;;303    //		z_axis.current_pos--;
;;;304    	if(z_axis_ramp_down2(s)) {
        0x08001bbe:    4618        .F      MOV      r0,r3
        0x08001bc0:    f000faa2    ....    BL       z_axis_ramp_down2 ; 0x8002108
        0x08001bc4:    b158        X.      CBZ      r0,0x8001bde ; do_fsm_ramp_down + 46
;;;305    		if(z_axis.end_pos != z_axis.current_pos) {
        0x08001bc6:    4806        .H      LDR      r0,[pc,#24] ; [0x8001be0] = 0x200005e0
        0x08001bc8:    6840        @h      LDR      r0,[r0,#4]
        0x08001bca:    4905        .I      LDR      r1,[pc,#20] ; [0x8001be0] = 0x200005e0
        0x08001bcc:    6809        .h      LDR      r1,[r1,#0]
        0x08001bce:    4288        .B      CMP      r0,r1
        0x08001bd0:    d003        ..      BEQ      0x8001bda ; do_fsm_ramp_down + 42
;;;306    			z_axis.end_pos = z_axis.current_pos;
        0x08001bd2:    4803        .H      LDR      r0,[pc,#12] ; [0x8001be0] = 0x200005e0
        0x08001bd4:    6800        .h      LDR      r0,[r0,#0]
        0x08001bd6:    4902        .I      LDR      r1,[pc,#8] ; [0x8001be0] = 0x200005e0
        0x08001bd8:    6048        H`      STR      r0,[r1,#4]
;;;307    		}
;;;308    		s->function = do_fsm_move_end;
        0x08001bda:    4802        .H      LDR      r0,[pc,#8] ; [0x8001be4] = 0x8001a59
        0x08001bdc:    6018        .`      STR      r0,[r3,#0]
;;;309    	}
;;;310    }
        0x08001bde:    bd00        ..      POP      {pc}
    $d
        0x08001be0:    200005e0    ...     DCD    536872416
        0x08001be4:    08001a59    Y...    DCD    134224473
    $t
    i.do_fsm_ramp_down_async
    do_fsm_ramp_down_async
;;;311    
;;;312    void do_fsm_move_end(state_t* s){
;;;313    	s->async_z = 0;
;;;314      LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_DISABLED);
;;;315    
;;;316    	//	MOTOR_Z_BlockPulse();
;;;317    	if (s->sync) {
;;;318    		disable_encoder_ticks(); 										//reset interrupt for encoder ticks, only tacho todo async mode not compatible now
;;;319    		LL_TIM_CC_DisableChannel(TIM4, LL_TIM_CHANNEL_CH3);	// configure TACHO events on channel 3
;;;320    	} else {
;;;321    		LL_TIM_DisableCounter(TIM2); // pause async timer
;;;322    //		LL_TIM_DisableIT_UPDATE(TIM2);
;;;323    	}
;;;324    	s->syncbase = 0; // reset syncbase to stop calling it from timer interrupt
;;;325    
;;;326      MOTOR_Z_Disable(); 									//disable motor later on next tacho event (or after some ticks count?) to completely process last step
;;;327      MOTOR_X_Disable(); 									//disable motor later on next tacho event (or after some ticks count?) to completely process last step
;;;328    //	feed_direction = feed_direction == feed_direction_left ? feed_direction_right : feed_direction_left;
;;;329    	feed_direction = !feed_direction; 					//autochange feed direction
;;;330    	menu_changed = 1; 													//update menu
;;;331    	s->function = do_fsm_wait_sclick;
;;;332    
;;;333    //	z_axis.current_pos = 0;
;;;334    }
;;;335    
;;;336    
;;;337    _Bool z_axis_ramp_up2(state_t* s)
;;;338    {
;;;339    	const fixedptu  set_with_fract = sync_ramp_profile[z_axis.ramp_step] << 24;
;;;340    	if(z_axis.Q824set > set_with_fract || z_axis.ramp_step == sync_ramp_profile_len) { 	// reach desired speed or end of ramp map
;;;341    		s->syncbase->ARR = fixedpt_toint(z_axis.Q824set) - 1; 			// update register ARR
;;;342    //		s->syncbase->EGR |= TIM_EGR_UG;
;;;343    		z_axis.fract_part = fixedpt_fracpart(z_axis.Q824set); 								// save fract part for future use on next step
;;;344    //		z_axis.end_minus_ramp_delta =
;;;345    		return true;
;;;346    	} else {
;;;347    		z_axis.ramp_step++;
;;;348    		s->syncbase->ARR = fixedpt_toint(set_with_fract) - 1; 			// update register ARR
;;;349    //		s->syncbase->EGR |= TIM_EGR_UG;
;;;350    //		z_axis.fract_part = fixedpt_fracpart( set_with_fract ); 						// save fract part for future use on next step
;;;351    	}
;;;352    	return false;
;;;353    }
;;;354    
;;;355    _Bool z_axis_ramp_down2(state_t* s)
;;;356    {
;;;357    	if (z_axis.ramp_step == 0)
;;;358    		return true;
;;;359    //	const fixedptu set_with_fract = ramp2[--z_axis.ramp_step] << 24;
;;;360    //	s->syncbase->ARR = fixedpt_toint(set_with_fract) - 1; // update register ARR
;;;361    
;;;362    	s->syncbase->ARR = sync_ramp_profile[--z_axis.ramp_step];
;;;363    	//	s->syncbase->EGR |= TIM_EGR_UG;
;;;364    //	z_axis.fract_part = fixedpt_fracpart( set_with_fract ); // save fract part for future use on next step
;;;365    	if(z_axis.ramp_step == 0)
;;;366    		return true;
;;;367    	return false;
;;;368    }
;;;369    
;;;370    void z_axis_move2(state_t* s)
;;;371    {
;;;372    	const fixedptu set_with_fract = fixedpt_add(z_axis.Q824set, z_axis.fract_part); // calculate new step delay with fract from previous step
;;;373    	s->syncbase->ARR = fixedpt_toint(set_with_fract) - 1; // update register ARR
;;;374    	s->syncbase->CNT = 0;
;;;375    	s->syncbase->EGR |= TIM_EGR_UG;
;;;376    	z_axis.fract_part = fixedpt_fracpart( set_with_fract ); // save fract part for future use on next step
;;;377    }
;;;378    
;;;379    
;;;380    
;;;381    
;;;382    
;;;383    //------------------------------------ ASYNC block -----------------------------------
;;;384    //------------------------------------ ASYNC block -----------------------------------
;;;385    //------------------------------------ ASYNC block -----------------------------------
;;;386    void do_fsm_ramp_up_async(state_t* s)
;;;387    {
;;;388    //	MOTOR_Z_SetPulse();
;;;389    	z_axis.current_pos++;
;;;390    	const uint8_t z_arr = async_ramp_profile[z_axis.ramp_step];
;;;391    	if(z_arr < slew_speed_period) { 	// reach desired speed
;;;392    		s->z_period = slew_speed_period;
;;;393    		s->function = do_fsm_move_async;
;;;394    	} else {
;;;395    		z_axis.ramp_step++;
;;;396    		s->z_period = z_arr;
;;;397    	}
;;;398    }
;;;399    
;;;400    void do_fsm_move_async(state_t* s)
;;;401    {
;;;402    	// todo precalculate delta: z_axis.end_pos - z_axis.ramp_step
;;;403    	if( ++z_axis.current_pos < ( z_axis.end_pos - z_axis.ramp_step ) ) { // when end_pos is zero, end_pos-ramp_step= 4294967296 - ramp_step, so it will be much more lager then current_pos
;;;404    		s->z_period = slew_speed_period;
;;;405    	} else {
;;;406    		s->function = do_fsm_ramp_down_async;
;;;407    	}
;;;408    }
;;;409    
;;;410    void do_fsm_ramp_down_async(state_t* s)
;;;411    {
        0x08001be8:    b510        ..      PUSH     {r4,lr}
        0x08001bea:    4604        .F      MOV      r4,r0
;;;412    //	MOTOR_Z_SetPulse();
;;;413    	z_axis.current_pos++;
        0x08001bec:    4813        .H      LDR      r0,[pc,#76] ; [0x8001c3c] = 0x200005e0
        0x08001bee:    6800        .h      LDR      r0,[r0,#0]
        0x08001bf0:    1c40        @.      ADDS     r0,r0,#1
        0x08001bf2:    4912        .I      LDR      r1,[pc,#72] ; [0x8001c3c] = 0x200005e0
        0x08001bf4:    6008        .`      STR      r0,[r1,#0]
;;;414    
;;;415    	if (--z_axis.ramp_step != 0) {
        0x08001bf6:    4608        .F      MOV      r0,r1
        0x08001bf8:    f8900028    ..(.    LDRB     r0,[r0,#0x28]
        0x08001bfc:    1e40        @.      SUBS     r0,r0,#1
        0x08001bfe:    b2c0        ..      UXTB     r0,r0
        0x08001c00:    f8810028    ..(.    STRB     r0,[r1,#0x28]
        0x08001c04:    b130        0.      CBZ      r0,0x8001c14 ; do_fsm_ramp_down_async + 44
;;;416    		s->z_period = async_ramp_profile[z_axis.ramp_step];
        0x08001c06:    4608        .F      MOV      r0,r1
        0x08001c08:    f8900028    ..(.    LDRB     r0,[r0,#0x28]
        0x08001c0c:    490c        .I      LDR      r1,[pc,#48] ; [0x8001c40] = 0x20000018
        0x08001c0e:    5c08        .\      LDRB     r0,[r1,r0]
        0x08001c10:    7320         s      STRB     r0,[r4,#0xc]
        0x08001c12:    e011        ..      B        0x8001c38 ; do_fsm_ramp_down_async + 80
;;;417    	} else {
;;;418    // for last step there is no need to wail long, motor can be start to disabled after 145 processor ticks, so with prescaler =145 and more ARR = 1 is enought
;;;419    		s->z_period = 2; 
        0x08001c14:    2002        .       MOVS     r0,#2
        0x08001c16:    7320         s      STRB     r0,[r4,#0xc]
;;;420    		LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_DISABLED); // stop pulse generation on timer
        0x08001c18:    2100        .!      MOVS     r1,#0
        0x08001c1a:    480a        .H      LDR      r0,[pc,#40] ; [0x8001c44] = 0x40000400
        0x08001c1c:    f7feff4f    ..O.    BL       LL_TIM_SetSlaveMode ; 0x8000abe
;;;421    		if(z_axis.end_pos != z_axis.current_pos) {
        0x08001c20:    4806        .H      LDR      r0,[pc,#24] ; [0x8001c3c] = 0x200005e0
        0x08001c22:    6840        @h      LDR      r0,[r0,#4]
        0x08001c24:    4905        .I      LDR      r1,[pc,#20] ; [0x8001c3c] = 0x200005e0
        0x08001c26:    6809        .h      LDR      r1,[r1,#0]
        0x08001c28:    4288        .B      CMP      r0,r1
        0x08001c2a:    d003        ..      BEQ      0x8001c34 ; do_fsm_ramp_down_async + 76
;;;422    			z_axis.end_pos = z_axis.current_pos;
        0x08001c2c:    4803        .H      LDR      r0,[pc,#12] ; [0x8001c3c] = 0x200005e0
        0x08001c2e:    6800        .h      LDR      r0,[r0,#0]
        0x08001c30:    4902        .I      LDR      r1,[pc,#8] ; [0x8001c3c] = 0x200005e0
        0x08001c32:    6048        H`      STR      r0,[r1,#4]
;;;423    		}
;;;424    		s->function = do_fsm_move_end;
        0x08001c34:    4804        .H      LDR      r0,[pc,#16] ; [0x8001c48] = 0x8001a59
        0x08001c36:    6020         `      STR      r0,[r4,#0]
;;;425    	}
;;;426    }
        0x08001c38:    bd10        ..      POP      {r4,pc}
    $d
        0x08001c3a:    0000        ..      DCW    0
        0x08001c3c:    200005e0    ...     DCD    536872416
        0x08001c40:    20000018    ...     DCD    536870936
        0x08001c44:    40000400    ...@    DCD    1073742848
        0x08001c48:    08001a59    Y...    DCD    134224473
    $t
    i.do_fsm_ramp_up
    do_fsm_ramp_up
;;; .\..\Src\fsm.c (262)
        0x08001c4c:    b510        ..      PUSH     {r4,lr}
        0x08001c4e:    4604        .F      MOV      r4,r0
;;;263    	z_axis.current_pos++;
        0x08001c50:    4805        .H      LDR      r0,[pc,#20] ; [0x8001c68] = 0x200005e0
        0x08001c52:    6800        .h      LDR      r0,[r0,#0]
        0x08001c54:    1c40        @.      ADDS     r0,r0,#1
        0x08001c56:    4904        .I      LDR      r1,[pc,#16] ; [0x8001c68] = 0x200005e0
        0x08001c58:    6008        .`      STR      r0,[r1,#0]
;;;264    	if(z_axis_ramp_up2(s)) {
        0x08001c5a:    4620         F      MOV      r0,r4
        0x08001c5c:    f000fa74    ..t.    BL       z_axis_ramp_up2 ; 0x8002148
        0x08001c60:    b108        ..      CBZ      r0,0x8001c66 ; do_fsm_ramp_up + 26
;;;265    		s->function = do_fsm_move;
        0x08001c62:    4802        .H      LDR      r0,[pc,#8] ; [0x8001c6c] = 0x80019d1
        0x08001c64:    6020         `      STR      r0,[r4,#0]
;;;266    	}
;;;267    }
        0x08001c66:    bd10        ..      POP      {r4,pc}
    $d
        0x08001c68:    200005e0    ...     DCD    536872416
        0x08001c6c:    080019d1    ....    DCD    134224337
    $t
    i.do_fsm_ramp_up_async
    do_fsm_ramp_up_async
;;;268    
;;;269    void do_fsm_move(state_t* s)
;;;270    {
;;;271    //	if(s->spindle_dir)	z_axis.current_pos++;
;;;272    //	else z_axis.current_pos--;
;;;273    	if( ++z_axis.current_pos <= ( z_axis.end_pos - z_axis.ramp_step ) ) { // when end_pos is zero, end_pos-ramp_step= 4294967296 - ramp_step, so it will be much more lager then current_pos
;;;274    		z_axis_move2(s);
;;;275    	} else {
;;;276    		if(z_axis_ramp_down2(s)) {
;;;277    			if(z_axis.end_pos != z_axis.current_pos) {
;;;278    				z_axis.end_pos = z_axis.current_pos;
;;;279    			}
;;;280    			s->function = do_fsm_move_end;
;;;281    		}
;;;282    		s->function = do_fsm_ramp_down;
;;;283    	}
;;;284    }
;;;285    
;;;286    void do_long_press_end_callback(state_t* s)          // direct movement: first pass, thread recording: long press release callback
;;;287    {
;;;288    	// для 1/2 микрошага нужно что бы общее количество шагов в цикле резьбы было кратно 2,(для 1/4 кратно 4 и тп).
;;;289    	// это нужно для того что бы в конце шаговый мотор остановился на одном из двухсот устойчивых шагов,
;;;290    	// не перескакивая на соседние шаги при потере питания.
;;;291    	if(z_axis.end_pos == 0) //s->sync?
;;;292    		z_axis.end_pos = ( z_axis.ramp_step + z_axis.current_pos ) | (step_divider - 1);
;;;293    	s->function = do_fsm_move;
;;;294    	do_fsm_move(s);
;;;295    }
;;;296    
;;;297    
;;;298    void do_fsm_ramp_down(state_t* s)
;;;299    {
;;;300    //	if(s->spindle_dir)	
;;;301    		z_axis.current_pos++;
;;;302    //	else 
;;;303    //		z_axis.current_pos--;
;;;304    	if(z_axis_ramp_down2(s)) {
;;;305    		if(z_axis.end_pos != z_axis.current_pos) {
;;;306    			z_axis.end_pos = z_axis.current_pos;
;;;307    		}
;;;308    		s->function = do_fsm_move_end;
;;;309    	}
;;;310    }
;;;311    
;;;312    void do_fsm_move_end(state_t* s){
;;;313    	s->async_z = 0;
;;;314      LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_DISABLED);
;;;315    
;;;316    	//	MOTOR_Z_BlockPulse();
;;;317    	if (s->sync) {
;;;318    		disable_encoder_ticks(); 										//reset interrupt for encoder ticks, only tacho todo async mode not compatible now
;;;319    		LL_TIM_CC_DisableChannel(TIM4, LL_TIM_CHANNEL_CH3);	// configure TACHO events on channel 3
;;;320    	} else {
;;;321    		LL_TIM_DisableCounter(TIM2); // pause async timer
;;;322    //		LL_TIM_DisableIT_UPDATE(TIM2);
;;;323    	}
;;;324    	s->syncbase = 0; // reset syncbase to stop calling it from timer interrupt
;;;325    
;;;326      MOTOR_Z_Disable(); 									//disable motor later on next tacho event (or after some ticks count?) to completely process last step
;;;327      MOTOR_X_Disable(); 									//disable motor later on next tacho event (or after some ticks count?) to completely process last step
;;;328    //	feed_direction = feed_direction == feed_direction_left ? feed_direction_right : feed_direction_left;
;;;329    	feed_direction = !feed_direction; 					//autochange feed direction
;;;330    	menu_changed = 1; 													//update menu
;;;331    	s->function = do_fsm_wait_sclick;
;;;332    
;;;333    //	z_axis.current_pos = 0;
;;;334    }
;;;335    
;;;336    
;;;337    _Bool z_axis_ramp_up2(state_t* s)
;;;338    {
;;;339    	const fixedptu  set_with_fract = sync_ramp_profile[z_axis.ramp_step] << 24;
;;;340    	if(z_axis.Q824set > set_with_fract || z_axis.ramp_step == sync_ramp_profile_len) { 	// reach desired speed or end of ramp map
;;;341    		s->syncbase->ARR = fixedpt_toint(z_axis.Q824set) - 1; 			// update register ARR
;;;342    //		s->syncbase->EGR |= TIM_EGR_UG;
;;;343    		z_axis.fract_part = fixedpt_fracpart(z_axis.Q824set); 								// save fract part for future use on next step
;;;344    //		z_axis.end_minus_ramp_delta =
;;;345    		return true;
;;;346    	} else {
;;;347    		z_axis.ramp_step++;
;;;348    		s->syncbase->ARR = fixedpt_toint(set_with_fract) - 1; 			// update register ARR
;;;349    //		s->syncbase->EGR |= TIM_EGR_UG;
;;;350    //		z_axis.fract_part = fixedpt_fracpart( set_with_fract ); 						// save fract part for future use on next step
;;;351    	}
;;;352    	return false;
;;;353    }
;;;354    
;;;355    _Bool z_axis_ramp_down2(state_t* s)
;;;356    {
;;;357    	if (z_axis.ramp_step == 0)
;;;358    		return true;
;;;359    //	const fixedptu set_with_fract = ramp2[--z_axis.ramp_step] << 24;
;;;360    //	s->syncbase->ARR = fixedpt_toint(set_with_fract) - 1; // update register ARR
;;;361    
;;;362    	s->syncbase->ARR = sync_ramp_profile[--z_axis.ramp_step];
;;;363    	//	s->syncbase->EGR |= TIM_EGR_UG;
;;;364    //	z_axis.fract_part = fixedpt_fracpart( set_with_fract ); // save fract part for future use on next step
;;;365    	if(z_axis.ramp_step == 0)
;;;366    		return true;
;;;367    	return false;
;;;368    }
;;;369    
;;;370    void z_axis_move2(state_t* s)
;;;371    {
;;;372    	const fixedptu set_with_fract = fixedpt_add(z_axis.Q824set, z_axis.fract_part); // calculate new step delay with fract from previous step
;;;373    	s->syncbase->ARR = fixedpt_toint(set_with_fract) - 1; // update register ARR
;;;374    	s->syncbase->CNT = 0;
;;;375    	s->syncbase->EGR |= TIM_EGR_UG;
;;;376    	z_axis.fract_part = fixedpt_fracpart( set_with_fract ); // save fract part for future use on next step
;;;377    }
;;;378    
;;;379    
;;;380    
;;;381    
;;;382    
;;;383    //------------------------------------ ASYNC block -----------------------------------
;;;384    //------------------------------------ ASYNC block -----------------------------------
;;;385    //------------------------------------ ASYNC block -----------------------------------
;;;386    void do_fsm_ramp_up_async(state_t* s)
;;;387    {
;;;388    //	MOTOR_Z_SetPulse();
;;;389    	z_axis.current_pos++;
        0x08001c70:    4a0c        .J      LDR      r2,[pc,#48] ; [0x8001ca4] = 0x200005e0
        0x08001c72:    6812        .h      LDR      r2,[r2,#0]
        0x08001c74:    1c52        R.      ADDS     r2,r2,#1
        0x08001c76:    4b0b        .K      LDR      r3,[pc,#44] ; [0x8001ca4] = 0x200005e0
        0x08001c78:    601a        .`      STR      r2,[r3,#0]
;;;390    	const uint8_t z_arr = async_ramp_profile[z_axis.ramp_step];
        0x08001c7a:    461a        .F      MOV      r2,r3
        0x08001c7c:    f8922028    ..(     LDRB     r2,[r2,#0x28]
        0x08001c80:    4b09        .K      LDR      r3,[pc,#36] ; [0x8001ca8] = 0x20000018
        0x08001c82:    5c99        .\      LDRB     r1,[r3,r2]
;;;391    	if(z_arr < slew_speed_period) { 	// reach desired speed
        0x08001c84:    2932        2)      CMP      r1,#0x32
        0x08001c86:    da04        ..      BGE      0x8001c92 ; do_fsm_ramp_up_async + 34
;;;392    		s->z_period = slew_speed_period;
        0x08001c88:    2232        2"      MOVS     r2,#0x32
        0x08001c8a:    7302        .s      STRB     r2,[r0,#0xc]
;;;393    		s->function = do_fsm_move_async;
        0x08001c8c:    4a07        .J      LDR      r2,[pc,#28] ; [0x8001cac] = 0x8001a29
        0x08001c8e:    6002        .`      STR      r2,[r0,#0]
        0x08001c90:    e007        ..      B        0x8001ca2 ; do_fsm_ramp_up_async + 50
;;;394    	} else {
;;;395    		z_axis.ramp_step++;
        0x08001c92:    4a04        .J      LDR      r2,[pc,#16] ; [0x8001ca4] = 0x200005e0
        0x08001c94:    f8922028    ..(     LDRB     r2,[r2,#0x28]
        0x08001c98:    1c52        R.      ADDS     r2,r2,#1
        0x08001c9a:    4b02        .K      LDR      r3,[pc,#8] ; [0x8001ca4] = 0x200005e0
        0x08001c9c:    f8832028    ..(     STRB     r2,[r3,#0x28]
;;;396    		s->z_period = z_arr;
        0x08001ca0:    7301        .s      STRB     r1,[r0,#0xc]
;;;397    	}
;;;398    }
        0x08001ca2:    4770        pG      BX       lr
    $d
        0x08001ca4:    200005e0    ...     DCD    536872416
        0x08001ca8:    20000018    ...     DCD    536870936
        0x08001cac:    08001a29    )...    DCD    134224425
    $t
    i.do_fsm_wait_sclick
    do_fsm_wait_sclick
;;; .\..\Src\fsm.c (187)
        0x08001cb0:    4770        pG      BX       lr
        0x08001cb2:    0000        ..      MOVS     r0,r0
    i.do_long_press_end_callback
    do_long_press_end_callback
;;;188    
;;;189    void z_move(uint32_t direction, uint32_t length, bool sync, bool autostart){
;;;190    	MOTOR_X_Enable();
;;;191    	MOTOR_Z_Enable(); // time to wakeup motor from sleep is quite high(1.7ms), so enable it as soon as possible
;;;192    
;;;193    	if(direction == feed_direction_left) {
;;;194    		feed_direction = feed_direction_left;
;;;195    		MOTOR_Z_Reverse();
;;;196    		MOTOR_X_Reverse();
;;;197    	} else {
;;;198    		feed_direction = feed_direction_right;
;;;199    		MOTOR_Z_Forward();
;;;200    		MOTOR_X_Forward();
;;;201    	}
;;;202    	LL_mDelay(2);
;;;203    
;;;204    	state.sync = sync;
;;;205    	if(sync){
;;;206    		state.main_feed_direction = feed_direction;
;;;207    	}
;;;208    	
;;;209    	z_axis.current_pos = 0;
;;;210    	z_axis.end_pos = length;
;;;211    	if(z_axis.end_pos > 0){
;;;212    		z_axis.end_pos &= 0xFFFFFFFF - step_divider + 1;
;;;213    		z_axis.end_pos |= step_divider; // to make sure that we'll not stop between full steps
;;;214    	} else {
;;;215    		state.sync = true;
;;;216    	}
;;;217    	
;;;218    	do_fsm_move_start(&state);
;;;219    
;;;220    }
;;;221    
;;;222    //---------------------------------------------------------------------------------------------
;;;223    void do_fsm_move_start(state_t* s){
;;;224    	if(s->sync && !s->f_tacho){
;;;225    		s->function = do_fsm_move_start;// return here from interrupt when TACHO event
;;;226    		// enable and wait tacho event on spindle encoder
;;;227    		LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH3);	// configure TACHO events on channel 3
;;;228    		return;
;;;229    	}
;;;230    
;;;231    	if(s->f_tacho || !s->sync) { // if tacho event or we going to start back feed to initial position with async clock
;;;232    		LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_DISABLED);
;;;233    		if(s->sync && s->f_tacho) {
;;;234    			s->function = do_fsm_ramp_up;
;;;235    			s->async_z = 0;
;;;236    			s->syncbase = TIM4; 									// sync with spindle
;;;237    
;;;238    			LL_TIM_SetTriggerInput(TIM3, LL_TIM_TS_ITR3); 				//trigger by spindle encoder timer TIM4(sync mode)
;;;239    
;;;240    // disable TACHO events, we dont need'em until next start			
;;;241    			LL_TIM_CC_DisableChannel(TIM4, LL_TIM_CHANNEL_CH3);	// configure TACHO events on channel 3
;;;242    			enable_encoder_ticks(); 									// enable thread specific interrupt controlled by Q824set
;;;243    		} else {
;;;244    			s->function = do_fsm_ramp_up_async;
;;;245    			s->async_z = 1;
;;;246    			s->syncbase = TIM2; 									// sync with internal clock source(virtual spindle, "async" to main spindle)
;;;247    
;;;248    			LL_TIM_SetTriggerInput(TIM3, LL_TIM_TS_ITR1); 				//trigger by TIM2(async mode)
;;;249    			LL_TIM_EnableCounter(TIM2); /* Enable counter */
;;;250    		}
;;;251    
;;;252    		MOTOR_Z_AllowPulse();
;;;253    		MOTOR_X_AllowPulse();
;;;254    		LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_TRIGGER);
;;;255    		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH3);
;;;256    		s->syncbase->ARR = 1; 					// start stepper motor ramp up procedure immediately after tacho event
;;;257    		LL_TIM_GenerateEvent_UPDATE(s->syncbase); /* Force update generation */
;;;258    	}	
;;;259    }
;;;260    
;;;261    void do_fsm_ramp_up(state_t* s)
;;;262    {
;;;263    	z_axis.current_pos++;
;;;264    	if(z_axis_ramp_up2(s)) {
;;;265    		s->function = do_fsm_move;
;;;266    	}
;;;267    }
;;;268    
;;;269    void do_fsm_move(state_t* s)
;;;270    {
;;;271    //	if(s->spindle_dir)	z_axis.current_pos++;
;;;272    //	else z_axis.current_pos--;
;;;273    	if( ++z_axis.current_pos <= ( z_axis.end_pos - z_axis.ramp_step ) ) { // when end_pos is zero, end_pos-ramp_step= 4294967296 - ramp_step, so it will be much more lager then current_pos
;;;274    		z_axis_move2(s);
;;;275    	} else {
;;;276    		if(z_axis_ramp_down2(s)) {
;;;277    			if(z_axis.end_pos != z_axis.current_pos) {
;;;278    				z_axis.end_pos = z_axis.current_pos;
;;;279    			}
;;;280    			s->function = do_fsm_move_end;
;;;281    		}
;;;282    		s->function = do_fsm_ramp_down;
;;;283    	}
;;;284    }
;;;285    
;;;286    void do_long_press_end_callback(state_t* s)          // direct movement: first pass, thread recording: long press release callback
;;;287    {
        0x08001cb4:    b510        ..      PUSH     {r4,lr}
        0x08001cb6:    4604        .F      MOV      r4,r0
;;;288    	// для 1/2 микрошага нужно что бы общее количество шагов в цикле резьбы было кратно 2,(для 1/4 кратно 4 и тп).
;;;289    	// это нужно для того что бы в конце шаговый мотор остановился на одном из двухсот устойчивых шагов,
;;;290    	// не перескакивая на соседние шаги при потере питания.
;;;291    	if(z_axis.end_pos == 0) //s->sync?
        0x08001cb8:    4809        .H      LDR      r0,[pc,#36] ; [0x8001ce0] = 0x200005e0
        0x08001cba:    6840        @h      LDR      r0,[r0,#4]
        0x08001cbc:    b948        H.      CBNZ     r0,0x8001cd2 ; do_long_press_end_callback + 30
;;;292    		z_axis.end_pos = ( z_axis.ramp_step + z_axis.current_pos ) | (step_divider - 1);
        0x08001cbe:    4808        .H      LDR      r0,[pc,#32] ; [0x8001ce0] = 0x200005e0
        0x08001cc0:    f8900028    ..(.    LDRB     r0,[r0,#0x28]
        0x08001cc4:    4906        .I      LDR      r1,[pc,#24] ; [0x8001ce0] = 0x200005e0
        0x08001cc6:    6809        .h      LDR      r1,[r1,#0]
        0x08001cc8:    4408        .D      ADD      r0,r0,r1
        0x08001cca:    f0400001    @...    ORR      r0,r0,#1
        0x08001cce:    4904        .I      LDR      r1,[pc,#16] ; [0x8001ce0] = 0x200005e0
        0x08001cd0:    6048        H`      STR      r0,[r1,#4]
;;;293    	s->function = do_fsm_move;
        0x08001cd2:    4804        .H      LDR      r0,[pc,#16] ; [0x8001ce4] = 0x80019d1
        0x08001cd4:    6020         `      STR      r0,[r4,#0]
;;;294    	do_fsm_move(s);
        0x08001cd6:    4620         F      MOV      r0,r4
        0x08001cd8:    f7fffe7a    ..z.    BL       do_fsm_move ; 0x80019d0
;;;295    }
        0x08001cdc:    bd10        ..      POP      {r4,pc}
    $d
        0x08001cde:    0000        ..      DCW    0
        0x08001ce0:    200005e0    ...     DCD    536872416
        0x08001ce4:    080019d1    ....    DCD    134224337
    $t
    i.init_buttons
    init_buttons
;;; .\..\Src\buttons.c
;;;11     void init_buttons(void){
        0x08001ce8:    b510        ..      PUSH     {r4,lr}
;;;12     
;;;13     	bt[0].clk_mode = 10;
        0x08001cea:    200a        .       MOVS     r0,#0xa
        0x08001cec:    4906        .I      LDR      r1,[pc,#24] ; [0x8001d08] = 0x200004a8
        0x08001cee:    61c8        .a      STR      r0,[r1,#0x1c]
;;;14     	bt[0].GPIOx = BUTTON_1_GPIO_Port;
        0x08001cf0:    4806        .H      LDR      r0,[pc,#24] ; [0x8001d0c] = 0x40010800
        0x08001cf2:    6008        .`      STR      r0,[r1,#0]
;;;15     	bt[0].button_pin = BUTTON_1_Pin;
        0x08001cf4:    4806        .H      LDR      r0,[pc,#24] ; [0x8001d10] = 0x4010001
        0x08001cf6:    6048        H`      STR      r0,[r1,#4]
;;;16     	bt[0].buttons = bt[0].buttons_mask = LL_GPIO_IsInputPinSet(bt[0].GPIOx,BUTTON_1_Pin); //bt[0].GPIOx->IDR & bt[0].button_pin;
        0x08001cf8:    6808        .h      LDR      r0,[r1,#0]
        0x08001cfa:    4905        .I      LDR      r1,[pc,#20] ; [0x8001d10] = 0x4010001
        0x08001cfc:    f7fefb99    ....    BL       LL_GPIO_IsInputPinSet ; 0x8000432
        0x08001d00:    4901        .I      LDR      r1,[pc,#4] ; [0x8001d08] = 0x200004a8
        0x08001d02:    6188        .a      STR      r0,[r1,#0x18]
        0x08001d04:    60c8        .`      STR      r0,[r1,#0xc]
;;;17     	return;
;;;18     	bt[1] = bt[0];
;;;19     	bt[1].clk_mode = 10;
;;;20     	bt[1].GPIOx = BUTTON_2_GPIO_Port;
;;;21     	bt[1].button_pin = BUTTON_2_Pin;
;;;22     	bt[1].buttons = bt[1].buttons_mask = bt[1].GPIOx->IDR & bt[1].button_pin;
;;;23     
;;;24     	if(device_ready == 1){
;;;25     //		read_sample_i2c(&i2c_device_logging.sample[i2c_device_logging.index]);		
;;;26     		reqest_sample_i2c_dma();
;;;27     //		while(ubTransferComplete == 0){
;;;28     //		}
;;;29     	}
;;;30     	bt[2].clk_mode = 10;
;;;31     	bt[2].button_pin = 0x02; // button_c code
;;;32     	bt[2].buttons = bt[2].buttons_mask = dma_data[5]&bt[2].button_pin; // = bt[1].GPIOx->IDR & bt[1].button_pin;
;;;33     	
;;;34     	bt[3].clk_mode = 10;
;;;35     	bt[3].button_pin = 0x01; // button_c code
;;;36     	bt[3].buttons = bt[3].buttons_mask = dma_data[5]&bt[3].button_pin; // = bt[1].GPIOx->IDR & bt[1].button_pin;
;;;37     
;;;38     }
        0x08001d06:    bd10        ..      POP      {r4,pc}
    $d
        0x08001d08:    200004a8    ...     DCD    536872104
        0x08001d0c:    40010800    ...@    DCD    1073809408
        0x08001d10:    04010001    ....    DCD    67174401
    $t
    i.main
    main
;;; .\../Src/main.c
;;;179    	rs = 11;
        0x08001d14:    200b        .       MOVS     r0,#0xb
        0x08001d16:    494a        JI      LDR      r1,[pc,#296] ; [0x8001e40] = 0x2000007c
        0x08001d18:    6008        .`      STR      r0,[r1,#0]
;;;180    //	z_axis.end_pos = 50;
;;;181    //	z_axis.Q824set = Thread_Info[Menu_Step].Q824;
;;;182    
;;;183    //	state.main_feed_direction = 1;
;;;184    
;;;185    	//	do_fsm_move_start(&state);
;;;186    	//	do_fsm_wait_tacho(&state);
;;;187    	
;;;188    //	TIM4_IRQHandler();
;;;189      /* USER CODE END 1 */
;;;190    
;;;191      /* MCU Configuration----------------------------------------------------------*/
;;;192    
;;;193      /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
;;;194      LL_Init();
        0x08001d1a:    f7fefc2d    ..-.    BL       LL_Init ; 0x8000578
;;;195    
;;;196      /* USER CODE BEGIN Init */
;;;197      /* USER CODE END Init */
;;;198    
;;;199      /* Configure the system clock */
;;;200      SystemClock_Config();
        0x08001d1e:    f7fffbe5    ....    BL       SystemClock_Config ; 0x80014ec
;;;201    
;;;202      /* USER CODE BEGIN SysInit */
;;;203    	LL_SYSTICK_EnableIT();
        0x08001d22:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_cortex.h
;;;291      SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
        0x08001d24:    f04f20e0    O..     MOV      r0,#0xe000e000
        0x08001d28:    6900        .i      LDR      r0,[r0,#0x10]
        0x08001d2a:    f0400002    @...    ORR      r0,r0,#2
        0x08001d2e:    f04f21e0    O..!    MOV      r1,#0xe000e000
        0x08001d32:    6108        .a      STR      r0,[r1,#0x10]
;;;292    }
        0x08001d34:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;207      MX_GPIO_Init();
        0x08001d36:    f7feff0f    ....    BL       MX_GPIO_Init ; 0x8000b58
;;;208      MX_DMA_Init();
        0x08001d3a:    f7fefeed    ....    BL       MX_DMA_Init ; 0x8000b18
;;;209      MX_I2C2_Init();
        0x08001d3e:    f7feff81    ....    BL       MX_I2C2_Init ; 0x8000c44
;;;210      MX_TIM1_Init();
        0x08001d42:    f7fff843    ..C.    BL       MX_TIM1_Init ; 0x8000dcc
;;;211      MX_TIM2_Init();
        0x08001d46:    f7fff89f    ....    BL       MX_TIM2_Init ; 0x8000e88
;;;212      MX_TIM3_Init();
        0x08001d4a:    f7fff8eb    ....    BL       MX_TIM3_Init ; 0x8000f24
;;;213      MX_TIM4_Init();
        0x08001d4e:    f7fff973    ..s.    BL       MX_TIM4_Init ; 0x8001038
;;;214      /* USER CODE BEGIN 2 */
;;;215    	if(LL_GPIO_IsInputPinSet(BUTTON_1_GPIO_Port, BUTTON_1_Pin)){
        0x08001d52:    483c        <H      LDR      r0,[pc,#240] ; [0x8001e44] = 0x4010001
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h
;;;741      return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
        0x08001d54:    493c        <I      LDR      r1,[pc,#240] ; [0x8001e48] = 0x40010800
        0x08001d56:    6889        .h      LDR      r1,[r1,#8]
        0x08001d58:    f3c0220f    ..."    UBFX     r2,r0,#8,#16
        0x08001d5c:    4011        .@      ANDS     r1,r1,r2
        0x08001d5e:    f3c0220f    ..."    UBFX     r2,r0,#8,#16
        0x08001d62:    4291        .B      CMP      r1,r2
        0x08001d64:    d101        ..      BNE      0x8001d6a ; main + 86
        0x08001d66:    2101        .!      MOVS     r1,#1
        0x08001d68:    e000        ..      B        0x8001d6c ; main + 88
        0x08001d6a:    2100        .!      MOVS     r1,#0
        0x08001d6c:    b111        ..      CBZ      r1,0x8001d74 ; main + 96
;;; .\../Src/main.c
;;;216    		demo = true;
        0x08001d6e:    2001        .       MOVS     r0,#1
        0x08001d70:    4936        6I      LDR      r1,[pc,#216] ; [0x8001e4c] = 0x20000041
        0x08001d72:    7008        .p      STRB     r0,[r1,#0]
;;;217    	}
;;;218    	MOTOR_Z_Disable();
        0x08001d74:    f2402002    @..     MOV      r0,#0x202
        0x08001d78:    4935        5I      LDR      r1,[pc,#212] ; [0x8001e50] = 0x40010c14
        0x08001d7a:    6008        .`      STR      r0,[r1,#0]
;;;219    	MOTOR_X_Disable();
        0x08001d7c:    4932        2I      LDR      r1,[pc,#200] ; [0x8001e48] = 0x40010800
        0x08001d7e:    3114        .1      ADDS     r1,r1,#0x14
        0x08001d80:    6008        .`      STR      r0,[r1,#0]
;;;220    // инициализация дисплея
;;;221    #ifndef _SIMU
;;;222    	Activate_I2C_Master();
;;;223    	init_screen(I2C2);
;;;224    //	update_screen();
;;;225    //	i2c_device_init(I2C2);
;;;226    	LL_mDelay(250);
;;;227    #endif
;;;228    	init_buttons();
        0x08001d82:    f7ffffb1    ....    BL       init_buttons ; 0x8001ce8
;;;229      /* USER CODE END 2 */
;;;230    
;;;231      /* Infinite loop */
;;;232      /* USER CODE BEGIN WHILE */
;;;233    
;;;234    
;;;235    ///// from STM examples:
;;;236    //  /**************************/
;;;237    //  /* Start pulse generation */
;;;238    //  /**************************/
;;;239    //  /* Enable channel 1 */
;;;240      LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH3);
        0x08001d86:    f44f7080    O..p    MOV      r0,#0x100
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;1490     SET_BIT(TIMx->CCER, Channels);
        0x08001d8a:    4932        2I      LDR      r1,[pc,#200] ; [0x8001e54] = 0x40000400
        0x08001d8c:    6a09        .j      LDR      r1,[r1,#0x20]
        0x08001d8e:    4301        .C      ORRS     r1,r1,r0
        0x08001d90:    4a30        0J      LDR      r2,[pc,#192] ; [0x8001e54] = 0x40000400
        0x08001d92:    6211        .b      STR      r1,[r2,#0x20]
;;;1491   }
        0x08001d94:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;253      LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_DISABLED);
        0x08001d96:    2100        .!      MOVS     r1,#0
        0x08001d98:    4610        .F      MOV      r0,r2
        0x08001d9a:    f7fefe96    ....    BL       LL_TIM_SetSlaveMode ; 0x8000aca
;;;254    
;;;255    
;;;256    
;;;257    
;;;258    //  LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_DISABLED);
;;;259    //  LL_TIM_SetTriggerInput(TIM3, LL_TIM_TS_ITR1); 				//trigger by TIM2(async mode)
;;;260    //  LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_TRIGGER);
;;;261    
;;;262    //  LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_DISABLED);
;;;263    //  LL_TIM_SetTriggerInput(TIM3, LL_TIM_TS_ITR3); 				//trigger by spindle encoder timer TIM4(sync mode)
;;;264    //  LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_TRIGGER);
;;;265    
;;;266    
;;;267    //	MOTOR_X_BlockPulse(); // LL_TIM_OC_SetCompareCH3(TIM3, 0);
;;;268    //	MOTOR_Z_BlockPulse(); // LL_TIM_OC_SetCompareCH3(TIM3, 0);
;;;269    
;;;270    //	LL_TIM_EnableCounter(TIM3);
;;;271    
;;;272    
;;;273    //TIM3->SR = 0;
;;;274    //TIM3->EGR |= TIM_EGR_UG;
;;;275    //		LL_TIM_GenerateEvent_UPDATE(TIM3); /* Force update generation */
;;;276    
;;;277    //  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH1);
;;;278    	//GPIOB->BSRR
;;;279    //	LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_0);
;;;280    //	LL_mDelay(50);
;;;281    //	LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_0);
;;;282    //	LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH3);
;;;283    	
;;;284    //	LL_TIM_EnableAllOutputs(TIM3);
;;;285    //MOTOR_X_AllowPulse();
;;;286    //MOTOR_Z_AllowPulse();
;;;287    	
;;;288    //	LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH3);	// configure TACHO events on channel 3
;;;289      LL_TIM_EnableCounter(TIM4); 												//Enable timer 4
        0x08001d9e:    482e        .H      LDR      r0,[pc,#184] ; [0x8001e58] = 0x40000800
        0x08001da0:    f7fefcd1    ....    BL       LL_TIM_EnableCounter ; 0x8000746
;;;290      LL_TIM_EnableIT_CC3(TIM4);													// enable interrupts for TACHO events from encoder
        0x08001da4:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;3299     SET_BIT(TIMx->DIER, TIM_DIER_CC3IE);
        0x08001da6:    482c        ,H      LDR      r0,[pc,#176] ; [0x8001e58] = 0x40000800
        0x08001da8:    68c0        .h      LDR      r0,[r0,#0xc]
        0x08001daa:    f0400008    @...    ORR      r0,r0,#8
        0x08001dae:    492a        *I      LDR      r1,[pc,#168] ; [0x8001e58] = 0x40000800
        0x08001db0:    60c8        .`      STR      r0,[r1,#0xc]
;;;3300   }
        0x08001db2:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;292    	TIM4->SR = 0; 																			// reset interrup flags
        0x08001db4:    2000        .       MOVS     r0,#0
        0x08001db6:    4928        (I      LDR      r1,[pc,#160] ; [0x8001e58] = 0x40000800
        0x08001db8:    3110        .1      ADDS     r1,r1,#0x10
        0x08001dba:    6008        .`      STR      r0,[r1,#0]
;;;293    
;;;294    	LL_TIM_EnableIT_UPDATE(TIM1);
        0x08001dbc:    4827        'H      LDR      r0,[pc,#156] ; [0x8001e5c] = 0x40012c00
        0x08001dbe:    f7fefcc7    ....    BL       LL_TIM_EnableIT_UPDATE ; 0x8000750
;;;295    	LL_TIM_EnableIT_UPDATE(TIM2);
        0x08001dc2:    f04f4080    O..@    MOV      r0,#0x40000000
        0x08001dc6:    f7fefcc3    ....    BL       LL_TIM_EnableIT_UPDATE ; 0x8000750
;;;296    	LL_TIM_EnableCounter(TIM2);
        0x08001dca:    f04f4080    O..@    MOV      r0,#0x40000000
        0x08001dce:    f7fefcba    ....    BL       LL_TIM_EnableCounter ; 0x8000746
;;;297    	
;;;298    //	do_fsm_move_start(&state);
;;;299    
;;;300    	
;;;301      /* Enable counter */
;;;302    //  LL_TIM_EnableCounter(TIM2);
;;;303      /* Force update generation */
;;;304    //  LL_TIM_GenerateEvent_UPDATE(TIM2);
;;;305    
;;;306    // init buttons
;;;307    	LL_mDelay(20);
        0x08001dd2:    2014        .       MOVS     r0,#0x14
        0x08001dd4:    f7fefe8b    ....    BL       LL_mDelay ; 0x8000aee
;;;308    	do_fsm_menu(&state);
        0x08001dd8:    4821        !H      LDR      r0,[pc,#132] ; [0x8001e60] = 0x20000044
        0x08001dda:    f7fffcf7    ....    BL       do_fsm_menu ; 0x80017cc
;;;309    	LED_GPIO_Port->BSRR = LED_Pin; // led off
        0x08001dde:    4821        !H      LDR      r0,[pc,#132] ; [0x8001e64] = 0x4200020
        0x08001de0:    4921        !I      LDR      r1,[pc,#132] ; [0x8001e68] = 0x40011000
        0x08001de2:    6108        .a      STR      r0,[r1,#0x10]
;;;310    	while (1) {
        0x08001de4:    e02b        +.      B        0x8001e3e ; main + 298
;;;311      /* USER CODE END WHILE */
;;;312    
;;;313      /* USER CODE BEGIN 3 */
;;;314    #ifndef _SIMU		
;;;315    //		reqest_sample_i2c_dma(); // init reqest to joystick by DMA, when process_button complete i2c done its job
;;;316    #endif		
;;;317    //		read_sample_i2c(&i2c_device_logging.sample[i2c_device_logging.index]);
;;;318    		process_button();
        0x08001de6:    f000f847    ..G.    BL       process_button ; 0x8001e78
;;;319    //		process_joystick();
;;;320    //		read_sample_i2c(&i2c_device_logging.sample[i2c_device_logging.index]);
;;;321    
;;;322    
;;;323    //		uint8_t level = Thread_Info[Menu_Step].level;
;;;324    
;;;325    //		if(auto_mode == true) {
;;;326    //			if ( auto_mode_delay == 0 ) {
;;;327    //				buttons_flag_set = single_click_Msk; //
;;;328    //			}
;;;329    //		}
;;;330    
;;;331    		if(buttons_flag_set) {
        0x08001dea:    4820         H      LDR      r0,[pc,#128] ; [0x8001e6c] = 0x200005dc
        0x08001dec:    6800        .h      LDR      r0,[r0,#0]
        0x08001dee:    b128        (.      CBZ      r0,0x8001dfc ; main + 232
;;;332    			do_fsm_menu(&state);
        0x08001df0:    481b        .H      LDR      r0,[pc,#108] ; [0x8001e60] = 0x20000044
        0x08001df2:    f7fffceb    ....    BL       do_fsm_menu ; 0x80017cc
;;;333    			buttons_flag_set = 0; // reset button flags
        0x08001df6:    2000        .       MOVS     r0,#0
        0x08001df8:    491c        .I      LDR      r1,[pc,#112] ; [0x8001e6c] = 0x200005dc
        0x08001dfa:    6008        .`      STR      r0,[r1,#0]
;;;334    		}
;;;335    
;;;336    		if(z_axis.ramp_step != rs) {
        0x08001dfc:    481c        .H      LDR      r0,[pc,#112] ; [0x8001e70] = 0x200005e0
        0x08001dfe:    f8900028    ..(.    LDRB     r0,[r0,#0x28]
        0x08001e02:    490f        .I      LDR      r1,[pc,#60] ; [0x8001e40] = 0x2000007c
        0x08001e04:    6809        .h      LDR      r1,[r1,#0]
        0x08001e06:    4288        .B      CMP      r0,r1
        0x08001e08:    d007        ..      BEQ      0x8001e1a ; main + 262
;;;337    			rs = z_axis.ramp_step;
        0x08001e0a:    4819        .H      LDR      r0,[pc,#100] ; [0x8001e70] = 0x200005e0
        0x08001e0c:    f8900028    ..(.    LDRB     r0,[r0,#0x28]
        0x08001e10:    490b        .I      LDR      r1,[pc,#44] ; [0x8001e40] = 0x2000007c
        0x08001e12:    6008        .`      STR      r0,[r1,#0]
;;;338    			menu_changed = 1;
        0x08001e14:    2001        .       MOVS     r0,#1
        0x08001e16:    4917        .I      LDR      r1,[pc,#92] ; [0x8001e74] = 0x20000070
        0x08001e18:    6008        .`      STR      r0,[r1,#0]
;;;339    		}
;;;340    
;;;341    		if(z_axis.current_pos != rs) {
        0x08001e1a:    4815        .H      LDR      r0,[pc,#84] ; [0x8001e70] = 0x200005e0
        0x08001e1c:    6800        .h      LDR      r0,[r0,#0]
        0x08001e1e:    4908        .I      LDR      r1,[pc,#32] ; [0x8001e40] = 0x2000007c
        0x08001e20:    6809        .h      LDR      r1,[r1,#0]
        0x08001e22:    4288        .B      CMP      r0,r1
        0x08001e24:    d003        ..      BEQ      0x8001e2e ; main + 282
;;;342    			rs = z_axis.current_pos;
        0x08001e26:    4812        .H      LDR      r0,[pc,#72] ; [0x8001e70] = 0x200005e0
        0x08001e28:    6800        .h      LDR      r0,[r0,#0]
        0x08001e2a:    4905        .I      LDR      r1,[pc,#20] ; [0x8001e40] = 0x2000007c
        0x08001e2c:    6008        .`      STR      r0,[r1,#0]
;;;343    //			menu_changed = 1;
;;;344    		}
;;;345    
;;;346    // update display info
;;;347    		if(menu_changed == 1){ // haltodo && hi2c2.hdmatx->State == HAL_DMA_STATE_READY) {
        0x08001e2e:    4811        .H      LDR      r0,[pc,#68] ; [0x8001e74] = 0x20000070
        0x08001e30:    6800        .h      LDR      r0,[r0,#0]
        0x08001e32:    2801        .(      CMP      r0,#1
        0x08001e34:    d103        ..      BNE      0x8001e3e ; main + 298
;;;348    			menu_changed = update_screen();
        0x08001e36:    f000f94b    ..K.    BL       update_screen ; 0x80020d0
        0x08001e3a:    490e        .I      LDR      r1,[pc,#56] ; [0x8001e74] = 0x20000070
        0x08001e3c:    6008        .`      STR      r0,[r1,#0]
        0x08001e3e:    e7d2        ..      B        0x8001de6 ; main + 210
    $d
        0x08001e40:    2000007c    |..     DCD    536871036
        0x08001e44:    04010001    ....    DCD    67174401
        0x08001e48:    40010800    ...@    DCD    1073809408
        0x08001e4c:    20000041    A..     DCD    536870977
        0x08001e50:    40010c14    ...@    DCD    1073810452
        0x08001e54:    40000400    ...@    DCD    1073742848
        0x08001e58:    40000800    ...@    DCD    1073743872
        0x08001e5c:    40012c00    .,.@    DCD    1073818624
        0x08001e60:    20000044    D..     DCD    536870980
        0x08001e64:    04200020     . .    DCD    69206048
        0x08001e68:    40011000    ...@    DCD    1073811456
        0x08001e6c:    200005dc    ...     DCD    536872412
        0x08001e70:    200005e0    ...     DCD    536872416
        0x08001e74:    20000070    p..     DCD    536871024
    $t
    i.process_button
    process_button
;;; .\..\Src\buttons.c
;;;57     {
        0x08001e78:    b570        p.      PUSH     {r4-r6,lr}
;;;58     	for(int a =0; a<BT_TOTAL;a++){
        0x08001e7a:    2400        .$      MOVS     r4,#0
        0x08001e7c:    e11c        ..      B        0x80020b8 ; process_button + 576
;;;59     	/*
;;;60     	click Nondeterministic finite automaton(NFA):
;;;61     	10. ждем сигнала с кнопки
;;;62     	20. кнопка нажата, считаем тики. если тиков > 1000 это лонг пресс, идем в 30
;;;63     	30. сигнал long_press_start, идем в 40
;;;64     	40. ждем отпуска кнопки, далее в 50
;;;65     	50. кнопку отпустили, если тиков меньше 200 идем в 70, иначе в 60
;;;66     	60. если тиков < 1000 генерим сигнал CLICK, если тиков больше генерим сигнал long_press_end, идем в 10
;;;67     	70. тиков меньше 200, это может быть дабл-клик, ждем еще 100, если ничего идем в 60, если клик идем в 80
;;;68     	80. ждем отпуска кнопки, далее в 90
;;;69     	90. кнопку отпустили, генерим DOUBLE_CLICK, идем в 10
;;;70     	*/
;;;71      
;;;72     //	#if defined ( _SIMU )
;;;73     //		uint32_t tmp_buttons = bt[a].GPIOx->IDR & bt[a].button_pin;
;;;74     //	#else
;;;75     		uint32_t tmp_buttons;
;;;76     		if(bt[a].GPIOx != 0)
        0x08001e7e:    4891        .H      LDR      r0,[pc,#580] ; [0x80020c4] = 0x200004a8
        0x08001e80:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x08001e84:    6800        .h      LDR      r0,[r0,#0]
        0x08001e86:    b158        X.      CBZ      r0,0x8001ea0 ; process_button + 40
;;;77     			tmp_buttons = LL_GPIO_IsInputPinSet(bt[a].GPIOx,bt[a].button_pin);
        0x08001e88:    4a8e        .J      LDR      r2,[pc,#568] ; [0x80020c4] = 0x200004a8
        0x08001e8a:    eb021244    ..D.    ADD      r2,r2,r4,LSL #5
        0x08001e8e:    6851        Qh      LDR      r1,[r2,#4]
        0x08001e90:    4a8c        .J      LDR      r2,[pc,#560] ; [0x80020c4] = 0x200004a8
        0x08001e92:    eb021244    ..D.    ADD      r2,r2,r4,LSL #5
        0x08001e96:    6810        .h      LDR      r0,[r2,#0]
        0x08001e98:    f7fefacb    ....    BL       LL_GPIO_IsInputPinSet ; 0x8000432
        0x08001e9c:    4605        .F      MOV      r5,r0
        0x08001e9e:    e007        ..      B        0x8001eb0 ; process_button + 56
;;;78     //			tmp_buttons = bt[a].GPIOx->IDR & bt[a].button_pin; //BUTTON_1_GPIO_Port->IDR & bt[a].button_pin;
;;;79     		else{
;;;80     			
;;;81     //			if(ubTransferComplete == 0)
;;;82     //				continue;
;;;83     			//	dma_delay = 0;
;;;84     //	while(hi2c2->hdmarx->State != HAL_DMA_STATE_READY){
;;;85     //		dma_delay++;
;;;86     //		HAL_Delay(1);
;;;87     //	}
;;;88     //	dma_delay2 = dma_delay;
;;;89     
;;;90     			tmp_buttons = dma_data[5] & bt[a].button_pin;
        0x08001ea0:    4889        .H      LDR      r0,[pc,#548] ; [0x80020c8] = 0x20000011
        0x08001ea2:    7940        @y      LDRB     r0,[r0,#5]
        0x08001ea4:    4987        .I      LDR      r1,[pc,#540] ; [0x80020c4] = 0x200004a8
        0x08001ea6:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x08001eaa:    6849        Ih      LDR      r1,[r1,#4]
        0x08001eac:    ea000501    ....    AND      r5,r0,r1
;;;91     		}
;;;92     //	#endif
;;;93     
;;;94     //		if(z_axis.current_pos < 20)
;;;95     //			tmp_buttons = 0;
;;;96     		
;;;97     		if( tmp_buttons != bt[a].buttons ) { // start debounce
        0x08001eb0:    4884        .H      LDR      r0,[pc,#528] ; [0x80020c4] = 0x200004a8
        0x08001eb2:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x08001eb6:    68c0        .h      LDR      r0,[r0,#0xc]
        0x08001eb8:    42a8        .B      CMP      r0,r5
        0x08001eba:    d009        ..      BEQ      0x8001ed0 ; process_button + 88
;;;98     			bt[a].buttons = tmp_buttons;
        0x08001ebc:    4881        .H      LDR      r0,[pc,#516] ; [0x80020c4] = 0x200004a8
        0x08001ebe:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x08001ec2:    60c5        .`      STR      r5,[r0,#0xc]
;;;99     			// reset debounce counter and start count every one ms
;;;100    			bt[a].buttons_mstick = 1;
        0x08001ec4:    2001        .       MOVS     r0,#1
        0x08001ec6:    497f        .I      LDR      r1,[pc,#508] ; [0x80020c4] = 0x200004a8
        0x08001ec8:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x08001ecc:    6108        .a      STR      r0,[r1,#0x10]
        0x08001ece:    bd70        p.      POP      {r4-r6,pc}
;;;101    			return;
;;;102    		}
;;;103    
;;;104    		if( bt[a].buttons_mstick > DEBOUNCE_MS ) {
        0x08001ed0:    487c        |H      LDR      r0,[pc,#496] ; [0x80020c4] = 0x200004a8
        0x08001ed2:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x08001ed6:    6900        .i      LDR      r0,[r0,#0x10]
        0x08001ed8:    2814        .(      CMP      r0,#0x14
        0x08001eda:    d971        q.      BLS      0x8001fc0 ; process_button + 328
;;;105    			switch(bt[a].clk_mode) {
        0x08001edc:    4879        yH      LDR      r0,[pc,#484] ; [0x80020c4] = 0x200004a8
        0x08001ede:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x08001ee2:    69c0        .i      LDR      r0,[r0,#0x1c]
        0x08001ee4:    2832        2(      CMP      r0,#0x32
        0x08001ee6:    d063        c.      BEQ      0x8001fb0 ; process_button + 312
        0x08001ee8:    dc08        ..      BGT      0x8001efc ; process_button + 132
        0x08001eea:    280a        .(      CMP      r0,#0xa
        0x08001eec:    d00f        ..      BEQ      0x8001f0e ; process_button + 150
        0x08001eee:    2814        .(      CMP      r0,#0x14
        0x08001ef0:    d019        ..      BEQ      0x8001f26 ; process_button + 174
        0x08001ef2:    281e        .(      CMP      r0,#0x1e
        0x08001ef4:    d038        8.      BEQ      0x8001f68 ; process_button + 240
        0x08001ef6:    2828        ((      CMP      r0,#0x28
        0x08001ef8:    d114        ..      BNE      0x8001f24 ; process_button + 172
        0x08001efa:    e044        D.      B        0x8001f86 ; process_button + 270
        0x08001efc:    283c        <(      CMP      r0,#0x3c
        0x08001efe:    d066        f.      BEQ      0x8001fce ; process_button + 342
        0x08001f00:    2846        F(      CMP      r0,#0x46
        0x08001f02:    d075        u.      BEQ      0x8001ff0 ; process_button + 376
        0x08001f04:    2850        P(      CMP      r0,#0x50
        0x08001f06:    d074        t.      BEQ      0x8001ff2 ; process_button + 378
        0x08001f08:    285a        Z(      CMP      r0,#0x5a
        0x08001f0a:    d1f5        ..      BNE      0x8001ef8 ; process_button + 128
        0x08001f0c:    e0be        ..      B        0x800208c ; process_button + 532
;;;106    			case 10: {
;;;107    				if ( tmp_buttons & bt[a].button_pin ) {   // released
        0x08001f0e:    486d        mH      LDR      r0,[pc,#436] ; [0x80020c4] = 0x200004a8
        0x08001f10:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x08001f14:    6840        @h      LDR      r0,[r0,#4]
        0x08001f16:    4028        (@      ANDS     r0,r0,r5
        0x08001f18:    b920         .      CBNZ     r0,0x8001f24 ; process_button + 172
;;;108    				} else { // pressed
;;;109    //					buttons_mstick = 1;
;;;110    					bt[a].clk_mode = 20;
        0x08001f1a:    2014        .       MOVS     r0,#0x14
        0x08001f1c:    4969        iI      LDR      r1,[pc,#420] ; [0x80020c4] = 0x200004a8
        0x08001f1e:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x08001f22:    61c8        .a      STR      r0,[r1,#0x1c]
;;;111    				}
;;;112    				break;
        0x08001f24:    e0c6        ..      B        0x80020b4 ; process_button + 572
;;;113    			}
;;;114    			case 20: {
;;;115    				if ( tmp_buttons & bt[a].button_pin ) { // released
        0x08001f26:    4867        gH      LDR      r0,[pc,#412] ; [0x80020c4] = 0x200004a8
        0x08001f28:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x08001f2c:    6840        @h      LDR      r0,[r0,#4]
        0x08001f2e:    4028        (@      ANDS     r0,r0,r5
        0x08001f30:    b128        (.      CBZ      r0,0x8001f3e ; process_button + 198
;;;116    					bt[a].clk_mode = 50;
        0x08001f32:    2032        2       MOVS     r0,#0x32
        0x08001f34:    4963        cI      LDR      r1,[pc,#396] ; [0x80020c4] = 0x200004a8
        0x08001f36:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x08001f3a:    61c8        .a      STR      r0,[r1,#0x1c]
        0x08001f3c:    e007        ..      B        0x8001f4e ; process_button + 214
;;;117    				} else {
;;;118    					bt[a].downTime = bt[a].buttons_mstick;
        0x08001f3e:    4861        aH      LDR      r0,[pc,#388] ; [0x80020c4] = 0x200004a8
        0x08001f40:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x08001f44:    6900        .i      LDR      r0,[r0,#0x10]
        0x08001f46:    495f        _I      LDR      r1,[pc,#380] ; [0x80020c4] = 0x200004a8
        0x08001f48:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x08001f4c:    6088        .`      STR      r0,[r1,#8]
;;;119    				}
;;;120    				if (bt[a].downTime > HOLDTIME_MS ) { // long press detected
        0x08001f4e:    485d        ]H      LDR      r0,[pc,#372] ; [0x80020c4] = 0x200004a8
        0x08001f50:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x08001f54:    6880        .h      LDR      r0,[r0,#8]
        0x08001f56:    f5b07ffa    ....    CMP      r0,#0x1f4
        0x08001f5a:    d904        ..      BLS      0x8001f66 ; process_button + 238
;;;121    					bt[a].clk_mode = 30;
        0x08001f5c:    201e        .       MOVS     r0,#0x1e
        0x08001f5e:    4959        YI      LDR      r1,[pc,#356] ; [0x80020c4] = 0x200004a8
        0x08001f60:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x08001f64:    61c8        .a      STR      r0,[r1,#0x1c]
;;;122    				}
;;;123    				break;
        0x08001f66:    e0a5        ..      B        0x80020b4 ; process_button + 572
;;;124    			}
;;;125    			case 30: { // long_press_start event
;;;126    				buttons_flag_setbb[(a<<2)+long_press_start_Pos]  = 1; //long_press_start = 1;
        0x08001f68:    2001        .       MOVS     r0,#1
        0x08001f6a:    2100        .!      MOVS     r1,#0
        0x08001f6c:    eb010184    ....    ADD      r1,r1,r4,LSL #2
        0x08001f70:    4a56        VJ      LDR      r2,[pc,#344] ; [0x80020cc] = 0x2200b000
        0x08001f72:    eb020181    ....    ADD      r1,r2,r1,LSL #2
        0x08001f76:    f8c10b80    ....    STR      r0,[r1,#0xb80]
;;;127    				bt[a].clk_mode = 40;
        0x08001f7a:    2028        (       MOVS     r0,#0x28
        0x08001f7c:    4951        QI      LDR      r1,[pc,#324] ; [0x80020c4] = 0x200004a8
        0x08001f7e:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x08001f82:    61c8        .a      STR      r0,[r1,#0x1c]
;;;128    				break;
        0x08001f84:    e096        ..      B        0x80020b4 ; process_button + 572
;;;129    			}
;;;130    			case 40: {
;;;131    				if ( tmp_buttons & bt[a].button_pin ) { //released
        0x08001f86:    484f        OH      LDR      r0,[pc,#316] ; [0x80020c4] = 0x200004a8
        0x08001f88:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x08001f8c:    6840        @h      LDR      r0,[r0,#4]
        0x08001f8e:    4028        (@      ANDS     r0,r0,r5
        0x08001f90:    b128        (.      CBZ      r0,0x8001f9e ; process_button + 294
;;;132    					bt[a].clk_mode = 50;
        0x08001f92:    2032        2       MOVS     r0,#0x32
        0x08001f94:    494b        KI      LDR      r1,[pc,#300] ; [0x80020c4] = 0x200004a8
        0x08001f96:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x08001f9a:    61c8        .a      STR      r0,[r1,#0x1c]
        0x08001f9c:    e007        ..      B        0x8001fae ; process_button + 310
;;;133    				} else {
;;;134    					bt[a].downTime = bt[a].buttons_mstick;
        0x08001f9e:    4849        IH      LDR      r0,[pc,#292] ; [0x80020c4] = 0x200004a8
        0x08001fa0:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x08001fa4:    6900        .i      LDR      r0,[r0,#0x10]
        0x08001fa6:    4947        GI      LDR      r1,[pc,#284] ; [0x80020c4] = 0x200004a8
        0x08001fa8:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x08001fac:    6088        .`      STR      r0,[r1,#8]
;;;135    				}
;;;136    				break;
        0x08001fae:    e081        ..      B        0x80020b4 ; process_button + 572
;;;137    			}
;;;138    			case 50: {
;;;139    				bt[a].clk_mode = bt[a].downTime < CLICKTIME_MS ? 70 : 60;
        0x08001fb0:    4844        DH      LDR      r0,[pc,#272] ; [0x80020c4] = 0x200004a8
        0x08001fb2:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x08001fb6:    6880        .h      LDR      r0,[r0,#8]
        0x08001fb8:    28fa        .(      CMP      r0,#0xfa
        0x08001fba:    d202        ..      BCS      0x8001fc2 ; process_button + 330
        0x08001fbc:    2046        F       MOVS     r0,#0x46
        0x08001fbe:    e001        ..      B        0x8001fc4 ; process_button + 332
        0x08001fc0:    e079        y.      B        0x80020b6 ; process_button + 574
        0x08001fc2:    203c        <       MOVS     r0,#0x3c
        0x08001fc4:    493f        ?I      LDR      r1,[pc,#252] ; [0x80020c4] = 0x200004a8
        0x08001fc6:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x08001fca:    61c8        .a      STR      r0,[r1,#0x1c]
;;;140    				break;
        0x08001fcc:    e072        r.      B        0x80020b4 ; process_button + 572
;;;141    			}
;;;142    			case 60: {//60 if tick count < 1000 generate CLICK event, else generate long_press_end event, go to 10 state
;;;143    				if(bt[a].downTime < HOLDTIME_MS) { //single CLICK event
        0x08001fce:    483d        =H      LDR      r0,[pc,#244] ; [0x80020c4] = 0x200004a8
        0x08001fd0:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x08001fd4:    6880        .h      LDR      r0,[r0,#8]
        0x08001fd6:    f5b07ffa    ....    CMP      r0,#0x1f4
        0x08001fda:    d20b        ..      BCS      0x8001ff4 ; process_button + 380
;;;144    					buttons_flag_setbb[(a<<2)+single_click_Pos]  = 1; //single_click = 1;
        0x08001fdc:    2001        .       MOVS     r0,#1
        0x08001fde:    2102        .!      MOVS     r1,#2
        0x08001fe0:    eb010184    ....    ADD      r1,r1,r4,LSL #2
        0x08001fe4:    4a39        9J      LDR      r2,[pc,#228] ; [0x80020cc] = 0x2200b000
        0x08001fe6:    eb020181    ....    ADD      r1,r2,r1,LSL #2
        0x08001fea:    f8c10b80    ....    STR      r0,[r1,#0xb80]
        0x08001fee:    e009        ..      B        0x8002004 ; process_button + 396
        0x08001ff0:    e017        ..      B        0x8002022 ; process_button + 426
        0x08001ff2:    e036        6.      B        0x8002062 ; process_button + 490
;;;145    				} else { //  long_press_end event
;;;146    					buttons_flag_setbb[(a<<2)+long_press_end_Pos]  = 1; //long_press_end = 1;
        0x08001ff4:    2001        .       MOVS     r0,#1
        0x08001ff6:    eb000184    ....    ADD      r1,r0,r4,LSL #2
        0x08001ffa:    4a34        4J      LDR      r2,[pc,#208] ; [0x80020cc] = 0x2200b000
        0x08001ffc:    eb020181    ....    ADD      r1,r2,r1,LSL #2
        0x08002000:    f8c10b80    ....    STR      r0,[r1,#0xb80]
;;;147    				}
;;;148    				bt[a].downTime = bt[a].buttons_mstick = 0;
        0x08002004:    2000        .       MOVS     r0,#0
        0x08002006:    492f        /I      LDR      r1,[pc,#188] ; [0x80020c4] = 0x200004a8
        0x08002008:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x0800200c:    6108        .a      STR      r0,[r1,#0x10]
        0x0800200e:    492d        -I      LDR      r1,[pc,#180] ; [0x80020c4] = 0x200004a8
        0x08002010:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x08002014:    6088        .`      STR      r0,[r1,#8]
;;;149    				bt[a].clk_mode = 10;
        0x08002016:    200a        .       MOVS     r0,#0xa
        0x08002018:    492a        *I      LDR      r1,[pc,#168] ; [0x80020c4] = 0x200004a8
        0x0800201a:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x0800201e:    61c8        .a      STR      r0,[r1,#0x1c]
;;;150    				break;
        0x08002020:    e048        H.      B        0x80020b4 ; process_button + 572
;;;151    			}
;;;152    			case 70: { //70. тиков меньше 200, это может быть дабл-клик, ждем нажатия еще 100, если ничего идем в 60, если клик идем в 80
;;;153    				if ( tmp_buttons & bt[a].button_pin ) {
        0x08002022:    4828        (H      LDR      r0,[pc,#160] ; [0x80020c4] = 0x200004a8
        0x08002024:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x08002028:    6840        @h      LDR      r0,[r0,#4]
        0x0800202a:    4028        (@      ANDS     r0,r0,r5
        0x0800202c:    b198        ..      CBZ      r0,0x8002056 ; process_button + 478
;;;154    					bt[a].downTime = bt[a].buttons_mstick;
        0x0800202e:    4825        %H      LDR      r0,[pc,#148] ; [0x80020c4] = 0x200004a8
        0x08002030:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x08002034:    6900        .i      LDR      r0,[r0,#0x10]
        0x08002036:    4923        #I      LDR      r1,[pc,#140] ; [0x80020c4] = 0x200004a8
        0x08002038:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x0800203c:    6088        .`      STR      r0,[r1,#8]
;;;155    					if( bt[a].downTime > DOUBLECLICK_GAP_MS ) {
        0x0800203e:    4821        !H      LDR      r0,[pc,#132] ; [0x80020c4] = 0x200004a8
        0x08002040:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x08002044:    6880        .h      LDR      r0,[r0,#8]
        0x08002046:    2896        .(      CMP      r0,#0x96
        0x08002048:    d90a        ..      BLS      0x8002060 ; process_button + 488
;;;156    						bt[a].clk_mode = 60;
        0x0800204a:    203c        <       MOVS     r0,#0x3c
        0x0800204c:    491d        .I      LDR      r1,[pc,#116] ; [0x80020c4] = 0x200004a8
        0x0800204e:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x08002052:    61c8        .a      STR      r0,[r1,#0x1c]
        0x08002054:    e004        ..      B        0x8002060 ; process_button + 488
;;;157    					}
;;;158    				} else {
;;;159    					bt[a].clk_mode = 80;
        0x08002056:    2050        P       MOVS     r0,#0x50
        0x08002058:    491a        .I      LDR      r1,[pc,#104] ; [0x80020c4] = 0x200004a8
        0x0800205a:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x0800205e:    61c8        .a      STR      r0,[r1,#0x1c]
;;;160    				}
;;;161    				break;
        0x08002060:    e028        (.      B        0x80020b4 ; process_button + 572
;;;162    			}
;;;163    			case 80: {
;;;164    				if ( tmp_buttons & bt[a].button_pin ) { // released
        0x08002062:    4818        .H      LDR      r0,[pc,#96] ; [0x80020c4] = 0x200004a8
        0x08002064:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x08002068:    6840        @h      LDR      r0,[r0,#4]
        0x0800206a:    4028        (@      ANDS     r0,r0,r5
        0x0800206c:    b128        (.      CBZ      r0,0x800207a ; process_button + 514
;;;165    					bt[a].clk_mode = 90;
        0x0800206e:    205a        Z       MOVS     r0,#0x5a
        0x08002070:    4914        .I      LDR      r1,[pc,#80] ; [0x80020c4] = 0x200004a8
        0x08002072:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x08002076:    61c8        .a      STR      r0,[r1,#0x1c]
        0x08002078:    e007        ..      B        0x800208a ; process_button + 530
;;;166    				} else {
;;;167    					bt[a].downTime = bt[a].buttons_mstick;
        0x0800207a:    4812        .H      LDR      r0,[pc,#72] ; [0x80020c4] = 0x200004a8
        0x0800207c:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x08002080:    6900        .i      LDR      r0,[r0,#0x10]
        0x08002082:    4910        .I      LDR      r1,[pc,#64] ; [0x80020c4] = 0x200004a8
        0x08002084:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x08002088:    6088        .`      STR      r0,[r1,#8]
;;;168    				}
;;;169    				break;
        0x0800208a:    e013        ..      B        0x80020b4 ; process_button + 572
;;;170    			}
;;;171    			case 90: { // сигнал DOUBLE_CLICK
;;;172    				buttons_flag_setbb[(a<<2)+double_click_Pos]  = 1; //double_click = 1;
        0x0800208c:    2001        .       MOVS     r0,#1
        0x0800208e:    2103        .!      MOVS     r1,#3
        0x08002090:    eb010184    ....    ADD      r1,r1,r4,LSL #2
        0x08002094:    4a0d        .J      LDR      r2,[pc,#52] ; [0x80020cc] = 0x2200b000
        0x08002096:    eb020181    ....    ADD      r1,r2,r1,LSL #2
        0x0800209a:    f8c10b80    ....    STR      r0,[r1,#0xb80]
;;;173    				bt[a].clk_mode = 10;
        0x0800209e:    200a        .       MOVS     r0,#0xa
        0x080020a0:    4908        .I      LDR      r1,[pc,#32] ; [0x80020c4] = 0x200004a8
        0x080020a2:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x080020a6:    61c8        .a      STR      r0,[r1,#0x1c]
;;;174    				bt[a].buttons_mstick = 0;
        0x080020a8:    2000        .       MOVS     r0,#0
        0x080020aa:    4906        .I      LDR      r1,[pc,#24] ; [0x80020c4] = 0x200004a8
        0x080020ac:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x080020b0:    6108        .a      STR      r0,[r1,#0x10]
;;;175    				break;
        0x080020b2:    bf00        ..      NOP      
        0x080020b4:    bf00        ..      NOP      
        0x080020b6:    1c64        d.      ADDS     r4,r4,#1
        0x080020b8:    2c01        .,      CMP      r4,#1
        0x080020ba:    f6ffaee0    ....    BLT      0x8001e7e ; process_button + 6
;;;176    			}
;;;177    			}
;;;178    		}
;;;179    	}
;;;180    //	ubTransferComplete = 0;
;;;181    }
        0x080020be:    bf00        ..      NOP      
        0x080020c0:    e705        ..      B        0x8001ece ; process_button + 86
    $d
        0x080020c2:    0000        ..      DCW    0
        0x080020c4:    200004a8    ...     DCD    536872104
        0x080020c8:    20000011    ...     DCD    536870929
        0x080020cc:    2200b000    ..."    DCD    570470400
    $t
    i.update_screen
    update_screen
;;; .\..\Src\screen.c
;;;88     	return 0;
        0x080020d0:    2000        .       MOVS     r0,#0
;;;89     }
        0x080020d2:    4770        pG      BX       lr
    i.z_axis_move2
    z_axis_move2
;;; .\..\Src\fsm.c
;;;372    	const fixedptu set_with_fract = fixedpt_add(z_axis.Q824set, z_axis.fract_part); // calculate new step delay with fract from previous step
        0x080020d4:    4a0b        .J      LDR      r2,[pc,#44] ; [0x8002104] = 0x200005e0
        0x080020d6:    68d2        .h      LDR      r2,[r2,#0xc]
        0x080020d8:    4b0a        .K      LDR      r3,[pc,#40] ; [0x8002104] = 0x200005e0
        0x080020da:    691b        .i      LDR      r3,[r3,#0x10]
        0x080020dc:    18d1        ..      ADDS     r1,r2,r3
;;;373    	s->syncbase->ARR = fixedpt_toint(set_with_fract) - 1; // update register ARR
        0x080020de:    2201        ."      MOVS     r2,#1
        0x080020e0:    ebc26211    ...b    RSB      r2,r2,r1,LSR #24
        0x080020e4:    6943        Ci      LDR      r3,[r0,#0x14]
        0x080020e6:    62da        .b      STR      r2,[r3,#0x2c]
;;;374    	s->syncbase->CNT = 0;
        0x080020e8:    2200        ."      MOVS     r2,#0
        0x080020ea:    6943        Ci      LDR      r3,[r0,#0x14]
        0x080020ec:    625a        Zb      STR      r2,[r3,#0x24]
;;;375    	s->syncbase->EGR |= TIM_EGR_UG;
        0x080020ee:    6942        Bi      LDR      r2,[r0,#0x14]
        0x080020f0:    6952        Ri      LDR      r2,[r2,#0x14]
        0x080020f2:    f0420201    B...    ORR      r2,r2,#1
        0x080020f6:    6943        Ci      LDR      r3,[r0,#0x14]
        0x080020f8:    615a        Za      STR      r2,[r3,#0x14]
;;;376    	z_axis.fract_part = fixedpt_fracpart( set_with_fract ); // save fract part for future use on next step
        0x080020fa:    f021427f    !..B    BIC      r2,r1,#0xff000000
        0x080020fe:    4b01        .K      LDR      r3,[pc,#4] ; [0x8002104] = 0x200005e0
        0x08002100:    611a        .a      STR      r2,[r3,#0x10]
;;;377    }
        0x08002102:    4770        pG      BX       lr
    $d
        0x08002104:    200005e0    ...     DCD    536872416
    $t
    i.z_axis_ramp_down2
    z_axis_ramp_down2
;;; .\..\Src\fsm.c (356)
        0x08002108:    4601        .F      MOV      r1,r0
;;;357    	if (z_axis.ramp_step == 0)
        0x0800210a:    480d        .H      LDR      r0,[pc,#52] ; [0x8002140] = 0x200005e0
        0x0800210c:    f8900028    ..(.    LDRB     r0,[r0,#0x28]
        0x08002110:    b908        ..      CBNZ     r0,0x8002116 ; z_axis_ramp_down2 + 14
;;;358    		return true;
        0x08002112:    2001        .       MOVS     r0,#1
        0x08002114:    4770        pG      BX       lr
;;;359    //	const fixedptu set_with_fract = ramp2[--z_axis.ramp_step] << 24;
;;;360    //	s->syncbase->ARR = fixedpt_toint(set_with_fract) - 1; // update register ARR
;;;361    
;;;362    	s->syncbase->ARR = sync_ramp_profile[--z_axis.ramp_step];
        0x08002116:    480a        .H      LDR      r0,[pc,#40] ; [0x8002140] = 0x200005e0
        0x08002118:    f8900028    ..(.    LDRB     r0,[r0,#0x28]
        0x0800211c:    1e40        @.      SUBS     r0,r0,#1
        0x0800211e:    b2c0        ..      UXTB     r0,r0
        0x08002120:    4a07        .J      LDR      r2,[pc,#28] ; [0x8002140] = 0x200005e0
        0x08002122:    f8820028    ..(.    STRB     r0,[r2,#0x28]
        0x08002126:    4a07        .J      LDR      r2,[pc,#28] ; [0x8002144] = 0x20000038
        0x08002128:    5c10        .\      LDRB     r0,[r2,r0]
        0x0800212a:    694a        Ji      LDR      r2,[r1,#0x14]
        0x0800212c:    62d0        .b      STR      r0,[r2,#0x2c]
;;;363    	//	s->syncbase->EGR |= TIM_EGR_UG;
;;;364    //	z_axis.fract_part = fixedpt_fracpart( set_with_fract ); // save fract part for future use on next step
;;;365    	if(z_axis.ramp_step == 0)
        0x0800212e:    4804        .H      LDR      r0,[pc,#16] ; [0x8002140] = 0x200005e0
        0x08002130:    f8900028    ..(.    LDRB     r0,[r0,#0x28]
        0x08002134:    b908        ..      CBNZ     r0,0x800213a ; z_axis_ramp_down2 + 50
;;;366    		return true;
        0x08002136:    2001        .       MOVS     r0,#1
        0x08002138:    e7ec        ..      B        0x8002114 ; z_axis_ramp_down2 + 12
;;;367    	return false;
        0x0800213a:    2000        .       MOVS     r0,#0
        0x0800213c:    e7ea        ..      B        0x8002114 ; z_axis_ramp_down2 + 12
    $d
        0x0800213e:    0000        ..      DCW    0
        0x08002140:    200005e0    ...     DCD    536872416
        0x08002144:    20000038    8..     DCD    536870968
    $t
    i.z_axis_ramp_up2
    z_axis_ramp_up2
;;; .\..\Src\fsm.c (338)
        0x08002148:    4601        .F      MOV      r1,r0
;;;339    	const fixedptu  set_with_fract = sync_ramp_profile[z_axis.ramp_step] << 24;
        0x0800214a:    4816        .H      LDR      r0,[pc,#88] ; [0x80021a4] = 0x200005e0
        0x0800214c:    f8900028    ..(.    LDRB     r0,[r0,#0x28]
        0x08002150:    4b15        .K      LDR      r3,[pc,#84] ; [0x80021a8] = 0x20000038
        0x08002152:    5c18        .\      LDRB     r0,[r3,r0]
        0x08002154:    0602        ..      LSLS     r2,r0,#24
;;;340    	if(z_axis.Q824set > set_with_fract || z_axis.ramp_step == sync_ramp_profile_len) { 	// reach desired speed or end of ramp map
        0x08002156:    4813        .H      LDR      r0,[pc,#76] ; [0x80021a4] = 0x200005e0
        0x08002158:    68c0        .h      LDR      r0,[r0,#0xc]
        0x0800215a:    4290        .B      CMP      r0,r2
        0x0800215c:    d804        ..      BHI      0x8002168 ; z_axis_ramp_up2 + 32
        0x0800215e:    4811        .H      LDR      r0,[pc,#68] ; [0x80021a4] = 0x200005e0
        0x08002160:    f8900028    ..(.    LDRB     r0,[r0,#0x28]
        0x08002164:    2805        .(      CMP      r0,#5
        0x08002166:    d10e        ..      BNE      0x8002186 ; z_axis_ramp_up2 + 62
;;;341    		s->syncbase->ARR = fixedpt_toint(z_axis.Q824set) - 1; 			// update register ARR
        0x08002168:    480e        .H      LDR      r0,[pc,#56] ; [0x80021a4] = 0x200005e0
        0x0800216a:    68c0        .h      LDR      r0,[r0,#0xc]
        0x0800216c:    2301        .#      MOVS     r3,#1
        0x0800216e:    ebc36010    ...`    RSB      r0,r3,r0,LSR #24
        0x08002172:    694b        Ki      LDR      r3,[r1,#0x14]
        0x08002174:    62d8        .b      STR      r0,[r3,#0x2c]
;;;342    //		s->syncbase->EGR |= TIM_EGR_UG;
;;;343    		z_axis.fract_part = fixedpt_fracpart(z_axis.Q824set); 								// save fract part for future use on next step
        0x08002176:    480b        .H      LDR      r0,[pc,#44] ; [0x80021a4] = 0x200005e0
        0x08002178:    68c0        .h      LDR      r0,[r0,#0xc]
        0x0800217a:    f020407f     ..@    BIC      r0,r0,#0xff000000
        0x0800217e:    4b09        .K      LDR      r3,[pc,#36] ; [0x80021a4] = 0x200005e0
        0x08002180:    6118        .a      STR      r0,[r3,#0x10]
;;;344    //		z_axis.end_minus_ramp_delta =
;;;345    		return true;
        0x08002182:    2001        .       MOVS     r0,#1
        0x08002184:    4770        pG      BX       lr
;;;346    	} else {
;;;347    		z_axis.ramp_step++;
        0x08002186:    4807        .H      LDR      r0,[pc,#28] ; [0x80021a4] = 0x200005e0
        0x08002188:    f8900028    ..(.    LDRB     r0,[r0,#0x28]
        0x0800218c:    1c40        @.      ADDS     r0,r0,#1
        0x0800218e:    4b05        .K      LDR      r3,[pc,#20] ; [0x80021a4] = 0x200005e0
        0x08002190:    f8830028    ..(.    STRB     r0,[r3,#0x28]
;;;348    		s->syncbase->ARR = fixedpt_toint(set_with_fract) - 1; 			// update register ARR
        0x08002194:    2001        .       MOVS     r0,#1
        0x08002196:    ebc06012    ...`    RSB      r0,r0,r2,LSR #24
        0x0800219a:    694b        Ki      LDR      r3,[r1,#0x14]
        0x0800219c:    62d8        .b      STR      r0,[r3,#0x2c]
;;;349    //		s->syncbase->EGR |= TIM_EGR_UG;
;;;350    //		z_axis.fract_part = fixedpt_fracpart( set_with_fract ); 						// save fract part for future use on next step
;;;351    	}
;;;352    	return false;
        0x0800219e:    2000        .       MOVS     r0,#0
        0x080021a0:    e7f0        ..      B        0x8002184 ; z_axis_ramp_up2 + 60
    $d
        0x080021a2:    0000        ..      DCW    0
        0x080021a4:    200005e0    ...     DCD    536872416
        0x080021a8:    20000038    8..     DCD    536870968
    $t
    i.z_move
    z_move
;;; .\..\Src\fsm.c (189)
        0x080021ac:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x080021b0:    4605        .F      MOV      r5,r0
        0x080021b2:    460e        .F      MOV      r6,r1
        0x080021b4:    4614        .F      MOV      r4,r2
        0x080021b6:    461f        .F      MOV      r7,r3
;;;190    	MOTOR_X_Enable();
        0x080021b8:    f2402002    @..     MOV      r0,#0x202
        0x080021bc:    491f        .I      LDR      r1,[pc,#124] ; [0x800223c] = 0x40010810
        0x080021be:    6008        .`      STR      r0,[r1,#0]
;;;191    	MOTOR_Z_Enable(); // time to wakeup motor from sleep is quite high(1.7ms), so enable it as soon as possible
        0x080021c0:    491f        .I      LDR      r1,[pc,#124] ; [0x8002240] = 0x40010c10
        0x080021c2:    6008        .`      STR      r0,[r1,#0]
;;;192    
;;;193    	if(direction == feed_direction_left) {
        0x080021c4:    b95d        ].      CBNZ     r5,0x80021de ; z_move + 50
;;;194    		feed_direction = feed_direction_left;
        0x080021c6:    2000        .       MOVS     r0,#0
        0x080021c8:    491e        .I      LDR      r1,[pc,#120] ; [0x8002244] = 0x2000006d
        0x080021ca:    7008        .p      STRB     r0,[r1,#0]
;;;195    		MOTOR_Z_Reverse();
        0x080021cc:    f2480080    H...    MOV      r0,#0x8080
        0x080021d0:    491a        .I      LDR      r1,[pc,#104] ; [0x800223c] = 0x40010810
        0x080021d2:    1d09        ..      ADDS     r1,r1,#4
        0x080021d4:    6008        .`      STR      r0,[r1,#0]
;;;196    		MOTOR_X_Reverse();
        0x080021d6:    481c        .H      LDR      r0,[pc,#112] ; [0x8002248] = 0x4800080
        0x080021d8:    491c        .I      LDR      r1,[pc,#112] ; [0x800224c] = 0x40011000
        0x080021da:    6148        Ha      STR      r0,[r1,#0x14]
        0x080021dc:    e009        ..      B        0x80021f2 ; z_move + 70
;;;197    	} else {
;;;198    		feed_direction = feed_direction_right;
        0x080021de:    2001        .       MOVS     r0,#1
        0x080021e0:    4918        .I      LDR      r1,[pc,#96] ; [0x8002244] = 0x2000006d
        0x080021e2:    7008        .p      STRB     r0,[r1,#0]
;;;199    		MOTOR_Z_Forward();
        0x080021e4:    f2480080    H...    MOV      r0,#0x8080
        0x080021e8:    4914        .I      LDR      r1,[pc,#80] ; [0x800223c] = 0x40010810
        0x080021ea:    6008        .`      STR      r0,[r1,#0]
;;;200    		MOTOR_X_Forward();
        0x080021ec:    4816        .H      LDR      r0,[pc,#88] ; [0x8002248] = 0x4800080
        0x080021ee:    4917        .I      LDR      r1,[pc,#92] ; [0x800224c] = 0x40011000
        0x080021f0:    6108        .a      STR      r0,[r1,#0x10]
;;;201    	}
;;;202    	LL_mDelay(2);
        0x080021f2:    2002        .       MOVS     r0,#2
        0x080021f4:    f7fefc7b    ..{.    BL       LL_mDelay ; 0x8000aee
;;;203    
;;;204    	state.sync = sync;
        0x080021f8:    4815        .H      LDR      r0,[pc,#84] ; [0x8002250] = 0x20000044
        0x080021fa:    7404        .t      STRB     r4,[r0,#0x10]
;;;205    	if(sync){
        0x080021fc:    b11c        ..      CBZ      r4,0x8002206 ; z_move + 90
;;;206    		state.main_feed_direction = feed_direction;
        0x080021fe:    4811        .H      LDR      r0,[pc,#68] ; [0x8002244] = 0x2000006d
        0x08002200:    7800        .x      LDRB     r0,[r0,#0]
        0x08002202:    4913        .I      LDR      r1,[pc,#76] ; [0x8002250] = 0x20000044
        0x08002204:    7448        Ht      STRB     r0,[r1,#0x11]
;;;207    	}
;;;208    	
;;;209    	z_axis.current_pos = 0;
        0x08002206:    2000        .       MOVS     r0,#0
        0x08002208:    4912        .I      LDR      r1,[pc,#72] ; [0x8002254] = 0x200005e0
        0x0800220a:    6008        .`      STR      r0,[r1,#0]
;;;210    	z_axis.end_pos = length;
        0x0800220c:    4608        .F      MOV      r0,r1
        0x0800220e:    6046        F`      STR      r6,[r0,#4]
;;;211    	if(z_axis.end_pos > 0){
        0x08002210:    6840        @h      LDR      r0,[r0,#4]
        0x08002212:    b150        P.      CBZ      r0,0x800222a ; z_move + 126
;;;212    		z_axis.end_pos &= 0xFFFFFFFF - step_divider + 1;
        0x08002214:    4608        .F      MOV      r0,r1
        0x08002216:    6840        @h      LDR      r0,[r0,#4]
        0x08002218:    f0200001     ...    BIC      r0,r0,#1
        0x0800221c:    6048        H`      STR      r0,[r1,#4]
;;;213    		z_axis.end_pos |= step_divider; // to make sure that we'll not stop between full steps
        0x0800221e:    4608        .F      MOV      r0,r1
        0x08002220:    6840        @h      LDR      r0,[r0,#4]
        0x08002222:    f0400002    @...    ORR      r0,r0,#2
        0x08002226:    6048        H`      STR      r0,[r1,#4]
        0x08002228:    e002        ..      B        0x8002230 ; z_move + 132
;;;214    	} else {
;;;215    		state.sync = true;
        0x0800222a:    2001        .       MOVS     r0,#1
        0x0800222c:    4908        .I      LDR      r1,[pc,#32] ; [0x8002250] = 0x20000044
        0x0800222e:    7408        .t      STRB     r0,[r1,#0x10]
;;;216    	}
;;;217    	
;;;218    	do_fsm_move_start(&state);
        0x08002230:    4807        .H      LDR      r0,[pc,#28] ; [0x8002250] = 0x20000044
        0x08002232:    f7fffc53    ..S.    BL       do_fsm_move_start ; 0x8001adc
;;;219    
;;;220    }
        0x08002236:    e8bd81f0    ....    POP      {r4-r8,pc}
    $d
        0x0800223a:    0000        ..      DCW    0
        0x0800223c:    40010810    ...@    DCD    1073809424
        0x08002240:    40010c10    ...@    DCD    1073810448
        0x08002244:    2000006d    m..     DCD    536871021
        0x08002248:    04800080    ....    DCD    75497600
        0x0800224c:    40011000    ...@    DCD    1073811456
        0x08002250:    20000044    D..     DCD    536870980
        0x08002254:    200005e0    ...     DCD    536872416
    $d.realdata
    .constdata
    AHBPrescTable
        0x08002258:    00000000    ....    DCD    0
        0x0800225c:    00000000    ....    DCD    0
        0x08002260:    04030201    ....    DCD    67305985
        0x08002264:    09080706    ....    DCD    151521030
    APBPrescTable
        0x08002268:    00000000    ....    DCD    0
        0x0800226c:    04030201    ....    DCD    67305985
    .constdata
    CHANNEL_OFFSET_TAB
        0x08002270:    44301c08    ..0D    DCD    1144003592
        0x08002274:    6c58        Xl      DCW    27736
        0x08002276:    80          .       DCB    128
    OFFSET_TAB_CCMRx
        0x08002277:    00          .       DCB    0
        0x08002278:    04000000    ....    DCD    67108864
        0x0800227c:    0404        ..      DCW    1028
    SHIFT_TAB_OCxx
        0x0800227e:    0000        ..      DCW    0
        0x08002280:    00000008    ....    DCD    8
        0x08002284:    08          .       DCB    8
    SHIFT_TAB_ICxx
        0x08002285:    000008      ...     DCB    0,0,8
        0x08002288:    08000000    ....    DCD    134217728
    SHIFT_TAB_CCxP
        0x0800228c:    06040200    ....    DCD    100925952
        0x08002290:    0a08        ..      DCW    2568
        0x08002292:    0c          .       DCB    12
    SHIFT_TAB_OISx
        0x08002293:    00          .       DCB    0
        0x08002294:    04030201    ....    DCD    67305985
        0x08002298:    00000605    ....    DCD    1541
        0x0800229c:    00000000    ....    DCD    0
    .constdata
    CHANNEL_OFFSET_TAB
        0x080022a0:    44301c08    ..0D    DCD    1144003592
        0x080022a4:    6c58        Xl      DCW    27736
        0x080022a6:    80          .       DCB    128
    OFFSET_TAB_CCMRx
        0x080022a7:    00          .       DCB    0
        0x080022a8:    04000000    ....    DCD    67108864
        0x080022ac:    0404        ..      DCW    1028
    SHIFT_TAB_OCxx
        0x080022ae:    0000        ..      DCW    0
        0x080022b0:    00000008    ....    DCD    8
        0x080022b4:    08          .       DCB    8
    SHIFT_TAB_ICxx
        0x080022b5:    000008      ...     DCB    0,0,8
        0x080022b8:    08000000    ....    DCD    134217728
    SHIFT_TAB_CCxP
        0x080022bc:    06040200    ....    DCD    100925952
        0x080022c0:    0a08        ..      DCW    2568
        0x080022c2:    0c          .       DCB    12
    SHIFT_TAB_OISx
        0x080022c3:    00          .       DCB    0
        0x080022c4:    04030201    ....    DCD    67305985
        0x080022c8:    0605        ..      DCW    1541
    Menu_size
        0x080022ca:    0021        !.      DCW    33
        0x080022cc:    00000000    ....    DCD    0
    enc_setup
        0x080022d0:    00000000    ....    DCD    0
        0x080022d4:    00090000    ....    DCD    589824
    Region$$Table$$Base
        0x080022d8:    080022f8    ."..    DCD    134226680
        0x080022dc:    20000000    ...     DCD    536870912
        0x080022e0:    000004a8    ....    DCD    1192
        0x080022e4:    080001e8    ....    DCD    134218216
        0x080022e8:    08002494    .$..    DCD    134227092
        0x080022ec:    200004a8    ...     DCD    536872104
        0x080022f0:    00000708    ....    DCD    1800
        0x080022f4:    080017bc    ....    DCD    134223804
    Region$$Table$$Limit

** Section #2 'RW_IRAM1' (SHT_PROGBITS) [SHF_ALLOC + SHF_WRITE]
    Size   : 412 bytes (alignment 4)
    Address: 0x20000000


** Section #3 'RW_IRAM1' (SHT_NOBITS) [SHF_ALLOC + SHF_WRITE]
    Size   : 1800 bytes (alignment 8)
    Address: 0x200004a8


** Section #4 '.debug_abbrev' (SHT_PROGBITS)
    Size   : 1476 bytes


** Section #5 '.debug_frame' (SHT_PROGBITS)
    Size   : 2948 bytes


** Section #6 '.debug_info' (SHT_PROGBITS)
    Size   : 177336 bytes


** Section #7 '.debug_line' (SHT_PROGBITS)
    Size   : 21852 bytes


** Section #8 '.debug_loc' (SHT_PROGBITS)
    Size   : 6532 bytes


** Section #9 '.debug_macinfo' (SHT_PROGBITS)
    Size   : 517268 bytes


** Section #10 '.debug_pubnames' (SHT_PROGBITS)
    Size   : 2788 bytes


** Section #11 '.symtab' (SHT_SYMTAB)
    Size   : 8032 bytes (alignment 4)
    String table #12 '.strtab'
    Last local symbol no. 351


** Section #12 '.strtab' (SHT_STRTAB)
    Size   : 7084 bytes


** Section #13 '.note' (SHT_NOTE)
    Size   : 28 bytes (alignment 4)


** Section #14 '.comment' (SHT_PROGBITS)
    Size   : 23492 bytes


** Section #15 '.shstrtab' (SHT_STRTAB)
    Size   : 156 bytes


