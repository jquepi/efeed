
========================================================================

** ELF Header Information

    File Name: C:\STM32\project\efeed\MDK-ARM\efeed\efeed.axf

    Machine class: ELFCLASS32 (32-bit)
    Data encoding: ELFDATA2LSB (Little endian)
    Header version: EV_CURRENT (Current version)
    Operating System ABI: none
    ABI Version: 0
    File Type: ET_EXEC (Executable) (2)
    Machine: EM_ARM (ARM)

    Image Entry point: 0x080000ed
    Flags: EF_ARM_HASENTRY + EF_ARM_ABI_FLOAT_SOFT (0x05000202)

    ARM ELF revision: 5 (ABI version 2)

    Conforms to Soft float procedure-call standard

    Built with
    Component: ARM Compiler 5.06 update 4 (build 422) Tool: armasm [4d35cf]
    Component: ARM Compiler 5.06 update 4 (build 422) Tool: armlink [4d35d2]

    Header size: 52 bytes (0x34)
    Program header entry size: 32 bytes (0x20)
    Section header entry size: 40 bytes (0x28)

    Program header entries: 1
    Section header entries: 16

    Program header offset: 809996 (0x000c5c0c)
    Section header offset: 810028 (0x000c5c2c)

    Section header string table index: 15

========================================================================

** Program header #0 (PT_LOAD) [PF_X + PF_W + PF_R + PF_ARM_ENTRY]
    Size : 31644 bytes (15880 bytes in file)
    Virtual address: 0x08000000 (Alignment 8)


========================================================================

** Section #1 'ER_IROM1' (SHT_PROGBITS) [SHF_ALLOC + SHF_EXECINSTR]
    Size   : 15256 bytes (alignment 8)
    Address: 0x08000000

    $d.realdata
    RESET
    __Vectors
        0x08000000:    20001008    ...     DCD    536875016
        0x08000004:    08000101    ....    DCD    134217985
        0x08000008:    08000109    ....    DCD    134217993
        0x0800000c:    0800010b    ....    DCD    134217995
        0x08000010:    0800010d    ....    DCD    134217997
        0x08000014:    0800010f    ....    DCD    134217999
        0x08000018:    08000111    ....    DCD    134218001
        0x0800001c:    00000000    ....    DCD    0
        0x08000020:    00000000    ....    DCD    0
        0x08000024:    00000000    ....    DCD    0
        0x08000028:    00000000    ....    DCD    0
        0x0800002c:    08001999    ....    DCD    134224281
        0x08000030:    08000115    ....    DCD    134218005
        0x08000034:    00000000    ....    DCD    0
        0x08000038:    080015b1    ....    DCD    134223281
        0x0800003c:    0800199d    ....    DCD    134224285
        0x08000040:    0800011b    ....    DCD    134218011
        0x08000044:    0800011b    ....    DCD    134218011
        0x08000048:    0800011b    ....    DCD    134218011
        0x0800004c:    0800011b    ....    DCD    134218011
        0x08000050:    0800011b    ....    DCD    134218011
        0x08000054:    0800011b    ....    DCD    134218011
        0x08000058:    0800011b    ....    DCD    134218011
        0x0800005c:    0800011b    ....    DCD    134218011
        0x08000060:    0800011b    ....    DCD    134218011
        0x08000064:    0800011b    ....    DCD    134218011
        0x08000068:    0800011b    ....    DCD    134218011
        0x0800006c:    0800011b    ....    DCD    134218011
        0x08000070:    0800011b    ....    DCD    134218011
        0x08000074:    0800011b    ....    DCD    134218011
        0x08000078:    08000299    ....    DCD    134218393
        0x0800007c:    0800011b    ....    DCD    134218011
        0x08000080:    0800011b    ....    DCD    134218011
        0x08000084:    0800011b    ....    DCD    134218011
        0x08000088:    0800011b    ....    DCD    134218011
        0x0800008c:    0800011b    ....    DCD    134218011
        0x08000090:    0800011b    ....    DCD    134218011
        0x08000094:    0800011b    ....    DCD    134218011
        0x08000098:    0800011b    ....    DCD    134218011
        0x0800009c:    0800011b    ....    DCD    134218011
        0x080000a0:    0800011b    ....    DCD    134218011
        0x080000a4:    08001b6d    m...    DCD    134224749
        0x080000a8:    0800011b    ....    DCD    134218011
        0x080000ac:    0800011b    ....    DCD    134218011
        0x080000b0:    08001b8d    ....    DCD    134224781
        0x080000b4:    0800011b    ....    DCD    134218011
        0x080000b8:    08001bd1    ....    DCD    134224849
        0x080000bc:    0800011b    ....    DCD    134218011
        0x080000c0:    0800011b    ....    DCD    134218011
        0x080000c4:    080003f5    ....    DCD    134218741
        0x080000c8:    080003f1    ....    DCD    134218737
        0x080000cc:    0800011b    ....    DCD    134218011
        0x080000d0:    0800011b    ....    DCD    134218011
        0x080000d4:    0800011b    ....    DCD    134218011
        0x080000d8:    0800011b    ....    DCD    134218011
        0x080000dc:    0800011b    ....    DCD    134218011
        0x080000e0:    0800011b    ....    DCD    134218011
        0x080000e4:    0800011b    ....    DCD    134218011
        0x080000e8:    0800011b    ....    DCD    134218011
    $t
    .ARM.Collect$$$$00000000
    .ARM.Collect$$$$00000001
    __Vectors_End
    __main
    _main_stk
        0x080000ec:    f8dfd00c    ....    LDR      sp,__lit__00000000 ; [0x80000fc] = 0x20001008
    .ARM.Collect$$$$00000004
    _main_scatterload
        0x080000f0:    f000f87a    ..z.    BL       __scatterload ; 0x80001e8
    .ARM.Collect$$$$00000008
    .ARM.Collect$$$$0000000A
    .ARM.Collect$$$$0000000B
    __main_after_scatterload
    _main_clock
    _main_cpp_init
    _main_init
        0x080000f4:    4800        .H      LDR      r0,[pc,#0] ; [0x80000f8] = 0x80022cd
        0x080000f6:    4700        .G      BX       r0
    $d
        0x080000f8:    080022cd    ."..    DCD    134226637
    .ARM.Collect$$$$00002712
    __lit__00000000
    .ARM.Collect$$$$0000000D
    .ARM.Collect$$$$0000000F
    __rt_final_cpp
    __rt_final_exit
        0x080000fc:    20001008    ...     DCD    536875016
    $t
    .text
    Reset_Handler
;;;150                     LDR     R0, =SystemInit
        0x08000100:    4806        .H      LDR      r0,[pc,#24] ; [0x800011c] = 0x8001b15
;;;151                     BLX     R0
        0x08000102:    4780        .G      BLX      r0
;;;152                     LDR     R0, =__main
        0x08000104:    4806        .H      LDR      r0,[pc,#24] ; [0x8000120] = 0x80000ed
;;;153                     BX      R0
        0x08000106:    4700        .G      BX       r0
    NMI_Handler
;;;154                     ENDP
;;;155    
;;;156    ; Dummy Exception Handlers (infinite loops which can be modified)
;;;157    
;;;158    NMI_Handler     PROC
;;;159                    EXPORT  NMI_Handler                [WEAK]
;;;160                    B       .
        0x08000108:    e7fe        ..      B        NMI_Handler ; 0x8000108
    HardFault_Handler
;;;161                    ENDP
;;;162    HardFault_Handler\
;;;163                    PROC
;;;164                    EXPORT  HardFault_Handler          [WEAK]
;;;165                    B       .
        0x0800010a:    e7fe        ..      B        HardFault_Handler ; 0x800010a
    MemManage_Handler
;;;166                    ENDP
;;;167    MemManage_Handler\
;;;168                    PROC
;;;169                    EXPORT  MemManage_Handler          [WEAK]
;;;170                    B       .
        0x0800010c:    e7fe        ..      B        MemManage_Handler ; 0x800010c
    BusFault_Handler
;;;171                    ENDP
;;;172    BusFault_Handler\
;;;173                    PROC
;;;174                    EXPORT  BusFault_Handler           [WEAK]
;;;175                    B       .
        0x0800010e:    e7fe        ..      B        BusFault_Handler ; 0x800010e
    UsageFault_Handler
;;;176                    ENDP
;;;177    UsageFault_Handler\
;;;178                    PROC
;;;179                    EXPORT  UsageFault_Handler         [WEAK]
;;;180                    B       .
        0x08000110:    e7fe        ..      B        UsageFault_Handler ; 0x8000110
;;;181                    ENDP
;;;182    SVC_Handler     PROC
;;;183                    EXPORT  SVC_Handler                [WEAK]
;;;184                    B       .
        0x08000112:    e7fe        ..      B        0x8000112 ; UsageFault_Handler + 2
    DebugMon_Handler
;;;185                    ENDP
;;;186    DebugMon_Handler\
;;;187                    PROC
;;;188                    EXPORT  DebugMon_Handler           [WEAK]
;;;189                    B       .
        0x08000114:    e7fe        ..      B        DebugMon_Handler ; 0x8000114
;;;190                    ENDP
;;;191    PendSV_Handler  PROC
;;;192                    EXPORT  PendSV_Handler             [WEAK]
;;;193                    B       .
        0x08000116:    e7fe        ..      B        0x8000116 ; DebugMon_Handler + 2
;;;194                    ENDP
;;;195    SysTick_Handler PROC
;;;196                    EXPORT  SysTick_Handler            [WEAK]
;;;197                    B       .
        0x08000118:    e7fe        ..      B        0x8000118 ; DebugMon_Handler + 4
    ADC1_2_IRQHandler
    CAN1_RX1_IRQHandler
    CAN1_SCE_IRQHandler
    DMA1_Channel1_IRQHandler
    DMA1_Channel2_IRQHandler
    DMA1_Channel3_IRQHandler
    DMA1_Channel5_IRQHandler
    DMA1_Channel6_IRQHandler
    DMA1_Channel7_IRQHandler
    EXTI0_IRQHandler
    EXTI15_10_IRQHandler
    EXTI1_IRQHandler
    EXTI2_IRQHandler
    EXTI3_IRQHandler
    EXTI4_IRQHandler
    EXTI9_5_IRQHandler
    FLASH_IRQHandler
    I2C1_ER_IRQHandler
    I2C1_EV_IRQHandler
    PVD_IRQHandler
    RCC_IRQHandler
    RTC_Alarm_IRQHandler
    RTC_IRQHandler
    SPI1_IRQHandler
    SPI2_IRQHandler
    TAMPER_IRQHandler
    TIM1_BRK_IRQHandler
    TIM1_CC_IRQHandler
    TIM1_TRG_COM_IRQHandler
    TIM3_IRQHandler
    USART1_IRQHandler
    USART2_IRQHandler
    USART3_IRQHandler
    USBWakeUp_IRQHandler
    USB_HP_CAN1_TX_IRQHandler
    USB_LP_CAN1_RX0_IRQHandler
    WWDG_IRQHandler
;;;198                    ENDP
;;;199    
;;;200    Default_Handler PROC
;;;201    
;;;202                    EXPORT  WWDG_IRQHandler            [WEAK]
;;;203                    EXPORT  PVD_IRQHandler             [WEAK]
;;;204                    EXPORT  TAMPER_IRQHandler          [WEAK]
;;;205                    EXPORT  RTC_IRQHandler             [WEAK]
;;;206                    EXPORT  FLASH_IRQHandler           [WEAK]
;;;207                    EXPORT  RCC_IRQHandler             [WEAK]
;;;208                    EXPORT  EXTI0_IRQHandler           [WEAK]
;;;209                    EXPORT  EXTI1_IRQHandler           [WEAK]
;;;210                    EXPORT  EXTI2_IRQHandler           [WEAK]
;;;211                    EXPORT  EXTI3_IRQHandler           [WEAK]
;;;212                    EXPORT  EXTI4_IRQHandler           [WEAK]
;;;213                    EXPORT  DMA1_Channel1_IRQHandler   [WEAK]
;;;214                    EXPORT  DMA1_Channel2_IRQHandler   [WEAK]
;;;215                    EXPORT  DMA1_Channel3_IRQHandler   [WEAK]
;;;216                    EXPORT  DMA1_Channel4_IRQHandler   [WEAK]
;;;217                    EXPORT  DMA1_Channel5_IRQHandler   [WEAK]
;;;218                    EXPORT  DMA1_Channel6_IRQHandler   [WEAK]
;;;219                    EXPORT  DMA1_Channel7_IRQHandler   [WEAK]
;;;220                    EXPORT  ADC1_2_IRQHandler          [WEAK]
;;;221                    EXPORT  USB_HP_CAN1_TX_IRQHandler  [WEAK]
;;;222                    EXPORT  USB_LP_CAN1_RX0_IRQHandler [WEAK]
;;;223                    EXPORT  CAN1_RX1_IRQHandler        [WEAK]
;;;224                    EXPORT  CAN1_SCE_IRQHandler        [WEAK]
;;;225                    EXPORT  EXTI9_5_IRQHandler         [WEAK]
;;;226                    EXPORT  TIM1_BRK_IRQHandler        [WEAK]
;;;227                    EXPORT  TIM1_UP_IRQHandler         [WEAK]
;;;228                    EXPORT  TIM1_TRG_COM_IRQHandler    [WEAK]
;;;229                    EXPORT  TIM1_CC_IRQHandler         [WEAK]
;;;230                    EXPORT  TIM2_IRQHandler            [WEAK]
;;;231                    EXPORT  TIM3_IRQHandler            [WEAK]
;;;232                    EXPORT  TIM4_IRQHandler            [WEAK]
;;;233                    EXPORT  I2C1_EV_IRQHandler         [WEAK]
;;;234                    EXPORT  I2C1_ER_IRQHandler         [WEAK]
;;;235                    EXPORT  I2C2_EV_IRQHandler         [WEAK]
;;;236                    EXPORT  I2C2_ER_IRQHandler         [WEAK]
;;;237                    EXPORT  SPI1_IRQHandler            [WEAK]
;;;238                    EXPORT  SPI2_IRQHandler            [WEAK]
;;;239                    EXPORT  USART1_IRQHandler          [WEAK]
;;;240                    EXPORT  USART2_IRQHandler          [WEAK]
;;;241                    EXPORT  USART3_IRQHandler          [WEAK]
;;;242                    EXPORT  EXTI15_10_IRQHandler       [WEAK]
;;;243                    EXPORT  RTC_Alarm_IRQHandler        [WEAK]
;;;244                    EXPORT  USBWakeUp_IRQHandler       [WEAK]
;;;245    
;;;246    WWDG_IRQHandler
;;;247    PVD_IRQHandler
;;;248    TAMPER_IRQHandler
;;;249    RTC_IRQHandler
;;;250    FLASH_IRQHandler
;;;251    RCC_IRQHandler
;;;252    EXTI0_IRQHandler
;;;253    EXTI1_IRQHandler
;;;254    EXTI2_IRQHandler
;;;255    EXTI3_IRQHandler
;;;256    EXTI4_IRQHandler
;;;257    DMA1_Channel1_IRQHandler
;;;258    DMA1_Channel2_IRQHandler
;;;259    DMA1_Channel3_IRQHandler
;;;260    DMA1_Channel4_IRQHandler
;;;261    DMA1_Channel5_IRQHandler
;;;262    DMA1_Channel6_IRQHandler
;;;263    DMA1_Channel7_IRQHandler
;;;264    ADC1_2_IRQHandler
;;;265    USB_HP_CAN1_TX_IRQHandler
;;;266    USB_LP_CAN1_RX0_IRQHandler
;;;267    CAN1_RX1_IRQHandler
;;;268    CAN1_SCE_IRQHandler
;;;269    EXTI9_5_IRQHandler
;;;270    TIM1_BRK_IRQHandler
;;;271    TIM1_UP_IRQHandler
;;;272    TIM1_TRG_COM_IRQHandler
;;;273    TIM1_CC_IRQHandler
;;;274    TIM2_IRQHandler
;;;275    TIM3_IRQHandler
;;;276    TIM4_IRQHandler
;;;277    I2C1_EV_IRQHandler
;;;278    I2C1_ER_IRQHandler
;;;279    I2C2_EV_IRQHandler
;;;280    I2C2_ER_IRQHandler
;;;281    SPI1_IRQHandler
;;;282    SPI2_IRQHandler
;;;283    USART1_IRQHandler
;;;284    USART2_IRQHandler
;;;285    USART3_IRQHandler
;;;286    EXTI15_10_IRQHandler
;;;287    RTC_Alarm_IRQHandler
;;;288    USBWakeUp_IRQHandler
;;;289    
;;;290                    B       .
        0x0800011a:    e7fe        ..      B        ADC1_2_IRQHandler ; 0x800011a
    $d
        0x0800011c:    08001b15    ....    DCD    134224661
        0x08000120:    080000ed    ....    DCD    134217965
    $t
    .text
    __aeabi_uldivmod
        0x08000124:    e92d5ff0    -.._    PUSH     {r4-r12,lr}
        0x08000128:    4605        .F      MOV      r5,r0
        0x0800012a:    2000        .       MOVS     r0,#0
        0x0800012c:    4692        .F      MOV      r10,r2
        0x0800012e:    469b        .F      MOV      r11,r3
        0x08000130:    4688        .F      MOV      r8,r1
        0x08000132:    4606        .F      MOV      r6,r0
        0x08000134:    4681        .F      MOV      r9,r0
        0x08000136:    2440        @$      MOVS     r4,#0x40
        0x08000138:    e01b        ..      B        0x8000172 ; __aeabi_uldivmod + 78
        0x0800013a:    4628        (F      MOV      r0,r5
        0x0800013c:    4641        AF      MOV      r1,r8
        0x0800013e:    4647        GF      MOV      r7,r8
        0x08000140:    4622        "F      MOV      r2,r4
        0x08000142:    f000f841    ..A.    BL       __aeabi_llsr ; 0x80001c8
        0x08000146:    4653        SF      MOV      r3,r10
        0x08000148:    465a        ZF      MOV      r2,r11
        0x0800014a:    1ac0        ..      SUBS     r0,r0,r3
        0x0800014c:    4191        .A      SBCS     r1,r1,r2
        0x0800014e:    d310        ..      BCC      0x8000172 ; __aeabi_uldivmod + 78
        0x08000150:    4611        .F      MOV      r1,r2
        0x08000152:    4618        .F      MOV      r0,r3
        0x08000154:    4622        "F      MOV      r2,r4
        0x08000156:    f000f828    ..(.    BL       __aeabi_llsl ; 0x80001aa
        0x0800015a:    1a2d        -.      SUBS     r5,r5,r0
        0x0800015c:    eb670801    g...    SBC      r8,r7,r1
        0x08000160:    464f        OF      MOV      r7,r9
        0x08000162:    4622        "F      MOV      r2,r4
        0x08000164:    2001        .       MOVS     r0,#1
        0x08000166:    2100        .!      MOVS     r1,#0
        0x08000168:    f000f81f    ....    BL       __aeabi_llsl ; 0x80001aa
        0x0800016c:    eb170900    ....    ADDS     r9,r7,r0
        0x08000170:    414e        NA      ADCS     r6,r6,r1
        0x08000172:    1e20         .      SUBS     r0,r4,#0
        0x08000174:    f1a40401    ....    SUB      r4,r4,#1
        0x08000178:    dcdf        ..      BGT      0x800013a ; __aeabi_uldivmod + 22
        0x0800017a:    4648        HF      MOV      r0,r9
        0x0800017c:    4631        1F      MOV      r1,r6
        0x0800017e:    462a        *F      MOV      r2,r5
        0x08000180:    4643        CF      MOV      r3,r8
        0x08000182:    e8bd9ff0    ....    POP      {r4-r12,pc}
    .text
    __aeabi_memset
    __aeabi_memset4
    __aeabi_memset8
        0x08000186:    b2d2        ..      UXTB     r2,r2
        0x08000188:    e001        ..      B        0x800018e ; __aeabi_memset + 8
        0x0800018a:    f8002b01    ...+    STRB     r2,[r0],#1
        0x0800018e:    1e49        I.      SUBS     r1,r1,#1
        0x08000190:    d2fb        ..      BCS      0x800018a ; __aeabi_memset + 4
        0x08000192:    4770        pG      BX       lr
    __aeabi_memclr
    __aeabi_memclr4
    __aeabi_memclr8
        0x08000194:    2200        ."      MOVS     r2,#0
        0x08000196:    e7f6        ..      B        __aeabi_memset ; 0x8000186
    _memset$wrapper
        0x08000198:    b510        ..      PUSH     {r4,lr}
        0x0800019a:    4613        .F      MOV      r3,r2
        0x0800019c:    460a        .F      MOV      r2,r1
        0x0800019e:    4604        .F      MOV      r4,r0
        0x080001a0:    4619        .F      MOV      r1,r3
        0x080001a2:    f7fffff0    ....    BL       __aeabi_memset ; 0x8000186
        0x080001a6:    4620         F      MOV      r0,r4
        0x080001a8:    bd10        ..      POP      {r4,pc}
    .text
    __aeabi_llsl
    _ll_shift_l
        0x080001aa:    2a20         *      CMP      r2,#0x20
        0x080001ac:    db04        ..      BLT      0x80001b8 ; __aeabi_llsl + 14
        0x080001ae:    3a20         :      SUBS     r2,r2,#0x20
        0x080001b0:    fa00f102    ....    LSL      r1,r0,r2
        0x080001b4:    2000        .       MOVS     r0,#0
        0x080001b6:    4770        pG      BX       lr
        0x080001b8:    4091        .@      LSLS     r1,r1,r2
        0x080001ba:    f1c20320    .. .    RSB      r3,r2,#0x20
        0x080001be:    fa20f303     ...    LSR      r3,r0,r3
        0x080001c2:    4319        .C      ORRS     r1,r1,r3
        0x080001c4:    4090        .@      LSLS     r0,r0,r2
        0x080001c6:    4770        pG      BX       lr
    .text
    __aeabi_llsr
    _ll_ushift_r
        0x080001c8:    2a20         *      CMP      r2,#0x20
        0x080001ca:    db04        ..      BLT      0x80001d6 ; __aeabi_llsr + 14
        0x080001cc:    3a20         :      SUBS     r2,r2,#0x20
        0x080001ce:    fa21f002    !...    LSR      r0,r1,r2
        0x080001d2:    2100        .!      MOVS     r1,#0
        0x080001d4:    4770        pG      BX       lr
        0x080001d6:    fa21f302    !...    LSR      r3,r1,r2
        0x080001da:    40d0        .@      LSRS     r0,r0,r2
        0x080001dc:    f1c20220    .. .    RSB      r2,r2,#0x20
        0x080001e0:    4091        .@      LSLS     r1,r1,r2
        0x080001e2:    4308        .C      ORRS     r0,r0,r1
        0x080001e4:    4619        .F      MOV      r1,r3
        0x080001e6:    4770        pG      BX       lr
    .text
    __scatterload
    __scatterload_rt2
        0x080001e8:    4c06        .L      LDR      r4,[pc,#24] ; [0x8000204] = 0x8003b78
        0x080001ea:    4d07        .M      LDR      r5,[pc,#28] ; [0x8000208] = 0x8003b98
        0x080001ec:    e006        ..      B        0x80001fc ; __scatterload + 20
        0x080001ee:    68e0        .h      LDR      r0,[r4,#0xc]
        0x080001f0:    f0400301    @...    ORR      r3,r0,#1
        0x080001f4:    e8940007    ....    LDM      r4,{r0-r2}
        0x080001f8:    4798        .G      BLX      r3
        0x080001fa:    3410        .4      ADDS     r4,r4,#0x10
        0x080001fc:    42ac        .B      CMP      r4,r5
        0x080001fe:    d3f6        ..      BCC      0x80001ee ; __scatterload + 6
        0x08000200:    f7ffff78    ..x.    BL       __main_after_scatterload ; 0x80000f4
    $d
        0x08000204:    08003b78    x;..    DCD    134232952
        0x08000208:    08003b98    .;..    DCD    134232984
    $t
    .text
    __decompress
    __decompress1
        0x0800020c:    b570        p.      PUSH     {r4-r6,lr}
        0x0800020e:    188c        ..      ADDS     r4,r1,r2
        0x08000210:    f8105b01    ...[    LDRB     r5,[r0],#1
        0x08000214:    f0150307    ....    ANDS     r3,r5,#7
        0x08000218:    d101        ..      BNE      0x800021e ; __decompress + 18
        0x0800021a:    f8103b01    ...;    LDRB     r3,[r0],#1
        0x0800021e:    112a        *.      ASRS     r2,r5,#4
        0x08000220:    d106        ..      BNE      0x8000230 ; __decompress + 36
        0x08000222:    f8102b01    ...+    LDRB     r2,[r0],#1
        0x08000226:    e003        ..      B        0x8000230 ; __decompress + 36
        0x08000228:    f8106b01    ...k    LDRB     r6,[r0],#1
        0x0800022c:    f8016b01    ...k    STRB     r6,[r1],#1
        0x08000230:    1e5b        [.      SUBS     r3,r3,#1
        0x08000232:    d1f9        ..      BNE      0x8000228 ; __decompress + 28
        0x08000234:    072b        +.      LSLS     r3,r5,#28
        0x08000236:    d405        ..      BMI      0x8000244 ; __decompress + 56
        0x08000238:    2300        .#      MOVS     r3,#0
        0x0800023a:    1e52        R.      SUBS     r2,r2,#1
        0x0800023c:    d40d        ..      BMI      0x800025a ; __decompress + 78
        0x0800023e:    f8013b01    ...;    STRB     r3,[r1],#1
        0x08000242:    e7fa        ..      B        0x800023a ; __decompress + 46
        0x08000244:    f8103b01    ...;    LDRB     r3,[r0],#1
        0x08000248:    1acb        ..      SUBS     r3,r1,r3
        0x0800024a:    1c92        ..      ADDS     r2,r2,#2
        0x0800024c:    e003        ..      B        0x8000256 ; __decompress + 74
        0x0800024e:    f8135b01    ...[    LDRB     r5,[r3],#1
        0x08000252:    f8015b01    ...[    STRB     r5,[r1],#1
        0x08000256:    1e52        R.      SUBS     r2,r2,#1
        0x08000258:    d5f9        ..      BPL      0x800024e ; __decompress + 66
        0x0800025a:    42a1        .B      CMP      r1,r4
        0x0800025c:    d3d8        ..      BCC      0x8000210 ; __decompress + 4
        0x0800025e:    2000        .       MOVS     r0,#0
        0x08000260:    bd70        p.      POP      {r4-r6,pc}
        0x08000262:    0000        ..      MOVS     r0,r0
    i.Activate_I2C_Master
    Activate_I2C_Master
;;; .\..\Src\i2c_interface.c
;;;304      LL_I2C_Enable(I2C2);
        0x08000264:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;367      SET_BIT(I2Cx->CR1, I2C_CR1_PE);
        0x08000266:    480b        .H      LDR      r0,[pc,#44] ; [0x8000294] = 0x40005800
        0x08000268:    6800        .h      LDR      r0,[r0,#0]
        0x0800026a:    f0400001    @...    ORR      r0,r0,#1
        0x0800026e:    4909        .I      LDR      r1,[pc,#36] ; [0x8000294] = 0x40005800
        0x08000270:    6008        .`      STR      r0,[r1,#0]
;;;368    }
        0x08000272:    bf00        ..      NOP      
;;; .\..\Src\i2c_interface.c
;;;310      LL_I2C_EnableIT_EVT(I2C2);
        0x08000274:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;1004     SET_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN);
        0x08000276:    4608        .F      MOV      r0,r1
        0x08000278:    6840        @h      LDR      r0,[r0,#4]
        0x0800027a:    f4407000    @..p    ORR      r0,r0,#0x200
        0x0800027e:    6048        H`      STR      r0,[r1,#4]
;;;1005   }
        0x08000280:    bf00        ..      NOP      
;;; .\..\Src\i2c_interface.c
;;;311      LL_I2C_EnableIT_ERR(I2C2);
        0x08000282:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;1094     SET_BIT(I2Cx->CR2, I2C_CR2_ITERREN);
        0x08000284:    4608        .F      MOV      r0,r1
        0x08000286:    6840        @h      LDR      r0,[r0,#4]
        0x08000288:    f4407080    @..p    ORR      r0,r0,#0x100
        0x0800028c:    6048        H`      STR      r0,[r1,#4]
;;;1095   }
        0x0800028e:    bf00        ..      NOP      
;;; .\..\Src\i2c_interface.c
;;;312    }
        0x08000290:    4770        pG      BX       lr
    $d
        0x08000292:    0000        ..      DCW    0
        0x08000294:    40005800    .X.@    DCD    1073764352
    $t
    i.DMA1_Channel4_IRQHandler
    DMA1_Channel4_IRQHandler
;;; .\../Src/stm32f1xx_it.c
;;;158    {
        0x08000298:    b510        ..      PUSH     {r4,lr}
;;;159      /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */
;;;160      if(LL_DMA_IsActiveFlag_TC4(DMA1))
        0x0800029a:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h
;;;1258     return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF4) == (DMA_ISR_TCIF4));
        0x0800029c:    480b        .H      LDR      r0,[pc,#44] ; [0x80002cc] = 0x40020000
        0x0800029e:    6800        .h      LDR      r0,[r0,#0]
        0x080002a0:    f3c03040    ..@0    UBFX     r0,r0,#13,#1
        0x080002a4:    b140        @.      CBZ      r0,0x80002b8 ; DMA1_Channel4_IRQHandler + 32
;;; .\../Src/stm32f1xx_it.c
;;;162        LL_DMA_ClearFlag_GI4(DMA1);
        0x080002a6:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h
;;;1489     WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF4);
        0x080002a8:    f44f5080    O..P    MOV      r0,#0x1000
        0x080002ac:    4907        .I      LDR      r1,[pc,#28] ; [0x80002cc] = 0x40020000
        0x080002ae:    6048        H`      STR      r0,[r1,#4]
;;;1490   }
        0x080002b0:    bf00        ..      NOP      
;;; .\../Src/stm32f1xx_it.c
;;;163        Transfer_Complete_Callback();
        0x080002b2:    f001fcbb    ....    BL       Transfer_Complete_Callback ; 0x8001c2c
        0x080002b6:    e007        ..      B        0x80002c8 ; DMA1_Channel4_IRQHandler + 48
;;;164    //    DMA1_Transfer_Complete_Callback();
;;;165      }
;;;166      else if(LL_DMA_IsActiveFlag_TE4(DMA1))
        0x080002b8:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h
;;;1412     return (READ_BIT(DMAx->ISR, DMA_ISR_TEIF4) == (DMA_ISR_TEIF4));
        0x080002ba:    4804        .H      LDR      r0,[pc,#16] ; [0x80002cc] = 0x40020000
        0x080002bc:    6800        .h      LDR      r0,[r0,#0]
        0x080002be:    f3c030c0    ...0    UBFX     r0,r0,#15,#1
        0x080002c2:    b108        ..      CBZ      r0,0x80002c8 ; DMA1_Channel4_IRQHandler + 48
;;; .\../Src/stm32f1xx_it.c
;;;168        Transfer_Error_Callback();
        0x080002c4:    f001fcdc    ....    BL       Transfer_Error_Callback ; 0x8001c80
;;;169      }
;;;170    
;;;171      /* USER CODE END DMA1_Channel4_IRQn 0 */
;;;172      
;;;173      /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */
;;;174    
;;;175      /* USER CODE END DMA1_Channel4_IRQn 1 */
;;;176    }
        0x080002c8:    bd10        ..      POP      {r4,pc}
    $d
        0x080002ca:    0000        ..      DCW    0
        0x080002cc:    40020000    ...@    DCD    1073872896
    $t
    i.Handle_I2C_MasterDMA_IT
    Handle_I2C_MasterDMA_IT
;;; .\..\Src\i2c_interface.c
;;;217    {
        0x080002d0:    e92d4ff8    -..O    PUSH     {r3-r11,lr}
        0x080002d4:    4604        .F      MOV      r4,r0
        0x080002d6:    468a        .F      MOV      r10,r1
        0x080002d8:    4617        .F      MOV      r7,r2
        0x080002da:    461d        .F      MOV      r5,r3
        0x080002dc:    f8dd8028    ..(.    LDR      r8,[sp,#0x28]
;;;218    	if(ubTransferComplete == 1){
        0x080002e0:    4823        #H      LDR      r0,[pc,#140] ; [0x8000370] = 0x20000027
        0x080002e2:    7800        .x      LDRB     r0,[r0,#0]
        0x080002e4:    2801        .(      CMP      r0,#1
        0x080002e6:    d103        ..      BNE      0x80002f0 ; Handle_I2C_MasterDMA_IT + 32
;;;219    		ubTransferComplete = 0;
        0x080002e8:    2000        .       MOVS     r0,#0
        0x080002ea:    4921        !I      LDR      r1,[pc,#132] ; [0x8000370] = 0x20000027
        0x080002ec:    7008        .p      STRB     r0,[r1,#0]
        0x080002ee:    e004        ..      B        0x80002fa ; Handle_I2C_MasterDMA_IT + 42
;;;220    	} else {
;;;221      	while(!ubTransferComplete)
        0x080002f0:    bf00        ..      NOP      
        0x080002f2:    481f        .H      LDR      r0,[pc,#124] ; [0x8000370] = 0x20000027
        0x080002f4:    7800        .x      LDRB     r0,[r0,#0]
        0x080002f6:    2800        .(      CMP      r0,#0
        0x080002f8:    d0fb        ..      BEQ      0x80002f2 ; Handle_I2C_MasterDMA_IT + 34
;;;222      	{}
;;;223    //		return 1;
;;;224    	}
;;;225      LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_4, count);
        0x080002fa:    462a        *F      MOV      r2,r5
        0x080002fc:    2104        .!      MOVS     r1,#4
        0x080002fe:    481d        .H      LDR      r0,[pc,#116] ; [0x8000374] = 0x40020000
        0x08000300:    f000f906    ....    BL       LL_DMA_SetDataLength ; 0x8000510
;;;226      LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_4, (uint32_t)data, (uint32_t)LL_I2C_DMA_GetRegAddr(I2Cx), LL_DMA_DIRECTION_MEMORY_TO_PERIPH ); //  LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_4));
        0x08000304:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;467      return (uint32_t) & (I2Cx->DR);
        0x08000306:    f1040010    ....    ADD      r0,r4,#0x10
        0x0800030a:    4681        .F      MOV      r9,r0
        0x0800030c:    2010        .       MOVS     r0,#0x10
        0x0800030e:    464b        KF      MOV      r3,r9
        0x08000310:    463a        :F      MOV      r2,r7
        0x08000312:    2104        .!      MOVS     r1,#4
        0x08000314:    9000        ..      STR      r0,[sp,#0]
        0x08000316:    4817        .H      LDR      r0,[pc,#92] ; [0x8000374] = 0x40020000
        0x08000318:    f000f8b6    ....    BL       LL_DMA_ConfigAddresses ; 0x8000488
;;; .\..\Src\i2c_interface.c
;;;228      LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_4);
        0x0800031c:    2104        .!      MOVS     r1,#4
        0x0800031e:    4815        .H      LDR      r0,[pc,#84] ; [0x8000374] = 0x40020000
        0x08000320:    f000f8da    ....    BL       LL_DMA_EnableIT_TC ; 0x80004d8
;;;229      LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_4);
        0x08000324:    2104        .!      MOVS     r1,#4
        0x08000326:    4813        .H      LDR      r0,[pc,#76] ; [0x8000374] = 0x40020000
        0x08000328:    f000f8e4    ....    BL       LL_DMA_EnableIT_TE ; 0x80004f4
;;;230    
;;;231      /* (1) Enable DMA transfer **************************************************/
;;;232      LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_4);
        0x0800032c:    2104        .!      MOVS     r1,#4
        0x0800032e:    4811        .H      LDR      r0,[pc,#68] ; [0x8000374] = 0x40020000
        0x08000330:    f000f8c4    ....    BL       LL_DMA_EnableChannel ; 0x80004bc
;;;233      /* (2) Prepare acknowledge for Master data reception ************************/
;;;234      LL_I2C_AcknowledgeNextData(I2Cx, LL_I2C_ACK);
        0x08000334:    f44f6180    O..a    MOV      r1,#0x400
        0x08000338:    4620         F      MOV      r0,r4
        0x0800033a:    f000f99d    ....    BL       LL_I2C_AcknowledgeNextData ; 0x8000678
;;;235    
;;;236      /* (3) Initiate a Start condition to the Slave device ***********************/
;;;237      /* Master Generate Start condition */
;;;238      LL_I2C_GenerateStartCondition(I2Cx);
        0x0800033e:    4620         F      MOV      r0,r4
        0x08000340:    f000f9fe    ....    BL       LL_I2C_GenerateStartCondition ; 0x8000740
;;;239    
;;;240      /* (4) Loop until end of transfer completed (DMA TC raised) *****************/
;;;241    
;;;242    #if (USE_TIMEOUT == 1)
;;;243      int Timeout = timeout;
        0x08000344:    4646        FF      MOV      r6,r8
;;;244    #endif /* USE_TIMEOUT */
;;;245    
;;;246      /* Loop until DMA transfer complete event */
;;;247      while(!ubTransferComplete)
        0x08000346:    e00d        ..      B        0x8000364 ; Handle_I2C_MasterDMA_IT + 148
;;;248      {
;;;249    #if (USE_TIMEOUT == 1)
;;;250        /* Check Systick counter flag to decrement the time-out value */
;;;251        if (LL_SYSTICK_IsActiveCounterFlag()) 
        0x08000348:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_cortex.h
;;;249      return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
        0x0800034a:    f04f20e0    O..     MOV      r0,#0xe000e000
        0x0800034e:    6900        .i      LDR      r0,[r0,#0x10]
        0x08000350:    f3c04000    ...@    UBFX     r0,r0,#16,#1
        0x08000354:    b130        0.      CBZ      r0,0x8000364 ; Handle_I2C_MasterDMA_IT + 148
;;; .\..\Src\i2c_interface.c
;;;253          if(Timeout-- == 0)
        0x08000356:    1e30        0.      SUBS     r0,r6,#0
        0x08000358:    f1a60601    ....    SUB      r6,r6,#1
        0x0800035c:    d102        ..      BNE      0x8000364 ; Handle_I2C_MasterDMA_IT + 148
;;;254          {
;;;255            /* Time-out occurred. Set LED to blinking mode */
;;;256            return -1;
        0x0800035e:    1e40        @.      SUBS     r0,r0,#1
;;;257          }
;;;258        }
;;;259    #endif /* USE_TIMEOUT */
;;;260      }
;;;261    
;;;262    	return 0;
;;;263      /* (5) End of tranfer, Data consistency are checking into Slave process *****/
;;;264    }
        0x08000360:    e8bd8ff8    ....    POP      {r3-r11,pc}
        0x08000364:    4802        .H      LDR      r0,[pc,#8] ; [0x8000370] = 0x20000027
        0x08000366:    7800        .x      LDRB     r0,[r0,#0]
        0x08000368:    2800        .(      CMP      r0,#0
        0x0800036a:    d0ed        ..      BEQ      0x8000348 ; Handle_I2C_MasterDMA_IT + 120
        0x0800036c:    2000        .       MOVS     r0,#0
        0x0800036e:    e7f7        ..      B        0x8000360 ; Handle_I2C_MasterDMA_IT + 144
    $d
        0x08000370:    20000027    '..     DCD    536870951
        0x08000374:    40020000    ...@    DCD    1073872896
    $t
    i.Handle_I2C_MasterDMA_IT_async
    Handle_I2C_MasterDMA_IT_async
;;;265    
;;;266    int Handle_I2C_MasterDMA_IT_async(uint8_t address, uint8_t *data, uint16_t count)
;;;267    {
        0x08000378:    b5f8        ..      PUSH     {r3-r7,lr}
        0x0800037a:    4607        .F      MOV      r7,r0
        0x0800037c:    460c        .F      MOV      r4,r1
        0x0800037e:    4615        .F      MOV      r5,r2
;;;268    	if(ubTransferComplete == 1){
        0x08000380:    4818        .H      LDR      r0,[pc,#96] ; [0x80003e4] = 0x20000027
        0x08000382:    7800        .x      LDRB     r0,[r0,#0]
        0x08000384:    2801        .(      CMP      r0,#1
        0x08000386:    d103        ..      BNE      0x8000390 ; Handle_I2C_MasterDMA_IT_async + 24
;;;269    		ubTransferComplete = 0;
        0x08000388:    2000        .       MOVS     r0,#0
        0x0800038a:    4916        .I      LDR      r1,[pc,#88] ; [0x80003e4] = 0x20000027
        0x0800038c:    7008        .p      STRB     r0,[r1,#0]
        0x0800038e:    e001        ..      B        0x8000394 ; Handle_I2C_MasterDMA_IT_async + 28
;;;270    	} else {
;;;271    		return 1;
        0x08000390:    2001        .       MOVS     r0,#1
        0x08000392:    bdf8        ..      POP      {r3-r7,pc}
;;;272    	}
;;;273      LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_4, count);
        0x08000394:    462a        *F      MOV      r2,r5
        0x08000396:    2104        .!      MOVS     r1,#4
        0x08000398:    4813        .H      LDR      r0,[pc,#76] ; [0x80003e8] = 0x40020000
        0x0800039a:    f000f8b9    ....    BL       LL_DMA_SetDataLength ; 0x8000510
;;;274      LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_4, (uint32_t)data, (uint32_t)LL_I2C_DMA_GetRegAddr(I2C2), LL_DMA_DIRECTION_MEMORY_TO_PERIPH ); //  LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_4));
        0x0800039e:    4813        .H      LDR      r0,[pc,#76] ; [0x80003ec] = 0x40005800
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;467      return (uint32_t) & (I2Cx->DR);
        0x080003a0:    f1000110    ....    ADD      r1,r0,#0x10
        0x080003a4:    460e        .F      MOV      r6,r1
        0x080003a6:    2010        .       MOVS     r0,#0x10
        0x080003a8:    4633        3F      MOV      r3,r6
        0x080003aa:    4622        "F      MOV      r2,r4
        0x080003ac:    2104        .!      MOVS     r1,#4
        0x080003ae:    9000        ..      STR      r0,[sp,#0]
        0x080003b0:    480d        .H      LDR      r0,[pc,#52] ; [0x80003e8] = 0x40020000
        0x080003b2:    f000f869    ..i.    BL       LL_DMA_ConfigAddresses ; 0x8000488
;;; .\..\Src\i2c_interface.c
;;;276      LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_4);
        0x080003b6:    2104        .!      MOVS     r1,#4
        0x080003b8:    480b        .H      LDR      r0,[pc,#44] ; [0x80003e8] = 0x40020000
        0x080003ba:    f000f88d    ....    BL       LL_DMA_EnableIT_TC ; 0x80004d8
;;;277      LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_4);
        0x080003be:    2104        .!      MOVS     r1,#4
        0x080003c0:    4809        .H      LDR      r0,[pc,#36] ; [0x80003e8] = 0x40020000
        0x080003c2:    f000f897    ....    BL       LL_DMA_EnableIT_TE ; 0x80004f4
;;;278    
;;;279      /* (1) Enable DMA transfer **************************************************/
;;;280      LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_4);
        0x080003c6:    2104        .!      MOVS     r1,#4
        0x080003c8:    4807        .H      LDR      r0,[pc,#28] ; [0x80003e8] = 0x40020000
        0x080003ca:    f000f877    ..w.    BL       LL_DMA_EnableChannel ; 0x80004bc
;;;281      /* (2) Prepare acknowledge for Master data reception ************************/
;;;282      LL_I2C_AcknowledgeNextData(I2C2, LL_I2C_ACK);
        0x080003ce:    f44f6180    O..a    MOV      r1,#0x400
        0x080003d2:    4806        .H      LDR      r0,[pc,#24] ; [0x80003ec] = 0x40005800
        0x080003d4:    f000f950    ..P.    BL       LL_I2C_AcknowledgeNextData ; 0x8000678
;;;283    
;;;284      /* (3) Initiate a Start condition to the Slave device ***********************/
;;;285      /* Master Generate Start condition */
;;;286      LL_I2C_GenerateStartCondition(I2C2);
        0x080003d8:    4804        .H      LDR      r0,[pc,#16] ; [0x80003ec] = 0x40005800
        0x080003da:    f000f9b1    ....    BL       LL_I2C_GenerateStartCondition ; 0x8000740
;;;287    	return 0;
        0x080003de:    2000        .       MOVS     r0,#0
        0x080003e0:    e7d7        ..      B        0x8000392 ; Handle_I2C_MasterDMA_IT_async + 26
    $d
        0x080003e2:    0000        ..      DCW    0
        0x080003e4:    20000027    '..     DCD    536870951
        0x080003e8:    40020000    ...@    DCD    1073872896
        0x080003ec:    40005800    .X.@    DCD    1073764352
    $t
    i.I2C2_ER_IRQHandler
    I2C2_ER_IRQHandler
;;; .\../Src/stm32f1xx_it.c
;;;304      while(1){
        0x080003f0:    bf00        ..      NOP      
        0x080003f2:    e7fe        ..      B        0x80003f2 ; I2C2_ER_IRQHandler + 2
    i.I2C2_EV_IRQHandler
    I2C2_EV_IRQHandler
;;; .\../Src/stm32f1xx_it.c (273)
        0x080003f4:    b508        ..      PUSH     {r3,lr}
;;;274      /* USER CODE BEGIN I2C2_EV_IRQn 0 */
;;;275      /* Check SB flag value in ISR register */
;;;276      if(LL_I2C_IsActiveFlag_SB(I2C2))
        0x080003f6:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;1186     return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
        0x080003f8:    4814        .H      LDR      r0,[pc,#80] ; [0x800044c] = 0x40005800
        0x080003fa:    6940        @i      LDR      r0,[r0,#0x14]
        0x080003fc:    f0000001    ....    AND      r0,r0,#1
        0x08000400:    b148        H.      CBZ      r0,0x8000416 ; I2C2_EV_IRQHandler + 34
;;; .\../Src/stm32f1xx_it.c
;;;279        LL_I2C_TransmitData8(I2C2, SSD1306_I2C_ADDR);
        0x08000402:    2078        x       MOVS     r0,#0x78
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;1758     MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
        0x08000404:    4911        .I      LDR      r1,[pc,#68] ; [0x800044c] = 0x40005800
        0x08000406:    6909        .i      LDR      r1,[r1,#0x10]
        0x08000408:    f02101ff    !...    BIC      r1,r1,#0xff
        0x0800040c:    4301        .C      ORRS     r1,r1,r0
        0x0800040e:    4a0f        .J      LDR      r2,[pc,#60] ; [0x800044c] = 0x40005800
        0x08000410:    6111        .a      STR      r1,[r2,#0x10]
;;;1759   }
        0x08000412:    bf00        ..      NOP      
        0x08000414:    e018        ..      B        0x8000448 ; I2C2_EV_IRQHandler + 84
;;; .\../Src/stm32f1xx_it.c
;;;282      else if(LL_I2C_IsActiveFlag_ADDR(I2C2))
        0x08000416:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;1199     return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
        0x08000418:    480c        .H      LDR      r0,[pc,#48] ; [0x800044c] = 0x40005800
        0x0800041a:    6940        @i      LDR      r0,[r0,#0x14]
        0x0800041c:    f3c00040    ..@.    UBFX     r0,r0,#1,#1
        0x08000420:    b190        ..      CBZ      r0,0x8000448 ; I2C2_EV_IRQHandler + 84
;;; .\../Src/stm32f1xx_it.c
;;;285        LL_I2C_EnableDMAReq_TX(I2C2);
        0x08000422:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;401      SET_BIT(I2Cx->CR2, I2C_CR2_DMAEN);
        0x08000424:    4809        .H      LDR      r0,[pc,#36] ; [0x800044c] = 0x40005800
        0x08000426:    6840        @h      LDR      r0,[r0,#4]
        0x08000428:    f4406000    @..`    ORR      r0,r0,#0x800
        0x0800042c:    4907        .I      LDR      r1,[pc,#28] ; [0x800044c] = 0x40005800
        0x0800042e:    6048        H`      STR      r0,[r1,#4]
;;;402    }
        0x08000430:    bf00        ..      NOP      
;;; .\../Src/stm32f1xx_it.c
;;;288        LL_I2C_ClearFlag_ADDR(I2C2);
        0x08000432:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;1415     tmpreg = I2Cx->SR1;
        0x08000434:    4608        .F      MOV      r0,r1
        0x08000436:    6940        @i      LDR      r0,[r0,#0x14]
        0x08000438:    9000        ..      STR      r0,[sp,#0]
;;;1416     (void) tmpreg;
        0x0800043a:    bf00        ..      NOP      
;;;1417     tmpreg = I2Cx->SR2;
        0x0800043c:    4608        .F      MOV      r0,r1
        0x0800043e:    6980        .i      LDR      r0,[r0,#0x18]
        0x08000440:    9000        ..      STR      r0,[sp,#0]
;;;1418     (void) tmpreg;
        0x08000442:    bf00        ..      NOP      
;;;1419   }
        0x08000444:    bf00        ..      NOP      
        0x08000446:    bf00        ..      NOP      
;;; .\../Src/stm32f1xx_it.c
;;;296    }
        0x08000448:    bd08        ..      POP      {r3,pc}
    $d
        0x0800044a:    0000        ..      DCW    0
        0x0800044c:    40005800    .X.@    DCD    1073764352
    $t
    i.LL_APB1_GRP1_EnableClock
    LL_APB1_GRP1_EnableClock
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h
;;;464    {
        0x08000450:    b508        ..      PUSH     {r3,lr}
;;;465      __IO uint32_t tmpreg;
;;;466      SET_BIT(RCC->APB1ENR, Periphs);
        0x08000452:    4905        .I      LDR      r1,[pc,#20] ; [0x8000468] = 0x40021000
        0x08000454:    69c9        .i      LDR      r1,[r1,#0x1c]
        0x08000456:    4301        .C      ORRS     r1,r1,r0
        0x08000458:    4a03        .J      LDR      r2,[pc,#12] ; [0x8000468] = 0x40021000
        0x0800045a:    61d1        .a      STR      r1,[r2,#0x1c]
;;;467      /* Delay after an RCC peripheral clock enabling */
;;;468      tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
        0x0800045c:    4611        .F      MOV      r1,r2
        0x0800045e:    69c9        .i      LDR      r1,[r1,#0x1c]
        0x08000460:    4001        .@      ANDS     r1,r1,r0
        0x08000462:    9100        ..      STR      r1,[sp,#0]
;;;469      (void)tmpreg;
        0x08000464:    bf00        ..      NOP      
;;;470    }
        0x08000466:    bd08        ..      POP      {r3,pc}
    $d
        0x08000468:    40021000    ...@    DCD    1073876992
    $t
    i.LL_APB2_GRP1_EnableClock
    LL_APB2_GRP1_EnableClock
;;;471    
;;;472    /**
;;;473      * @brief  Check if APB1 peripheral clock is enabled or not
;;;474      * @rmtoll APB1ENR      BKPEN         LL_APB1_GRP1_IsEnabledClock\n
;;;475      *         APB1ENR      CAN1EN        LL_APB1_GRP1_IsEnabledClock\n
;;;476      *         APB1ENR      CAN2EN        LL_APB1_GRP1_IsEnabledClock\n
;;;477      *         APB1ENR      CECEN         LL_APB1_GRP1_IsEnabledClock\n
;;;478      *         APB1ENR      DACEN         LL_APB1_GRP1_IsEnabledClock\n
;;;479      *         APB1ENR      I2C1EN        LL_APB1_GRP1_IsEnabledClock\n
;;;480      *         APB1ENR      I2C2EN        LL_APB1_GRP1_IsEnabledClock\n
;;;481      *         APB1ENR      PWREN         LL_APB1_GRP1_IsEnabledClock\n
;;;482      *         APB1ENR      SPI2EN        LL_APB1_GRP1_IsEnabledClock\n
;;;483      *         APB1ENR      SPI3EN        LL_APB1_GRP1_IsEnabledClock\n
;;;484      *         APB1ENR      TIM12EN       LL_APB1_GRP1_IsEnabledClock\n
;;;485      *         APB1ENR      TIM13EN       LL_APB1_GRP1_IsEnabledClock\n
;;;486      *         APB1ENR      TIM14EN       LL_APB1_GRP1_IsEnabledClock\n
;;;487      *         APB1ENR      TIM2EN        LL_APB1_GRP1_IsEnabledClock\n
;;;488      *         APB1ENR      TIM3EN        LL_APB1_GRP1_IsEnabledClock\n
;;;489      *         APB1ENR      TIM4EN        LL_APB1_GRP1_IsEnabledClock\n
;;;490      *         APB1ENR      TIM5EN        LL_APB1_GRP1_IsEnabledClock\n
;;;491      *         APB1ENR      TIM6EN        LL_APB1_GRP1_IsEnabledClock\n
;;;492      *         APB1ENR      TIM7EN        LL_APB1_GRP1_IsEnabledClock\n
;;;493      *         APB1ENR      UART4EN       LL_APB1_GRP1_IsEnabledClock\n
;;;494      *         APB1ENR      UART5EN       LL_APB1_GRP1_IsEnabledClock\n
;;;495      *         APB1ENR      USART2EN      LL_APB1_GRP1_IsEnabledClock\n
;;;496      *         APB1ENR      USART3EN      LL_APB1_GRP1_IsEnabledClock\n
;;;497      *         APB1ENR      USBEN         LL_APB1_GRP1_IsEnabledClock\n
;;;498      *         APB1ENR      WWDGEN        LL_APB1_GRP1_IsEnabledClock
;;;499      * @param  Periphs This parameter can be a combination of the following values:
;;;500      *         @arg @ref LL_APB1_GRP1_PERIPH_BKP
;;;501      *         @arg @ref LL_APB1_GRP1_PERIPH_CAN1 (*)
;;;502      *         @arg @ref LL_APB1_GRP1_PERIPH_CAN2 (*)
;;;503      *         @arg @ref LL_APB1_GRP1_PERIPH_CEC (*)
;;;504      *         @arg @ref LL_APB1_GRP1_PERIPH_DAC1 (*)
;;;505      *         @arg @ref LL_APB1_GRP1_PERIPH_I2C1
;;;506      *         @arg @ref LL_APB1_GRP1_PERIPH_I2C2 (*)
;;;507      *         @arg @ref LL_APB1_GRP1_PERIPH_PWR
;;;508      *         @arg @ref LL_APB1_GRP1_PERIPH_SPI2 (*)
;;;509      *         @arg @ref LL_APB1_GRP1_PERIPH_SPI3 (*)
;;;510      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM12 (*)
;;;511      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM13 (*)
;;;512      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM14 (*)
;;;513      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM2
;;;514      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM3
;;;515      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM4 (*)
;;;516      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM5 (*)
;;;517      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM6 (*)
;;;518      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM7 (*)
;;;519      *         @arg @ref LL_APB1_GRP1_PERIPH_UART4 (*)
;;;520      *         @arg @ref LL_APB1_GRP1_PERIPH_UART5 (*)
;;;521      *         @arg @ref LL_APB1_GRP1_PERIPH_USART2
;;;522      *         @arg @ref LL_APB1_GRP1_PERIPH_USART3 (*)
;;;523      *         @arg @ref LL_APB1_GRP1_PERIPH_USB (*)
;;;524      *         @arg @ref LL_APB1_GRP1_PERIPH_WWDG
;;;525      *
;;;526      *         (*) value not defined in all devices.
;;;527      * @retval State of Periphs (1 or 0).
;;;528    */
;;;529    __STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
;;;530    {
;;;531      return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
;;;532    }
;;;533    
;;;534    /**
;;;535      * @brief  Disable APB1 peripherals clock.
;;;536      * @rmtoll APB1ENR      BKPEN         LL_APB1_GRP1_DisableClock\n
;;;537      *         APB1ENR      CAN1EN        LL_APB1_GRP1_DisableClock\n
;;;538      *         APB1ENR      CAN2EN        LL_APB1_GRP1_DisableClock\n
;;;539      *         APB1ENR      CECEN         LL_APB1_GRP1_DisableClock\n
;;;540      *         APB1ENR      DACEN         LL_APB1_GRP1_DisableClock\n
;;;541      *         APB1ENR      I2C1EN        LL_APB1_GRP1_DisableClock\n
;;;542      *         APB1ENR      I2C2EN        LL_APB1_GRP1_DisableClock\n
;;;543      *         APB1ENR      PWREN         LL_APB1_GRP1_DisableClock\n
;;;544      *         APB1ENR      SPI2EN        LL_APB1_GRP1_DisableClock\n
;;;545      *         APB1ENR      SPI3EN        LL_APB1_GRP1_DisableClock\n
;;;546      *         APB1ENR      TIM12EN       LL_APB1_GRP1_DisableClock\n
;;;547      *         APB1ENR      TIM13EN       LL_APB1_GRP1_DisableClock\n
;;;548      *         APB1ENR      TIM14EN       LL_APB1_GRP1_DisableClock\n
;;;549      *         APB1ENR      TIM2EN        LL_APB1_GRP1_DisableClock\n
;;;550      *         APB1ENR      TIM3EN        LL_APB1_GRP1_DisableClock\n
;;;551      *         APB1ENR      TIM4EN        LL_APB1_GRP1_DisableClock\n
;;;552      *         APB1ENR      TIM5EN        LL_APB1_GRP1_DisableClock\n
;;;553      *         APB1ENR      TIM6EN        LL_APB1_GRP1_DisableClock\n
;;;554      *         APB1ENR      TIM7EN        LL_APB1_GRP1_DisableClock\n
;;;555      *         APB1ENR      UART4EN       LL_APB1_GRP1_DisableClock\n
;;;556      *         APB1ENR      UART5EN       LL_APB1_GRP1_DisableClock\n
;;;557      *         APB1ENR      USART2EN      LL_APB1_GRP1_DisableClock\n
;;;558      *         APB1ENR      USART3EN      LL_APB1_GRP1_DisableClock\n
;;;559      *         APB1ENR      USBEN         LL_APB1_GRP1_DisableClock\n
;;;560      *         APB1ENR      WWDGEN        LL_APB1_GRP1_DisableClock
;;;561      * @param  Periphs This parameter can be a combination of the following values:
;;;562      *         @arg @ref LL_APB1_GRP1_PERIPH_BKP
;;;563      *         @arg @ref LL_APB1_GRP1_PERIPH_CAN1 (*)
;;;564      *         @arg @ref LL_APB1_GRP1_PERIPH_CAN2 (*)
;;;565      *         @arg @ref LL_APB1_GRP1_PERIPH_CEC (*)
;;;566      *         @arg @ref LL_APB1_GRP1_PERIPH_DAC1 (*)
;;;567      *         @arg @ref LL_APB1_GRP1_PERIPH_I2C1
;;;568      *         @arg @ref LL_APB1_GRP1_PERIPH_I2C2 (*)
;;;569      *         @arg @ref LL_APB1_GRP1_PERIPH_PWR
;;;570      *         @arg @ref LL_APB1_GRP1_PERIPH_SPI2 (*)
;;;571      *         @arg @ref LL_APB1_GRP1_PERIPH_SPI3 (*)
;;;572      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM12 (*)
;;;573      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM13 (*)
;;;574      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM14 (*)
;;;575      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM2
;;;576      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM3
;;;577      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM4 (*)
;;;578      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM5 (*)
;;;579      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM6 (*)
;;;580      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM7 (*)
;;;581      *         @arg @ref LL_APB1_GRP1_PERIPH_UART4 (*)
;;;582      *         @arg @ref LL_APB1_GRP1_PERIPH_UART5 (*)
;;;583      *         @arg @ref LL_APB1_GRP1_PERIPH_USART2
;;;584      *         @arg @ref LL_APB1_GRP1_PERIPH_USART3 (*)
;;;585      *         @arg @ref LL_APB1_GRP1_PERIPH_USB (*)
;;;586      *         @arg @ref LL_APB1_GRP1_PERIPH_WWDG
;;;587      *
;;;588      *         (*) value not defined in all devices.
;;;589      * @retval None
;;;590    */
;;;591    __STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
;;;592    {
;;;593      CLEAR_BIT(RCC->APB1ENR, Periphs);
;;;594    }
;;;595    
;;;596    /**
;;;597      * @brief  Force APB1 peripherals reset.
;;;598      * @rmtoll APB1RSTR     BKPRST        LL_APB1_GRP1_ForceReset\n
;;;599      *         APB1RSTR     CAN1RST       LL_APB1_GRP1_ForceReset\n
;;;600      *         APB1RSTR     CAN2RST       LL_APB1_GRP1_ForceReset\n
;;;601      *         APB1RSTR     CECRST        LL_APB1_GRP1_ForceReset\n
;;;602      *         APB1RSTR     DACRST        LL_APB1_GRP1_ForceReset\n
;;;603      *         APB1RSTR     I2C1RST       LL_APB1_GRP1_ForceReset\n
;;;604      *         APB1RSTR     I2C2RST       LL_APB1_GRP1_ForceReset\n
;;;605      *         APB1RSTR     PWRRST        LL_APB1_GRP1_ForceReset\n
;;;606      *         APB1RSTR     SPI2RST       LL_APB1_GRP1_ForceReset\n
;;;607      *         APB1RSTR     SPI3RST       LL_APB1_GRP1_ForceReset\n
;;;608      *         APB1RSTR     TIM12RST      LL_APB1_GRP1_ForceReset\n
;;;609      *         APB1RSTR     TIM13RST      LL_APB1_GRP1_ForceReset\n
;;;610      *         APB1RSTR     TIM14RST      LL_APB1_GRP1_ForceReset\n
;;;611      *         APB1RSTR     TIM2RST       LL_APB1_GRP1_ForceReset\n
;;;612      *         APB1RSTR     TIM3RST       LL_APB1_GRP1_ForceReset\n
;;;613      *         APB1RSTR     TIM4RST       LL_APB1_GRP1_ForceReset\n
;;;614      *         APB1RSTR     TIM5RST       LL_APB1_GRP1_ForceReset\n
;;;615      *         APB1RSTR     TIM6RST       LL_APB1_GRP1_ForceReset\n
;;;616      *         APB1RSTR     TIM7RST       LL_APB1_GRP1_ForceReset\n
;;;617      *         APB1RSTR     UART4RST      LL_APB1_GRP1_ForceReset\n
;;;618      *         APB1RSTR     UART5RST      LL_APB1_GRP1_ForceReset\n
;;;619      *         APB1RSTR     USART2RST     LL_APB1_GRP1_ForceReset\n
;;;620      *         APB1RSTR     USART3RST     LL_APB1_GRP1_ForceReset\n
;;;621      *         APB1RSTR     USBRST        LL_APB1_GRP1_ForceReset\n
;;;622      *         APB1RSTR     WWDGRST       LL_APB1_GRP1_ForceReset
;;;623      * @param  Periphs This parameter can be a combination of the following values:
;;;624      *         @arg @ref LL_APB1_GRP1_PERIPH_ALL
;;;625      *         @arg @ref LL_APB1_GRP1_PERIPH_BKP
;;;626      *         @arg @ref LL_APB1_GRP1_PERIPH_CAN1 (*)
;;;627      *         @arg @ref LL_APB1_GRP1_PERIPH_CAN2 (*)
;;;628      *         @arg @ref LL_APB1_GRP1_PERIPH_CEC (*)
;;;629      *         @arg @ref LL_APB1_GRP1_PERIPH_DAC1 (*)
;;;630      *         @arg @ref LL_APB1_GRP1_PERIPH_I2C1
;;;631      *         @arg @ref LL_APB1_GRP1_PERIPH_I2C2 (*)
;;;632      *         @arg @ref LL_APB1_GRP1_PERIPH_PWR
;;;633      *         @arg @ref LL_APB1_GRP1_PERIPH_SPI2 (*)
;;;634      *         @arg @ref LL_APB1_GRP1_PERIPH_SPI3 (*)
;;;635      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM12 (*)
;;;636      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM13 (*)
;;;637      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM14 (*)
;;;638      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM2
;;;639      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM3
;;;640      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM4 (*)
;;;641      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM5 (*)
;;;642      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM6 (*)
;;;643      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM7 (*)
;;;644      *         @arg @ref LL_APB1_GRP1_PERIPH_UART4 (*)
;;;645      *         @arg @ref LL_APB1_GRP1_PERIPH_UART5 (*)
;;;646      *         @arg @ref LL_APB1_GRP1_PERIPH_USART2
;;;647      *         @arg @ref LL_APB1_GRP1_PERIPH_USART3 (*)
;;;648      *         @arg @ref LL_APB1_GRP1_PERIPH_USB (*)
;;;649      *         @arg @ref LL_APB1_GRP1_PERIPH_WWDG
;;;650      *
;;;651      *         (*) value not defined in all devices.
;;;652      * @retval None
;;;653    */
;;;654    __STATIC_INLINE void LL_APB1_GRP1_ForceReset(uint32_t Periphs)
;;;655    {
;;;656      SET_BIT(RCC->APB1RSTR, Periphs);
;;;657    }
;;;658    
;;;659    /**
;;;660      * @brief  Release APB1 peripherals reset.
;;;661      * @rmtoll APB1RSTR     BKPRST        LL_APB1_GRP1_ReleaseReset\n
;;;662      *         APB1RSTR     CAN1RST       LL_APB1_GRP1_ReleaseReset\n
;;;663      *         APB1RSTR     CAN2RST       LL_APB1_GRP1_ReleaseReset\n
;;;664      *         APB1RSTR     CECRST        LL_APB1_GRP1_ReleaseReset\n
;;;665      *         APB1RSTR     DACRST        LL_APB1_GRP1_ReleaseReset\n
;;;666      *         APB1RSTR     I2C1RST       LL_APB1_GRP1_ReleaseReset\n
;;;667      *         APB1RSTR     I2C2RST       LL_APB1_GRP1_ReleaseReset\n
;;;668      *         APB1RSTR     PWRRST        LL_APB1_GRP1_ReleaseReset\n
;;;669      *         APB1RSTR     SPI2RST       LL_APB1_GRP1_ReleaseReset\n
;;;670      *         APB1RSTR     SPI3RST       LL_APB1_GRP1_ReleaseReset\n
;;;671      *         APB1RSTR     TIM12RST      LL_APB1_GRP1_ReleaseReset\n
;;;672      *         APB1RSTR     TIM13RST      LL_APB1_GRP1_ReleaseReset\n
;;;673      *         APB1RSTR     TIM14RST      LL_APB1_GRP1_ReleaseReset\n
;;;674      *         APB1RSTR     TIM2RST       LL_APB1_GRP1_ReleaseReset\n
;;;675      *         APB1RSTR     TIM3RST       LL_APB1_GRP1_ReleaseReset\n
;;;676      *         APB1RSTR     TIM4RST       LL_APB1_GRP1_ReleaseReset\n
;;;677      *         APB1RSTR     TIM5RST       LL_APB1_GRP1_ReleaseReset\n
;;;678      *         APB1RSTR     TIM6RST       LL_APB1_GRP1_ReleaseReset\n
;;;679      *         APB1RSTR     TIM7RST       LL_APB1_GRP1_ReleaseReset\n
;;;680      *         APB1RSTR     UART4RST      LL_APB1_GRP1_ReleaseReset\n
;;;681      *         APB1RSTR     UART5RST      LL_APB1_GRP1_ReleaseReset\n
;;;682      *         APB1RSTR     USART2RST     LL_APB1_GRP1_ReleaseReset\n
;;;683      *         APB1RSTR     USART3RST     LL_APB1_GRP1_ReleaseReset\n
;;;684      *         APB1RSTR     USBRST        LL_APB1_GRP1_ReleaseReset\n
;;;685      *         APB1RSTR     WWDGRST       LL_APB1_GRP1_ReleaseReset
;;;686      * @param  Periphs This parameter can be a combination of the following values:
;;;687      *         @arg @ref LL_APB1_GRP1_PERIPH_ALL
;;;688      *         @arg @ref LL_APB1_GRP1_PERIPH_BKP
;;;689      *         @arg @ref LL_APB1_GRP1_PERIPH_CAN1 (*)
;;;690      *         @arg @ref LL_APB1_GRP1_PERIPH_CAN2 (*)
;;;691      *         @arg @ref LL_APB1_GRP1_PERIPH_CEC (*)
;;;692      *         @arg @ref LL_APB1_GRP1_PERIPH_DAC1 (*)
;;;693      *         @arg @ref LL_APB1_GRP1_PERIPH_I2C1
;;;694      *         @arg @ref LL_APB1_GRP1_PERIPH_I2C2 (*)
;;;695      *         @arg @ref LL_APB1_GRP1_PERIPH_PWR
;;;696      *         @arg @ref LL_APB1_GRP1_PERIPH_SPI2 (*)
;;;697      *         @arg @ref LL_APB1_GRP1_PERIPH_SPI3 (*)
;;;698      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM12 (*)
;;;699      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM13 (*)
;;;700      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM14 (*)
;;;701      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM2
;;;702      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM3
;;;703      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM4 (*)
;;;704      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM5 (*)
;;;705      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM6 (*)
;;;706      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM7 (*)
;;;707      *         @arg @ref LL_APB1_GRP1_PERIPH_UART4 (*)
;;;708      *         @arg @ref LL_APB1_GRP1_PERIPH_UART5 (*)
;;;709      *         @arg @ref LL_APB1_GRP1_PERIPH_USART2
;;;710      *         @arg @ref LL_APB1_GRP1_PERIPH_USART3 (*)
;;;711      *         @arg @ref LL_APB1_GRP1_PERIPH_USB (*)
;;;712      *         @arg @ref LL_APB1_GRP1_PERIPH_WWDG
;;;713      *
;;;714      *         (*) value not defined in all devices.
;;;715      * @retval None
;;;716    */
;;;717    __STATIC_INLINE void LL_APB1_GRP1_ReleaseReset(uint32_t Periphs)
;;;718    {
;;;719      CLEAR_BIT(RCC->APB1RSTR, Periphs);
;;;720    }
;;;721    
;;;722    /**
;;;723      * @}
;;;724      */
;;;725    
;;;726    /** @defgroup BUS_LL_EF_APB2 APB2
;;;727      * @{
;;;728      */
;;;729    
;;;730    /**
;;;731      * @brief  Enable APB2 peripherals clock.
;;;732      * @rmtoll APB2ENR      ADC1EN        LL_APB2_GRP1_EnableClock\n
;;;733      *         APB2ENR      ADC2EN        LL_APB2_GRP1_EnableClock\n
;;;734      *         APB2ENR      ADC3EN        LL_APB2_GRP1_EnableClock\n
;;;735      *         APB2ENR      AFIOEN        LL_APB2_GRP1_EnableClock\n
;;;736      *         APB2ENR      IOPAEN        LL_APB2_GRP1_EnableClock\n
;;;737      *         APB2ENR      IOPBEN        LL_APB2_GRP1_EnableClock\n
;;;738      *         APB2ENR      IOPCEN        LL_APB2_GRP1_EnableClock\n
;;;739      *         APB2ENR      IOPDEN        LL_APB2_GRP1_EnableClock\n
;;;740      *         APB2ENR      IOPEEN        LL_APB2_GRP1_EnableClock\n
;;;741      *         APB2ENR      IOPFEN        LL_APB2_GRP1_EnableClock\n
;;;742      *         APB2ENR      IOPGEN        LL_APB2_GRP1_EnableClock\n
;;;743      *         APB2ENR      SPI1EN        LL_APB2_GRP1_EnableClock\n
;;;744      *         APB2ENR      TIM10EN       LL_APB2_GRP1_EnableClock\n
;;;745      *         APB2ENR      TIM11EN       LL_APB2_GRP1_EnableClock\n
;;;746      *         APB2ENR      TIM15EN       LL_APB2_GRP1_EnableClock\n
;;;747      *         APB2ENR      TIM16EN       LL_APB2_GRP1_EnableClock\n
;;;748      *         APB2ENR      TIM17EN       LL_APB2_GRP1_EnableClock\n
;;;749      *         APB2ENR      TIM1EN        LL_APB2_GRP1_EnableClock\n
;;;750      *         APB2ENR      TIM8EN        LL_APB2_GRP1_EnableClock\n
;;;751      *         APB2ENR      TIM9EN        LL_APB2_GRP1_EnableClock\n
;;;752      *         APB2ENR      USART1EN      LL_APB2_GRP1_EnableClock
;;;753      * @param  Periphs This parameter can be a combination of the following values:
;;;754      *         @arg @ref LL_APB2_GRP1_PERIPH_ADC1
;;;755      *         @arg @ref LL_APB2_GRP1_PERIPH_ADC2 (*)
;;;756      *         @arg @ref LL_APB2_GRP1_PERIPH_ADC3 (*)
;;;757      *         @arg @ref LL_APB2_GRP1_PERIPH_AFIO
;;;758      *         @arg @ref LL_APB2_GRP1_PERIPH_GPIOA
;;;759      *         @arg @ref LL_APB2_GRP1_PERIPH_GPIOB
;;;760      *         @arg @ref LL_APB2_GRP1_PERIPH_GPIOC
;;;761      *         @arg @ref LL_APB2_GRP1_PERIPH_GPIOD
;;;762      *         @arg @ref LL_APB2_GRP1_PERIPH_GPIOE (*)
;;;763      *         @arg @ref LL_APB2_GRP1_PERIPH_GPIOF (*)
;;;764      *         @arg @ref LL_APB2_GRP1_PERIPH_GPIOG (*)
;;;765      *         @arg @ref LL_APB2_GRP1_PERIPH_SPI1
;;;766      *         @arg @ref LL_APB2_GRP1_PERIPH_TIM10 (*)
;;;767      *         @arg @ref LL_APB2_GRP1_PERIPH_TIM11 (*)
;;;768      *         @arg @ref LL_APB2_GRP1_PERIPH_TIM15 (*)
;;;769      *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16 (*)
;;;770      *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17 (*)
;;;771      *         @arg @ref LL_APB2_GRP1_PERIPH_TIM1
;;;772      *         @arg @ref LL_APB2_GRP1_PERIPH_TIM8 (*)
;;;773      *         @arg @ref LL_APB2_GRP1_PERIPH_TIM9 (*)
;;;774      *         @arg @ref LL_APB2_GRP1_PERIPH_USART1
;;;775      *
;;;776      *         (*) value not defined in all devices.
;;;777      * @retval None
;;;778    */
;;;779    __STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
;;;780    {
        0x0800046c:    b508        ..      PUSH     {r3,lr}
;;;781      __IO uint32_t tmpreg;
;;;782      SET_BIT(RCC->APB2ENR, Periphs);
        0x0800046e:    4905        .I      LDR      r1,[pc,#20] ; [0x8000484] = 0x40021000
        0x08000470:    6989        .i      LDR      r1,[r1,#0x18]
        0x08000472:    4301        .C      ORRS     r1,r1,r0
        0x08000474:    4a03        .J      LDR      r2,[pc,#12] ; [0x8000484] = 0x40021000
        0x08000476:    6191        .a      STR      r1,[r2,#0x18]
;;;783      /* Delay after an RCC peripheral clock enabling */
;;;784      tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
        0x08000478:    4611        .F      MOV      r1,r2
        0x0800047a:    6989        .i      LDR      r1,[r1,#0x18]
        0x0800047c:    4001        .@      ANDS     r1,r1,r0
        0x0800047e:    9100        ..      STR      r1,[sp,#0]
;;;785      (void)tmpreg;
        0x08000480:    bf00        ..      NOP      
;;;786    }
        0x08000482:    bd08        ..      POP      {r3,pc}
    $d
        0x08000484:    40021000    ...@    DCD    1073876992
    $t
    i.LL_DMA_ConfigAddresses
    LL_DMA_ConfigAddresses
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h
;;;949    {
        0x08000488:    b570        p.      PUSH     {r4-r6,lr}
        0x0800048a:    9c04        ..      LDR      r4,[sp,#0x10]
;;;950      /* Direction Memory to Periph */
;;;951      if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
        0x0800048c:    2c10        .,      CMP      r4,#0x10
        0x0800048e:    d109        ..      BNE      0x80004a4 ; LL_DMA_ConfigAddresses + 28
;;;952      {
;;;953        WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
        0x08000490:    1e4d        M.      SUBS     r5,r1,#1
        0x08000492:    4e09        .N      LDR      r6,[pc,#36] ; [0x80004b8] = 0x8003b10
        0x08000494:    5d75        u]      LDRB     r5,[r6,r5]
        0x08000496:    4405        .D      ADD      r5,r5,r0
        0x08000498:    60ea        .`      STR      r2,[r5,#0xc]
;;;954        WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
        0x0800049a:    1e4d        M.      SUBS     r5,r1,#1
        0x0800049c:    5d75        u]      LDRB     r5,[r6,r5]
        0x0800049e:    4405        .D      ADD      r5,r5,r0
        0x080004a0:    60ab        .`      STR      r3,[r5,#8]
        0x080004a2:    e008        ..      B        0x80004b6 ; LL_DMA_ConfigAddresses + 46
;;;955      }
;;;956      /* Direction Periph to Memory and Memory to Memory */
;;;957      else
;;;958      {
;;;959        WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
        0x080004a4:    1e4d        M.      SUBS     r5,r1,#1
        0x080004a6:    4e04        .N      LDR      r6,[pc,#16] ; [0x80004b8] = 0x8003b10
        0x080004a8:    5d75        u]      LDRB     r5,[r6,r5]
        0x080004aa:    4405        .D      ADD      r5,r5,r0
        0x080004ac:    60aa        .`      STR      r2,[r5,#8]
;;;960        WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
        0x080004ae:    1e4d        M.      SUBS     r5,r1,#1
        0x080004b0:    5d75        u]      LDRB     r5,[r6,r5]
        0x080004b2:    4405        .D      ADD      r5,r5,r0
        0x080004b4:    60eb        .`      STR      r3,[r5,#0xc]
;;;961      }
;;;962    }
        0x080004b6:    bd70        p.      POP      {r4-r6,pc}
    $d
        0x080004b8:    08003b10    .;..    DCD    134232848
    $t
    i.LL_DMA_EnableChannel
    LL_DMA_EnableChannel
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h (471)
        0x080004bc:    b510        ..      PUSH     {r4,lr}
;;;472      SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
        0x080004be:    1e4a        J.      SUBS     r2,r1,#1
        0x080004c0:    4b04        .K      LDR      r3,[pc,#16] ; [0x80004d4] = 0x8003b10
        0x080004c2:    5c9a        .\      LDRB     r2,[r3,r2]
        0x080004c4:    5882        .X      LDR      r2,[r0,r2]
        0x080004c6:    f0420301    B...    ORR      r3,r2,#1
        0x080004ca:    1e4a        J.      SUBS     r2,r1,#1
        0x080004cc:    4c01        .L      LDR      r4,[pc,#4] ; [0x80004d4] = 0x8003b10
        0x080004ce:    5ca2        .\      LDRB     r2,[r4,r2]
        0x080004d0:    5083        .P      STR      r3,[r0,r2]
;;;473    }
        0x080004d2:    bd10        ..      POP      {r4,pc}
    $d
        0x080004d4:    08003b10    .;..    DCD    134232848
    $t
    i.LL_DMA_EnableIT_TC
    LL_DMA_EnableIT_TC
;;;474    
;;;475    /**
;;;476      * @brief  Disable DMA channel.
;;;477      * @rmtoll CCR          EN            LL_DMA_DisableChannel
;;;478      * @param  DMAx DMAx Instance
;;;479      * @param  Channel This parameter can be one of the following values:
;;;480      *         @arg @ref LL_DMA_CHANNEL_1
;;;481      *         @arg @ref LL_DMA_CHANNEL_2
;;;482      *         @arg @ref LL_DMA_CHANNEL_3
;;;483      *         @arg @ref LL_DMA_CHANNEL_4
;;;484      *         @arg @ref LL_DMA_CHANNEL_5
;;;485      *         @arg @ref LL_DMA_CHANNEL_6
;;;486      *         @arg @ref LL_DMA_CHANNEL_7
;;;487      * @retval None
;;;488      */
;;;489    __STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
;;;490    {
;;;491      CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
;;;492    }
;;;493    
;;;494    /**
;;;495      * @brief  Check if DMA channel is enabled or disabled.
;;;496      * @rmtoll CCR          EN            LL_DMA_IsEnabledChannel
;;;497      * @param  DMAx DMAx Instance
;;;498      * @param  Channel This parameter can be one of the following values:
;;;499      *         @arg @ref LL_DMA_CHANNEL_1
;;;500      *         @arg @ref LL_DMA_CHANNEL_2
;;;501      *         @arg @ref LL_DMA_CHANNEL_3
;;;502      *         @arg @ref LL_DMA_CHANNEL_4
;;;503      *         @arg @ref LL_DMA_CHANNEL_5
;;;504      *         @arg @ref LL_DMA_CHANNEL_6
;;;505      *         @arg @ref LL_DMA_CHANNEL_7
;;;506      * @retval State of bit (1 or 0).
;;;507      */
;;;508    __STATIC_INLINE uint32_t LL_DMA_IsEnabledChannel(DMA_TypeDef *DMAx, uint32_t Channel)
;;;509    {
;;;510      return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
;;;511                       DMA_CCR_EN) == (DMA_CCR_EN));
;;;512    }
;;;513    
;;;514    /**
;;;515      * @brief  Configure all parameters link to DMA transfer.
;;;516      * @rmtoll CCR          DIR           LL_DMA_ConfigTransfer\n
;;;517      *         CCR          MEM2MEM       LL_DMA_ConfigTransfer\n
;;;518      *         CCR          CIRC          LL_DMA_ConfigTransfer\n
;;;519      *         CCR          PINC          LL_DMA_ConfigTransfer\n
;;;520      *         CCR          MINC          LL_DMA_ConfigTransfer\n
;;;521      *         CCR          PSIZE         LL_DMA_ConfigTransfer\n
;;;522      *         CCR          MSIZE         LL_DMA_ConfigTransfer\n
;;;523      *         CCR          PL            LL_DMA_ConfigTransfer
;;;524      * @param  DMAx DMAx Instance
;;;525      * @param  Channel This parameter can be one of the following values:
;;;526      *         @arg @ref LL_DMA_CHANNEL_1
;;;527      *         @arg @ref LL_DMA_CHANNEL_2
;;;528      *         @arg @ref LL_DMA_CHANNEL_3
;;;529      *         @arg @ref LL_DMA_CHANNEL_4
;;;530      *         @arg @ref LL_DMA_CHANNEL_5
;;;531      *         @arg @ref LL_DMA_CHANNEL_6
;;;532      *         @arg @ref LL_DMA_CHANNEL_7
;;;533      * @param  Configuration This parameter must be a combination of all the following values:
;;;534      *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY or @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH or @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
;;;535      *         @arg @ref LL_DMA_MODE_NORMAL or @ref LL_DMA_MODE_CIRCULAR
;;;536      *         @arg @ref LL_DMA_PERIPH_INCREMENT or @ref LL_DMA_PERIPH_NOINCREMENT
;;;537      *         @arg @ref LL_DMA_MEMORY_INCREMENT or @ref LL_DMA_MEMORY_NOINCREMENT
;;;538      *         @arg @ref LL_DMA_PDATAALIGN_BYTE or @ref LL_DMA_PDATAALIGN_HALFWORD or @ref LL_DMA_PDATAALIGN_WORD
;;;539      *         @arg @ref LL_DMA_MDATAALIGN_BYTE or @ref LL_DMA_MDATAALIGN_HALFWORD or @ref LL_DMA_MDATAALIGN_WORD
;;;540      *         @arg @ref LL_DMA_PRIORITY_LOW or @ref LL_DMA_PRIORITY_MEDIUM or @ref LL_DMA_PRIORITY_HIGH or @ref LL_DMA_PRIORITY_VERYHIGH
;;;541      * @retval None
;;;542      */
;;;543    __STATIC_INLINE void LL_DMA_ConfigTransfer(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Configuration)
;;;544    {
;;;545      MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
;;;546                 DMA_CCR_DIR | DMA_CCR_MEM2MEM | DMA_CCR_CIRC | DMA_CCR_PINC | DMA_CCR_MINC | DMA_CCR_PSIZE | DMA_CCR_MSIZE | DMA_CCR_PL,
;;;547                 Configuration);
;;;548    }
;;;549    
;;;550    /**
;;;551      * @brief  Set Data transfer direction (read from peripheral or from memory).
;;;552      * @rmtoll CCR          DIR           LL_DMA_SetDataTransferDirection\n
;;;553      *         CCR          MEM2MEM       LL_DMA_SetDataTransferDirection
;;;554      * @param  DMAx DMAx Instance
;;;555      * @param  Channel This parameter can be one of the following values:
;;;556      *         @arg @ref LL_DMA_CHANNEL_1
;;;557      *         @arg @ref LL_DMA_CHANNEL_2
;;;558      *         @arg @ref LL_DMA_CHANNEL_3
;;;559      *         @arg @ref LL_DMA_CHANNEL_4
;;;560      *         @arg @ref LL_DMA_CHANNEL_5
;;;561      *         @arg @ref LL_DMA_CHANNEL_6
;;;562      *         @arg @ref LL_DMA_CHANNEL_7
;;;563      * @param  Direction This parameter can be one of the following values:
;;;564      *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
;;;565      *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
;;;566      *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
;;;567      * @retval None
;;;568      */
;;;569    __STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
;;;570    {
;;;571      MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
;;;572                 DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
;;;573    }
;;;574    
;;;575    /**
;;;576      * @brief  Get Data transfer direction (read from peripheral or from memory).
;;;577      * @rmtoll CCR          DIR           LL_DMA_GetDataTransferDirection\n
;;;578      *         CCR          MEM2MEM       LL_DMA_GetDataTransferDirection
;;;579      * @param  DMAx DMAx Instance
;;;580      * @param  Channel This parameter can be one of the following values:
;;;581      *         @arg @ref LL_DMA_CHANNEL_1
;;;582      *         @arg @ref LL_DMA_CHANNEL_2
;;;583      *         @arg @ref LL_DMA_CHANNEL_3
;;;584      *         @arg @ref LL_DMA_CHANNEL_4
;;;585      *         @arg @ref LL_DMA_CHANNEL_5
;;;586      *         @arg @ref LL_DMA_CHANNEL_6
;;;587      *         @arg @ref LL_DMA_CHANNEL_7
;;;588      * @retval Returned value can be one of the following values:
;;;589      *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
;;;590      *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
;;;591      *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
;;;592      */
;;;593    __STATIC_INLINE uint32_t LL_DMA_GetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel)
;;;594    {
;;;595      return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
;;;596                       DMA_CCR_DIR | DMA_CCR_MEM2MEM));
;;;597    }
;;;598    
;;;599    /**
;;;600      * @brief  Set DMA mode circular or normal.
;;;601      * @note The circular buffer mode cannot be used if the memory-to-memory
;;;602      * data transfer is configured on the selected Channel.
;;;603      * @rmtoll CCR          CIRC          LL_DMA_SetMode
;;;604      * @param  DMAx DMAx Instance
;;;605      * @param  Channel This parameter can be one of the following values:
;;;606      *         @arg @ref LL_DMA_CHANNEL_1
;;;607      *         @arg @ref LL_DMA_CHANNEL_2
;;;608      *         @arg @ref LL_DMA_CHANNEL_3
;;;609      *         @arg @ref LL_DMA_CHANNEL_4
;;;610      *         @arg @ref LL_DMA_CHANNEL_5
;;;611      *         @arg @ref LL_DMA_CHANNEL_6
;;;612      *         @arg @ref LL_DMA_CHANNEL_7
;;;613      * @param  Mode This parameter can be one of the following values:
;;;614      *         @arg @ref LL_DMA_MODE_NORMAL
;;;615      *         @arg @ref LL_DMA_MODE_CIRCULAR
;;;616      * @retval None
;;;617      */
;;;618    __STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
;;;619    {
;;;620      MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
;;;621                 Mode);
;;;622    }
;;;623    
;;;624    /**
;;;625      * @brief  Get DMA mode circular or normal.
;;;626      * @rmtoll CCR          CIRC          LL_DMA_GetMode
;;;627      * @param  DMAx DMAx Instance
;;;628      * @param  Channel This parameter can be one of the following values:
;;;629      *         @arg @ref LL_DMA_CHANNEL_1
;;;630      *         @arg @ref LL_DMA_CHANNEL_2
;;;631      *         @arg @ref LL_DMA_CHANNEL_3
;;;632      *         @arg @ref LL_DMA_CHANNEL_4
;;;633      *         @arg @ref LL_DMA_CHANNEL_5
;;;634      *         @arg @ref LL_DMA_CHANNEL_6
;;;635      *         @arg @ref LL_DMA_CHANNEL_7
;;;636      * @retval Returned value can be one of the following values:
;;;637      *         @arg @ref LL_DMA_MODE_NORMAL
;;;638      *         @arg @ref LL_DMA_MODE_CIRCULAR
;;;639      */
;;;640    __STATIC_INLINE uint32_t LL_DMA_GetMode(DMA_TypeDef *DMAx, uint32_t Channel)
;;;641    {
;;;642      return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
;;;643                       DMA_CCR_CIRC));
;;;644    }
;;;645    
;;;646    /**
;;;647      * @brief  Set Peripheral increment mode.
;;;648      * @rmtoll CCR          PINC          LL_DMA_SetPeriphIncMode
;;;649      * @param  DMAx DMAx Instance
;;;650      * @param  Channel This parameter can be one of the following values:
;;;651      *         @arg @ref LL_DMA_CHANNEL_1
;;;652      *         @arg @ref LL_DMA_CHANNEL_2
;;;653      *         @arg @ref LL_DMA_CHANNEL_3
;;;654      *         @arg @ref LL_DMA_CHANNEL_4
;;;655      *         @arg @ref LL_DMA_CHANNEL_5
;;;656      *         @arg @ref LL_DMA_CHANNEL_6
;;;657      *         @arg @ref LL_DMA_CHANNEL_7
;;;658      * @param  PeriphOrM2MSrcIncMode This parameter can be one of the following values:
;;;659      *         @arg @ref LL_DMA_PERIPH_INCREMENT
;;;660      *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
;;;661      * @retval None
;;;662      */
;;;663    __STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
;;;664    {
;;;665      MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
;;;666                 PeriphOrM2MSrcIncMode);
;;;667    }
;;;668    
;;;669    /**
;;;670      * @brief  Get Peripheral increment mode.
;;;671      * @rmtoll CCR          PINC          LL_DMA_GetPeriphIncMode
;;;672      * @param  DMAx DMAx Instance
;;;673      * @param  Channel This parameter can be one of the following values:
;;;674      *         @arg @ref LL_DMA_CHANNEL_1
;;;675      *         @arg @ref LL_DMA_CHANNEL_2
;;;676      *         @arg @ref LL_DMA_CHANNEL_3
;;;677      *         @arg @ref LL_DMA_CHANNEL_4
;;;678      *         @arg @ref LL_DMA_CHANNEL_5
;;;679      *         @arg @ref LL_DMA_CHANNEL_6
;;;680      *         @arg @ref LL_DMA_CHANNEL_7
;;;681      * @retval Returned value can be one of the following values:
;;;682      *         @arg @ref LL_DMA_PERIPH_INCREMENT
;;;683      *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
;;;684      */
;;;685    __STATIC_INLINE uint32_t LL_DMA_GetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel)
;;;686    {
;;;687      return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
;;;688                       DMA_CCR_PINC));
;;;689    }
;;;690    
;;;691    /**
;;;692      * @brief  Set Memory increment mode.
;;;693      * @rmtoll CCR          MINC          LL_DMA_SetMemoryIncMode
;;;694      * @param  DMAx DMAx Instance
;;;695      * @param  Channel This parameter can be one of the following values:
;;;696      *         @arg @ref LL_DMA_CHANNEL_1
;;;697      *         @arg @ref LL_DMA_CHANNEL_2
;;;698      *         @arg @ref LL_DMA_CHANNEL_3
;;;699      *         @arg @ref LL_DMA_CHANNEL_4
;;;700      *         @arg @ref LL_DMA_CHANNEL_5
;;;701      *         @arg @ref LL_DMA_CHANNEL_6
;;;702      *         @arg @ref LL_DMA_CHANNEL_7
;;;703      * @param  MemoryOrM2MDstIncMode This parameter can be one of the following values:
;;;704      *         @arg @ref LL_DMA_MEMORY_INCREMENT
;;;705      *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
;;;706      * @retval None
;;;707      */
;;;708    __STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
;;;709    {
;;;710      MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
;;;711                 MemoryOrM2MDstIncMode);
;;;712    }
;;;713    
;;;714    /**
;;;715      * @brief  Get Memory increment mode.
;;;716      * @rmtoll CCR          MINC          LL_DMA_GetMemoryIncMode
;;;717      * @param  DMAx DMAx Instance
;;;718      * @param  Channel This parameter can be one of the following values:
;;;719      *         @arg @ref LL_DMA_CHANNEL_1
;;;720      *         @arg @ref LL_DMA_CHANNEL_2
;;;721      *         @arg @ref LL_DMA_CHANNEL_3
;;;722      *         @arg @ref LL_DMA_CHANNEL_4
;;;723      *         @arg @ref LL_DMA_CHANNEL_5
;;;724      *         @arg @ref LL_DMA_CHANNEL_6
;;;725      *         @arg @ref LL_DMA_CHANNEL_7
;;;726      * @retval Returned value can be one of the following values:
;;;727      *         @arg @ref LL_DMA_MEMORY_INCREMENT
;;;728      *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
;;;729      */
;;;730    __STATIC_INLINE uint32_t LL_DMA_GetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel)
;;;731    {
;;;732      return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
;;;733                       DMA_CCR_MINC));
;;;734    }
;;;735    
;;;736    /**
;;;737      * @brief  Set Peripheral size.
;;;738      * @rmtoll CCR          PSIZE         LL_DMA_SetPeriphSize
;;;739      * @param  DMAx DMAx Instance
;;;740      * @param  Channel This parameter can be one of the following values:
;;;741      *         @arg @ref LL_DMA_CHANNEL_1
;;;742      *         @arg @ref LL_DMA_CHANNEL_2
;;;743      *         @arg @ref LL_DMA_CHANNEL_3
;;;744      *         @arg @ref LL_DMA_CHANNEL_4
;;;745      *         @arg @ref LL_DMA_CHANNEL_5
;;;746      *         @arg @ref LL_DMA_CHANNEL_6
;;;747      *         @arg @ref LL_DMA_CHANNEL_7
;;;748      * @param  PeriphOrM2MSrcDataSize This parameter can be one of the following values:
;;;749      *         @arg @ref LL_DMA_PDATAALIGN_BYTE
;;;750      *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
;;;751      *         @arg @ref LL_DMA_PDATAALIGN_WORD
;;;752      * @retval None
;;;753      */
;;;754    __STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
;;;755    {
;;;756      MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
;;;757                 PeriphOrM2MSrcDataSize);
;;;758    }
;;;759    
;;;760    /**
;;;761      * @brief  Get Peripheral size.
;;;762      * @rmtoll CCR          PSIZE         LL_DMA_GetPeriphSize
;;;763      * @param  DMAx DMAx Instance
;;;764      * @param  Channel This parameter can be one of the following values:
;;;765      *         @arg @ref LL_DMA_CHANNEL_1
;;;766      *         @arg @ref LL_DMA_CHANNEL_2
;;;767      *         @arg @ref LL_DMA_CHANNEL_3
;;;768      *         @arg @ref LL_DMA_CHANNEL_4
;;;769      *         @arg @ref LL_DMA_CHANNEL_5
;;;770      *         @arg @ref LL_DMA_CHANNEL_6
;;;771      *         @arg @ref LL_DMA_CHANNEL_7
;;;772      * @retval Returned value can be one of the following values:
;;;773      *         @arg @ref LL_DMA_PDATAALIGN_BYTE
;;;774      *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
;;;775      *         @arg @ref LL_DMA_PDATAALIGN_WORD
;;;776      */
;;;777    __STATIC_INLINE uint32_t LL_DMA_GetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel)
;;;778    {
;;;779      return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
;;;780                       DMA_CCR_PSIZE));
;;;781    }
;;;782    
;;;783    /**
;;;784      * @brief  Set Memory size.
;;;785      * @rmtoll CCR          MSIZE         LL_DMA_SetMemorySize
;;;786      * @param  DMAx DMAx Instance
;;;787      * @param  Channel This parameter can be one of the following values:
;;;788      *         @arg @ref LL_DMA_CHANNEL_1
;;;789      *         @arg @ref LL_DMA_CHANNEL_2
;;;790      *         @arg @ref LL_DMA_CHANNEL_3
;;;791      *         @arg @ref LL_DMA_CHANNEL_4
;;;792      *         @arg @ref LL_DMA_CHANNEL_5
;;;793      *         @arg @ref LL_DMA_CHANNEL_6
;;;794      *         @arg @ref LL_DMA_CHANNEL_7
;;;795      * @param  MemoryOrM2MDstDataSize This parameter can be one of the following values:
;;;796      *         @arg @ref LL_DMA_MDATAALIGN_BYTE
;;;797      *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
;;;798      *         @arg @ref LL_DMA_MDATAALIGN_WORD
;;;799      * @retval None
;;;800      */
;;;801    __STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
;;;802    {
;;;803      MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
;;;804                 MemoryOrM2MDstDataSize);
;;;805    }
;;;806    
;;;807    /**
;;;808      * @brief  Get Memory size.
;;;809      * @rmtoll CCR          MSIZE         LL_DMA_GetMemorySize
;;;810      * @param  DMAx DMAx Instance
;;;811      * @param  Channel This parameter can be one of the following values:
;;;812      *         @arg @ref LL_DMA_CHANNEL_1
;;;813      *         @arg @ref LL_DMA_CHANNEL_2
;;;814      *         @arg @ref LL_DMA_CHANNEL_3
;;;815      *         @arg @ref LL_DMA_CHANNEL_4
;;;816      *         @arg @ref LL_DMA_CHANNEL_5
;;;817      *         @arg @ref LL_DMA_CHANNEL_6
;;;818      *         @arg @ref LL_DMA_CHANNEL_7
;;;819      * @retval Returned value can be one of the following values:
;;;820      *         @arg @ref LL_DMA_MDATAALIGN_BYTE
;;;821      *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
;;;822      *         @arg @ref LL_DMA_MDATAALIGN_WORD
;;;823      */
;;;824    __STATIC_INLINE uint32_t LL_DMA_GetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel)
;;;825    {
;;;826      return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
;;;827                       DMA_CCR_MSIZE));
;;;828    }
;;;829    
;;;830    /**
;;;831      * @brief  Set Channel priority level.
;;;832      * @rmtoll CCR          PL            LL_DMA_SetChannelPriorityLevel
;;;833      * @param  DMAx DMAx Instance
;;;834      * @param  Channel This parameter can be one of the following values:
;;;835      *         @arg @ref LL_DMA_CHANNEL_1
;;;836      *         @arg @ref LL_DMA_CHANNEL_2
;;;837      *         @arg @ref LL_DMA_CHANNEL_3
;;;838      *         @arg @ref LL_DMA_CHANNEL_4
;;;839      *         @arg @ref LL_DMA_CHANNEL_5
;;;840      *         @arg @ref LL_DMA_CHANNEL_6
;;;841      *         @arg @ref LL_DMA_CHANNEL_7
;;;842      * @param  Priority This parameter can be one of the following values:
;;;843      *         @arg @ref LL_DMA_PRIORITY_LOW
;;;844      *         @arg @ref LL_DMA_PRIORITY_MEDIUM
;;;845      *         @arg @ref LL_DMA_PRIORITY_HIGH
;;;846      *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
;;;847      * @retval None
;;;848      */
;;;849    __STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
;;;850    {
;;;851      MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
;;;852                 Priority);
;;;853    }
;;;854    
;;;855    /**
;;;856      * @brief  Get Channel priority level.
;;;857      * @rmtoll CCR          PL            LL_DMA_GetChannelPriorityLevel
;;;858      * @param  DMAx DMAx Instance
;;;859      * @param  Channel This parameter can be one of the following values:
;;;860      *         @arg @ref LL_DMA_CHANNEL_1
;;;861      *         @arg @ref LL_DMA_CHANNEL_2
;;;862      *         @arg @ref LL_DMA_CHANNEL_3
;;;863      *         @arg @ref LL_DMA_CHANNEL_4
;;;864      *         @arg @ref LL_DMA_CHANNEL_5
;;;865      *         @arg @ref LL_DMA_CHANNEL_6
;;;866      *         @arg @ref LL_DMA_CHANNEL_7
;;;867      * @retval Returned value can be one of the following values:
;;;868      *         @arg @ref LL_DMA_PRIORITY_LOW
;;;869      *         @arg @ref LL_DMA_PRIORITY_MEDIUM
;;;870      *         @arg @ref LL_DMA_PRIORITY_HIGH
;;;871      *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
;;;872      */
;;;873    __STATIC_INLINE uint32_t LL_DMA_GetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel)
;;;874    {
;;;875      return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
;;;876                       DMA_CCR_PL));
;;;877    }
;;;878    
;;;879    /**
;;;880      * @brief  Set Number of data to transfer.
;;;881      * @note   This action has no effect if
;;;882      *         channel is enabled.
;;;883      * @rmtoll CNDTR        NDT           LL_DMA_SetDataLength
;;;884      * @param  DMAx DMAx Instance
;;;885      * @param  Channel This parameter can be one of the following values:
;;;886      *         @arg @ref LL_DMA_CHANNEL_1
;;;887      *         @arg @ref LL_DMA_CHANNEL_2
;;;888      *         @arg @ref LL_DMA_CHANNEL_3
;;;889      *         @arg @ref LL_DMA_CHANNEL_4
;;;890      *         @arg @ref LL_DMA_CHANNEL_5
;;;891      *         @arg @ref LL_DMA_CHANNEL_6
;;;892      *         @arg @ref LL_DMA_CHANNEL_7
;;;893      * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
;;;894      * @retval None
;;;895      */
;;;896    __STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
;;;897    {
;;;898      MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
;;;899                 DMA_CNDTR_NDT, NbData);
;;;900    }
;;;901    
;;;902    /**
;;;903      * @brief  Get Number of data to transfer.
;;;904      * @note   Once the channel is enabled, the return value indicate the
;;;905      *         remaining bytes to be transmitted.
;;;906      * @rmtoll CNDTR        NDT           LL_DMA_GetDataLength
;;;907      * @param  DMAx DMAx Instance
;;;908      * @param  Channel This parameter can be one of the following values:
;;;909      *         @arg @ref LL_DMA_CHANNEL_1
;;;910      *         @arg @ref LL_DMA_CHANNEL_2
;;;911      *         @arg @ref LL_DMA_CHANNEL_3
;;;912      *         @arg @ref LL_DMA_CHANNEL_4
;;;913      *         @arg @ref LL_DMA_CHANNEL_5
;;;914      *         @arg @ref LL_DMA_CHANNEL_6
;;;915      *         @arg @ref LL_DMA_CHANNEL_7
;;;916      * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
;;;917      */
;;;918    __STATIC_INLINE uint32_t LL_DMA_GetDataLength(DMA_TypeDef *DMAx, uint32_t Channel)
;;;919    {
;;;920      return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
;;;921                       DMA_CNDTR_NDT));
;;;922    }
;;;923    
;;;924    /**
;;;925      * @brief  Configure the Source and Destination addresses.
;;;926      * @note   This API must not be called when the DMA channel is enabled.
;;;927      * @note   Each IP using DMA provides an API to get directly the register adress (LL_PPP_DMA_GetRegAddr).
;;;928      * @rmtoll CPAR         PA            LL_DMA_ConfigAddresses\n
;;;929      *         CMAR         MA            LL_DMA_ConfigAddresses
;;;930      * @param  DMAx DMAx Instance
;;;931      * @param  Channel This parameter can be one of the following values:
;;;932      *         @arg @ref LL_DMA_CHANNEL_1
;;;933      *         @arg @ref LL_DMA_CHANNEL_2
;;;934      *         @arg @ref LL_DMA_CHANNEL_3
;;;935      *         @arg @ref LL_DMA_CHANNEL_4
;;;936      *         @arg @ref LL_DMA_CHANNEL_5
;;;937      *         @arg @ref LL_DMA_CHANNEL_6
;;;938      *         @arg @ref LL_DMA_CHANNEL_7
;;;939      * @param  SrcAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
;;;940      * @param  DstAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
;;;941      * @param  Direction This parameter can be one of the following values:
;;;942      *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
;;;943      *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
;;;944      *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
;;;945      * @retval None
;;;946      */
;;;947    __STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
;;;948                                                uint32_t DstAddress, uint32_t Direction)
;;;949    {
;;;950      /* Direction Memory to Periph */
;;;951      if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
;;;952      {
;;;953        WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
;;;954        WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
;;;955      }
;;;956      /* Direction Periph to Memory and Memory to Memory */
;;;957      else
;;;958      {
;;;959        WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
;;;960        WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
;;;961      }
;;;962    }
;;;963    
;;;964    /**
;;;965      * @brief  Set the Memory address.
;;;966      * @note   Interface used for direction LL_DMA_DIRECTION_PERIPH_TO_MEMORY or LL_DMA_DIRECTION_MEMORY_TO_PERIPH only.
;;;967      * @note   This API must not be called when the DMA channel is enabled.
;;;968      * @rmtoll CMAR         MA            LL_DMA_SetMemoryAddress
;;;969      * @param  DMAx DMAx Instance
;;;970      * @param  Channel This parameter can be one of the following values:
;;;971      *         @arg @ref LL_DMA_CHANNEL_1
;;;972      *         @arg @ref LL_DMA_CHANNEL_2
;;;973      *         @arg @ref LL_DMA_CHANNEL_3
;;;974      *         @arg @ref LL_DMA_CHANNEL_4
;;;975      *         @arg @ref LL_DMA_CHANNEL_5
;;;976      *         @arg @ref LL_DMA_CHANNEL_6
;;;977      *         @arg @ref LL_DMA_CHANNEL_7
;;;978      * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
;;;979      * @retval None
;;;980      */
;;;981    __STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
;;;982    {
;;;983      WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
;;;984    }
;;;985    
;;;986    /**
;;;987      * @brief  Set the Peripheral address.
;;;988      * @note   Interface used for direction LL_DMA_DIRECTION_PERIPH_TO_MEMORY or LL_DMA_DIRECTION_MEMORY_TO_PERIPH only.
;;;989      * @note   This API must not be called when the DMA channel is enabled.
;;;990      * @rmtoll CPAR         PA            LL_DMA_SetPeriphAddress
;;;991      * @param  DMAx DMAx Instance
;;;992      * @param  Channel This parameter can be one of the following values:
;;;993      *         @arg @ref LL_DMA_CHANNEL_1
;;;994      *         @arg @ref LL_DMA_CHANNEL_2
;;;995      *         @arg @ref LL_DMA_CHANNEL_3
;;;996      *         @arg @ref LL_DMA_CHANNEL_4
;;;997      *         @arg @ref LL_DMA_CHANNEL_5
;;;998      *         @arg @ref LL_DMA_CHANNEL_6
;;;999      *         @arg @ref LL_DMA_CHANNEL_7
;;;1000     * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
;;;1001     * @retval None
;;;1002     */
;;;1003   __STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
;;;1004   {
;;;1005     WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
;;;1006   }
;;;1007   
;;;1008   /**
;;;1009     * @brief  Get Memory address.
;;;1010     * @note   Interface used for direction LL_DMA_DIRECTION_PERIPH_TO_MEMORY or LL_DMA_DIRECTION_MEMORY_TO_PERIPH only.
;;;1011     * @rmtoll CMAR         MA            LL_DMA_GetMemoryAddress
;;;1012     * @param  DMAx DMAx Instance
;;;1013     * @param  Channel This parameter can be one of the following values:
;;;1014     *         @arg @ref LL_DMA_CHANNEL_1
;;;1015     *         @arg @ref LL_DMA_CHANNEL_2
;;;1016     *         @arg @ref LL_DMA_CHANNEL_3
;;;1017     *         @arg @ref LL_DMA_CHANNEL_4
;;;1018     *         @arg @ref LL_DMA_CHANNEL_5
;;;1019     *         @arg @ref LL_DMA_CHANNEL_6
;;;1020     *         @arg @ref LL_DMA_CHANNEL_7
;;;1021     * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
;;;1022     */
;;;1023   __STATIC_INLINE uint32_t LL_DMA_GetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel)
;;;1024   {
;;;1025     return (READ_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR));
;;;1026   }
;;;1027   
;;;1028   /**
;;;1029     * @brief  Get Peripheral address.
;;;1030     * @note   Interface used for direction LL_DMA_DIRECTION_PERIPH_TO_MEMORY or LL_DMA_DIRECTION_MEMORY_TO_PERIPH only.
;;;1031     * @rmtoll CPAR         PA            LL_DMA_GetPeriphAddress
;;;1032     * @param  DMAx DMAx Instance
;;;1033     * @param  Channel This parameter can be one of the following values:
;;;1034     *         @arg @ref LL_DMA_CHANNEL_1
;;;1035     *         @arg @ref LL_DMA_CHANNEL_2
;;;1036     *         @arg @ref LL_DMA_CHANNEL_3
;;;1037     *         @arg @ref LL_DMA_CHANNEL_4
;;;1038     *         @arg @ref LL_DMA_CHANNEL_5
;;;1039     *         @arg @ref LL_DMA_CHANNEL_6
;;;1040     *         @arg @ref LL_DMA_CHANNEL_7
;;;1041     * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
;;;1042     */
;;;1043   __STATIC_INLINE uint32_t LL_DMA_GetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel)
;;;1044   {
;;;1045     return (READ_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR));
;;;1046   }
;;;1047   
;;;1048   /**
;;;1049     * @brief  Set the Memory to Memory Source address.
;;;1050     * @note   Interface used for direction LL_DMA_DIRECTION_MEMORY_TO_MEMORY only.
;;;1051     * @note   This API must not be called when the DMA channel is enabled.
;;;1052     * @rmtoll CPAR         PA            LL_DMA_SetM2MSrcAddress
;;;1053     * @param  DMAx DMAx Instance
;;;1054     * @param  Channel This parameter can be one of the following values:
;;;1055     *         @arg @ref LL_DMA_CHANNEL_1
;;;1056     *         @arg @ref LL_DMA_CHANNEL_2
;;;1057     *         @arg @ref LL_DMA_CHANNEL_3
;;;1058     *         @arg @ref LL_DMA_CHANNEL_4
;;;1059     *         @arg @ref LL_DMA_CHANNEL_5
;;;1060     *         @arg @ref LL_DMA_CHANNEL_6
;;;1061     *         @arg @ref LL_DMA_CHANNEL_7
;;;1062     * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
;;;1063     * @retval None
;;;1064     */
;;;1065   __STATIC_INLINE void LL_DMA_SetM2MSrcAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
;;;1066   {
;;;1067     WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, MemoryAddress);
;;;1068   }
;;;1069   
;;;1070   /**
;;;1071     * @brief  Set the Memory to Memory Destination address.
;;;1072     * @note   Interface used for direction LL_DMA_DIRECTION_MEMORY_TO_MEMORY only.
;;;1073     * @note   This API must not be called when the DMA channel is enabled.
;;;1074     * @rmtoll CMAR         MA            LL_DMA_SetM2MDstAddress
;;;1075     * @param  DMAx DMAx Instance
;;;1076     * @param  Channel This parameter can be one of the following values:
;;;1077     *         @arg @ref LL_DMA_CHANNEL_1
;;;1078     *         @arg @ref LL_DMA_CHANNEL_2
;;;1079     *         @arg @ref LL_DMA_CHANNEL_3
;;;1080     *         @arg @ref LL_DMA_CHANNEL_4
;;;1081     *         @arg @ref LL_DMA_CHANNEL_5
;;;1082     *         @arg @ref LL_DMA_CHANNEL_6
;;;1083     *         @arg @ref LL_DMA_CHANNEL_7
;;;1084     * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
;;;1085     * @retval None
;;;1086     */
;;;1087   __STATIC_INLINE void LL_DMA_SetM2MDstAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
;;;1088   {
;;;1089     WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
;;;1090   }
;;;1091   
;;;1092   /**
;;;1093     * @brief  Get the Memory to Memory Source address.
;;;1094     * @note   Interface used for direction LL_DMA_DIRECTION_MEMORY_TO_MEMORY only.
;;;1095     * @rmtoll CPAR         PA            LL_DMA_GetM2MSrcAddress
;;;1096     * @param  DMAx DMAx Instance
;;;1097     * @param  Channel This parameter can be one of the following values:
;;;1098     *         @arg @ref LL_DMA_CHANNEL_1
;;;1099     *         @arg @ref LL_DMA_CHANNEL_2
;;;1100     *         @arg @ref LL_DMA_CHANNEL_3
;;;1101     *         @arg @ref LL_DMA_CHANNEL_4
;;;1102     *         @arg @ref LL_DMA_CHANNEL_5
;;;1103     *         @arg @ref LL_DMA_CHANNEL_6
;;;1104     *         @arg @ref LL_DMA_CHANNEL_7
;;;1105     * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
;;;1106     */
;;;1107   __STATIC_INLINE uint32_t LL_DMA_GetM2MSrcAddress(DMA_TypeDef *DMAx, uint32_t Channel)
;;;1108   {
;;;1109     return (READ_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR));
;;;1110   }
;;;1111   
;;;1112   /**
;;;1113     * @brief  Get the Memory to Memory Destination address.
;;;1114     * @note   Interface used for direction LL_DMA_DIRECTION_MEMORY_TO_MEMORY only.
;;;1115     * @rmtoll CMAR         MA            LL_DMA_GetM2MDstAddress
;;;1116     * @param  DMAx DMAx Instance
;;;1117     * @param  Channel This parameter can be one of the following values:
;;;1118     *         @arg @ref LL_DMA_CHANNEL_1
;;;1119     *         @arg @ref LL_DMA_CHANNEL_2
;;;1120     *         @arg @ref LL_DMA_CHANNEL_3
;;;1121     *         @arg @ref LL_DMA_CHANNEL_4
;;;1122     *         @arg @ref LL_DMA_CHANNEL_5
;;;1123     *         @arg @ref LL_DMA_CHANNEL_6
;;;1124     *         @arg @ref LL_DMA_CHANNEL_7
;;;1125     * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
;;;1126     */
;;;1127   __STATIC_INLINE uint32_t LL_DMA_GetM2MDstAddress(DMA_TypeDef *DMAx, uint32_t Channel)
;;;1128   {
;;;1129     return (READ_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR));
;;;1130   }
;;;1131   
;;;1132   /**
;;;1133     * @}
;;;1134     */
;;;1135   
;;;1136   /** @defgroup DMA_LL_EF_FLAG_Management FLAG_Management
;;;1137     * @{
;;;1138     */
;;;1139   
;;;1140   /**
;;;1141     * @brief  Get Channel 1 global interrupt flag.
;;;1142     * @rmtoll ISR          GIF1          LL_DMA_IsActiveFlag_GI1
;;;1143     * @param  DMAx DMAx Instance
;;;1144     * @retval State of bit (1 or 0).
;;;1145     */
;;;1146   __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_GI1(DMA_TypeDef *DMAx)
;;;1147   {
;;;1148     return (READ_BIT(DMAx->ISR, DMA_ISR_GIF1) == (DMA_ISR_GIF1));
;;;1149   }
;;;1150   
;;;1151   /**
;;;1152     * @brief  Get Channel 2 global interrupt flag.
;;;1153     * @rmtoll ISR          GIF2          LL_DMA_IsActiveFlag_GI2
;;;1154     * @param  DMAx DMAx Instance
;;;1155     * @retval State of bit (1 or 0).
;;;1156     */
;;;1157   __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_GI2(DMA_TypeDef *DMAx)
;;;1158   {
;;;1159     return (READ_BIT(DMAx->ISR, DMA_ISR_GIF2) == (DMA_ISR_GIF2));
;;;1160   }
;;;1161   
;;;1162   /**
;;;1163     * @brief  Get Channel 3 global interrupt flag.
;;;1164     * @rmtoll ISR          GIF3          LL_DMA_IsActiveFlag_GI3
;;;1165     * @param  DMAx DMAx Instance
;;;1166     * @retval State of bit (1 or 0).
;;;1167     */
;;;1168   __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_GI3(DMA_TypeDef *DMAx)
;;;1169   {
;;;1170     return (READ_BIT(DMAx->ISR, DMA_ISR_GIF3) == (DMA_ISR_GIF3));
;;;1171   }
;;;1172   
;;;1173   /**
;;;1174     * @brief  Get Channel 4 global interrupt flag.
;;;1175     * @rmtoll ISR          GIF4          LL_DMA_IsActiveFlag_GI4
;;;1176     * @param  DMAx DMAx Instance
;;;1177     * @retval State of bit (1 or 0).
;;;1178     */
;;;1179   __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_GI4(DMA_TypeDef *DMAx)
;;;1180   {
;;;1181     return (READ_BIT(DMAx->ISR, DMA_ISR_GIF4) == (DMA_ISR_GIF4));
;;;1182   }
;;;1183   
;;;1184   /**
;;;1185     * @brief  Get Channel 5 global interrupt flag.
;;;1186     * @rmtoll ISR          GIF5          LL_DMA_IsActiveFlag_GI5
;;;1187     * @param  DMAx DMAx Instance
;;;1188     * @retval State of bit (1 or 0).
;;;1189     */
;;;1190   __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_GI5(DMA_TypeDef *DMAx)
;;;1191   {
;;;1192     return (READ_BIT(DMAx->ISR, DMA_ISR_GIF5) == (DMA_ISR_GIF5));
;;;1193   }
;;;1194   
;;;1195   /**
;;;1196     * @brief  Get Channel 6 global interrupt flag.
;;;1197     * @rmtoll ISR          GIF6          LL_DMA_IsActiveFlag_GI6
;;;1198     * @param  DMAx DMAx Instance
;;;1199     * @retval State of bit (1 or 0).
;;;1200     */
;;;1201   __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_GI6(DMA_TypeDef *DMAx)
;;;1202   {
;;;1203     return (READ_BIT(DMAx->ISR, DMA_ISR_GIF6) == (DMA_ISR_GIF6));
;;;1204   }
;;;1205   
;;;1206   /**
;;;1207     * @brief  Get Channel 7 global interrupt flag.
;;;1208     * @rmtoll ISR          GIF7          LL_DMA_IsActiveFlag_GI7
;;;1209     * @param  DMAx DMAx Instance
;;;1210     * @retval State of bit (1 or 0).
;;;1211     */
;;;1212   __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_GI7(DMA_TypeDef *DMAx)
;;;1213   {
;;;1214     return (READ_BIT(DMAx->ISR, DMA_ISR_GIF7) == (DMA_ISR_GIF7));
;;;1215   }
;;;1216   
;;;1217   /**
;;;1218     * @brief  Get Channel 1 transfer complete flag.
;;;1219     * @rmtoll ISR          TCIF1         LL_DMA_IsActiveFlag_TC1
;;;1220     * @param  DMAx DMAx Instance
;;;1221     * @retval State of bit (1 or 0).
;;;1222     */
;;;1223   __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC1(DMA_TypeDef *DMAx)
;;;1224   {
;;;1225     return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1));
;;;1226   }
;;;1227   
;;;1228   /**
;;;1229     * @brief  Get Channel 2 transfer complete flag.
;;;1230     * @rmtoll ISR          TCIF2         LL_DMA_IsActiveFlag_TC2
;;;1231     * @param  DMAx DMAx Instance
;;;1232     * @retval State of bit (1 or 0).
;;;1233     */
;;;1234   __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC2(DMA_TypeDef *DMAx)
;;;1235   {
;;;1236     return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF2) == (DMA_ISR_TCIF2));
;;;1237   }
;;;1238   
;;;1239   /**
;;;1240     * @brief  Get Channel 3 transfer complete flag.
;;;1241     * @rmtoll ISR          TCIF3         LL_DMA_IsActiveFlag_TC3
;;;1242     * @param  DMAx DMAx Instance
;;;1243     * @retval State of bit (1 or 0).
;;;1244     */
;;;1245   __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC3(DMA_TypeDef *DMAx)
;;;1246   {
;;;1247     return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF3) == (DMA_ISR_TCIF3));
;;;1248   }
;;;1249   
;;;1250   /**
;;;1251     * @brief  Get Channel 4 transfer complete flag.
;;;1252     * @rmtoll ISR          TCIF4         LL_DMA_IsActiveFlag_TC4
;;;1253     * @param  DMAx DMAx Instance
;;;1254     * @retval State of bit (1 or 0).
;;;1255     */
;;;1256   __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC4(DMA_TypeDef *DMAx)
;;;1257   {
;;;1258     return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF4) == (DMA_ISR_TCIF4));
;;;1259   }
;;;1260   
;;;1261   /**
;;;1262     * @brief  Get Channel 5 transfer complete flag.
;;;1263     * @rmtoll ISR          TCIF5         LL_DMA_IsActiveFlag_TC5
;;;1264     * @param  DMAx DMAx Instance
;;;1265     * @retval State of bit (1 or 0).
;;;1266     */
;;;1267   __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC5(DMA_TypeDef *DMAx)
;;;1268   {
;;;1269     return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF5) == (DMA_ISR_TCIF5));
;;;1270   }
;;;1271   
;;;1272   /**
;;;1273     * @brief  Get Channel 6 transfer complete flag.
;;;1274     * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
;;;1275     * @param  DMAx DMAx Instance
;;;1276     * @retval State of bit (1 or 0).
;;;1277     */
;;;1278   __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
;;;1279   {
;;;1280     return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
;;;1281   }
;;;1282   
;;;1283   /**
;;;1284     * @brief  Get Channel 7 transfer complete flag.
;;;1285     * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
;;;1286     * @param  DMAx DMAx Instance
;;;1287     * @retval State of bit (1 or 0).
;;;1288     */
;;;1289   __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
;;;1290   {
;;;1291     return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
;;;1292   }
;;;1293   
;;;1294   /**
;;;1295     * @brief  Get Channel 1 half transfer flag.
;;;1296     * @rmtoll ISR          HTIF1         LL_DMA_IsActiveFlag_HT1
;;;1297     * @param  DMAx DMAx Instance
;;;1298     * @retval State of bit (1 or 0).
;;;1299     */
;;;1300   __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT1(DMA_TypeDef *DMAx)
;;;1301   {
;;;1302     return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF1) == (DMA_ISR_HTIF1));
;;;1303   }
;;;1304   
;;;1305   /**
;;;1306     * @brief  Get Channel 2 half transfer flag.
;;;1307     * @rmtoll ISR          HTIF2         LL_DMA_IsActiveFlag_HT2
;;;1308     * @param  DMAx DMAx Instance
;;;1309     * @retval State of bit (1 or 0).
;;;1310     */
;;;1311   __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT2(DMA_TypeDef *DMAx)
;;;1312   {
;;;1313     return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF2) == (DMA_ISR_HTIF2));
;;;1314   }
;;;1315   
;;;1316   /**
;;;1317     * @brief  Get Channel 3 half transfer flag.
;;;1318     * @rmtoll ISR          HTIF3         LL_DMA_IsActiveFlag_HT3
;;;1319     * @param  DMAx DMAx Instance
;;;1320     * @retval State of bit (1 or 0).
;;;1321     */
;;;1322   __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT3(DMA_TypeDef *DMAx)
;;;1323   {
;;;1324     return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF3) == (DMA_ISR_HTIF3));
;;;1325   }
;;;1326   
;;;1327   /**
;;;1328     * @brief  Get Channel 4 half transfer flag.
;;;1329     * @rmtoll ISR          HTIF4         LL_DMA_IsActiveFlag_HT4
;;;1330     * @param  DMAx DMAx Instance
;;;1331     * @retval State of bit (1 or 0).
;;;1332     */
;;;1333   __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT4(DMA_TypeDef *DMAx)
;;;1334   {
;;;1335     return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF4) == (DMA_ISR_HTIF4));
;;;1336   }
;;;1337   
;;;1338   /**
;;;1339     * @brief  Get Channel 5 half transfer flag.
;;;1340     * @rmtoll ISR          HTIF5         LL_DMA_IsActiveFlag_HT5
;;;1341     * @param  DMAx DMAx Instance
;;;1342     * @retval State of bit (1 or 0).
;;;1343     */
;;;1344   __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT5(DMA_TypeDef *DMAx)
;;;1345   {
;;;1346     return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF5) == (DMA_ISR_HTIF5));
;;;1347   }
;;;1348   
;;;1349   /**
;;;1350     * @brief  Get Channel 6 half transfer flag.
;;;1351     * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
;;;1352     * @param  DMAx DMAx Instance
;;;1353     * @retval State of bit (1 or 0).
;;;1354     */
;;;1355   __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
;;;1356   {
;;;1357     return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
;;;1358   }
;;;1359   
;;;1360   /**
;;;1361     * @brief  Get Channel 7 half transfer flag.
;;;1362     * @rmtoll ISR          HTIF7         LL_DMA_IsActiveFlag_HT7
;;;1363     * @param  DMAx DMAx Instance
;;;1364     * @retval State of bit (1 or 0).
;;;1365     */
;;;1366   __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT7(DMA_TypeDef *DMAx)
;;;1367   {
;;;1368     return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF7) == (DMA_ISR_HTIF7));
;;;1369   }
;;;1370   
;;;1371   /**
;;;1372     * @brief  Get Channel 1 transfer error flag.
;;;1373     * @rmtoll ISR          TEIF1         LL_DMA_IsActiveFlag_TE1
;;;1374     * @param  DMAx DMAx Instance
;;;1375     * @retval State of bit (1 or 0).
;;;1376     */
;;;1377   __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE1(DMA_TypeDef *DMAx)
;;;1378   {
;;;1379     return (READ_BIT(DMAx->ISR, DMA_ISR_TEIF1) == (DMA_ISR_TEIF1));
;;;1380   }
;;;1381   
;;;1382   /**
;;;1383     * @brief  Get Channel 2 transfer error flag.
;;;1384     * @rmtoll ISR          TEIF2         LL_DMA_IsActiveFlag_TE2
;;;1385     * @param  DMAx DMAx Instance
;;;1386     * @retval State of bit (1 or 0).
;;;1387     */
;;;1388   __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE2(DMA_TypeDef *DMAx)
;;;1389   {
;;;1390     return (READ_BIT(DMAx->ISR, DMA_ISR_TEIF2) == (DMA_ISR_TEIF2));
;;;1391   }
;;;1392   
;;;1393   /**
;;;1394     * @brief  Get Channel 3 transfer error flag.
;;;1395     * @rmtoll ISR          TEIF3         LL_DMA_IsActiveFlag_TE3
;;;1396     * @param  DMAx DMAx Instance
;;;1397     * @retval State of bit (1 or 0).
;;;1398     */
;;;1399   __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE3(DMA_TypeDef *DMAx)
;;;1400   {
;;;1401     return (READ_BIT(DMAx->ISR, DMA_ISR_TEIF3) == (DMA_ISR_TEIF3));
;;;1402   }
;;;1403   
;;;1404   /**
;;;1405     * @brief  Get Channel 4 transfer error flag.
;;;1406     * @rmtoll ISR          TEIF4         LL_DMA_IsActiveFlag_TE4
;;;1407     * @param  DMAx DMAx Instance
;;;1408     * @retval State of bit (1 or 0).
;;;1409     */
;;;1410   __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE4(DMA_TypeDef *DMAx)
;;;1411   {
;;;1412     return (READ_BIT(DMAx->ISR, DMA_ISR_TEIF4) == (DMA_ISR_TEIF4));
;;;1413   }
;;;1414   
;;;1415   /**
;;;1416     * @brief  Get Channel 5 transfer error flag.
;;;1417     * @rmtoll ISR          TEIF5         LL_DMA_IsActiveFlag_TE5
;;;1418     * @param  DMAx DMAx Instance
;;;1419     * @retval State of bit (1 or 0).
;;;1420     */
;;;1421   __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE5(DMA_TypeDef *DMAx)
;;;1422   {
;;;1423     return (READ_BIT(DMAx->ISR, DMA_ISR_TEIF5) == (DMA_ISR_TEIF5));
;;;1424   }
;;;1425   
;;;1426   /**
;;;1427     * @brief  Get Channel 6 transfer error flag.
;;;1428     * @rmtoll ISR          TEIF6         LL_DMA_IsActiveFlag_TE6
;;;1429     * @param  DMAx DMAx Instance
;;;1430     * @retval State of bit (1 or 0).
;;;1431     */
;;;1432   __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE6(DMA_TypeDef *DMAx)
;;;1433   {
;;;1434     return (READ_BIT(DMAx->ISR, DMA_ISR_TEIF6) == (DMA_ISR_TEIF6));
;;;1435   }
;;;1436   
;;;1437   /**
;;;1438     * @brief  Get Channel 7 transfer error flag.
;;;1439     * @rmtoll ISR          TEIF7         LL_DMA_IsActiveFlag_TE7
;;;1440     * @param  DMAx DMAx Instance
;;;1441     * @retval State of bit (1 or 0).
;;;1442     */
;;;1443   __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE7(DMA_TypeDef *DMAx)
;;;1444   {
;;;1445     return (READ_BIT(DMAx->ISR, DMA_ISR_TEIF7) == (DMA_ISR_TEIF7));
;;;1446   }
;;;1447   
;;;1448   /**
;;;1449     * @brief  Clear Channel 1 global interrupt flag.
;;;1450     * @rmtoll IFCR         CGIF1         LL_DMA_ClearFlag_GI1
;;;1451     * @param  DMAx DMAx Instance
;;;1452     * @retval None
;;;1453     */
;;;1454   __STATIC_INLINE void LL_DMA_ClearFlag_GI1(DMA_TypeDef *DMAx)
;;;1455   {
;;;1456     WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF1);
;;;1457   }
;;;1458   
;;;1459   /**
;;;1460     * @brief  Clear Channel 2 global interrupt flag.
;;;1461     * @rmtoll IFCR         CGIF2         LL_DMA_ClearFlag_GI2
;;;1462     * @param  DMAx DMAx Instance
;;;1463     * @retval None
;;;1464     */
;;;1465   __STATIC_INLINE void LL_DMA_ClearFlag_GI2(DMA_TypeDef *DMAx)
;;;1466   {
;;;1467     WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF2);
;;;1468   }
;;;1469   
;;;1470   /**
;;;1471     * @brief  Clear Channel 3 global interrupt flag.
;;;1472     * @rmtoll IFCR         CGIF3         LL_DMA_ClearFlag_GI3
;;;1473     * @param  DMAx DMAx Instance
;;;1474     * @retval None
;;;1475     */
;;;1476   __STATIC_INLINE void LL_DMA_ClearFlag_GI3(DMA_TypeDef *DMAx)
;;;1477   {
;;;1478     WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF3);
;;;1479   }
;;;1480   
;;;1481   /**
;;;1482     * @brief  Clear Channel 4 global interrupt flag.
;;;1483     * @rmtoll IFCR         CGIF4         LL_DMA_ClearFlag_GI4
;;;1484     * @param  DMAx DMAx Instance
;;;1485     * @retval None
;;;1486     */
;;;1487   __STATIC_INLINE void LL_DMA_ClearFlag_GI4(DMA_TypeDef *DMAx)
;;;1488   {
;;;1489     WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF4);
;;;1490   }
;;;1491   
;;;1492   /**
;;;1493     * @brief  Clear Channel 5 global interrupt flag.
;;;1494     * @rmtoll IFCR         CGIF5         LL_DMA_ClearFlag_GI5
;;;1495     * @param  DMAx DMAx Instance
;;;1496     * @retval None
;;;1497     */
;;;1498   __STATIC_INLINE void LL_DMA_ClearFlag_GI5(DMA_TypeDef *DMAx)
;;;1499   {
;;;1500     WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF5);
;;;1501   }
;;;1502   
;;;1503   /**
;;;1504     * @brief  Clear Channel 6 global interrupt flag.
;;;1505     * @rmtoll IFCR         CGIF6         LL_DMA_ClearFlag_GI6
;;;1506     * @param  DMAx DMAx Instance
;;;1507     * @retval None
;;;1508     */
;;;1509   __STATIC_INLINE void LL_DMA_ClearFlag_GI6(DMA_TypeDef *DMAx)
;;;1510   {
;;;1511     WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF6);
;;;1512   }
;;;1513   
;;;1514   /**
;;;1515     * @brief  Clear Channel 7 global interrupt flag.
;;;1516     * @rmtoll IFCR         CGIF7         LL_DMA_ClearFlag_GI7
;;;1517     * @param  DMAx DMAx Instance
;;;1518     * @retval None
;;;1519     */
;;;1520   __STATIC_INLINE void LL_DMA_ClearFlag_GI7(DMA_TypeDef *DMAx)
;;;1521   {
;;;1522     WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF7);
;;;1523   }
;;;1524   
;;;1525   /**
;;;1526     * @brief  Clear Channel 1  transfer complete flag.
;;;1527     * @rmtoll IFCR         CTCIF1        LL_DMA_ClearFlag_TC1
;;;1528     * @param  DMAx DMAx Instance
;;;1529     * @retval None
;;;1530     */
;;;1531   __STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
;;;1532   {
;;;1533     WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
;;;1534   }
;;;1535   
;;;1536   /**
;;;1537     * @brief  Clear Channel 2  transfer complete flag.
;;;1538     * @rmtoll IFCR         CTCIF2        LL_DMA_ClearFlag_TC2
;;;1539     * @param  DMAx DMAx Instance
;;;1540     * @retval None
;;;1541     */
;;;1542   __STATIC_INLINE void LL_DMA_ClearFlag_TC2(DMA_TypeDef *DMAx)
;;;1543   {
;;;1544     WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF2);
;;;1545   }
;;;1546   
;;;1547   /**
;;;1548     * @brief  Clear Channel 3  transfer complete flag.
;;;1549     * @rmtoll IFCR         CTCIF3        LL_DMA_ClearFlag_TC3
;;;1550     * @param  DMAx DMAx Instance
;;;1551     * @retval None
;;;1552     */
;;;1553   __STATIC_INLINE void LL_DMA_ClearFlag_TC3(DMA_TypeDef *DMAx)
;;;1554   {
;;;1555     WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF3);
;;;1556   }
;;;1557   
;;;1558   /**
;;;1559     * @brief  Clear Channel 4  transfer complete flag.
;;;1560     * @rmtoll IFCR         CTCIF4        LL_DMA_ClearFlag_TC4
;;;1561     * @param  DMAx DMAx Instance
;;;1562     * @retval None
;;;1563     */
;;;1564   __STATIC_INLINE void LL_DMA_ClearFlag_TC4(DMA_TypeDef *DMAx)
;;;1565   {
;;;1566     WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF4);
;;;1567   }
;;;1568   
;;;1569   /**
;;;1570     * @brief  Clear Channel 5  transfer complete flag.
;;;1571     * @rmtoll IFCR         CTCIF5        LL_DMA_ClearFlag_TC5
;;;1572     * @param  DMAx DMAx Instance
;;;1573     * @retval None
;;;1574     */
;;;1575   __STATIC_INLINE void LL_DMA_ClearFlag_TC5(DMA_TypeDef *DMAx)
;;;1576   {
;;;1577     WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF5);
;;;1578   }
;;;1579   
;;;1580   /**
;;;1581     * @brief  Clear Channel 6  transfer complete flag.
;;;1582     * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
;;;1583     * @param  DMAx DMAx Instance
;;;1584     * @retval None
;;;1585     */
;;;1586   __STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
;;;1587   {
;;;1588     WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
;;;1589   }
;;;1590   
;;;1591   /**
;;;1592     * @brief  Clear Channel 7  transfer complete flag.
;;;1593     * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
;;;1594     * @param  DMAx DMAx Instance
;;;1595     * @retval None
;;;1596     */
;;;1597   __STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
;;;1598   {
;;;1599     WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
;;;1600   }
;;;1601   
;;;1602   /**
;;;1603     * @brief  Clear Channel 1  half transfer flag.
;;;1604     * @rmtoll IFCR         CHTIF1        LL_DMA_ClearFlag_HT1
;;;1605     * @param  DMAx DMAx Instance
;;;1606     * @retval None
;;;1607     */
;;;1608   __STATIC_INLINE void LL_DMA_ClearFlag_HT1(DMA_TypeDef *DMAx)
;;;1609   {
;;;1610     WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF1);
;;;1611   }
;;;1612   
;;;1613   /**
;;;1614     * @brief  Clear Channel 2  half transfer flag.
;;;1615     * @rmtoll IFCR         CHTIF2        LL_DMA_ClearFlag_HT2
;;;1616     * @param  DMAx DMAx Instance
;;;1617     * @retval None
;;;1618     */
;;;1619   __STATIC_INLINE void LL_DMA_ClearFlag_HT2(DMA_TypeDef *DMAx)
;;;1620   {
;;;1621     WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF2);
;;;1622   }
;;;1623   
;;;1624   /**
;;;1625     * @brief  Clear Channel 3  half transfer flag.
;;;1626     * @rmtoll IFCR         CHTIF3        LL_DMA_ClearFlag_HT3
;;;1627     * @param  DMAx DMAx Instance
;;;1628     * @retval None
;;;1629     */
;;;1630   __STATIC_INLINE void LL_DMA_ClearFlag_HT3(DMA_TypeDef *DMAx)
;;;1631   {
;;;1632     WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF3);
;;;1633   }
;;;1634   
;;;1635   /**
;;;1636     * @brief  Clear Channel 4  half transfer flag.
;;;1637     * @rmtoll IFCR         CHTIF4        LL_DMA_ClearFlag_HT4
;;;1638     * @param  DMAx DMAx Instance
;;;1639     * @retval None
;;;1640     */
;;;1641   __STATIC_INLINE void LL_DMA_ClearFlag_HT4(DMA_TypeDef *DMAx)
;;;1642   {
;;;1643     WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF4);
;;;1644   }
;;;1645   
;;;1646   /**
;;;1647     * @brief  Clear Channel 5  half transfer flag.
;;;1648     * @rmtoll IFCR         CHTIF5        LL_DMA_ClearFlag_HT5
;;;1649     * @param  DMAx DMAx Instance
;;;1650     * @retval None
;;;1651     */
;;;1652   __STATIC_INLINE void LL_DMA_ClearFlag_HT5(DMA_TypeDef *DMAx)
;;;1653   {
;;;1654     WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF5);
;;;1655   }
;;;1656   
;;;1657   /**
;;;1658     * @brief  Clear Channel 6  half transfer flag.
;;;1659     * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
;;;1660     * @param  DMAx DMAx Instance
;;;1661     * @retval None
;;;1662     */
;;;1663   __STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
;;;1664   {
;;;1665     WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
;;;1666   }
;;;1667   
;;;1668   /**
;;;1669     * @brief  Clear Channel 7  half transfer flag.
;;;1670     * @rmtoll IFCR         CHTIF7        LL_DMA_ClearFlag_HT7
;;;1671     * @param  DMAx DMAx Instance
;;;1672     * @retval None
;;;1673     */
;;;1674   __STATIC_INLINE void LL_DMA_ClearFlag_HT7(DMA_TypeDef *DMAx)
;;;1675   {
;;;1676     WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF7);
;;;1677   }
;;;1678   
;;;1679   /**
;;;1680     * @brief  Clear Channel 1 transfer error flag.
;;;1681     * @rmtoll IFCR         CTEIF1        LL_DMA_ClearFlag_TE1
;;;1682     * @param  DMAx DMAx Instance
;;;1683     * @retval None
;;;1684     */
;;;1685   __STATIC_INLINE void LL_DMA_ClearFlag_TE1(DMA_TypeDef *DMAx)
;;;1686   {
;;;1687     WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF1);
;;;1688   }
;;;1689   
;;;1690   /**
;;;1691     * @brief  Clear Channel 2 transfer error flag.
;;;1692     * @rmtoll IFCR         CTEIF2        LL_DMA_ClearFlag_TE2
;;;1693     * @param  DMAx DMAx Instance
;;;1694     * @retval None
;;;1695     */
;;;1696   __STATIC_INLINE void LL_DMA_ClearFlag_TE2(DMA_TypeDef *DMAx)
;;;1697   {
;;;1698     WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF2);
;;;1699   }
;;;1700   
;;;1701   /**
;;;1702     * @brief  Clear Channel 3 transfer error flag.
;;;1703     * @rmtoll IFCR         CTEIF3        LL_DMA_ClearFlag_TE3
;;;1704     * @param  DMAx DMAx Instance
;;;1705     * @retval None
;;;1706     */
;;;1707   __STATIC_INLINE void LL_DMA_ClearFlag_TE3(DMA_TypeDef *DMAx)
;;;1708   {
;;;1709     WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF3);
;;;1710   }
;;;1711   
;;;1712   /**
;;;1713     * @brief  Clear Channel 4 transfer error flag.
;;;1714     * @rmtoll IFCR         CTEIF4        LL_DMA_ClearFlag_TE4
;;;1715     * @param  DMAx DMAx Instance
;;;1716     * @retval None
;;;1717     */
;;;1718   __STATIC_INLINE void LL_DMA_ClearFlag_TE4(DMA_TypeDef *DMAx)
;;;1719   {
;;;1720     WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF4);
;;;1721   }
;;;1722   
;;;1723   /**
;;;1724     * @brief  Clear Channel 5 transfer error flag.
;;;1725     * @rmtoll IFCR         CTEIF5        LL_DMA_ClearFlag_TE5
;;;1726     * @param  DMAx DMAx Instance
;;;1727     * @retval None
;;;1728     */
;;;1729   __STATIC_INLINE void LL_DMA_ClearFlag_TE5(DMA_TypeDef *DMAx)
;;;1730   {
;;;1731     WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF5);
;;;1732   }
;;;1733   
;;;1734   /**
;;;1735     * @brief  Clear Channel 6 transfer error flag.
;;;1736     * @rmtoll IFCR         CTEIF6        LL_DMA_ClearFlag_TE6
;;;1737     * @param  DMAx DMAx Instance
;;;1738     * @retval None
;;;1739     */
;;;1740   __STATIC_INLINE void LL_DMA_ClearFlag_TE6(DMA_TypeDef *DMAx)
;;;1741   {
;;;1742     WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF6);
;;;1743   }
;;;1744   
;;;1745   /**
;;;1746     * @brief  Clear Channel 7 transfer error flag.
;;;1747     * @rmtoll IFCR         CTEIF7        LL_DMA_ClearFlag_TE7
;;;1748     * @param  DMAx DMAx Instance
;;;1749     * @retval None
;;;1750     */
;;;1751   __STATIC_INLINE void LL_DMA_ClearFlag_TE7(DMA_TypeDef *DMAx)
;;;1752   {
;;;1753     WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF7);
;;;1754   }
;;;1755   
;;;1756   /**
;;;1757     * @}
;;;1758     */
;;;1759   
;;;1760   /** @defgroup DMA_LL_EF_IT_Management IT_Management
;;;1761     * @{
;;;1762     */
;;;1763   
;;;1764   /**
;;;1765     * @brief  Enable Transfer complete interrupt.
;;;1766     * @rmtoll CCR          TCIE          LL_DMA_EnableIT_TC
;;;1767     * @param  DMAx DMAx Instance
;;;1768     * @param  Channel This parameter can be one of the following values:
;;;1769     *         @arg @ref LL_DMA_CHANNEL_1
;;;1770     *         @arg @ref LL_DMA_CHANNEL_2
;;;1771     *         @arg @ref LL_DMA_CHANNEL_3
;;;1772     *         @arg @ref LL_DMA_CHANNEL_4
;;;1773     *         @arg @ref LL_DMA_CHANNEL_5
;;;1774     *         @arg @ref LL_DMA_CHANNEL_6
;;;1775     *         @arg @ref LL_DMA_CHANNEL_7
;;;1776     * @retval None
;;;1777     */
;;;1778   __STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
;;;1779   {
        0x080004d8:    b510        ..      PUSH     {r4,lr}
;;;1780     SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
        0x080004da:    1e4a        J.      SUBS     r2,r1,#1
        0x080004dc:    4b04        .K      LDR      r3,[pc,#16] ; [0x80004f0] = 0x8003b10
        0x080004de:    5c9a        .\      LDRB     r2,[r3,r2]
        0x080004e0:    5882        .X      LDR      r2,[r0,r2]
        0x080004e2:    f0420302    B...    ORR      r3,r2,#2
        0x080004e6:    1e4a        J.      SUBS     r2,r1,#1
        0x080004e8:    4c01        .L      LDR      r4,[pc,#4] ; [0x80004f0] = 0x8003b10
        0x080004ea:    5ca2        .\      LDRB     r2,[r4,r2]
        0x080004ec:    5083        .P      STR      r3,[r0,r2]
;;;1781   }
        0x080004ee:    bd10        ..      POP      {r4,pc}
    $d
        0x080004f0:    08003b10    .;..    DCD    134232848
    $t
    i.LL_DMA_EnableIT_TE
    LL_DMA_EnableIT_TE
;;;1782   
;;;1783   /**
;;;1784     * @brief  Enable Half transfer interrupt.
;;;1785     * @rmtoll CCR          HTIE          LL_DMA_EnableIT_HT
;;;1786     * @param  DMAx DMAx Instance
;;;1787     * @param  Channel This parameter can be one of the following values:
;;;1788     *         @arg @ref LL_DMA_CHANNEL_1
;;;1789     *         @arg @ref LL_DMA_CHANNEL_2
;;;1790     *         @arg @ref LL_DMA_CHANNEL_3
;;;1791     *         @arg @ref LL_DMA_CHANNEL_4
;;;1792     *         @arg @ref LL_DMA_CHANNEL_5
;;;1793     *         @arg @ref LL_DMA_CHANNEL_6
;;;1794     *         @arg @ref LL_DMA_CHANNEL_7
;;;1795     * @retval None
;;;1796     */
;;;1797   __STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
;;;1798   {
;;;1799     SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
;;;1800   }
;;;1801   
;;;1802   /**
;;;1803     * @brief  Enable Transfer error interrupt.
;;;1804     * @rmtoll CCR          TEIE          LL_DMA_EnableIT_TE
;;;1805     * @param  DMAx DMAx Instance
;;;1806     * @param  Channel This parameter can be one of the following values:
;;;1807     *         @arg @ref LL_DMA_CHANNEL_1
;;;1808     *         @arg @ref LL_DMA_CHANNEL_2
;;;1809     *         @arg @ref LL_DMA_CHANNEL_3
;;;1810     *         @arg @ref LL_DMA_CHANNEL_4
;;;1811     *         @arg @ref LL_DMA_CHANNEL_5
;;;1812     *         @arg @ref LL_DMA_CHANNEL_6
;;;1813     *         @arg @ref LL_DMA_CHANNEL_7
;;;1814     * @retval None
;;;1815     */
;;;1816   __STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
;;;1817   {
        0x080004f4:    b510        ..      PUSH     {r4,lr}
;;;1818     SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
        0x080004f6:    1e4a        J.      SUBS     r2,r1,#1
        0x080004f8:    4b04        .K      LDR      r3,[pc,#16] ; [0x800050c] = 0x8003b10
        0x080004fa:    5c9a        .\      LDRB     r2,[r3,r2]
        0x080004fc:    5882        .X      LDR      r2,[r0,r2]
        0x080004fe:    f0420308    B...    ORR      r3,r2,#8
        0x08000502:    1e4a        J.      SUBS     r2,r1,#1
        0x08000504:    4c01        .L      LDR      r4,[pc,#4] ; [0x800050c] = 0x8003b10
        0x08000506:    5ca2        .\      LDRB     r2,[r4,r2]
        0x08000508:    5083        .P      STR      r3,[r0,r2]
;;;1819   }
        0x0800050a:    bd10        ..      POP      {r4,pc}
    $d
        0x0800050c:    08003b10    .;..    DCD    134232848
    $t
    i.LL_DMA_SetDataLength
    LL_DMA_SetDataLength
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h (897)
        0x08000510:    b530        0.      PUSH     {r4,r5,lr}
;;;898      MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
        0x08000512:    1e4b        K.      SUBS     r3,r1,#1
        0x08000514:    4c06        .L      LDR      r4,[pc,#24] ; [0x8000530] = 0x8003b10
        0x08000516:    5ce3        .\      LDRB     r3,[r4,r3]
        0x08000518:    4403        .D      ADD      r3,r3,r0
        0x0800051a:    685b        [h      LDR      r3,[r3,#4]
        0x0800051c:    f36f030f    o...    BFC      r3,#0,#16
        0x08000520:    4313        .C      ORRS     r3,r3,r2
        0x08000522:    1e4c        L.      SUBS     r4,r1,#1
        0x08000524:    4d02        .M      LDR      r5,[pc,#8] ; [0x8000530] = 0x8003b10
        0x08000526:    5d2c        ,]      LDRB     r4,[r5,r4]
        0x08000528:    4404        .D      ADD      r4,r4,r0
        0x0800052a:    6063        c`      STR      r3,[r4,#4]
;;;899                 DMA_CNDTR_NDT, NbData);
;;;900    }
        0x0800052c:    bd30        0.      POP      {r4,r5,pc}
    $d
        0x0800052e:    0000        ..      DCW    0
        0x08000530:    08003b10    .;..    DCD    134232848
    $t
    i.LL_GPIO_Init
    LL_GPIO_Init
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_gpio.c
;;;172    {
        0x08000534:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x08000538:    4602        .F      MOV      r2,r0
        0x0800053a:    460b        .F      MOV      r3,r1
;;;173      uint32_t pinmask;
;;;174      uint32_t pinpos;
;;;175      uint32_t currentpin;
;;;176    
;;;177      /* Check the parameters */
;;;178      assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
;;;179      assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));
;;;180    
;;;181      /* ------------------------- Configure the port pins ---------------- */
;;;182      /* Initialize  pinpos on first pin set */
;;;183    
;;;184      pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
        0x0800053c:    6818        .h      LDR      r0,[r3,#0]
        0x0800053e:    f3c0250f    ...%    UBFX     r5,r0,#8,#16
;;;185      pinpos = POSITION_VAL(pinmask);
        0x08000542:    fa95f0a5    ....    RBIT     r0,r5
        0x08000546:    fab0f480    ....    CLZ      r4,r0
;;;186    
;;;187      /* Configure the port pins */
;;;188      while ((pinmask  >> pinpos) != 0U)
        0x0800054a:    e07c        |.      B        0x8000646 ; LL_GPIO_Init + 274
;;;189      {
;;;190        /* skip if bit is not set */
;;;191        if ((pinmask & (1U << pinpos)) != 0U)
        0x0800054c:    2001        .       MOVS     r0,#1
        0x0800054e:    40a0        .@      LSLS     r0,r0,r4
        0x08000550:    4028        (@      ANDS     r0,r0,r5
        0x08000552:    2800        .(      CMP      r0,#0
        0x08000554:    d076        v.      BEQ      0x8000644 ; LL_GPIO_Init + 272
;;;192        {
;;;193          /* Get current io position */
;;;194          if (pinpos < GPIO_PIN_MASK_POS)
        0x08000556:    2c08        .,      CMP      r4,#8
        0x08000558:    d204        ..      BCS      0x8000564 ; LL_GPIO_Init + 48
;;;195          {
;;;196            currentpin = (0x00000101U << pinpos);
        0x0800055a:    f2401001    @...    MOV      r0,#0x101
        0x0800055e:    fa00f104    ....    LSL      r1,r0,r4
        0x08000562:    e006        ..      B        0x8000572 ; LL_GPIO_Init + 62
;;;197          }
;;;198          else
;;;199          {
;;;200            currentpin = ((0x00010001U << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000U);
        0x08000564:    f1a40008    ....    SUB      r0,r4,#8
        0x08000568:    f04f1601    O...    MOV      r6,#0x10001
        0x0800056c:    4086        .@      LSLS     r6,r6,r0
        0x0800056e:    f0466180    F..a    ORR      r1,r6,#0x4000000
;;;201          }
;;;202    
;;;203          /* Check Pin Mode and Pin Pull parameters */
;;;204          assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
;;;205          assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));
;;;206    
;;;207          /* Pin Mode configuration */
;;;208          LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
        0x08000572:    6858        Xh      LDR      r0,[r3,#4]
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h
;;;360      register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
        0x08000574:    eb026611    ...f    ADD      r6,r2,r1,LSR #24
;;;361      MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
        0x08000578:    fa91fca1    ....    RBIT     r12,r1
        0x0800057c:    fabcfc8c    ....    CLZ      r12,r12
        0x08000580:    ea4f088c    O...    LSL      r8,r12,#2
        0x08000584:    f04f0c0f    O...    MOV      r12,#0xf
        0x08000588:    fa0cfc08    ....    LSL      r12,r12,r8
        0x0800058c:    6837        7h      LDR      r7,[r6,#0]
        0x0800058e:    ea27070c    '...    BIC      r7,r7,r12
        0x08000592:    fa91fca1    ....    RBIT     r12,r1
        0x08000596:    fabcfc8c    ....    CLZ      r12,r12
        0x0800059a:    ea4f0c8c    O...    LSL      r12,r12,#2
        0x0800059e:    fa00fc0c    ....    LSL      r12,r0,r12
        0x080005a2:    ea47070c    G...    ORR      r7,r7,r12
        0x080005a6:    6037        7`      STR      r7,[r6,#0]
;;;362    }
        0x080005a8:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_gpio.c
;;;211          LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
        0x080005aa:    6918        .i      LDR      r0,[r3,#0x10]
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h
;;;583      MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
        0x080005ac:    68d6        .h      LDR      r6,[r2,#0xc]
        0x080005ae:    ea262611    &..&    BIC      r6,r6,r1,LSR #8
        0x080005b2:    0a0f        ..      LSRS     r7,r1,#8
        0x080005b4:    fa97f7a7    ....    RBIT     r7,r7
        0x080005b8:    fab7f787    ....    CLZ      r7,r7
        0x080005bc:    fa00f707    ....    LSL      r7,r0,r7
        0x080005c0:    433e        >C      ORRS     r6,r6,r7
        0x080005c2:    60d6        .`      STR      r6,[r2,#0xc]
;;;584    }
        0x080005c4:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_gpio.c
;;;213          if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
        0x080005c6:    6858        Xh      LDR      r0,[r3,#4]
        0x080005c8:    2801        .(      CMP      r0,#1
        0x080005ca:    d002        ..      BEQ      0x80005d2 ; LL_GPIO_Init + 158
        0x080005cc:    6858        Xh      LDR      r0,[r3,#4]
        0x080005ce:    2809        .(      CMP      r0,#9
        0x080005d0:    d138        8.      BNE      0x8000644 ; LL_GPIO_Init + 272
;;;214          {
;;;215            /* Check speed and Output mode parameters */
;;;216            assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
;;;217            assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
;;;218    
;;;219            /* Speed mode configuration */
;;;220            LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
        0x080005d2:    6898        .h      LDR      r0,[r3,#8]
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h
;;;438      register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
        0x080005d4:    eb026611    ...f    ADD      r6,r2,r1,LSR #24
;;;439      MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
        0x080005d8:    fa91fca1    ....    RBIT     r12,r1
        0x080005dc:    fabcfc8c    ....    CLZ      r12,r12
        0x080005e0:    ea4f088c    O...    LSL      r8,r12,#2
        0x080005e4:    f04f0c03    O...    MOV      r12,#3
        0x080005e8:    fa0cfc08    ....    LSL      r12,r12,r8
        0x080005ec:    6837        7h      LDR      r7,[r6,#0]
        0x080005ee:    ea27070c    '...    BIC      r7,r7,r12
        0x080005f2:    fa91fca1    ....    RBIT     r12,r1
        0x080005f6:    fabcfc8c    ....    CLZ      r12,r12
        0x080005fa:    ea4f0c8c    O...    LSL      r12,r12,#2
        0x080005fe:    fa00fc0c    ....    LSL      r12,r0,r12
        0x08000602:    ea47070c    G...    ORR      r7,r7,r12
        0x08000606:    6037        7`      STR      r7,[r6,#0]
;;;440                 (Speed << (POSITION_VAL(Pin) * 4U)));
;;;441    }
        0x08000608:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_gpio.c
;;;223            LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
        0x0800060a:    68d8        .h      LDR      r0,[r3,#0xc]
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h
;;;512      register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
        0x0800060c:    eb026611    ...f    ADD      r6,r2,r1,LSR #24
;;;513      MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
        0x08000610:    fa91fca1    ....    RBIT     r12,r1
        0x08000614:    fabcfc8c    ....    CLZ      r12,r12
        0x08000618:    ea4f088c    O...    LSL      r8,r12,#2
        0x0800061c:    f04f0c04    O...    MOV      r12,#4
        0x08000620:    fa0cfc08    ....    LSL      r12,r12,r8
        0x08000624:    6837        7h      LDR      r7,[r6,#0]
        0x08000626:    ea27070c    '...    BIC      r7,r7,r12
        0x0800062a:    fa91fca1    ....    RBIT     r12,r1
        0x0800062e:    fabcfc8c    ....    CLZ      r12,r12
        0x08000632:    ea4f0c8c    O...    LSL      r12,r12,#2
        0x08000636:    fa00fc0c    ....    LSL      r12,r0,r12
        0x0800063a:    ea47070c    G...    ORR      r7,r7,r12
        0x0800063e:    6037        7`      STR      r7,[r6,#0]
;;;514                 (OutputType << (POSITION_VAL(Pin) * 4U)));
;;;515    }
        0x08000640:    bf00        ..      NOP      
        0x08000642:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_gpio.c
;;;226        pinpos++;
        0x08000644:    1c64        d.      ADDS     r4,r4,#1
        0x08000646:    fa25f004    %...    LSR      r0,r5,r4
        0x0800064a:    2800        .(      CMP      r0,#0
        0x0800064c:    f47faf7e    ..~.    BNE      0x800054c ; LL_GPIO_Init + 24
;;;227      }
;;;228      return (SUCCESS);
        0x08000650:    2001        .       MOVS     r0,#1
;;;229    }
        0x08000652:    e8bd81f0    ....    POP      {r4-r8,pc}
    i.LL_GPIO_IsInputPinSet
    LL_GPIO_IsInputPinSet
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h
;;;740    {
        0x08000656:    4602        .F      MOV      r2,r0
;;;741      return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
        0x08000658:    6890        .h      LDR      r0,[r2,#8]
        0x0800065a:    f3c1230f    ...#    UBFX     r3,r1,#8,#16
        0x0800065e:    4018        .@      ANDS     r0,r0,r3
        0x08000660:    f3c1230f    ...#    UBFX     r3,r1,#8,#16
        0x08000664:    4298        .B      CMP      r0,r3
        0x08000666:    d101        ..      BNE      0x800066c ; LL_GPIO_IsInputPinSet + 22
        0x08000668:    2001        .       MOVS     r0,#1
        0x0800066a:    4770        pG      BX       lr
        0x0800066c:    2000        .       MOVS     r0,#0
        0x0800066e:    e7fc        ..      B        0x800066a ; LL_GPIO_IsInputPinSet + 20
    i.LL_GPIO_ResetOutputPin
    LL_GPIO_ResetOutputPin
;;;742    }
;;;743    
;;;744    /**
;;;745      * @brief  Write output data register for the port.
;;;746      * @rmtoll ODR          ODy           LL_GPIO_WriteOutputPort
;;;747      * @param  GPIOx GPIO Port
;;;748      * @param  PortValue Level value for each pin of the port
;;;749      * @retval None
;;;750      */
;;;751    __STATIC_INLINE void LL_GPIO_WriteOutputPort(GPIO_TypeDef *GPIOx, uint32_t PortValue)
;;;752    {
;;;753      WRITE_REG(GPIOx->ODR, PortValue);
;;;754    }
;;;755    
;;;756    /**
;;;757      * @brief  Return full output data register value for a dedicated port.
;;;758      * @rmtoll ODR          ODy           LL_GPIO_ReadOutputPort
;;;759      * @param  GPIOx GPIO Port
;;;760      * @retval Output data register value of port
;;;761      */
;;;762    __STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
;;;763    {
;;;764      return (uint32_t)(READ_REG(GPIOx->ODR));
;;;765    }
;;;766    
;;;767    /**
;;;768      * @brief  Return if input data level for several pins of dedicated port is high or low.
;;;769      * @rmtoll ODR          ODy           LL_GPIO_IsOutputPinSet
;;;770      * @param  GPIOx GPIO Port
;;;771      * @param  PinMask This parameter can be a combination of the following values:
;;;772      *         @arg @ref LL_GPIO_PIN_0
;;;773      *         @arg @ref LL_GPIO_PIN_1
;;;774      *         @arg @ref LL_GPIO_PIN_2
;;;775      *         @arg @ref LL_GPIO_PIN_3
;;;776      *         @arg @ref LL_GPIO_PIN_4
;;;777      *         @arg @ref LL_GPIO_PIN_5
;;;778      *         @arg @ref LL_GPIO_PIN_6
;;;779      *         @arg @ref LL_GPIO_PIN_7
;;;780      *         @arg @ref LL_GPIO_PIN_8
;;;781      *         @arg @ref LL_GPIO_PIN_9
;;;782      *         @arg @ref LL_GPIO_PIN_10
;;;783      *         @arg @ref LL_GPIO_PIN_11
;;;784      *         @arg @ref LL_GPIO_PIN_12
;;;785      *         @arg @ref LL_GPIO_PIN_13
;;;786      *         @arg @ref LL_GPIO_PIN_14
;;;787      *         @arg @ref LL_GPIO_PIN_15
;;;788      *         @arg @ref LL_GPIO_PIN_ALL
;;;789      * @retval State of bit (1 or 0).
;;;790      */
;;;791    __STATIC_INLINE uint32_t LL_GPIO_IsOutputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
;;;792    {
;;;793      return (READ_BIT(GPIOx->ODR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
;;;794    }
;;;795    
;;;796    /**
;;;797      * @brief  Set several pins to high level on dedicated gpio port.
;;;798      * @rmtoll BSRR         BSy           LL_GPIO_SetOutputPin
;;;799      * @param  GPIOx GPIO Port
;;;800      * @param  PinMask This parameter can be a combination of the following values:
;;;801      *         @arg @ref LL_GPIO_PIN_0
;;;802      *         @arg @ref LL_GPIO_PIN_1
;;;803      *         @arg @ref LL_GPIO_PIN_2
;;;804      *         @arg @ref LL_GPIO_PIN_3
;;;805      *         @arg @ref LL_GPIO_PIN_4
;;;806      *         @arg @ref LL_GPIO_PIN_5
;;;807      *         @arg @ref LL_GPIO_PIN_6
;;;808      *         @arg @ref LL_GPIO_PIN_7
;;;809      *         @arg @ref LL_GPIO_PIN_8
;;;810      *         @arg @ref LL_GPIO_PIN_9
;;;811      *         @arg @ref LL_GPIO_PIN_10
;;;812      *         @arg @ref LL_GPIO_PIN_11
;;;813      *         @arg @ref LL_GPIO_PIN_12
;;;814      *         @arg @ref LL_GPIO_PIN_13
;;;815      *         @arg @ref LL_GPIO_PIN_14
;;;816      *         @arg @ref LL_GPIO_PIN_15
;;;817      *         @arg @ref LL_GPIO_PIN_ALL
;;;818      * @retval None
;;;819      */
;;;820    __STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
;;;821    {
;;;822      WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
;;;823    }
;;;824    
;;;825    /**
;;;826      * @brief  Set several pins to low level on dedicated gpio port.
;;;827      * @rmtoll BRR          BRy           LL_GPIO_ResetOutputPin
;;;828      * @param  GPIOx GPIO Port
;;;829      * @param  PinMask This parameter can be a combination of the following values:
;;;830      *         @arg @ref LL_GPIO_PIN_0
;;;831      *         @arg @ref LL_GPIO_PIN_1
;;;832      *         @arg @ref LL_GPIO_PIN_2
;;;833      *         @arg @ref LL_GPIO_PIN_3
;;;834      *         @arg @ref LL_GPIO_PIN_4
;;;835      *         @arg @ref LL_GPIO_PIN_5
;;;836      *         @arg @ref LL_GPIO_PIN_6
;;;837      *         @arg @ref LL_GPIO_PIN_7
;;;838      *         @arg @ref LL_GPIO_PIN_8
;;;839      *         @arg @ref LL_GPIO_PIN_9
;;;840      *         @arg @ref LL_GPIO_PIN_10
;;;841      *         @arg @ref LL_GPIO_PIN_11
;;;842      *         @arg @ref LL_GPIO_PIN_12
;;;843      *         @arg @ref LL_GPIO_PIN_13
;;;844      *         @arg @ref LL_GPIO_PIN_14
;;;845      *         @arg @ref LL_GPIO_PIN_15
;;;846      *         @arg @ref LL_GPIO_PIN_ALL
;;;847      * @retval None
;;;848      */
;;;849    __STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
;;;850    {
;;;851      WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
        0x08000670:    f3c1220f    ..."    UBFX     r2,r1,#8,#16
        0x08000674:    6142        Ba      STR      r2,[r0,#0x14]
;;;852    }
        0x08000676:    4770        pG      BX       lr
    i.LL_I2C_AcknowledgeNextData
    LL_I2C_AcknowledgeNextData
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;1572     MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
        0x08000678:    6802        .h      LDR      r2,[r0,#0]
        0x0800067a:    f4226280    "..b    BIC      r2,r2,#0x400
        0x0800067e:    430a        .C      ORRS     r2,r2,r1
        0x08000680:    6002        .`      STR      r2,[r0,#0]
        0x08000682:    4770        pG      BX       lr
    i.LL_I2C_ConfigSpeed
    LL_I2C_ConfigSpeed
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h (747)
        0x08000684:    b5f0        ..      PUSH     {r4-r7,lr}
;;;748      register uint32_t freqrange = 0x0U;
        0x08000686:    2400        .$      MOVS     r4,#0
;;;749      register uint32_t clockconfig = 0x0U;
        0x08000688:    2500        .%      MOVS     r5,#0
;;;750    
;;;751      /* Compute frequency range */
;;;752      freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
        0x0800068a:    4e2b        +N      LDR      r6,[pc,#172] ; [0x8000738] = 0xf4240
        0x0800068c:    fbb1f4f6    ....    UDIV     r4,r1,r6
;;;753    
;;;754      /* Configure I2Cx: Frequency range register */
;;;755      MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
        0x08000690:    6846        Fh      LDR      r6,[r0,#4]
        0x08000692:    f026063f    &.?.    BIC      r6,r6,#0x3f
        0x08000696:    4326        &C      ORRS     r6,r6,r4
        0x08000698:    6046        F`      STR      r6,[r0,#4]
;;;756    
;;;757      /* Configure I2Cx: Rise Time register */
;;;758      MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
        0x0800069a:    4e28        (N      LDR      r6,[pc,#160] ; [0x800073c] = 0x186a0
        0x0800069c:    42b2        .B      CMP      r2,r6
        0x0800069e:    d801        ..      BHI      0x80006a4 ; LL_I2C_ConfigSpeed + 32
        0x080006a0:    1c66        f.      ADDS     r6,r4,#1
        0x080006a2:    e007        ..      B        0x80006b4 ; LL_I2C_ConfigSpeed + 48
        0x080006a4:    f44f7696    O..v    MOV      r6,#0x12c
        0x080006a8:    4366        fC      MULS     r6,r4,r6
        0x080006aa:    f44f777a    O.zw    MOV      r7,#0x3e8
        0x080006ae:    fbb6f6f7    ....    UDIV     r6,r6,r7
        0x080006b2:    1c76        v.      ADDS     r6,r6,#1
        0x080006b4:    6a07        .j      LDR      r7,[r0,#0x20]
        0x080006b6:    f027073f    '.?.    BIC      r7,r7,#0x3f
        0x080006ba:    433e        >C      ORRS     r6,r6,r7
        0x080006bc:    6206        .b      STR      r6,[r0,#0x20]
;;;759    
;;;760      /* Configure Speed mode, Duty Cycle and Clock control register value */
;;;761      if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
        0x080006be:    4e1f        .N      LDR      r6,[pc,#124] ; [0x800073c] = 0x186a0
        0x080006c0:    42b2        .B      CMP      r2,r6
        0x080006c2:    d924        $.      BLS      0x800070e ; LL_I2C_ConfigSpeed + 138
;;;762      {
;;;763        /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
;;;764        clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
        0x080006c4:    b96b        k.      CBNZ     r3,0x80006e2 ; LL_I2C_ConfigSpeed + 94
;;;765                      __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
        0x080006c6:    eb020642    ..B.    ADD      r6,r2,r2,LSL #1
        0x080006ca:    fbb1f6f6    ....    UDIV     r6,r1,r6
        0x080006ce:    f3c6060b    ....    UBFX     r6,r6,#0,#12
        0x080006d2:    b90e        ..      CBNZ     r6,0x80006d8 ; LL_I2C_ConfigSpeed + 84
        0x080006d4:    2601        .&      MOVS     r6,#1
        0x080006d6:    e015        ..      B        0x8000704 ; LL_I2C_ConfigSpeed + 128
        0x080006d8:    eb020642    ..B.    ADD      r6,r2,r2,LSL #1
        0x080006dc:    fbb1f6f6    ....    UDIV     r6,r1,r6
        0x080006e0:    e010        ..      B        0x8000704 ; LL_I2C_ConfigSpeed + 128
        0x080006e2:    eb0206c2    ....    ADD      r6,r2,r2,LSL #3
        0x080006e6:    eb061602    ....    ADD      r6,r6,r2,LSL #4
        0x080006ea:    fbb1f6f6    ....    UDIV     r6,r1,r6
        0x080006ee:    f3c6060b    ....    UBFX     r6,r6,#0,#12
        0x080006f2:    b90e        ..      CBNZ     r6,0x80006f8 ; LL_I2C_ConfigSpeed + 116
        0x080006f4:    2601        .&      MOVS     r6,#1
        0x080006f6:    e005        ..      B        0x8000704 ; LL_I2C_ConfigSpeed + 128
        0x080006f8:    eb0206c2    ....    ADD      r6,r2,r2,LSL #3
        0x080006fc:    eb061602    ....    ADD      r6,r6,r2,LSL #4
        0x08000700:    fbb1f6f6    ....    UDIV     r6,r1,r6
        0x08000704:    f4464600    F..F    ORR      r6,r6,#0x8000
        0x08000708:    ea460503    F...    ORR      r5,r6,r3
        0x0800070c:    e00c        ..      B        0x8000728 ; LL_I2C_ConfigSpeed + 164
;;;766                      DutyCycle;
;;;767      }
;;;768      else
;;;769      {
;;;770        /* Set Speed mode at standard for Clock Speed request in standard clock range */
;;;771        clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
        0x0800070e:    0056        V.      LSLS     r6,r2,#1
        0x08000710:    fbb1f6f6    ....    UDIV     r6,r1,r6
        0x08000714:    f3c6060b    ....    UBFX     r6,r6,#0,#12
        0x08000718:    2e04        ..      CMP      r6,#4
        0x0800071a:    d201        ..      BCS      0x8000720 ; LL_I2C_ConfigSpeed + 156
;;;772                      __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
        0x0800071c:    2604        .&      MOVS     r6,#4
        0x0800071e:    e002        ..      B        0x8000726 ; LL_I2C_ConfigSpeed + 162
        0x08000720:    0056        V.      LSLS     r6,r2,#1
        0x08000722:    fbb1f6f6    ....    UDIV     r6,r1,r6
        0x08000726:    4635        5F      MOV      r5,r6
;;;773      }
;;;774    
;;;775      /* Configure I2Cx: Clock control register */
;;;776      MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
        0x08000728:    69c6        .i      LDR      r6,[r0,#0x1c]
        0x0800072a:    f64c77ff    L..w    MOV      r7,#0xcfff
        0x0800072e:    43be        .C      BICS     r6,r6,r7
        0x08000730:    432e        .C      ORRS     r6,r6,r5
        0x08000732:    61c6        .a      STR      r6,[r0,#0x1c]
;;;777    }
        0x08000734:    bdf0        ..      POP      {r4-r7,pc}
    $d
        0x08000736:    0000        ..      DCW    0
        0x08000738:    000f4240    @B..    DCD    1000000
        0x0800073c:    000186a0    ....    DCD    100000
    $t
    i.LL_I2C_GenerateStartCondition
    LL_I2C_GenerateStartCondition
;;;778    
;;;779    /**
;;;780      * @brief  Configure peripheral mode.
;;;781      * @note   Macro @ref IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
;;;782      *         SMBus feature is supported by the I2Cx Instance.
;;;783      * @rmtoll CR1          SMBUS         LL_I2C_SetMode\n
;;;784      *         CR1          SMBTYPE       LL_I2C_SetMode\n
;;;785      *         CR1          ENARP         LL_I2C_SetMode
;;;786      * @param  I2Cx I2C Instance.
;;;787      * @param  PeripheralMode This parameter can be one of the following values:
;;;788      *         @arg @ref LL_I2C_MODE_I2C
;;;789      *         @arg @ref LL_I2C_MODE_SMBUS_HOST
;;;790      *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
;;;791      *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
;;;792      * @retval None
;;;793      */
;;;794    __STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
;;;795    {
;;;796      MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
;;;797    }
;;;798    
;;;799    /**
;;;800      * @brief  Get peripheral mode.
;;;801      * @note   Macro @ref IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
;;;802      *         SMBus feature is supported by the I2Cx Instance.
;;;803      * @rmtoll CR1          SMBUS         LL_I2C_GetMode\n
;;;804      *         CR1          SMBTYPE       LL_I2C_GetMode\n
;;;805      *         CR1          ENARP         LL_I2C_GetMode
;;;806      * @param  I2Cx I2C Instance.
;;;807      * @retval Returned value can be one of the following values:
;;;808      *         @arg @ref LL_I2C_MODE_I2C
;;;809      *         @arg @ref LL_I2C_MODE_SMBUS_HOST
;;;810      *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
;;;811      *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
;;;812      */
;;;813    __STATIC_INLINE uint32_t LL_I2C_GetMode(I2C_TypeDef *I2Cx)
;;;814    {
;;;815      return (uint32_t)(READ_BIT(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP));
;;;816    }
;;;817    
;;;818    /**
;;;819      * @brief  Enable SMBus alert (Host or Device mode)
;;;820      * @note   Macro @ref IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
;;;821      *         SMBus feature is supported by the I2Cx Instance.
;;;822      * @note   SMBus Device mode:
;;;823      *         - SMBus Alert pin is drived low and
;;;824      *           Alert Response Address Header acknowledge is enabled.
;;;825      *         SMBus Host mode:
;;;826      *         - SMBus Alert pin management is supported.
;;;827      * @rmtoll CR1          ALERT         LL_I2C_EnableSMBusAlert
;;;828      * @param  I2Cx I2C Instance.
;;;829      * @retval None
;;;830      */
;;;831    __STATIC_INLINE void LL_I2C_EnableSMBusAlert(I2C_TypeDef *I2Cx)
;;;832    {
;;;833      SET_BIT(I2Cx->CR1, I2C_CR1_ALERT);
;;;834    }
;;;835    
;;;836    /**
;;;837      * @brief  Disable SMBus alert (Host or Device mode)
;;;838      * @note   Macro @ref IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
;;;839      *         SMBus feature is supported by the I2Cx Instance.
;;;840      * @note   SMBus Device mode:
;;;841      *         - SMBus Alert pin is not drived (can be used as a standard GPIO) and
;;;842      *           Alert Response Address Header acknowledge is disabled.
;;;843      *         SMBus Host mode:
;;;844      *         - SMBus Alert pin management is not supported.
;;;845      * @rmtoll CR1          ALERT         LL_I2C_DisableSMBusAlert
;;;846      * @param  I2Cx I2C Instance.
;;;847      * @retval None
;;;848      */
;;;849    __STATIC_INLINE void LL_I2C_DisableSMBusAlert(I2C_TypeDef *I2Cx)
;;;850    {
;;;851      CLEAR_BIT(I2Cx->CR1, I2C_CR1_ALERT);
;;;852    }
;;;853    
;;;854    /**
;;;855      * @brief  Check if SMBus alert (Host or Device mode) is enabled or disabled.
;;;856      * @note   Macro @ref IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
;;;857      *         SMBus feature is supported by the I2Cx Instance.
;;;858      * @rmtoll CR1          ALERT         LL_I2C_IsEnabledSMBusAlert
;;;859      * @param  I2Cx I2C Instance.
;;;860      * @retval State of bit (1 or 0).
;;;861      */
;;;862    __STATIC_INLINE uint32_t LL_I2C_IsEnabledSMBusAlert(I2C_TypeDef *I2Cx)
;;;863    {
;;;864      return (READ_BIT(I2Cx->CR1, I2C_CR1_ALERT) == (I2C_CR1_ALERT));
;;;865    }
;;;866    
;;;867    /**
;;;868      * @brief  Enable SMBus Packet Error Calculation (PEC).
;;;869      * @note   Macro @ref IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
;;;870      *         SMBus feature is supported by the I2Cx Instance.
;;;871      * @rmtoll CR1          ENPEC         LL_I2C_EnableSMBusPEC
;;;872      * @param  I2Cx I2C Instance.
;;;873      * @retval None
;;;874      */
;;;875    __STATIC_INLINE void LL_I2C_EnableSMBusPEC(I2C_TypeDef *I2Cx)
;;;876    {
;;;877      SET_BIT(I2Cx->CR1, I2C_CR1_ENPEC);
;;;878    }
;;;879    
;;;880    /**
;;;881      * @brief  Disable SMBus Packet Error Calculation (PEC).
;;;882      * @note   Macro @ref IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
;;;883      *         SMBus feature is supported by the I2Cx Instance.
;;;884      * @rmtoll CR1          ENPEC         LL_I2C_DisableSMBusPEC
;;;885      * @param  I2Cx I2C Instance.
;;;886      * @retval None
;;;887      */
;;;888    __STATIC_INLINE void LL_I2C_DisableSMBusPEC(I2C_TypeDef *I2Cx)
;;;889    {
;;;890      CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENPEC);
;;;891    }
;;;892    
;;;893    /**
;;;894      * @brief  Check if SMBus Packet Error Calculation (PEC) is enabled or disabled.
;;;895      * @note   Macro @ref IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
;;;896      *         SMBus feature is supported by the I2Cx Instance.
;;;897      * @rmtoll CR1          ENPEC         LL_I2C_IsEnabledSMBusPEC
;;;898      * @param  I2Cx I2C Instance.
;;;899      * @retval State of bit (1 or 0).
;;;900      */
;;;901    __STATIC_INLINE uint32_t LL_I2C_IsEnabledSMBusPEC(I2C_TypeDef *I2Cx)
;;;902    {
;;;903      return (READ_BIT(I2Cx->CR1, I2C_CR1_ENPEC) == (I2C_CR1_ENPEC));
;;;904    }
;;;905    
;;;906    /**
;;;907      * @}
;;;908      */
;;;909    
;;;910    /** @defgroup I2C_LL_EF_IT_Management IT_Management
;;;911      * @{
;;;912      */
;;;913    
;;;914    /**
;;;915      * @brief  Enable TXE interrupt.
;;;916      * @rmtoll CR2          ITEVTEN       LL_I2C_EnableIT_TX\n
;;;917      *         CR2          ITBUFEN       LL_I2C_EnableIT_TX
;;;918      * @param  I2Cx I2C Instance.
;;;919      * @retval None
;;;920      */
;;;921    __STATIC_INLINE void LL_I2C_EnableIT_TX(I2C_TypeDef *I2Cx)
;;;922    {
;;;923      SET_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN | I2C_CR2_ITBUFEN);
;;;924    }
;;;925    
;;;926    /**
;;;927      * @brief  Disable TXE interrupt.
;;;928      * @rmtoll CR2          ITEVTEN       LL_I2C_DisableIT_TX\n
;;;929      *         CR2          ITBUFEN       LL_I2C_DisableIT_TX
;;;930      * @param  I2Cx I2C Instance.
;;;931      * @retval None
;;;932      */
;;;933    __STATIC_INLINE void LL_I2C_DisableIT_TX(I2C_TypeDef *I2Cx)
;;;934    {
;;;935      CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN | I2C_CR2_ITBUFEN);
;;;936    }
;;;937    
;;;938    /**
;;;939      * @brief  Check if the TXE Interrupt is enabled or disabled.
;;;940      * @rmtoll CR2          ITEVTEN       LL_I2C_IsEnabledIT_TX\n
;;;941      *         CR2          ITBUFEN       LL_I2C_IsEnabledIT_TX
;;;942      * @param  I2Cx I2C Instance.
;;;943      * @retval State of bit (1 or 0).
;;;944      */
;;;945    __STATIC_INLINE uint32_t LL_I2C_IsEnabledIT_TX(I2C_TypeDef *I2Cx)
;;;946    {
;;;947      return (READ_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN | I2C_CR2_ITBUFEN) == (I2C_CR2_ITEVTEN | I2C_CR2_ITBUFEN));
;;;948    }
;;;949    
;;;950    /**
;;;951      * @brief  Enable RXNE interrupt.
;;;952      * @rmtoll CR2          ITEVTEN       LL_I2C_EnableIT_RX\n
;;;953      *         CR2          ITBUFEN       LL_I2C_EnableIT_RX
;;;954      * @param  I2Cx I2C Instance.
;;;955      * @retval None
;;;956      */
;;;957    __STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
;;;958    {
;;;959      SET_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN | I2C_CR2_ITBUFEN);
;;;960    }
;;;961    
;;;962    /**
;;;963      * @brief  Disable RXNE interrupt.
;;;964      * @rmtoll CR2          ITEVTEN       LL_I2C_DisableIT_RX\n
;;;965      *         CR2          ITBUFEN       LL_I2C_DisableIT_RX
;;;966      * @param  I2Cx I2C Instance.
;;;967      * @retval None
;;;968      */
;;;969    __STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
;;;970    {
;;;971      CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN | I2C_CR2_ITBUFEN);
;;;972    }
;;;973    
;;;974    /**
;;;975      * @brief  Check if the RXNE Interrupt is enabled or disabled.
;;;976      * @rmtoll CR2          ITEVTEN       LL_I2C_IsEnabledIT_RX\n
;;;977      *         CR2          ITBUFEN       LL_I2C_IsEnabledIT_RX
;;;978      * @param  I2Cx I2C Instance.
;;;979      * @retval State of bit (1 or 0).
;;;980      */
;;;981    __STATIC_INLINE uint32_t LL_I2C_IsEnabledIT_RX(I2C_TypeDef *I2Cx)
;;;982    {
;;;983      return (READ_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN | I2C_CR2_ITBUFEN) == (I2C_CR2_ITEVTEN | I2C_CR2_ITBUFEN));
;;;984    }
;;;985    
;;;986    /**
;;;987      * @brief  Enable Events interrupts.
;;;988      * @note   Any of these events will generate interrupt :
;;;989      *         Start Bit (SB)
;;;990      *         Address sent, Address matched (ADDR)
;;;991      *         10-bit header sent (ADD10)
;;;992      *         Stop detection  (STOPF)
;;;993      *         Byte transfer finished (BTF)
;;;994      *
;;;995      * @note   Any of these events will generate interrupt if Buffer interrupts are enabled too(using unitary function @ref LL_I2C_EnableIT_BUF()) :
;;;996      *         Receive buffer not empty (RXNE)
;;;997      *         Transmit buffer empty (TXE)
;;;998      * @rmtoll CR2          ITEVTEN       LL_I2C_EnableIT_EVT
;;;999      * @param  I2Cx I2C Instance.
;;;1000     * @retval None
;;;1001     */
;;;1002   __STATIC_INLINE void LL_I2C_EnableIT_EVT(I2C_TypeDef *I2Cx)
;;;1003   {
;;;1004     SET_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN);
;;;1005   }
;;;1006   
;;;1007   /**
;;;1008     * @brief  Disable Events interrupts.
;;;1009     * @note   Any of these events will generate interrupt :
;;;1010     *         Start Bit (SB)
;;;1011     *         Address sent, Address matched (ADDR)
;;;1012     *         10-bit header sent (ADD10)
;;;1013     *         Stop detection  (STOPF)
;;;1014     *         Byte transfer finished (BTF)
;;;1015     *         Receive buffer not empty (RXNE)
;;;1016     *         Transmit buffer empty (TXE)
;;;1017     * @rmtoll CR2          ITEVTEN       LL_I2C_DisableIT_EVT
;;;1018     * @param  I2Cx I2C Instance.
;;;1019     * @retval None
;;;1020     */
;;;1021   __STATIC_INLINE void LL_I2C_DisableIT_EVT(I2C_TypeDef *I2Cx)
;;;1022   {
;;;1023     CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN);
;;;1024   }
;;;1025   
;;;1026   /**
;;;1027     * @brief  Check if Events interrupts are enabled or disabled.
;;;1028     * @rmtoll CR2          ITEVTEN       LL_I2C_IsEnabledIT_EVT
;;;1029     * @param  I2Cx I2C Instance.
;;;1030     * @retval State of bit (1 or 0).
;;;1031     */
;;;1032   __STATIC_INLINE uint32_t LL_I2C_IsEnabledIT_EVT(I2C_TypeDef *I2Cx)
;;;1033   {
;;;1034     return (READ_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN) == (I2C_CR2_ITEVTEN));
;;;1035   }
;;;1036   
;;;1037   /**
;;;1038     * @brief  Enable Buffer interrupts.
;;;1039     * @note   Any of these Buffer events will generate interrupt if Events interrupts are enabled too(using unitary function @ref LL_I2C_EnableIT_EVT()) :
;;;1040     *         Receive buffer not empty (RXNE)
;;;1041     *         Transmit buffer empty (TXE)
;;;1042     * @rmtoll CR2          ITBUFEN       LL_I2C_EnableIT_BUF
;;;1043     * @param  I2Cx I2C Instance.
;;;1044     * @retval None
;;;1045     */
;;;1046   __STATIC_INLINE void LL_I2C_EnableIT_BUF(I2C_TypeDef *I2Cx)
;;;1047   {
;;;1048     SET_BIT(I2Cx->CR2, I2C_CR2_ITBUFEN);
;;;1049   }
;;;1050   
;;;1051   /**
;;;1052     * @brief  Disable Buffer interrupts.
;;;1053     * @note   Any of these Buffer events will generate interrupt :
;;;1054     *         Receive buffer not empty (RXNE)
;;;1055     *         Transmit buffer empty (TXE)
;;;1056     * @rmtoll CR2          ITBUFEN       LL_I2C_DisableIT_BUF
;;;1057     * @param  I2Cx I2C Instance.
;;;1058     * @retval None
;;;1059     */
;;;1060   __STATIC_INLINE void LL_I2C_DisableIT_BUF(I2C_TypeDef *I2Cx)
;;;1061   {
;;;1062     CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITBUFEN);
;;;1063   }
;;;1064   
;;;1065   /**
;;;1066     * @brief  Check if Buffer interrupts are enabled or disabled.
;;;1067     * @rmtoll CR2          ITBUFEN       LL_I2C_IsEnabledIT_BUF
;;;1068     * @param  I2Cx I2C Instance.
;;;1069     * @retval State of bit (1 or 0).
;;;1070     */
;;;1071   __STATIC_INLINE uint32_t LL_I2C_IsEnabledIT_BUF(I2C_TypeDef *I2Cx)
;;;1072   {
;;;1073     return (READ_BIT(I2Cx->CR2, I2C_CR2_ITBUFEN) == (I2C_CR2_ITBUFEN));
;;;1074   }
;;;1075   
;;;1076   /**
;;;1077     * @brief  Enable Error interrupts.
;;;1078     * @note   Macro @ref IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
;;;1079     *         SMBus feature is supported by the I2Cx Instance.
;;;1080     * @note   Any of these errors will generate interrupt :
;;;1081     *         Bus Error detection (BERR)
;;;1082     *         Arbitration Loss (ARLO)
;;;1083     *         Acknowledge Failure(AF)
;;;1084     *         Overrun/Underrun (OVR)
;;;1085     *         SMBus Timeout detection (TIMEOUT)
;;;1086     *         SMBus PEC error detection (PECERR)
;;;1087     *         SMBus Alert pin event detection (SMBALERT)
;;;1088     * @rmtoll CR2          ITERREN       LL_I2C_EnableIT_ERR
;;;1089     * @param  I2Cx I2C Instance.
;;;1090     * @retval None
;;;1091     */
;;;1092   __STATIC_INLINE void LL_I2C_EnableIT_ERR(I2C_TypeDef *I2Cx)
;;;1093   {
;;;1094     SET_BIT(I2Cx->CR2, I2C_CR2_ITERREN);
;;;1095   }
;;;1096   
;;;1097   /**
;;;1098     * @brief  Disable Error interrupts.
;;;1099     * @note   Macro @ref IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
;;;1100     *         SMBus feature is supported by the I2Cx Instance.
;;;1101     * @note   Any of these errors will generate interrupt :
;;;1102     *         Bus Error detection (BERR)
;;;1103     *         Arbitration Loss (ARLO)
;;;1104     *         Acknowledge Failure(AF)
;;;1105     *         Overrun/Underrun (OVR)
;;;1106     *         SMBus Timeout detection (TIMEOUT)
;;;1107     *         SMBus PEC error detection (PECERR)
;;;1108     *         SMBus Alert pin event detection (SMBALERT)
;;;1109     * @rmtoll CR2          ITERREN       LL_I2C_DisableIT_ERR
;;;1110     * @param  I2Cx I2C Instance.
;;;1111     * @retval None
;;;1112     */
;;;1113   __STATIC_INLINE void LL_I2C_DisableIT_ERR(I2C_TypeDef *I2Cx)
;;;1114   {
;;;1115     CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITERREN);
;;;1116   }
;;;1117   
;;;1118   /**
;;;1119     * @brief  Check if Error interrupts are enabled or disabled.
;;;1120     * @rmtoll CR2          ITERREN       LL_I2C_IsEnabledIT_ERR
;;;1121     * @param  I2Cx I2C Instance.
;;;1122     * @retval State of bit (1 or 0).
;;;1123     */
;;;1124   __STATIC_INLINE uint32_t LL_I2C_IsEnabledIT_ERR(I2C_TypeDef *I2Cx)
;;;1125   {
;;;1126     return (READ_BIT(I2Cx->CR2, I2C_CR2_ITERREN) == (I2C_CR2_ITERREN));
;;;1127   }
;;;1128   
;;;1129   /**
;;;1130     * @}
;;;1131     */
;;;1132   
;;;1133   /** @defgroup I2C_LL_EF_FLAG_management FLAG_management
;;;1134     * @{
;;;1135     */
;;;1136   
;;;1137   /**
;;;1138     * @brief  Indicate the status of Transmit data register empty flag.
;;;1139     * @note   RESET: When next data is written in Transmit data register.
;;;1140     *         SET: When Transmit data register is empty.
;;;1141     * @rmtoll SR1          TXE           LL_I2C_IsActiveFlag_TXE
;;;1142     * @param  I2Cx I2C Instance.
;;;1143     * @retval State of bit (1 or 0).
;;;1144     */
;;;1145   __STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(I2C_TypeDef *I2Cx)
;;;1146   {
;;;1147     return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
;;;1148   }
;;;1149   
;;;1150   /**
;;;1151     * @brief  Indicate the status of Byte Transfer Finished flag.
;;;1152     *         RESET: When Data byte transfer not done.
;;;1153     *         SET: When Data byte transfer succeeded.
;;;1154     * @rmtoll SR1          BTF           LL_I2C_IsActiveFlag_BTF
;;;1155     * @param  I2Cx I2C Instance.
;;;1156     * @retval State of bit (1 or 0).
;;;1157     */
;;;1158   __STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BTF(I2C_TypeDef *I2Cx)
;;;1159   {
;;;1160     return (READ_BIT(I2Cx->SR1, I2C_SR1_BTF) == (I2C_SR1_BTF));
;;;1161   }
;;;1162   
;;;1163   /**
;;;1164     * @brief  Indicate the status of Receive data register not empty flag.
;;;1165     * @note   RESET: When Receive data register is read.
;;;1166     *         SET: When the received data is copied in Receive data register.
;;;1167     * @rmtoll SR1          RXNE          LL_I2C_IsActiveFlag_RXNE
;;;1168     * @param  I2Cx I2C Instance.
;;;1169     * @retval State of bit (1 or 0).
;;;1170     */
;;;1171   __STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
;;;1172   {
;;;1173     return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
;;;1174   }
;;;1175   
;;;1176   /**
;;;1177     * @brief  Indicate the status of Start Bit (master mode).
;;;1178     * @note   RESET: When No Start condition.
;;;1179     *         SET: When Start condition is generated.
;;;1180     * @rmtoll SR1          SB            LL_I2C_IsActiveFlag_SB
;;;1181     * @param  I2Cx I2C Instance.
;;;1182     * @retval State of bit (1 or 0).
;;;1183     */
;;;1184   __STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_SB(I2C_TypeDef *I2Cx)
;;;1185   {
;;;1186     return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
;;;1187   }
;;;1188   
;;;1189   /**
;;;1190     * @brief  Indicate the status of Address sent (master mode) or Address matched flag (slave mode).
;;;1191     * @note   RESET: Clear default value.
;;;1192     *         SET: When the address is fully sent (master mode) or when the received slave address matched with one of the enabled slave address (slave mode).
;;;1193     * @rmtoll SR1          ADDR          LL_I2C_IsActiveFlag_ADDR
;;;1194     * @param  I2Cx I2C Instance.
;;;1195     * @retval State of bit (1 or 0).
;;;1196     */
;;;1197   __STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ADDR(I2C_TypeDef *I2Cx)
;;;1198   {
;;;1199     return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
;;;1200   }
;;;1201   
;;;1202   /**
;;;1203     * @brief  Indicate the status of 10-bit header sent (master mode).
;;;1204     * @note   RESET: When no ADD10 event occured.
;;;1205     *         SET: When the master has sent the first address byte (header).
;;;1206     * @rmtoll SR1          ADD10         LL_I2C_IsActiveFlag_ADD10
;;;1207     * @param  I2Cx I2C Instance.
;;;1208     * @retval State of bit (1 or 0).
;;;1209     */
;;;1210   __STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ADD10(I2C_TypeDef *I2Cx)
;;;1211   {
;;;1212     return (READ_BIT(I2Cx->SR1, I2C_SR1_ADD10) == (I2C_SR1_ADD10));
;;;1213   }
;;;1214   
;;;1215   /**
;;;1216     * @brief  Indicate the status of Acknowledge failure flag.
;;;1217     * @note   RESET: No acknowledge failure.
;;;1218     *         SET: When an acknowledge failure is received after a byte transmission.
;;;1219     * @rmtoll SR1          AF            LL_I2C_IsActiveFlag_AF
;;;1220     * @param  I2Cx I2C Instance.
;;;1221     * @retval State of bit (1 or 0).
;;;1222     */
;;;1223   __STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_AF(I2C_TypeDef *I2Cx)
;;;1224   {
;;;1225     return (READ_BIT(I2Cx->SR1, I2C_SR1_AF) == (I2C_SR1_AF));
;;;1226   }
;;;1227   
;;;1228   /**
;;;1229     * @brief  Indicate the status of Stop detection flag (slave mode).
;;;1230     * @note   RESET: Clear default value.
;;;1231     *         SET: When a Stop condition is detected.
;;;1232     * @rmtoll SR1          STOPF         LL_I2C_IsActiveFlag_STOP
;;;1233     * @param  I2Cx I2C Instance.
;;;1234     * @retval State of bit (1 or 0).
;;;1235     */
;;;1236   __STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(I2C_TypeDef *I2Cx)
;;;1237   {
;;;1238     return (READ_BIT(I2Cx->SR1, I2C_SR1_STOPF) == (I2C_SR1_STOPF));
;;;1239   }
;;;1240   
;;;1241   /**
;;;1242     * @brief  Indicate the status of Bus error flag.
;;;1243     * @note   RESET: Clear default value.
;;;1244     *         SET: When a misplaced Start or Stop condition is detected.
;;;1245     * @rmtoll SR1          BERR          LL_I2C_IsActiveFlag_BERR
;;;1246     * @param  I2Cx I2C Instance.
;;;1247     * @retval State of bit (1 or 0).
;;;1248     */
;;;1249   __STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BERR(I2C_TypeDef *I2Cx)
;;;1250   {
;;;1251     return (READ_BIT(I2Cx->SR1, I2C_SR1_BERR) == (I2C_SR1_BERR));
;;;1252   }
;;;1253   
;;;1254   /**
;;;1255     * @brief  Indicate the status of Arbitration lost flag.
;;;1256     * @note   RESET: Clear default value.
;;;1257     *         SET: When arbitration lost.
;;;1258     * @rmtoll SR1          ARLO          LL_I2C_IsActiveFlag_ARLO
;;;1259     * @param  I2Cx I2C Instance.
;;;1260     * @retval State of bit (1 or 0).
;;;1261     */
;;;1262   __STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ARLO(I2C_TypeDef *I2Cx)
;;;1263   {
;;;1264     return (READ_BIT(I2Cx->SR1, I2C_SR1_ARLO) == (I2C_SR1_ARLO));
;;;1265   }
;;;1266   
;;;1267   /**
;;;1268     * @brief  Indicate the status of Overrun/Underrun flag.
;;;1269     * @note   RESET: Clear default value.
;;;1270     *         SET: When an overrun/underrun error occurs (Clock Stretching Disabled).
;;;1271     * @rmtoll SR1          OVR           LL_I2C_IsActiveFlag_OVR
;;;1272     * @param  I2Cx I2C Instance.
;;;1273     * @retval State of bit (1 or 0).
;;;1274     */
;;;1275   __STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_OVR(I2C_TypeDef *I2Cx)
;;;1276   {
;;;1277     return (READ_BIT(I2Cx->SR1, I2C_SR1_OVR) == (I2C_SR1_OVR));
;;;1278   }
;;;1279   
;;;1280   /**
;;;1281     * @brief  Indicate the status of SMBus PEC error flag in reception.
;;;1282     * @note   Macro @ref IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
;;;1283     *         SMBus feature is supported by the I2Cx Instance.
;;;1284     * @rmtoll SR1          PECERR        LL_I2C_IsActiveSMBusFlag_PECERR
;;;1285     * @param  I2Cx I2C Instance.
;;;1286     * @retval State of bit (1 or 0).
;;;1287     */
;;;1288   __STATIC_INLINE uint32_t LL_I2C_IsActiveSMBusFlag_PECERR(I2C_TypeDef *I2Cx)
;;;1289   {
;;;1290     return (READ_BIT(I2Cx->SR1, I2C_SR1_PECERR) == (I2C_SR1_PECERR));
;;;1291   }
;;;1292   
;;;1293   /**
;;;1294     * @brief  Indicate the status of SMBus Timeout detection flag.
;;;1295     * @note   Macro @ref IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
;;;1296     *         SMBus feature is supported by the I2Cx Instance.
;;;1297     * @rmtoll SR1          TIMEOUT       LL_I2C_IsActiveSMBusFlag_TIMEOUT
;;;1298     * @param  I2Cx I2C Instance.
;;;1299     * @retval State of bit (1 or 0).
;;;1300     */
;;;1301   __STATIC_INLINE uint32_t LL_I2C_IsActiveSMBusFlag_TIMEOUT(I2C_TypeDef *I2Cx)
;;;1302   {
;;;1303     return (READ_BIT(I2Cx->SR1, I2C_SR1_TIMEOUT) == (I2C_SR1_TIMEOUT));
;;;1304   }
;;;1305   
;;;1306   /**
;;;1307     * @brief  Indicate the status of SMBus alert flag.
;;;1308     * @note   Macro @ref IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
;;;1309     *         SMBus feature is supported by the I2Cx Instance.
;;;1310     * @rmtoll SR1          SMBALERT      LL_I2C_IsActiveSMBusFlag_ALERT
;;;1311     * @param  I2Cx I2C Instance.
;;;1312     * @retval State of bit (1 or 0).
;;;1313     */
;;;1314   __STATIC_INLINE uint32_t LL_I2C_IsActiveSMBusFlag_ALERT(I2C_TypeDef *I2Cx)
;;;1315   {
;;;1316     return (READ_BIT(I2Cx->SR1, I2C_SR1_SMBALERT) == (I2C_SR1_SMBALERT));
;;;1317   }
;;;1318   
;;;1319   /**
;;;1320     * @brief  Indicate the status of Bus Busy flag.
;;;1321     * @note   RESET: Clear default value.
;;;1322     *         SET: When a Start condition is detected.
;;;1323     * @rmtoll SR2          BUSY          LL_I2C_IsActiveFlag_BUSY
;;;1324     * @param  I2Cx I2C Instance.
;;;1325     * @retval State of bit (1 or 0).
;;;1326     */
;;;1327   __STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BUSY(I2C_TypeDef *I2Cx)
;;;1328   {
;;;1329     return (READ_BIT(I2Cx->SR2, I2C_SR2_BUSY) == (I2C_SR2_BUSY));
;;;1330   }
;;;1331   
;;;1332   /**
;;;1333     * @brief  Indicate the status of Dual flag.
;;;1334     * @note   RESET: Received address matched with OAR1.
;;;1335     *         SET: Received address matched with OAR2.
;;;1336     * @rmtoll SR2          DUALF         LL_I2C_IsActiveFlag_DUAL
;;;1337     * @param  I2Cx I2C Instance.
;;;1338     * @retval State of bit (1 or 0).
;;;1339     */
;;;1340   __STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_DUAL(I2C_TypeDef *I2Cx)
;;;1341   {
;;;1342     return (READ_BIT(I2Cx->SR2, I2C_SR2_DUALF) == (I2C_SR2_DUALF));
;;;1343   }
;;;1344   
;;;1345   /**
;;;1346     * @brief  Indicate the status of SMBus Host address reception (Slave mode).
;;;1347     * @note   Macro @ref IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
;;;1348     *         SMBus feature is supported by the I2Cx Instance.
;;;1349     * @note   RESET: No SMBus Host address
;;;1350     *         SET: SMBus Host address received.
;;;1351     * @note   This status is cleared by hardware after a STOP condition or repeated START condition.
;;;1352     * @rmtoll SR2          SMBHOST       LL_I2C_IsActiveSMBusFlag_SMBHOST
;;;1353     * @param  I2Cx I2C Instance.
;;;1354     * @retval State of bit (1 or 0).
;;;1355     */
;;;1356   __STATIC_INLINE uint32_t LL_I2C_IsActiveSMBusFlag_SMBHOST(I2C_TypeDef *I2Cx)
;;;1357   {
;;;1358     return (READ_BIT(I2Cx->SR2, I2C_SR2_SMBHOST) == (I2C_SR2_SMBHOST));
;;;1359   }
;;;1360   
;;;1361   /**
;;;1362     * @brief  Indicate the status of SMBus Device default address reception (Slave mode).
;;;1363     * @note   Macro @ref IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
;;;1364     *         SMBus feature is supported by the I2Cx Instance.
;;;1365     * @note   RESET: No SMBus Device default address
;;;1366     *         SET: SMBus Device default address received.
;;;1367     * @note   This status is cleared by hardware after a STOP condition or repeated START condition.
;;;1368     * @rmtoll SR2          SMBDEFAULT    LL_I2C_IsActiveSMBusFlag_SMBDEFAULT
;;;1369     * @param  I2Cx I2C Instance.
;;;1370     * @retval State of bit (1 or 0).
;;;1371     */
;;;1372   __STATIC_INLINE uint32_t LL_I2C_IsActiveSMBusFlag_SMBDEFAULT(I2C_TypeDef *I2Cx)
;;;1373   {
;;;1374     return (READ_BIT(I2Cx->SR2, I2C_SR2_SMBDEFAULT) == (I2C_SR2_SMBDEFAULT));
;;;1375   }
;;;1376   
;;;1377   /**
;;;1378     * @brief  Indicate the status of General call address reception (Slave mode).
;;;1379     * @note   RESET: No Generall call address
;;;1380     *         SET: General call address received.
;;;1381     * @note   This status is cleared by hardware after a STOP condition or repeated START condition.
;;;1382     * @rmtoll SR2          GENCALL       LL_I2C_IsActiveFlag_GENCALL
;;;1383     * @param  I2Cx I2C Instance.
;;;1384     * @retval State of bit (1 or 0).
;;;1385     */
;;;1386   __STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_GENCALL(I2C_TypeDef *I2Cx)
;;;1387   {
;;;1388     return (READ_BIT(I2Cx->SR2, I2C_SR2_GENCALL) == (I2C_SR2_GENCALL));
;;;1389   }
;;;1390   
;;;1391   /**
;;;1392     * @brief  Indicate the status of Master/Slave flag.
;;;1393     * @note   RESET: Slave Mode.
;;;1394     *         SET: Master Mode.
;;;1395     * @rmtoll SR2          MSL           LL_I2C_IsActiveFlag_MSL
;;;1396     * @param  I2Cx I2C Instance.
;;;1397     * @retval State of bit (1 or 0).
;;;1398     */
;;;1399   __STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_MSL(I2C_TypeDef *I2Cx)
;;;1400   {
;;;1401     return (READ_BIT(I2Cx->SR2, I2C_SR2_MSL) == (I2C_SR2_MSL));
;;;1402   }
;;;1403   
;;;1404   /**
;;;1405     * @brief  Clear Address Matched flag.
;;;1406     * @note   Clearing this flag is done by a read access to the I2Cx_SR1
;;;1407     *         register followed by a read access to the I2Cx_SR2 register.
;;;1408     * @rmtoll SR1          ADDR          LL_I2C_ClearFlag_ADDR
;;;1409     * @param  I2Cx I2C Instance.
;;;1410     * @retval None
;;;1411     */
;;;1412   __STATIC_INLINE void LL_I2C_ClearFlag_ADDR(I2C_TypeDef *I2Cx)
;;;1413   {
;;;1414     __IO uint32_t tmpreg;
;;;1415     tmpreg = I2Cx->SR1;
;;;1416     (void) tmpreg;
;;;1417     tmpreg = I2Cx->SR2;
;;;1418     (void) tmpreg;
;;;1419   }
;;;1420   
;;;1421   /**
;;;1422     * @brief  Clear Acknowledge failure flag.
;;;1423     * @rmtoll SR1          AF            LL_I2C_ClearFlag_AF
;;;1424     * @param  I2Cx I2C Instance.
;;;1425     * @retval None
;;;1426     */
;;;1427   __STATIC_INLINE void LL_I2C_ClearFlag_AF(I2C_TypeDef *I2Cx)
;;;1428   {
;;;1429     CLEAR_BIT(I2Cx->SR1, I2C_SR1_AF);
;;;1430   }
;;;1431   
;;;1432   /**
;;;1433     * @brief  Clear Stop detection flag.
;;;1434     * @note   Clearing this flag is done by a read access to the I2Cx_SR1
;;;1435     *         register followed by a write access to I2Cx_CR1 register.
;;;1436     * @rmtoll SR1          STOPF         LL_I2C_ClearFlag_STOP\n
;;;1437     *         CR1          PE            LL_I2C_ClearFlag_STOP
;;;1438     * @param  I2Cx I2C Instance.
;;;1439     * @retval None
;;;1440     */
;;;1441   __STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
;;;1442   {
;;;1443     __IO uint32_t tmpreg;
;;;1444     tmpreg = I2Cx->SR1;
;;;1445     (void) tmpreg;
;;;1446     SET_BIT(I2Cx->CR1, I2C_CR1_PE);
;;;1447   }
;;;1448   
;;;1449   /**
;;;1450     * @brief  Clear Bus error flag.
;;;1451     * @rmtoll SR1          BERR          LL_I2C_ClearFlag_BERR
;;;1452     * @param  I2Cx I2C Instance.
;;;1453     * @retval None
;;;1454     */
;;;1455   __STATIC_INLINE void LL_I2C_ClearFlag_BERR(I2C_TypeDef *I2Cx)
;;;1456   {
;;;1457     CLEAR_BIT(I2Cx->SR1, I2C_SR1_BERR);
;;;1458   }
;;;1459   
;;;1460   /**
;;;1461     * @brief  Clear Arbitration lost flag.
;;;1462     * @rmtoll SR1          ARLO          LL_I2C_ClearFlag_ARLO
;;;1463     * @param  I2Cx I2C Instance.
;;;1464     * @retval None
;;;1465     */
;;;1466   __STATIC_INLINE void LL_I2C_ClearFlag_ARLO(I2C_TypeDef *I2Cx)
;;;1467   {
;;;1468     CLEAR_BIT(I2Cx->SR1, I2C_SR1_ARLO);
;;;1469   }
;;;1470   
;;;1471   /**
;;;1472     * @brief  Clear Overrun/Underrun flag.
;;;1473     * @rmtoll SR1          OVR           LL_I2C_ClearFlag_OVR
;;;1474     * @param  I2Cx I2C Instance.
;;;1475     * @retval None
;;;1476     */
;;;1477   __STATIC_INLINE void LL_I2C_ClearFlag_OVR(I2C_TypeDef *I2Cx)
;;;1478   {
;;;1479     CLEAR_BIT(I2Cx->SR1, I2C_SR1_OVR);
;;;1480   }
;;;1481   
;;;1482   /**
;;;1483     * @brief  Clear SMBus PEC error flag.
;;;1484     * @rmtoll SR1          PECERR        LL_I2C_ClearSMBusFlag_PECERR
;;;1485     * @param  I2Cx I2C Instance.
;;;1486     * @retval None
;;;1487     */
;;;1488   __STATIC_INLINE void LL_I2C_ClearSMBusFlag_PECERR(I2C_TypeDef *I2Cx)
;;;1489   {
;;;1490     CLEAR_BIT(I2Cx->SR1, I2C_SR1_PECERR);
;;;1491   }
;;;1492   
;;;1493   /**
;;;1494     * @brief  Clear SMBus Timeout detection flag.
;;;1495     * @note   Macro @ref IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
;;;1496     *         SMBus feature is supported by the I2Cx Instance.
;;;1497     * @rmtoll SR1          TIMEOUT       LL_I2C_ClearSMBusFlag_TIMEOUT
;;;1498     * @param  I2Cx I2C Instance.
;;;1499     * @retval None
;;;1500     */
;;;1501   __STATIC_INLINE void LL_I2C_ClearSMBusFlag_TIMEOUT(I2C_TypeDef *I2Cx)
;;;1502   {
;;;1503     CLEAR_BIT(I2Cx->SR1, I2C_SR1_TIMEOUT);
;;;1504   }
;;;1505   
;;;1506   /**
;;;1507     * @brief  Clear SMBus Alert flag.
;;;1508     * @note   Macro @ref IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
;;;1509     *         SMBus feature is supported by the I2Cx Instance.
;;;1510     * @rmtoll SR1          SMBALERT      LL_I2C_ClearSMBusFlag_ALERT
;;;1511     * @param  I2Cx I2C Instance.
;;;1512     * @retval None
;;;1513     */
;;;1514   __STATIC_INLINE void LL_I2C_ClearSMBusFlag_ALERT(I2C_TypeDef *I2Cx)
;;;1515   {
;;;1516     CLEAR_BIT(I2Cx->SR1, I2C_SR1_SMBALERT);
;;;1517   }
;;;1518   
;;;1519   /**
;;;1520     * @}
;;;1521     */
;;;1522   
;;;1523   /** @defgroup I2C_LL_EF_Data_Management Data_Management
;;;1524     * @{
;;;1525     */
;;;1526   
;;;1527   /**
;;;1528     * @brief  Enable Reset of I2C peripheral.
;;;1529     * @rmtoll CR1          SWRST         LL_I2C_EnableReset
;;;1530     * @param  I2Cx I2C Instance.
;;;1531     * @retval None
;;;1532     */
;;;1533   __STATIC_INLINE void LL_I2C_EnableReset(I2C_TypeDef *I2Cx)
;;;1534   {
;;;1535     SET_BIT(I2Cx->CR1, I2C_CR1_SWRST);
;;;1536   }
;;;1537   
;;;1538   /**
;;;1539     * @brief  Disable Reset of I2C peripheral.
;;;1540     * @rmtoll CR1          SWRST         LL_I2C_DisableReset
;;;1541     * @param  I2Cx I2C Instance.
;;;1542     * @retval None
;;;1543     */
;;;1544   __STATIC_INLINE void LL_I2C_DisableReset(I2C_TypeDef *I2Cx)
;;;1545   {
;;;1546     CLEAR_BIT(I2Cx->CR1, I2C_CR1_SWRST);
;;;1547   }
;;;1548   
;;;1549   /**
;;;1550     * @brief  Check if the I2C peripheral is under reset state or not.
;;;1551     * @rmtoll CR1          SWRST         LL_I2C_IsResetEnabled
;;;1552     * @param  I2Cx I2C Instance.
;;;1553     * @retval State of bit (1 or 0).
;;;1554     */
;;;1555   __STATIC_INLINE uint32_t LL_I2C_IsResetEnabled(I2C_TypeDef *I2Cx)
;;;1556   {
;;;1557     return (READ_BIT(I2Cx->CR1, I2C_CR1_SWRST) == (I2C_CR1_SWRST));
;;;1558   }
;;;1559   
;;;1560   /**
;;;1561     * @brief  Prepare the generation of a ACKnowledge or Non ACKnowledge condition after the address receive match code or next received byte.
;;;1562     * @note   Usage in Slave or Master mode.
;;;1563     * @rmtoll CR1          ACK           LL_I2C_AcknowledgeNextData
;;;1564     * @param  I2Cx I2C Instance.
;;;1565     * @param  TypeAcknowledge This parameter can be one of the following values:
;;;1566     *         @arg @ref LL_I2C_ACK
;;;1567     *         @arg @ref LL_I2C_NACK
;;;1568     * @retval None
;;;1569     */
;;;1570   __STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
;;;1571   {
;;;1572     MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
;;;1573   }
;;;1574   
;;;1575   /**
;;;1576     * @brief  Generate a START or RESTART condition
;;;1577     * @note   The START bit can be set even if bus is BUSY or I2C is in slave mode.
;;;1578     *         This action has no effect when RELOAD is set.
;;;1579     * @rmtoll CR1          START         LL_I2C_GenerateStartCondition
;;;1580     * @param  I2Cx I2C Instance.
;;;1581     * @retval None
;;;1582     */
;;;1583   __STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
;;;1584   {
;;;1585     SET_BIT(I2Cx->CR1, I2C_CR1_START);
        0x08000740:    6801        .h      LDR      r1,[r0,#0]
        0x08000742:    f4417180    A..q    ORR      r1,r1,#0x100
        0x08000746:    6001        .`      STR      r1,[r0,#0]
;;;1586   }
        0x08000748:    4770        pG      BX       lr
    i.LL_I2C_Init
    LL_I2C_Init
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_i2c.c
;;;147    {
        0x0800074a:    b57f        ..      PUSH     {r0-r6,lr}
        0x0800074c:    4604        .F      MOV      r4,r0
        0x0800074e:    460d        .F      MOV      r5,r1
;;;148      LL_RCC_ClocksTypeDef rcc_clocks;
;;;149    
;;;150      /* Check the I2C Instance I2Cx */
;;;151      assert_param(IS_I2C_ALL_INSTANCE(I2Cx));
;;;152    
;;;153      /* Check the I2C parameters from I2C_InitStruct */
;;;154      assert_param(IS_LL_I2C_PERIPHERAL_MODE(I2C_InitStruct->PeripheralMode));
;;;155      assert_param(IS_LL_I2C_CLOCK_SPEED(I2C_InitStruct->ClockSpeed));
;;;156      assert_param(IS_LL_I2C_DUTY_CYCLE(I2C_InitStruct->DutyCycle));
;;;157      assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
;;;158      assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
;;;159      assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));
;;;160    
;;;161      /* Disable the selected I2Cx Peripheral */
;;;162      LL_I2C_Disable(I2Cx);
        0x08000750:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;378      CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
        0x08000752:    6820         h      LDR      r0,[r4,#0]
        0x08000754:    f0200001     ...    BIC      r0,r0,#1
        0x08000758:    6020         `      STR      r0,[r4,#0]
;;;379    }
        0x0800075a:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_i2c.c
;;;165      LL_RCC_GetSystemClocksFreq(&rcc_clocks);
        0x0800075c:    4668        hF      MOV      r0,sp
        0x0800075e:    f000f8bd    ....    BL       LL_RCC_GetSystemClocksFreq ; 0x80008dc
;;;166    
;;;167      /*---------------------------- I2Cx SCL Clock Speed Configuration ------------
;;;168       * Configure the SCL speed :
;;;169       * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
;;;170       *           and I2C_CCR_CCR[11:0] bits
;;;171       * - DutyCycle: I2C_CCR_DUTY[7:0] bits
;;;172       */
;;;173      LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
        0x08000762:    e9d52301    ...#    LDRD     r2,r3,[r5,#4]
        0x08000766:    4620         F      MOV      r0,r4
        0x08000768:    9902        ..      LDR      r1,[sp,#8]
        0x0800076a:    f7ffff8b    ....    BL       LL_I2C_ConfigSpeed ; 0x8000684
;;;174    
;;;175      /*---------------------------- I2Cx OAR1 Configuration -----------------------
;;;176       * Disable, Configure and Enable I2Cx device own address 1 with parameters :
;;;177       * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
;;;178       * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
;;;179       */
;;;180      LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
        0x0800076e:    6969        ii      LDR      r1,[r5,#0x14]
        0x08000770:    68e8        .h      LDR      r0,[r5,#0xc]
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;555      MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
        0x08000772:    68a2        .h      LDR      r2,[r4,#8]
        0x08000774:    f24833ff    H..3    MOV      r3,#0x83ff
        0x08000778:    439a        .C      BICS     r2,r2,r3
        0x0800077a:    ea400301    @...    ORR      r3,r0,r1
        0x0800077e:    431a        .C      ORRS     r2,r2,r3
        0x08000780:    60a2        .`      STR      r2,[r4,#8]
;;;556    }
        0x08000782:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_i2c.c
;;;186      LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
        0x08000784:    6828        (h      LDR      r0,[r5,#0]
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;796      MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
        0x08000786:    6821        !h      LDR      r1,[r4,#0]
        0x08000788:    f021011a    !...    BIC      r1,r1,#0x1a
        0x0800078c:    4301        .C      ORRS     r1,r1,r0
        0x0800078e:    6021        !`      STR      r1,[r4,#0]
;;;797    }
        0x08000790:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_i2c.c
;;;189      LL_I2C_Enable(I2Cx);
        0x08000792:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;367      SET_BIT(I2Cx->CR1, I2C_CR1_PE);
        0x08000794:    6820         h      LDR      r0,[r4,#0]
        0x08000796:    f0400001    @...    ORR      r0,r0,#1
        0x0800079a:    6020         `      STR      r0,[r4,#0]
;;;368    }
        0x0800079c:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_i2c.c
;;;196      LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
        0x0800079e:    6928        (i      LDR      r0,[r5,#0x10]
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;1572     MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
        0x080007a0:    6821        !h      LDR      r1,[r4,#0]
        0x080007a2:    f4216180    !..a    BIC      r1,r1,#0x400
        0x080007a6:    4301        .C      ORRS     r1,r1,r0
        0x080007a8:    6021        !`      STR      r1,[r4,#0]
;;;1573   }
        0x080007aa:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_i2c.c
;;;198      return SUCCESS;
        0x080007ac:    2001        .       MOVS     r0,#1
;;;199    }
        0x080007ae:    b004        ..      ADD      sp,sp,#0x10
        0x080007b0:    bd70        p.      POP      {r4-r6,pc}
        0x080007b2:    0000        ..      MOVS     r0,r0
    i.LL_Init
    LL_Init
;;; .\../Src/main.c
;;;495    {
        0x080007b4:    b570        p.      PUSH     {r4-r6,lr}
;;;496      
;;;497    
;;;498      LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
        0x080007b6:    2001        .       MOVS     r0,#1
        0x080007b8:    f7fffe58    ..X.    BL       LL_APB2_GRP1_EnableClock ; 0x800046c
;;;499      LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
        0x080007bc:    f04f5080    O..P    MOV      r0,#0x10000000
        0x080007c0:    f7fffe46    ..F.    BL       LL_APB1_GRP1_EnableClock ; 0x8000450
;;;500    
;;;501      NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
        0x080007c4:    2003        .       MOVS     r0,#3
;;; ../Drivers/CMSIS/Include/core_cm3.h
;;;1425     uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
        0x080007c6:    4602        .F      MOV      r2,r0
;;;1426   
;;;1427     reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
        0x080007c8:    4b3a        :K      LDR      r3,[pc,#232] ; [0x80008b4] = 0xe000ed0c
        0x080007ca:    6819        .h      LDR      r1,[r3,#0]
;;;1428     reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
        0x080007cc:    f64f03ff    O...    MOV      r3,#0xf8ff
        0x080007d0:    4019        .@      ANDS     r1,r1,r3
;;;1429     reg_value  =  (reg_value                                   |
        0x080007d2:    4b39        9K      LDR      r3,[pc,#228] ; [0x80008b8] = 0x5fa0000
        0x080007d4:    430b        .C      ORRS     r3,r3,r1
        0x080007d6:    ea432102    C..!    ORR      r1,r3,r2,LSL #8
;;;1430                   ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
;;;1431                   (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
;;;1432     SCB->AIRCR =  reg_value;
        0x080007da:    4b36        6K      LDR      r3,[pc,#216] ; [0x80008b4] = 0xe000ed0c
        0x080007dc:    6019        .`      STR      r1,[r3,#0]
;;;1433   }
        0x080007de:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;505      NVIC_SetPriority(MemoryManagement_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
        0x080007e0:    f000fdda    ....    BL       NVIC_GetPriorityGrouping ; 0x8001398
        0x080007e4:    4605        .F      MOV      r5,r0
        0x080007e6:    2200        ."      MOVS     r2,#0
        0x080007e8:    4611        .F      MOV      r1,r2
        0x080007ea:    f000fdb4    ....    BL       NVIC_EncodePriority ; 0x8001356
        0x080007ee:    4604        .F      MOV      r4,r0
        0x080007f0:    4621        !F      MOV      r1,r4
        0x080007f2:    f06f000b    o...    MVN      r0,#0xb
        0x080007f6:    f000fdd7    ....    BL       NVIC_SetPriority ; 0x80013a8
;;;506      /* BusFault_IRQn interrupt configuration */
;;;507      NVIC_SetPriority(BusFault_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
        0x080007fa:    f000fdcd    ....    BL       NVIC_GetPriorityGrouping ; 0x8001398
        0x080007fe:    4605        .F      MOV      r5,r0
        0x08000800:    2200        ."      MOVS     r2,#0
        0x08000802:    4611        .F      MOV      r1,r2
        0x08000804:    f000fda7    ....    BL       NVIC_EncodePriority ; 0x8001356
        0x08000808:    4604        .F      MOV      r4,r0
        0x0800080a:    4621        !F      MOV      r1,r4
        0x0800080c:    f06f000a    o...    MVN      r0,#0xa
        0x08000810:    f000fdca    ....    BL       NVIC_SetPriority ; 0x80013a8
;;;508      /* UsageFault_IRQn interrupt configuration */
;;;509      NVIC_SetPriority(UsageFault_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
        0x08000814:    f000fdc0    ....    BL       NVIC_GetPriorityGrouping ; 0x8001398
        0x08000818:    4605        .F      MOV      r5,r0
        0x0800081a:    2200        ."      MOVS     r2,#0
        0x0800081c:    4611        .F      MOV      r1,r2
        0x0800081e:    f000fd9a    ....    BL       NVIC_EncodePriority ; 0x8001356
        0x08000822:    4604        .F      MOV      r4,r0
        0x08000824:    4621        !F      MOV      r1,r4
        0x08000826:    f06f0009    o...    MVN      r0,#9
        0x0800082a:    f000fdbd    ....    BL       NVIC_SetPriority ; 0x80013a8
;;;510      /* SVCall_IRQn interrupt configuration */
;;;511      NVIC_SetPriority(SVCall_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
        0x0800082e:    f000fdb3    ....    BL       NVIC_GetPriorityGrouping ; 0x8001398
        0x08000832:    4605        .F      MOV      r5,r0
        0x08000834:    2200        ."      MOVS     r2,#0
        0x08000836:    4611        .F      MOV      r1,r2
        0x08000838:    f000fd8d    ....    BL       NVIC_EncodePriority ; 0x8001356
        0x0800083c:    4604        .F      MOV      r4,r0
        0x0800083e:    4621        !F      MOV      r1,r4
        0x08000840:    f06f0004    o...    MVN      r0,#4
        0x08000844:    f000fdb0    ....    BL       NVIC_SetPriority ; 0x80013a8
;;;512      /* DebugMonitor_IRQn interrupt configuration */
;;;513      NVIC_SetPriority(DebugMonitor_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
        0x08000848:    f000fda6    ....    BL       NVIC_GetPriorityGrouping ; 0x8001398
        0x0800084c:    4605        .F      MOV      r5,r0
        0x0800084e:    2200        ."      MOVS     r2,#0
        0x08000850:    4611        .F      MOV      r1,r2
        0x08000852:    f000fd80    ....    BL       NVIC_EncodePriority ; 0x8001356
        0x08000856:    4604        .F      MOV      r4,r0
        0x08000858:    4621        !F      MOV      r1,r4
        0x0800085a:    f06f0003    o...    MVN      r0,#3
        0x0800085e:    f000fda3    ....    BL       NVIC_SetPriority ; 0x80013a8
;;;514      /* PendSV_IRQn interrupt configuration */
;;;515      NVIC_SetPriority(PendSV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
        0x08000862:    f000fd99    ....    BL       NVIC_GetPriorityGrouping ; 0x8001398
        0x08000866:    4605        .F      MOV      r5,r0
        0x08000868:    2200        ."      MOVS     r2,#0
        0x0800086a:    4611        .F      MOV      r1,r2
        0x0800086c:    f000fd73    ..s.    BL       NVIC_EncodePriority ; 0x8001356
        0x08000870:    4604        .F      MOV      r4,r0
        0x08000872:    4621        !F      MOV      r1,r4
        0x08000874:    f06f0001    o...    MVN      r0,#1
        0x08000878:    f000fd96    ....    BL       NVIC_SetPriority ; 0x80013a8
;;;516      /* SysTick_IRQn interrupt configuration */
;;;517      NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
        0x0800087c:    f000fd8c    ....    BL       NVIC_GetPriorityGrouping ; 0x8001398
        0x08000880:    4605        .F      MOV      r5,r0
        0x08000882:    2200        ."      MOVS     r2,#0
        0x08000884:    4611        .F      MOV      r1,r2
        0x08000886:    f000fd66    ..f.    BL       NVIC_EncodePriority ; 0x8001356
        0x0800088a:    4604        .F      MOV      r4,r0
        0x0800088c:    4621        !F      MOV      r1,r4
        0x0800088e:    f04f30ff    O..0    MOV      r0,#0xffffffff
        0x08000892:    f000fd89    ....    BL       NVIC_SetPriority ; 0x80013a8
;;;518    
;;;519        /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
;;;520        */
;;;521      LL_GPIO_AF_Remap_SWJ_NOJTAG();
        0x08000896:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h
;;;1597     CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
        0x08000898:    4808        .H      LDR      r0,[pc,#32] ; [0x80008bc] = 0x40010000
        0x0800089a:    6840        @h      LDR      r0,[r0,#4]
        0x0800089c:    f02060e0     ..`    BIC      r0,r0,#0x7000000
        0x080008a0:    4906        .I      LDR      r1,[pc,#24] ; [0x80008bc] = 0x40010000
        0x080008a2:    6048        H`      STR      r0,[r1,#4]
;;;1598     SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
        0x080008a4:    4608        .F      MOV      r0,r1
        0x080008a6:    6840        @h      LDR      r0,[r0,#4]
        0x080008a8:    f0407000    @..p    ORR      r0,r0,#0x2000000
        0x080008ac:    6048        H`      STR      r0,[r1,#4]
;;;1599   }
        0x080008ae:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;523    }
        0x080008b0:    bd70        p.      POP      {r4-r6,pc}
    $d
        0x080008b2:    0000        ..      DCW    0
        0x080008b4:    e000ed0c    ....    DCD    3758157068
        0x080008b8:    05fa0000    ....    DCD    100270080
        0x080008bc:    40010000    ...@    DCD    1073807360
    $t
    i.LL_Init1msTick
    LL_Init1msTick
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_utils.c
;;;187      LL_InitTick(HCLKFrequency, 1000U);
        0x080008c0:    f44f717a    O.zq    MOV      r1,#0x3e8
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_utils.h
;;;237      SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
        0x080008c4:    fbb0f2f1    ....    UDIV     r2,r0,r1
        0x080008c8:    1e52        R.      SUBS     r2,r2,#1
        0x080008ca:    f04f23e0    O..#    MOV      r3,#0xe000e000
        0x080008ce:    615a        Za      STR      r2,[r3,#0x14]
;;;238      SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
        0x080008d0:    2200        ."      MOVS     r2,#0
        0x080008d2:    619a        .a      STR      r2,[r3,#0x18]
;;;239      SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
        0x080008d4:    2205        ."      MOVS     r2,#5
        0x080008d6:    611a        .a      STR      r2,[r3,#0x10]
;;;240                       SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
;;;241    }
        0x080008d8:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_utils.c
;;;188    }
        0x080008da:    4770        pG      BX       lr
    i.LL_RCC_GetSystemClocksFreq
    LL_RCC_GetSystemClocksFreq
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_rcc.c
;;;206    {
        0x080008dc:    b510        ..      PUSH     {r4,lr}
        0x080008de:    4604        .F      MOV      r4,r0
;;;207      /* Get SYSCLK frequency */
;;;208      RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
        0x080008e0:    f000fe9c    ....    BL       RCC_GetSystemClockFreq ; 0x800161c
        0x080008e4:    6020         `      STR      r0,[r4,#0]
;;;209    
;;;210      /* HCLK clock frequency */
;;;211      RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
        0x080008e6:    6820         h      LDR      r0,[r4,#0]
        0x080008e8:    f000fe64    ..d.    BL       RCC_GetHCLKClockFreq ; 0x80015b4
        0x080008ec:    6060        ``      STR      r0,[r4,#4]
;;;212    
;;;213      /* PCLK1 clock frequency */
;;;214      RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
        0x080008ee:    6860        `h      LDR      r0,[r4,#4]
        0x080008f0:    f000fe70    ..p.    BL       RCC_GetPCLK1ClockFreq ; 0x80015d4
        0x080008f4:    60a0        .`      STR      r0,[r4,#8]
;;;215    
;;;216      /* PCLK2 clock frequency */
;;;217      RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
        0x080008f6:    6860        `h      LDR      r0,[r4,#4]
        0x080008f8:    f000fe7e    ..~.    BL       RCC_GetPCLK2ClockFreq ; 0x80015f8
        0x080008fc:    60e0        .`      STR      r0,[r4,#0xc]
;;;218    }
        0x080008fe:    bd10        ..      POP      {r4,pc}
    i.LL_SetSystemCoreClock
    LL_SetSystemCoreClock
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_utils.c
;;;261      SystemCoreClock = HCLKFrequency;
        0x08000900:    4901        .I      LDR      r1,[pc,#4] ; [0x8000908] = 0x20000000
        0x08000902:    6008        .`      STR      r0,[r1,#0]
;;;262    }
        0x08000904:    4770        pG      BX       lr
    $d
        0x08000906:    0000        ..      DCW    0
        0x08000908:    20000000    ...     DCD    536870912
    $t
    i.LL_TIM_BDTR_Init
    LL_TIM_BDTR_Init
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_tim.c
;;;715    {
        0x0800090c:    b510        ..      PUSH     {r4,lr}
        0x0800090e:    4603        .F      MOV      r3,r0
        0x08000910:    460a        .F      MOV      r2,r1
;;;716      uint32_t tmpbdtr = 0;
        0x08000912:    2100        .!      MOVS     r1,#0
;;;717    
;;;718      /* Check the parameters */
;;;719      assert_param(IS_TIM_BREAK_INSTANCE(TIMx));
;;;720      assert_param(IS_LL_TIM_OSSR_STATE(TIM_BDTRInitStruct->OSSRState));
;;;721      assert_param(IS_LL_TIM_OSSI_STATE(TIM_BDTRInitStruct->OSSIState));
;;;722      assert_param(IS_LL_TIM_LOCK_LEVEL(TIM_BDTRInitStruct->LockLevel));
;;;723      assert_param(IS_LL_TIM_BREAK_STATE(TIM_BDTRInitStruct->BreakState));
;;;724      assert_param(IS_LL_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->BreakPolarity));
;;;725      assert_param(IS_LL_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->AutomaticOutput));
;;;726    
;;;727      /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
;;;728      the OSSI State, the dead time value and the Automatic Output Enable Bit */
;;;729    
;;;730      /* Set the BDTR bits */
;;;731      MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
        0x08000914:    7b14        .{      LDRB     r4,[r2,#0xc]
        0x08000916:    4621        !F      MOV      r1,r4
;;;732      MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
        0x08000918:    6890        .h      LDR      r0,[r2,#8]
        0x0800091a:    4301        .C      ORRS     r1,r1,r0
;;;733      MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
        0x0800091c:    f4216080    !..`    BIC      r0,r1,#0x400
        0x08000920:    6854        Th      LDR      r4,[r2,#4]
        0x08000922:    ea400104    @...    ORR      r1,r0,r4
;;;734      MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
        0x08000926:    f4216000    !..`    BIC      r0,r1,#0x800
        0x0800092a:    6814        .h      LDR      r4,[r2,#0]
        0x0800092c:    ea400104    @...    ORR      r1,r0,r4
;;;735      MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
        0x08000930:    f4215080    !..P    BIC      r0,r1,#0x1000
        0x08000934:    89d4        ..      LDRH     r4,[r2,#0xe]
        0x08000936:    ea400104    @...    ORR      r1,r0,r4
;;;736      MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
        0x0800093a:    f4215000    !..P    BIC      r0,r1,#0x2000
        0x0800093e:    6914        .i      LDR      r4,[r2,#0x10]
        0x08000940:    ea400104    @...    ORR      r1,r0,r4
;;;737      MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
        0x08000944:    f4214080    !..@    BIC      r0,r1,#0x4000
        0x08000948:    6954        Ti      LDR      r4,[r2,#0x14]
        0x0800094a:    ea400104    @...    ORR      r1,r0,r4
;;;738      MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
        0x0800094e:    f4214000    !..@    BIC      r0,r1,#0x8000
        0x08000952:    6954        Ti      LDR      r4,[r2,#0x14]
        0x08000954:    ea400104    @...    ORR      r1,r0,r4
;;;739    
;;;740      /* Set TIMx_BDTR */
;;;741      LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
        0x08000958:    6459        Yd      STR      r1,[r3,#0x44]
;;;742    
;;;743      return SUCCESS;
        0x0800095a:    2001        .       MOVS     r0,#1
;;;744    }
        0x0800095c:    bd10        ..      POP      {r4,pc}
    i.LL_TIM_CC_EnableChannel
    LL_TIM_CC_EnableChannel
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;1490     SET_BIT(TIMx->CCER, Channels);
        0x0800095e:    6a02        .j      LDR      r2,[r0,#0x20]
        0x08000960:    430a        .C      ORRS     r2,r2,r1
        0x08000962:    6202        .b      STR      r2,[r0,#0x20]
;;;1491   }
        0x08000964:    4770        pG      BX       lr
    i.LL_TIM_DisableARRPreload
    LL_TIM_DisableARRPreload
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h (1206)
        0x08000966:    6801        .h      LDR      r1,[r0,#0]
        0x08000968:    f0210180    !...    BIC      r1,r1,#0x80
        0x0800096c:    6001        .`      STR      r1,[r0,#0]
;;;1207   }
        0x0800096e:    4770        pG      BX       lr
    i.LL_TIM_DisableMasterSlaveMode
    LL_TIM_DisableMasterSlaveMode
;;;1208   
;;;1209   /**
;;;1210     * @brief  Indicates whether auto-reload (ARR) preload is enabled.
;;;1211     * @rmtoll CR1          ARPE          LL_TIM_IsEnabledARRPreload
;;;1212     * @param  TIMx Timer instance
;;;1213     * @retval State of bit (1 or 0).
;;;1214     */
;;;1215   __STATIC_INLINE uint32_t LL_TIM_IsEnabledARRPreload(TIM_TypeDef *TIMx)
;;;1216   {
;;;1217     return (READ_BIT(TIMx->CR1, TIM_CR1_ARPE) == (TIM_CR1_ARPE));
;;;1218   }
;;;1219   
;;;1220   /**
;;;1221     * @brief  Set the division ratio between the timer clock  and the sampling clock used by the dead-time generators (when supported) and the digital filters.
;;;1222     * @note Macro @ref IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx) can be used to check
;;;1223     *       whether or not the clock division feature is supported by the timer
;;;1224     *       instance.
;;;1225     * @rmtoll CR1          CKD           LL_TIM_SetClockDivision
;;;1226     * @param  TIMx Timer instance
;;;1227     * @param  ClockDivision This parameter can be one of the following values:
;;;1228     *         @arg @ref LL_TIM_CLOCKDIVISION_DIV1
;;;1229     *         @arg @ref LL_TIM_CLOCKDIVISION_DIV2
;;;1230     *         @arg @ref LL_TIM_CLOCKDIVISION_DIV4
;;;1231     * @retval None
;;;1232     */
;;;1233   __STATIC_INLINE void LL_TIM_SetClockDivision(TIM_TypeDef *TIMx, uint32_t ClockDivision)
;;;1234   {
;;;1235     MODIFY_REG(TIMx->CR1, TIM_CR1_CKD, ClockDivision);
;;;1236   }
;;;1237   
;;;1238   /**
;;;1239     * @brief  Get the actual division ratio between the timer clock  and the sampling clock used by the dead-time generators (when supported) and the digital filters.
;;;1240     * @note Macro @ref IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx) can be used to check
;;;1241     *       whether or not the clock division feature is supported by the timer
;;;1242     *       instance.
;;;1243     * @rmtoll CR1          CKD           LL_TIM_GetClockDivision
;;;1244     * @param  TIMx Timer instance
;;;1245     * @retval Returned value can be one of the following values:
;;;1246     *         @arg @ref LL_TIM_CLOCKDIVISION_DIV1
;;;1247     *         @arg @ref LL_TIM_CLOCKDIVISION_DIV2
;;;1248     *         @arg @ref LL_TIM_CLOCKDIVISION_DIV4
;;;1249     */
;;;1250   __STATIC_INLINE uint32_t LL_TIM_GetClockDivision(TIM_TypeDef *TIMx)
;;;1251   {
;;;1252     return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_CKD));
;;;1253   }
;;;1254   
;;;1255   /**
;;;1256     * @brief  Set the counter value.
;;;1257     * @rmtoll CNT          CNT           LL_TIM_SetCounter
;;;1258     * @param  TIMx Timer instance
;;;1259     * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF)
;;;1260     * @retval None
;;;1261     */
;;;1262   __STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
;;;1263   {
;;;1264     WRITE_REG(TIMx->CNT, Counter);
;;;1265   }
;;;1266   
;;;1267   /**
;;;1268     * @brief  Get the counter value.
;;;1269     * @rmtoll CNT          CNT           LL_TIM_GetCounter
;;;1270     * @param  TIMx Timer instance
;;;1271     * @retval Counter value (between Min_Data=0 and Max_Data=0xFFFF)
;;;1272     */
;;;1273   __STATIC_INLINE uint32_t LL_TIM_GetCounter(TIM_TypeDef *TIMx)
;;;1274   {
;;;1275     return (uint32_t)(READ_REG(TIMx->CNT));
;;;1276   }
;;;1277   
;;;1278   /**
;;;1279     * @brief  Get the current direction of the counter
;;;1280     * @rmtoll CR1          DIR           LL_TIM_GetDirection
;;;1281     * @param  TIMx Timer instance
;;;1282     * @retval Returned value can be one of the following values:
;;;1283     *         @arg @ref LL_TIM_COUNTERDIRECTION_UP
;;;1284     *         @arg @ref LL_TIM_COUNTERDIRECTION_DOWN
;;;1285     */
;;;1286   __STATIC_INLINE uint32_t LL_TIM_GetDirection(TIM_TypeDef *TIMx)
;;;1287   {
;;;1288     return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
;;;1289   }
;;;1290   
;;;1291   /**
;;;1292     * @brief  Set the prescaler value.
;;;1293     * @note The counter clock frequency CK_CNT is equal to fCK_PSC / (PSC[15:0] + 1).
;;;1294     * @note The prescaler can be changed on the fly as this control register is buffered. The new
;;;1295     *       prescaler ratio is taken into account at the next update event.
;;;1296     * @note Helper macro @ref __LL_TIM_CALC_PSC can be used to calculate the Prescaler parameter
;;;1297     * @rmtoll PSC          PSC           LL_TIM_SetPrescaler
;;;1298     * @param  TIMx Timer instance
;;;1299     * @param  Prescaler between Min_Data=0 and Max_Data=65535
;;;1300     * @retval None
;;;1301     */
;;;1302   __STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
;;;1303   {
;;;1304     WRITE_REG(TIMx->PSC, Prescaler);
;;;1305   }
;;;1306   
;;;1307   /**
;;;1308     * @brief  Get the prescaler value.
;;;1309     * @rmtoll PSC          PSC           LL_TIM_GetPrescaler
;;;1310     * @param  TIMx Timer instance
;;;1311     * @retval  Prescaler value between Min_Data=0 and Max_Data=65535
;;;1312     */
;;;1313   __STATIC_INLINE uint32_t LL_TIM_GetPrescaler(TIM_TypeDef *TIMx)
;;;1314   {
;;;1315     return (uint32_t)(READ_REG(TIMx->PSC));
;;;1316   }
;;;1317   
;;;1318   /**
;;;1319     * @brief  Set the auto-reload value.
;;;1320     * @note The counter is blocked while the auto-reload value is null.
;;;1321     * @note Helper macro @ref __LL_TIM_CALC_ARR can be used to calculate the AutoReload parameter
;;;1322     * @rmtoll ARR          ARR           LL_TIM_SetAutoReload
;;;1323     * @param  TIMx Timer instance
;;;1324     * @param  AutoReload between Min_Data=0 and Max_Data=65535
;;;1325     * @retval None
;;;1326     */
;;;1327   __STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
;;;1328   {
;;;1329     WRITE_REG(TIMx->ARR, AutoReload);
;;;1330   }
;;;1331   
;;;1332   /**
;;;1333     * @brief  Get the auto-reload value.
;;;1334     * @rmtoll ARR          ARR           LL_TIM_GetAutoReload
;;;1335     * @param  TIMx Timer instance
;;;1336     * @retval Auto-reload value
;;;1337     */
;;;1338   __STATIC_INLINE uint32_t LL_TIM_GetAutoReload(TIM_TypeDef *TIMx)
;;;1339   {
;;;1340     return (uint32_t)(READ_REG(TIMx->ARR));
;;;1341   }
;;;1342   
;;;1343   /**
;;;1344     * @brief  Set the repetition counter value.
;;;1345     * @note Macro @ref IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx) can be used to check
;;;1346     *       whether or not a timer instance supports a repetition counter.
;;;1347     * @rmtoll RCR          REP           LL_TIM_SetRepetitionCounter
;;;1348     * @param  TIMx Timer instance
;;;1349     * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
;;;1350     * @retval None
;;;1351     */
;;;1352   __STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
;;;1353   {
;;;1354     WRITE_REG(TIMx->RCR, RepetitionCounter);
;;;1355   }
;;;1356   
;;;1357   /**
;;;1358     * @brief  Get the repetition counter value.
;;;1359     * @note Macro @ref IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx) can be used to check
;;;1360     *       whether or not a timer instance supports a repetition counter.
;;;1361     * @rmtoll RCR          REP           LL_TIM_GetRepetitionCounter
;;;1362     * @param  TIMx Timer instance
;;;1363     * @retval Repetition counter value
;;;1364     */
;;;1365   __STATIC_INLINE uint32_t LL_TIM_GetRepetitionCounter(TIM_TypeDef *TIMx)
;;;1366   {
;;;1367     return (uint32_t)(READ_REG(TIMx->RCR));
;;;1368   }
;;;1369   
;;;1370   /**
;;;1371     * @}
;;;1372     */
;;;1373   
;;;1374   /** @defgroup TIM_LL_EF_Capture_Compare Capture Compare configuration
;;;1375     * @{
;;;1376     */
;;;1377   /**
;;;1378     * @brief  Enable  the capture/compare control bits (CCxE, CCxNE and OCxM) preload.
;;;1379     * @note CCxE, CCxNE and OCxM bits are preloaded, after having been written,
;;;1380     *       they are updated only when a commutation event (COM) occurs.
;;;1381     * @note Only on channels that have a complementary output.
;;;1382     * @note Macro @ref IS_TIM_COMMUTATION_EVENT_INSTANCE(TIMx) can be used to check
;;;1383     *       whether or not a timer instance is able to generate a commutation event.
;;;1384     * @rmtoll CR2          CCPC          LL_TIM_CC_EnablePreload
;;;1385     * @param  TIMx Timer instance
;;;1386     * @retval None
;;;1387     */
;;;1388   __STATIC_INLINE void LL_TIM_CC_EnablePreload(TIM_TypeDef *TIMx)
;;;1389   {
;;;1390     SET_BIT(TIMx->CR2, TIM_CR2_CCPC);
;;;1391   }
;;;1392   
;;;1393   /**
;;;1394     * @brief  Disable  the capture/compare control bits (CCxE, CCxNE and OCxM) preload.
;;;1395     * @note Macro @ref IS_TIM_COMMUTATION_EVENT_INSTANCE(TIMx) can be used to check
;;;1396     *       whether or not a timer instance is able to generate a commutation event.
;;;1397     * @rmtoll CR2          CCPC          LL_TIM_CC_DisablePreload
;;;1398     * @param  TIMx Timer instance
;;;1399     * @retval None
;;;1400     */
;;;1401   __STATIC_INLINE void LL_TIM_CC_DisablePreload(TIM_TypeDef *TIMx)
;;;1402   {
;;;1403     CLEAR_BIT(TIMx->CR2, TIM_CR2_CCPC);
;;;1404   }
;;;1405   
;;;1406   /**
;;;1407     * @brief  Set the updated source of the capture/compare control bits (CCxE, CCxNE and OCxM).
;;;1408     * @note Macro @ref IS_TIM_COMMUTATION_EVENT_INSTANCE(TIMx) can be used to check
;;;1409     *       whether or not a timer instance is able to generate a commutation event.
;;;1410     * @rmtoll CR2          CCUS          LL_TIM_CC_SetUpdate
;;;1411     * @param  TIMx Timer instance
;;;1412     * @param  CCUpdateSource This parameter can be one of the following values:
;;;1413     *         @arg @ref LL_TIM_CCUPDATESOURCE_COMG_ONLY
;;;1414     *         @arg @ref LL_TIM_CCUPDATESOURCE_COMG_AND_TRGI
;;;1415     * @retval None
;;;1416     */
;;;1417   __STATIC_INLINE void LL_TIM_CC_SetUpdate(TIM_TypeDef *TIMx, uint32_t CCUpdateSource)
;;;1418   {
;;;1419     MODIFY_REG(TIMx->CR2, TIM_CR2_CCUS, CCUpdateSource);
;;;1420   }
;;;1421   
;;;1422   /**
;;;1423     * @brief  Set the trigger of the capture/compare DMA request.
;;;1424     * @rmtoll CR2          CCDS          LL_TIM_CC_SetDMAReqTrigger
;;;1425     * @param  TIMx Timer instance
;;;1426     * @param  DMAReqTrigger This parameter can be one of the following values:
;;;1427     *         @arg @ref LL_TIM_CCDMAREQUEST_CC
;;;1428     *         @arg @ref LL_TIM_CCDMAREQUEST_UPDATE
;;;1429     * @retval None
;;;1430     */
;;;1431   __STATIC_INLINE void LL_TIM_CC_SetDMAReqTrigger(TIM_TypeDef *TIMx, uint32_t DMAReqTrigger)
;;;1432   {
;;;1433     MODIFY_REG(TIMx->CR2, TIM_CR2_CCDS, DMAReqTrigger);
;;;1434   }
;;;1435   
;;;1436   /**
;;;1437     * @brief  Get actual trigger of the capture/compare DMA request.
;;;1438     * @rmtoll CR2          CCDS          LL_TIM_CC_GetDMAReqTrigger
;;;1439     * @param  TIMx Timer instance
;;;1440     * @retval Returned value can be one of the following values:
;;;1441     *         @arg @ref LL_TIM_CCDMAREQUEST_CC
;;;1442     *         @arg @ref LL_TIM_CCDMAREQUEST_UPDATE
;;;1443     */
;;;1444   __STATIC_INLINE uint32_t LL_TIM_CC_GetDMAReqTrigger(TIM_TypeDef *TIMx)
;;;1445   {
;;;1446     return (uint32_t)(READ_BIT(TIMx->CR2, TIM_CR2_CCDS));
;;;1447   }
;;;1448   
;;;1449   /**
;;;1450     * @brief  Set the lock level to freeze the
;;;1451     *         configuration of several capture/compare parameters.
;;;1452     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;1453     *       the lock mechanism is supported by a timer instance.
;;;1454     * @rmtoll BDTR         LOCK          LL_TIM_CC_SetLockLevel
;;;1455     * @param  TIMx Timer instance
;;;1456     * @param  LockLevel This parameter can be one of the following values:
;;;1457     *         @arg @ref LL_TIM_LOCKLEVEL_OFF
;;;1458     *         @arg @ref LL_TIM_LOCKLEVEL_1
;;;1459     *         @arg @ref LL_TIM_LOCKLEVEL_2
;;;1460     *         @arg @ref LL_TIM_LOCKLEVEL_3
;;;1461     * @retval None
;;;1462     */
;;;1463   __STATIC_INLINE void LL_TIM_CC_SetLockLevel(TIM_TypeDef *TIMx, uint32_t LockLevel)
;;;1464   {
;;;1465     MODIFY_REG(TIMx->BDTR, TIM_BDTR_LOCK, LockLevel);
;;;1466   }
;;;1467   
;;;1468   /**
;;;1469     * @brief  Enable capture/compare channels.
;;;1470     * @rmtoll CCER         CC1E          LL_TIM_CC_EnableChannel\n
;;;1471     *         CCER         CC1NE         LL_TIM_CC_EnableChannel\n
;;;1472     *         CCER         CC2E          LL_TIM_CC_EnableChannel\n
;;;1473     *         CCER         CC2NE         LL_TIM_CC_EnableChannel\n
;;;1474     *         CCER         CC3E          LL_TIM_CC_EnableChannel\n
;;;1475     *         CCER         CC3NE         LL_TIM_CC_EnableChannel\n
;;;1476     *         CCER         CC4E          LL_TIM_CC_EnableChannel
;;;1477     * @param  TIMx Timer instance
;;;1478     * @param  Channels This parameter can be a combination of the following values:
;;;1479     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1480     *         @arg @ref LL_TIM_CHANNEL_CH1N
;;;1481     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1482     *         @arg @ref LL_TIM_CHANNEL_CH2N
;;;1483     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1484     *         @arg @ref LL_TIM_CHANNEL_CH3N
;;;1485     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1486     * @retval None
;;;1487     */
;;;1488   __STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
;;;1489   {
;;;1490     SET_BIT(TIMx->CCER, Channels);
;;;1491   }
;;;1492   
;;;1493   /**
;;;1494     * @brief  Disable capture/compare channels.
;;;1495     * @rmtoll CCER         CC1E          LL_TIM_CC_DisableChannel\n
;;;1496     *         CCER         CC1NE         LL_TIM_CC_DisableChannel\n
;;;1497     *         CCER         CC2E          LL_TIM_CC_DisableChannel\n
;;;1498     *         CCER         CC2NE         LL_TIM_CC_DisableChannel\n
;;;1499     *         CCER         CC3E          LL_TIM_CC_DisableChannel\n
;;;1500     *         CCER         CC3NE         LL_TIM_CC_DisableChannel\n
;;;1501     *         CCER         CC4E          LL_TIM_CC_DisableChannel
;;;1502     * @param  TIMx Timer instance
;;;1503     * @param  Channels This parameter can be a combination of the following values:
;;;1504     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1505     *         @arg @ref LL_TIM_CHANNEL_CH1N
;;;1506     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1507     *         @arg @ref LL_TIM_CHANNEL_CH2N
;;;1508     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1509     *         @arg @ref LL_TIM_CHANNEL_CH3N
;;;1510     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1511     * @retval None
;;;1512     */
;;;1513   __STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
;;;1514   {
;;;1515     CLEAR_BIT(TIMx->CCER, Channels);
;;;1516   }
;;;1517   
;;;1518   /**
;;;1519     * @brief  Indicate whether channel(s) is(are) enabled.
;;;1520     * @rmtoll CCER         CC1E          LL_TIM_CC_IsEnabledChannel\n
;;;1521     *         CCER         CC1NE         LL_TIM_CC_IsEnabledChannel\n
;;;1522     *         CCER         CC2E          LL_TIM_CC_IsEnabledChannel\n
;;;1523     *         CCER         CC2NE         LL_TIM_CC_IsEnabledChannel\n
;;;1524     *         CCER         CC3E          LL_TIM_CC_IsEnabledChannel\n
;;;1525     *         CCER         CC3NE         LL_TIM_CC_IsEnabledChannel\n
;;;1526     *         CCER         CC4E          LL_TIM_CC_IsEnabledChannel
;;;1527     * @param  TIMx Timer instance
;;;1528     * @param  Channels This parameter can be a combination of the following values:
;;;1529     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1530     *         @arg @ref LL_TIM_CHANNEL_CH1N
;;;1531     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1532     *         @arg @ref LL_TIM_CHANNEL_CH2N
;;;1533     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1534     *         @arg @ref LL_TIM_CHANNEL_CH3N
;;;1535     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1536     * @retval State of bit (1 or 0).
;;;1537     */
;;;1538   __STATIC_INLINE uint32_t LL_TIM_CC_IsEnabledChannel(TIM_TypeDef *TIMx, uint32_t Channels)
;;;1539   {
;;;1540     return (READ_BIT(TIMx->CCER, Channels) == (Channels));
;;;1541   }
;;;1542   
;;;1543   /**
;;;1544     * @}
;;;1545     */
;;;1546   
;;;1547   /** @defgroup TIM_LL_EF_Output_Channel Output channel configuration
;;;1548     * @{
;;;1549     */
;;;1550   /**
;;;1551     * @brief  Configure an output channel.
;;;1552     * @rmtoll CCMR1        CC1S          LL_TIM_OC_ConfigOutput\n
;;;1553     *         CCMR1        CC2S          LL_TIM_OC_ConfigOutput\n
;;;1554     *         CCMR2        CC3S          LL_TIM_OC_ConfigOutput\n
;;;1555     *         CCMR2        CC4S          LL_TIM_OC_ConfigOutput\n
;;;1556     *         CCER         CC1P          LL_TIM_OC_ConfigOutput\n
;;;1557     *         CCER         CC2P          LL_TIM_OC_ConfigOutput\n
;;;1558     *         CCER         CC3P          LL_TIM_OC_ConfigOutput\n
;;;1559     *         CCER         CC4P          LL_TIM_OC_ConfigOutput\n
;;;1560     *         CR2          OIS1          LL_TIM_OC_ConfigOutput\n
;;;1561     *         CR2          OIS2          LL_TIM_OC_ConfigOutput\n
;;;1562     *         CR2          OIS3          LL_TIM_OC_ConfigOutput\n
;;;1563     *         CR2          OIS4          LL_TIM_OC_ConfigOutput
;;;1564     * @param  TIMx Timer instance
;;;1565     * @param  Channel This parameter can be one of the following values:
;;;1566     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1567     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1568     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1569     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1570     * @param  Configuration This parameter must be a combination of all the following values:
;;;1571     *         @arg @ref LL_TIM_OCPOLARITY_HIGH or @ref LL_TIM_OCPOLARITY_LOW
;;;1572     *         @arg @ref LL_TIM_OCIDLESTATE_LOW or @ref LL_TIM_OCIDLESTATE_HIGH
;;;1573     * @retval None
;;;1574     */
;;;1575   __STATIC_INLINE void LL_TIM_OC_ConfigOutput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Configuration)
;;;1576   {
;;;1577     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1578     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1579     CLEAR_BIT(*pReg, (TIM_CCMR1_CC1S << SHIFT_TAB_OCxx[iChannel]));
;;;1580     MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),
;;;1581                (Configuration & TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]);
;;;1582     MODIFY_REG(TIMx->CR2, (TIM_CR2_OIS1 << SHIFT_TAB_OISx[iChannel]),
;;;1583                (Configuration & TIM_CR2_OIS1) << SHIFT_TAB_OISx[iChannel]);
;;;1584   }
;;;1585   
;;;1586   /**
;;;1587     * @brief  Define the behavior of the output reference signal OCxREF from which
;;;1588     *         OCx and OCxN (when relevant) are derived.
;;;1589     * @rmtoll CCMR1        OC1M          LL_TIM_OC_SetMode\n
;;;1590     *         CCMR1        OC2M          LL_TIM_OC_SetMode\n
;;;1591     *         CCMR2        OC3M          LL_TIM_OC_SetMode\n
;;;1592     *         CCMR2        OC4M          LL_TIM_OC_SetMode
;;;1593     * @param  TIMx Timer instance
;;;1594     * @param  Channel This parameter can be one of the following values:
;;;1595     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1596     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1597     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1598     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1599     * @param  Mode This parameter can be one of the following values:
;;;1600     *         @arg @ref LL_TIM_OCMODE_FROZEN
;;;1601     *         @arg @ref LL_TIM_OCMODE_ACTIVE
;;;1602     *         @arg @ref LL_TIM_OCMODE_INACTIVE
;;;1603     *         @arg @ref LL_TIM_OCMODE_TOGGLE
;;;1604     *         @arg @ref LL_TIM_OCMODE_FORCED_INACTIVE
;;;1605     *         @arg @ref LL_TIM_OCMODE_FORCED_ACTIVE
;;;1606     *         @arg @ref LL_TIM_OCMODE_PWM1
;;;1607     *         @arg @ref LL_TIM_OCMODE_PWM2
;;;1608     * @retval None
;;;1609     */
;;;1610   __STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
;;;1611   {
;;;1612     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1613     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1614     MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
;;;1615   }
;;;1616   
;;;1617   /**
;;;1618     * @brief  Get the output compare mode of an output channel.
;;;1619     * @rmtoll CCMR1        OC1M          LL_TIM_OC_GetMode\n
;;;1620     *         CCMR1        OC2M          LL_TIM_OC_GetMode\n
;;;1621     *         CCMR2        OC3M          LL_TIM_OC_GetMode\n
;;;1622     *         CCMR2        OC4M          LL_TIM_OC_GetMode
;;;1623     * @param  TIMx Timer instance
;;;1624     * @param  Channel This parameter can be one of the following values:
;;;1625     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1626     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1627     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1628     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1629     * @retval Returned value can be one of the following values:
;;;1630     *         @arg @ref LL_TIM_OCMODE_FROZEN
;;;1631     *         @arg @ref LL_TIM_OCMODE_ACTIVE
;;;1632     *         @arg @ref LL_TIM_OCMODE_INACTIVE
;;;1633     *         @arg @ref LL_TIM_OCMODE_TOGGLE
;;;1634     *         @arg @ref LL_TIM_OCMODE_FORCED_INACTIVE
;;;1635     *         @arg @ref LL_TIM_OCMODE_FORCED_ACTIVE
;;;1636     *         @arg @ref LL_TIM_OCMODE_PWM1
;;;1637     *         @arg @ref LL_TIM_OCMODE_PWM2
;;;1638     */
;;;1639   __STATIC_INLINE uint32_t LL_TIM_OC_GetMode(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1640   {
;;;1641     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1642     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1643     return (READ_BIT(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel])) >> SHIFT_TAB_OCxx[iChannel]);
;;;1644   }
;;;1645   
;;;1646   /**
;;;1647     * @brief  Set the polarity of an output channel.
;;;1648     * @rmtoll CCER         CC1P          LL_TIM_OC_SetPolarity\n
;;;1649     *         CCER         CC1NP         LL_TIM_OC_SetPolarity\n
;;;1650     *         CCER         CC2P          LL_TIM_OC_SetPolarity\n
;;;1651     *         CCER         CC2NP         LL_TIM_OC_SetPolarity\n
;;;1652     *         CCER         CC3P          LL_TIM_OC_SetPolarity\n
;;;1653     *         CCER         CC3NP         LL_TIM_OC_SetPolarity\n
;;;1654     *         CCER         CC4P          LL_TIM_OC_SetPolarity
;;;1655     * @param  TIMx Timer instance
;;;1656     * @param  Channel This parameter can be one of the following values:
;;;1657     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1658     *         @arg @ref LL_TIM_CHANNEL_CH1N
;;;1659     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1660     *         @arg @ref LL_TIM_CHANNEL_CH2N
;;;1661     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1662     *         @arg @ref LL_TIM_CHANNEL_CH3N
;;;1663     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1664     * @param  Polarity This parameter can be one of the following values:
;;;1665     *         @arg @ref LL_TIM_OCPOLARITY_HIGH
;;;1666     *         @arg @ref LL_TIM_OCPOLARITY_LOW
;;;1667     * @retval None
;;;1668     */
;;;1669   __STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
;;;1670   {
;;;1671     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1672     MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
;;;1673   }
;;;1674   
;;;1675   /**
;;;1676     * @brief  Get the polarity of an output channel.
;;;1677     * @rmtoll CCER         CC1P          LL_TIM_OC_GetPolarity\n
;;;1678     *         CCER         CC1NP         LL_TIM_OC_GetPolarity\n
;;;1679     *         CCER         CC2P          LL_TIM_OC_GetPolarity\n
;;;1680     *         CCER         CC2NP         LL_TIM_OC_GetPolarity\n
;;;1681     *         CCER         CC3P          LL_TIM_OC_GetPolarity\n
;;;1682     *         CCER         CC3NP         LL_TIM_OC_GetPolarity\n
;;;1683     *         CCER         CC4P          LL_TIM_OC_GetPolarity
;;;1684     * @param  TIMx Timer instance
;;;1685     * @param  Channel This parameter can be one of the following values:
;;;1686     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1687     *         @arg @ref LL_TIM_CHANNEL_CH1N
;;;1688     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1689     *         @arg @ref LL_TIM_CHANNEL_CH2N
;;;1690     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1691     *         @arg @ref LL_TIM_CHANNEL_CH3N
;;;1692     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1693     * @retval Returned value can be one of the following values:
;;;1694     *         @arg @ref LL_TIM_OCPOLARITY_HIGH
;;;1695     *         @arg @ref LL_TIM_OCPOLARITY_LOW
;;;1696     */
;;;1697   __STATIC_INLINE uint32_t LL_TIM_OC_GetPolarity(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1698   {
;;;1699     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1700     return (READ_BIT(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel])) >> SHIFT_TAB_CCxP[iChannel]);
;;;1701   }
;;;1702   
;;;1703   /**
;;;1704     * @brief  Set the IDLE state of an output channel
;;;1705     * @note This function is significant only for the timer instances
;;;1706     *       supporting the break feature. Macro @ref IS_TIM_BREAK_INSTANCE(TIMx)
;;;1707     *       can be used to check whether or not a timer instance provides
;;;1708     *       a break input.
;;;1709     * @rmtoll CR2         OIS1          LL_TIM_OC_SetIdleState\n
;;;1710     *         CR2         OIS1N         LL_TIM_OC_SetIdleState\n
;;;1711     *         CR2         OIS2          LL_TIM_OC_SetIdleState\n
;;;1712     *         CR2         OIS2N         LL_TIM_OC_SetIdleState\n
;;;1713     *         CR2         OIS3          LL_TIM_OC_SetIdleState\n
;;;1714     *         CR2         OIS3N         LL_TIM_OC_SetIdleState\n
;;;1715     *         CR2         OIS4          LL_TIM_OC_SetIdleState
;;;1716     * @param  TIMx Timer instance
;;;1717     * @param  Channel This parameter can be one of the following values:
;;;1718     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1719     *         @arg @ref LL_TIM_CHANNEL_CH1N
;;;1720     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1721     *         @arg @ref LL_TIM_CHANNEL_CH2N
;;;1722     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1723     *         @arg @ref LL_TIM_CHANNEL_CH3N
;;;1724     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1725     * @param  IdleState This parameter can be one of the following values:
;;;1726     *         @arg @ref LL_TIM_OCIDLESTATE_LOW
;;;1727     *         @arg @ref LL_TIM_OCIDLESTATE_HIGH
;;;1728     * @retval None
;;;1729     */
;;;1730   __STATIC_INLINE void LL_TIM_OC_SetIdleState(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t IdleState)
;;;1731   {
;;;1732     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1733     MODIFY_REG(TIMx->CR2, (TIM_CR2_OIS1 << SHIFT_TAB_OISx[iChannel]),  IdleState << SHIFT_TAB_OISx[iChannel]);
;;;1734   }
;;;1735   
;;;1736   /**
;;;1737     * @brief  Get the IDLE state of an output channel
;;;1738     * @rmtoll CR2         OIS1          LL_TIM_OC_GetIdleState\n
;;;1739     *         CR2         OIS1N         LL_TIM_OC_GetIdleState\n
;;;1740     *         CR2         OIS2          LL_TIM_OC_GetIdleState\n
;;;1741     *         CR2         OIS2N         LL_TIM_OC_GetIdleState\n
;;;1742     *         CR2         OIS3          LL_TIM_OC_GetIdleState\n
;;;1743     *         CR2         OIS3N         LL_TIM_OC_GetIdleState\n
;;;1744     *         CR2         OIS4          LL_TIM_OC_GetIdleState
;;;1745     * @param  TIMx Timer instance
;;;1746     * @param  Channel This parameter can be one of the following values:
;;;1747     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1748     *         @arg @ref LL_TIM_CHANNEL_CH1N
;;;1749     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1750     *         @arg @ref LL_TIM_CHANNEL_CH2N
;;;1751     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1752     *         @arg @ref LL_TIM_CHANNEL_CH3N
;;;1753     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1754     * @retval Returned value can be one of the following values:
;;;1755     *         @arg @ref LL_TIM_OCIDLESTATE_LOW
;;;1756     *         @arg @ref LL_TIM_OCIDLESTATE_HIGH
;;;1757     */
;;;1758   __STATIC_INLINE uint32_t LL_TIM_OC_GetIdleState(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1759   {
;;;1760     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1761     return (READ_BIT(TIMx->CR2, (TIM_CR2_OIS1 << SHIFT_TAB_OISx[iChannel])) >> SHIFT_TAB_OISx[iChannel]);
;;;1762   }
;;;1763   
;;;1764   /**
;;;1765     * @brief  Enable fast mode for the output channel.
;;;1766     * @note Acts only if the channel is configured in PWM1 or PWM2 mode.
;;;1767     * @rmtoll CCMR1        OC1FE          LL_TIM_OC_EnableFast\n
;;;1768     *         CCMR1        OC2FE          LL_TIM_OC_EnableFast\n
;;;1769     *         CCMR2        OC3FE          LL_TIM_OC_EnableFast\n
;;;1770     *         CCMR2        OC4FE          LL_TIM_OC_EnableFast
;;;1771     * @param  TIMx Timer instance
;;;1772     * @param  Channel This parameter can be one of the following values:
;;;1773     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1774     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1775     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1776     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1777     * @retval None
;;;1778     */
;;;1779   __STATIC_INLINE void LL_TIM_OC_EnableFast(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1780   {
;;;1781     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1782     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1783     SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
;;;1784   
;;;1785   }
;;;1786   
;;;1787   /**
;;;1788     * @brief  Disable fast mode for the output channel.
;;;1789     * @rmtoll CCMR1        OC1FE          LL_TIM_OC_DisableFast\n
;;;1790     *         CCMR1        OC2FE          LL_TIM_OC_DisableFast\n
;;;1791     *         CCMR2        OC3FE          LL_TIM_OC_DisableFast\n
;;;1792     *         CCMR2        OC4FE          LL_TIM_OC_DisableFast
;;;1793     * @param  TIMx Timer instance
;;;1794     * @param  Channel This parameter can be one of the following values:
;;;1795     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1796     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1797     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1798     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1799     * @retval None
;;;1800     */
;;;1801   __STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1802   {
;;;1803     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1804     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1805     CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
;;;1806   
;;;1807   }
;;;1808   
;;;1809   /**
;;;1810     * @brief  Indicates whether fast mode is enabled for the output channel.
;;;1811     * @rmtoll CCMR1        OC1FE          LL_TIM_OC_IsEnabledFast\n
;;;1812     *         CCMR1        OC2FE          LL_TIM_OC_IsEnabledFast\n
;;;1813     *         CCMR2        OC3FE          LL_TIM_OC_IsEnabledFast\n
;;;1814     *         CCMR2        OC4FE          LL_TIM_OC_IsEnabledFast\n
;;;1815     * @param  TIMx Timer instance
;;;1816     * @param  Channel This parameter can be one of the following values:
;;;1817     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1818     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1819     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1820     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1821     * @retval State of bit (1 or 0).
;;;1822     */
;;;1823   __STATIC_INLINE uint32_t LL_TIM_OC_IsEnabledFast(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1824   {
;;;1825     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1826     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1827     register uint32_t bitfield = TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel];
;;;1828     return (READ_BIT(*pReg, bitfield) == bitfield);
;;;1829   }
;;;1830   
;;;1831   /**
;;;1832     * @brief  Enable compare register (TIMx_CCRx) preload for the output channel.
;;;1833     * @rmtoll CCMR1        OC1PE          LL_TIM_OC_EnablePreload\n
;;;1834     *         CCMR1        OC2PE          LL_TIM_OC_EnablePreload\n
;;;1835     *         CCMR2        OC3PE          LL_TIM_OC_EnablePreload\n
;;;1836     *         CCMR2        OC4PE          LL_TIM_OC_EnablePreload
;;;1837     * @param  TIMx Timer instance
;;;1838     * @param  Channel This parameter can be one of the following values:
;;;1839     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1840     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1841     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1842     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1843     * @retval None
;;;1844     */
;;;1845   __STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1846   {
;;;1847     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1848     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1849     SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
;;;1850   }
;;;1851   
;;;1852   /**
;;;1853     * @brief  Disable compare register (TIMx_CCRx) preload for the output channel.
;;;1854     * @rmtoll CCMR1        OC1PE          LL_TIM_OC_DisablePreload\n
;;;1855     *         CCMR1        OC2PE          LL_TIM_OC_DisablePreload\n
;;;1856     *         CCMR2        OC3PE          LL_TIM_OC_DisablePreload\n
;;;1857     *         CCMR2        OC4PE          LL_TIM_OC_DisablePreload
;;;1858     * @param  TIMx Timer instance
;;;1859     * @param  Channel This parameter can be one of the following values:
;;;1860     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1861     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1862     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1863     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1864     * @retval None
;;;1865     */
;;;1866   __STATIC_INLINE void LL_TIM_OC_DisablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1867   {
;;;1868     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1869     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1870     CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
;;;1871   }
;;;1872   
;;;1873   /**
;;;1874     * @brief  Indicates whether compare register (TIMx_CCRx) preload is enabled for the output channel.
;;;1875     * @rmtoll CCMR1        OC1PE          LL_TIM_OC_IsEnabledPreload\n
;;;1876     *         CCMR1        OC2PE          LL_TIM_OC_IsEnabledPreload\n
;;;1877     *         CCMR2        OC3PE          LL_TIM_OC_IsEnabledPreload\n
;;;1878     *         CCMR2        OC4PE          LL_TIM_OC_IsEnabledPreload\n
;;;1879     * @param  TIMx Timer instance
;;;1880     * @param  Channel This parameter can be one of the following values:
;;;1881     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1882     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1883     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1884     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1885     * @retval State of bit (1 or 0).
;;;1886     */
;;;1887   __STATIC_INLINE uint32_t LL_TIM_OC_IsEnabledPreload(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1888   {
;;;1889     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1890     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1891     register uint32_t bitfield = TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel];
;;;1892     return (READ_BIT(*pReg, bitfield) == bitfield);
;;;1893   }
;;;1894   
;;;1895   /**
;;;1896     * @brief  Enable clearing the output channel on an external event.
;;;1897     * @note This function can only be used in Output compare and PWM modes. It does not work in Forced mode.
;;;1898     * @note Macro @ref IS_TIM_OCXREF_CLEAR_INSTANCE(TIMx) can be used to check whether
;;;1899     *       or not a timer instance can clear the OCxREF signal on an external event.
;;;1900     * @rmtoll CCMR1        OC1CE          LL_TIM_OC_EnableClear\n
;;;1901     *         CCMR1        OC2CE          LL_TIM_OC_EnableClear\n
;;;1902     *         CCMR2        OC3CE          LL_TIM_OC_EnableClear\n
;;;1903     *         CCMR2        OC4CE          LL_TIM_OC_EnableClear
;;;1904     * @param  TIMx Timer instance
;;;1905     * @param  Channel This parameter can be one of the following values:
;;;1906     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1907     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1908     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1909     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1910     * @retval None
;;;1911     */
;;;1912   __STATIC_INLINE void LL_TIM_OC_EnableClear(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1913   {
;;;1914     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1915     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1916     SET_BIT(*pReg, (TIM_CCMR1_OC1CE << SHIFT_TAB_OCxx[iChannel]));
;;;1917   }
;;;1918   
;;;1919   /**
;;;1920     * @brief  Disable clearing the output channel on an external event.
;;;1921     * @note Macro @ref IS_TIM_OCXREF_CLEAR_INSTANCE(TIMx) can be used to check whether
;;;1922     *       or not a timer instance can clear the OCxREF signal on an external event.
;;;1923     * @rmtoll CCMR1        OC1CE          LL_TIM_OC_DisableClear\n
;;;1924     *         CCMR1        OC2CE          LL_TIM_OC_DisableClear\n
;;;1925     *         CCMR2        OC3CE          LL_TIM_OC_DisableClear\n
;;;1926     *         CCMR2        OC4CE          LL_TIM_OC_DisableClear
;;;1927     * @param  TIMx Timer instance
;;;1928     * @param  Channel This parameter can be one of the following values:
;;;1929     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1930     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1931     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1932     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1933     * @retval None
;;;1934     */
;;;1935   __STATIC_INLINE void LL_TIM_OC_DisableClear(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1936   {
;;;1937     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1938     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1939     CLEAR_BIT(*pReg, (TIM_CCMR1_OC1CE << SHIFT_TAB_OCxx[iChannel]));
;;;1940   }
;;;1941   
;;;1942   /**
;;;1943     * @brief  Indicates clearing the output channel on an external event is enabled for the output channel.
;;;1944     * @note This function enables clearing the output channel on an external event.
;;;1945     * @note This function can only be used in Output compare and PWM modes. It does not work in Forced mode.
;;;1946     * @note Macro @ref IS_TIM_OCXREF_CLEAR_INSTANCE(TIMx) can be used to check whether
;;;1947     *       or not a timer instance can clear the OCxREF signal on an external event.
;;;1948     * @rmtoll CCMR1        OC1CE          LL_TIM_OC_IsEnabledClear\n
;;;1949     *         CCMR1        OC2CE          LL_TIM_OC_IsEnabledClear\n
;;;1950     *         CCMR2        OC3CE          LL_TIM_OC_IsEnabledClear\n
;;;1951     *         CCMR2        OC4CE          LL_TIM_OC_IsEnabledClear\n
;;;1952     * @param  TIMx Timer instance
;;;1953     * @param  Channel This parameter can be one of the following values:
;;;1954     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1955     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1956     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1957     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1958     * @retval State of bit (1 or 0).
;;;1959     */
;;;1960   __STATIC_INLINE uint32_t LL_TIM_OC_IsEnabledClear(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1961   {
;;;1962     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1963     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1964     register uint32_t bitfield = TIM_CCMR1_OC1CE << SHIFT_TAB_OCxx[iChannel];
;;;1965     return (READ_BIT(*pReg, bitfield) == bitfield);
;;;1966   }
;;;1967   
;;;1968   /**
;;;1969     * @brief  Set the dead-time delay (delay inserted between the rising edge of the OCxREF signal and the rising edge if the Ocx and OCxN signals).
;;;1970     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;1971     *       dead-time insertion feature is supported by a timer instance.
;;;1972     * @note Helper macro @ref __LL_TIM_CALC_DEADTIME can be used to calculate the DeadTime parameter
;;;1973     * @rmtoll BDTR         DTG           LL_TIM_OC_SetDeadTime
;;;1974     * @param  TIMx Timer instance
;;;1975     * @param  DeadTime between Min_Data=0 and Max_Data=255
;;;1976     * @retval None
;;;1977     */
;;;1978   __STATIC_INLINE void LL_TIM_OC_SetDeadTime(TIM_TypeDef *TIMx, uint32_t DeadTime)
;;;1979   {
;;;1980     MODIFY_REG(TIMx->BDTR, TIM_BDTR_DTG, DeadTime);
;;;1981   }
;;;1982   
;;;1983   /**
;;;1984     * @brief  Set compare value for output channel 1 (TIMx_CCR1).
;;;1985     * @note Macro @ref IS_TIM_CC1_INSTANCE(TIMx) can be used to check whether or not
;;;1986     *       output channel 1 is supported by a timer instance.
;;;1987     * @rmtoll CCR1         CCR1          LL_TIM_OC_SetCompareCH1
;;;1988     * @param  TIMx Timer instance
;;;1989     * @param  CompareValue between Min_Data=0 and Max_Data=65535
;;;1990     * @retval None
;;;1991     */
;;;1992   __STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
;;;1993   {
;;;1994     WRITE_REG(TIMx->CCR1, CompareValue);
;;;1995   }
;;;1996   
;;;1997   /**
;;;1998     * @brief  Set compare value for output channel 2 (TIMx_CCR2).
;;;1999     * @note Macro @ref IS_TIM_CC2_INSTANCE(TIMx) can be used to check whether or not
;;;2000     *       output channel 2 is supported by a timer instance.
;;;2001     * @rmtoll CCR2         CCR2          LL_TIM_OC_SetCompareCH2
;;;2002     * @param  TIMx Timer instance
;;;2003     * @param  CompareValue between Min_Data=0 and Max_Data=65535
;;;2004     * @retval None
;;;2005     */
;;;2006   __STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
;;;2007   {
;;;2008     WRITE_REG(TIMx->CCR2, CompareValue);
;;;2009   }
;;;2010   
;;;2011   /**
;;;2012     * @brief  Set compare value for output channel 3 (TIMx_CCR3).
;;;2013     * @note Macro @ref IS_TIM_CC3_INSTANCE(TIMx) can be used to check whether or not
;;;2014     *       output channel is supported by a timer instance.
;;;2015     * @rmtoll CCR3         CCR3          LL_TIM_OC_SetCompareCH3
;;;2016     * @param  TIMx Timer instance
;;;2017     * @param  CompareValue between Min_Data=0 and Max_Data=65535
;;;2018     * @retval None
;;;2019     */
;;;2020   __STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
;;;2021   {
;;;2022     WRITE_REG(TIMx->CCR3, CompareValue);
;;;2023   }
;;;2024   
;;;2025   /**
;;;2026     * @brief  Set compare value for output channel 4 (TIMx_CCR4).
;;;2027     * @note Macro @ref IS_TIM_CC4_INSTANCE(TIMx) can be used to check whether or not
;;;2028     *       output channel 4 is supported by a timer instance.
;;;2029     * @rmtoll CCR4         CCR4          LL_TIM_OC_SetCompareCH4
;;;2030     * @param  TIMx Timer instance
;;;2031     * @param  CompareValue between Min_Data=0 and Max_Data=65535
;;;2032     * @retval None
;;;2033     */
;;;2034   __STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
;;;2035   {
;;;2036     WRITE_REG(TIMx->CCR4, CompareValue);
;;;2037   }
;;;2038   
;;;2039   /**
;;;2040     * @brief  Get compare value (TIMx_CCR1) set for  output channel 1.
;;;2041     * @note Macro @ref IS_TIM_CC1_INSTANCE(TIMx) can be used to check whether or not
;;;2042     *       output channel 1 is supported by a timer instance.
;;;2043     * @rmtoll CCR1         CCR1          LL_TIM_OC_GetCompareCH1
;;;2044     * @param  TIMx Timer instance
;;;2045     * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
;;;2046     */
;;;2047   __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH1(TIM_TypeDef *TIMx)
;;;2048   {
;;;2049     return (uint32_t)(READ_REG(TIMx->CCR1));
;;;2050   }
;;;2051   
;;;2052   /**
;;;2053     * @brief  Get compare value (TIMx_CCR2) set for  output channel 2.
;;;2054     * @note Macro @ref IS_TIM_CC2_INSTANCE(TIMx) can be used to check whether or not
;;;2055     *       output channel 2 is supported by a timer instance.
;;;2056     * @rmtoll CCR2         CCR2          LL_TIM_OC_GetCompareCH2
;;;2057     * @param  TIMx Timer instance
;;;2058     * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
;;;2059     */
;;;2060   __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH2(TIM_TypeDef *TIMx)
;;;2061   {
;;;2062     return (uint32_t)(READ_REG(TIMx->CCR2));
;;;2063   }
;;;2064   
;;;2065   /**
;;;2066     * @brief  Get compare value (TIMx_CCR3) set for  output channel 3.
;;;2067     * @note Macro @ref IS_TIM_CC3_INSTANCE(TIMx) can be used to check whether or not
;;;2068     *       output channel 3 is supported by a timer instance.
;;;2069     * @rmtoll CCR3         CCR3          LL_TIM_OC_GetCompareCH3
;;;2070     * @param  TIMx Timer instance
;;;2071     * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
;;;2072     */
;;;2073   __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH3(TIM_TypeDef *TIMx)
;;;2074   {
;;;2075     return (uint32_t)(READ_REG(TIMx->CCR3));
;;;2076   }
;;;2077   
;;;2078   /**
;;;2079     * @brief  Get compare value (TIMx_CCR4) set for  output channel 4.
;;;2080     * @note Macro @ref IS_TIM_CC4_INSTANCE(TIMx) can be used to check whether or not
;;;2081     *       output channel 4 is supported by a timer instance.
;;;2082     * @rmtoll CCR4         CCR4          LL_TIM_OC_GetCompareCH4
;;;2083     * @param  TIMx Timer instance
;;;2084     * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
;;;2085     */
;;;2086   __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH4(TIM_TypeDef *TIMx)
;;;2087   {
;;;2088     return (uint32_t)(READ_REG(TIMx->CCR4));
;;;2089   }
;;;2090   
;;;2091   /**
;;;2092     * @}
;;;2093     */
;;;2094   
;;;2095   /** @defgroup TIM_LL_EF_Input_Channel Input channel configuration
;;;2096     * @{
;;;2097     */
;;;2098   /**
;;;2099     * @brief  Configure input channel.
;;;2100     * @rmtoll CCMR1        CC1S          LL_TIM_IC_Config\n
;;;2101     *         CCMR1        IC1PSC        LL_TIM_IC_Config\n
;;;2102     *         CCMR1        IC1F          LL_TIM_IC_Config\n
;;;2103     *         CCMR1        CC2S          LL_TIM_IC_Config\n
;;;2104     *         CCMR1        IC2PSC        LL_TIM_IC_Config\n
;;;2105     *         CCMR1        IC2F          LL_TIM_IC_Config\n
;;;2106     *         CCMR2        CC3S          LL_TIM_IC_Config\n
;;;2107     *         CCMR2        IC3PSC        LL_TIM_IC_Config\n
;;;2108     *         CCMR2        IC3F          LL_TIM_IC_Config\n
;;;2109     *         CCMR2        CC4S          LL_TIM_IC_Config\n
;;;2110     *         CCMR2        IC4PSC        LL_TIM_IC_Config\n
;;;2111     *         CCMR2        IC4F          LL_TIM_IC_Config\n
;;;2112     *         CCER         CC1P          LL_TIM_IC_Config\n
;;;2113     *         CCER         CC1NP         LL_TIM_IC_Config\n
;;;2114     *         CCER         CC2P          LL_TIM_IC_Config\n
;;;2115     *         CCER         CC2NP         LL_TIM_IC_Config\n
;;;2116     *         CCER         CC3P          LL_TIM_IC_Config\n
;;;2117     *         CCER         CC3NP         LL_TIM_IC_Config\n
;;;2118     *         CCER         CC4P          LL_TIM_IC_Config\n
;;;2119     * @param  TIMx Timer instance
;;;2120     * @param  Channel This parameter can be one of the following values:
;;;2121     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2122     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2123     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2124     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2125     * @param  Configuration This parameter must be a combination of all the following values:
;;;2126     *         @arg @ref LL_TIM_ACTIVEINPUT_DIRECTTI or @ref LL_TIM_ACTIVEINPUT_INDIRECTTI or @ref LL_TIM_ACTIVEINPUT_TRC
;;;2127     *         @arg @ref LL_TIM_ICPSC_DIV1 or ... or @ref LL_TIM_ICPSC_DIV8
;;;2128     *         @arg @ref LL_TIM_IC_FILTER_FDIV1 or ... or @ref LL_TIM_IC_FILTER_FDIV32_N8
;;;2129     *         @arg @ref LL_TIM_IC_POLARITY_RISING or @ref LL_TIM_IC_POLARITY_FALLING
;;;2130     * @retval None
;;;2131     */
;;;2132   __STATIC_INLINE void LL_TIM_IC_Config(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Configuration)
;;;2133   {
;;;2134     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2135     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2136     MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F | TIM_CCMR1_IC1PSC | TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]),
;;;2137                ((Configuration >> 16U) & (TIM_CCMR1_IC1F | TIM_CCMR1_IC1PSC | TIM_CCMR1_CC1S))  << SHIFT_TAB_ICxx[iChannel]);
;;;2138     MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
;;;2139                (Configuration & (TIM_CCER_CC1NP | TIM_CCER_CC1P)) << SHIFT_TAB_CCxP[iChannel]);
;;;2140   }
;;;2141   
;;;2142   /**
;;;2143     * @brief  Set the active input.
;;;2144     * @rmtoll CCMR1        CC1S          LL_TIM_IC_SetActiveInput\n
;;;2145     *         CCMR1        CC2S          LL_TIM_IC_SetActiveInput\n
;;;2146     *         CCMR2        CC3S          LL_TIM_IC_SetActiveInput\n
;;;2147     *         CCMR2        CC4S          LL_TIM_IC_SetActiveInput
;;;2148     * @param  TIMx Timer instance
;;;2149     * @param  Channel This parameter can be one of the following values:
;;;2150     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2151     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2152     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2153     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2154     * @param  ICActiveInput This parameter can be one of the following values:
;;;2155     *         @arg @ref LL_TIM_ACTIVEINPUT_DIRECTTI
;;;2156     *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
;;;2157     *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
;;;2158     * @retval None
;;;2159     */
;;;2160   __STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiveInput)
;;;2161   {
;;;2162     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2163     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2164     MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
;;;2165   }
;;;2166   
;;;2167   /**
;;;2168     * @brief  Get the current active input.
;;;2169     * @rmtoll CCMR1        CC1S          LL_TIM_IC_GetActiveInput\n
;;;2170     *         CCMR1        CC2S          LL_TIM_IC_GetActiveInput\n
;;;2171     *         CCMR2        CC3S          LL_TIM_IC_GetActiveInput\n
;;;2172     *         CCMR2        CC4S          LL_TIM_IC_GetActiveInput
;;;2173     * @param  TIMx Timer instance
;;;2174     * @param  Channel This parameter can be one of the following values:
;;;2175     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2176     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2177     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2178     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2179     * @retval Returned value can be one of the following values:
;;;2180     *         @arg @ref LL_TIM_ACTIVEINPUT_DIRECTTI
;;;2181     *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
;;;2182     *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
;;;2183     */
;;;2184   __STATIC_INLINE uint32_t LL_TIM_IC_GetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel)
;;;2185   {
;;;2186     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2187     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2188     return ((READ_BIT(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iChannel]) << 16U);
;;;2189   }
;;;2190   
;;;2191   /**
;;;2192     * @brief  Set the prescaler of input channel.
;;;2193     * @rmtoll CCMR1        IC1PSC        LL_TIM_IC_SetPrescaler\n
;;;2194     *         CCMR1        IC2PSC        LL_TIM_IC_SetPrescaler\n
;;;2195     *         CCMR2        IC3PSC        LL_TIM_IC_SetPrescaler\n
;;;2196     *         CCMR2        IC4PSC        LL_TIM_IC_SetPrescaler
;;;2197     * @param  TIMx Timer instance
;;;2198     * @param  Channel This parameter can be one of the following values:
;;;2199     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2200     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2201     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2202     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2203     * @param  ICPrescaler This parameter can be one of the following values:
;;;2204     *         @arg @ref LL_TIM_ICPSC_DIV1
;;;2205     *         @arg @ref LL_TIM_ICPSC_DIV2
;;;2206     *         @arg @ref LL_TIM_ICPSC_DIV4
;;;2207     *         @arg @ref LL_TIM_ICPSC_DIV8
;;;2208     * @retval None
;;;2209     */
;;;2210   __STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
;;;2211   {
;;;2212     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2213     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2214     MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
;;;2215   }
;;;2216   
;;;2217   /**
;;;2218     * @brief  Get the current prescaler value acting on an  input channel.
;;;2219     * @rmtoll CCMR1        IC1PSC        LL_TIM_IC_GetPrescaler\n
;;;2220     *         CCMR1        IC2PSC        LL_TIM_IC_GetPrescaler\n
;;;2221     *         CCMR2        IC3PSC        LL_TIM_IC_GetPrescaler\n
;;;2222     *         CCMR2        IC4PSC        LL_TIM_IC_GetPrescaler
;;;2223     * @param  TIMx Timer instance
;;;2224     * @param  Channel This parameter can be one of the following values:
;;;2225     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2226     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2227     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2228     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2229     * @retval Returned value can be one of the following values:
;;;2230     *         @arg @ref LL_TIM_ICPSC_DIV1
;;;2231     *         @arg @ref LL_TIM_ICPSC_DIV2
;;;2232     *         @arg @ref LL_TIM_ICPSC_DIV4
;;;2233     *         @arg @ref LL_TIM_ICPSC_DIV8
;;;2234     */
;;;2235   __STATIC_INLINE uint32_t LL_TIM_IC_GetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel)
;;;2236   {
;;;2237     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2238     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2239     return ((READ_BIT(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iChannel]) << 16U);
;;;2240   }
;;;2241   
;;;2242   /**
;;;2243     * @brief  Set the input filter duration.
;;;2244     * @rmtoll CCMR1        IC1F          LL_TIM_IC_SetFilter\n
;;;2245     *         CCMR1        IC2F          LL_TIM_IC_SetFilter\n
;;;2246     *         CCMR2        IC3F          LL_TIM_IC_SetFilter\n
;;;2247     *         CCMR2        IC4F          LL_TIM_IC_SetFilter
;;;2248     * @param  TIMx Timer instance
;;;2249     * @param  Channel This parameter can be one of the following values:
;;;2250     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2251     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2252     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2253     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2254     * @param  ICFilter This parameter can be one of the following values:
;;;2255     *         @arg @ref LL_TIM_IC_FILTER_FDIV1
;;;2256     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N2
;;;2257     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N4
;;;2258     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N8
;;;2259     *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N6
;;;2260     *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N8
;;;2261     *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N6
;;;2262     *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N8
;;;2263     *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N6
;;;2264     *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N8
;;;2265     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N5
;;;2266     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N6
;;;2267     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N8
;;;2268     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N5
;;;2269     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
;;;2270     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
;;;2271     * @retval None
;;;2272     */
;;;2273   __STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
;;;2274   {
;;;2275     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2276     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2277     MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
;;;2278   }
;;;2279   
;;;2280   /**
;;;2281     * @brief  Get the input filter duration.
;;;2282     * @rmtoll CCMR1        IC1F          LL_TIM_IC_GetFilter\n
;;;2283     *         CCMR1        IC2F          LL_TIM_IC_GetFilter\n
;;;2284     *         CCMR2        IC3F          LL_TIM_IC_GetFilter\n
;;;2285     *         CCMR2        IC4F          LL_TIM_IC_GetFilter
;;;2286     * @param  TIMx Timer instance
;;;2287     * @param  Channel This parameter can be one of the following values:
;;;2288     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2289     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2290     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2291     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2292     * @retval Returned value can be one of the following values:
;;;2293     *         @arg @ref LL_TIM_IC_FILTER_FDIV1
;;;2294     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N2
;;;2295     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N4
;;;2296     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N8
;;;2297     *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N6
;;;2298     *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N8
;;;2299     *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N6
;;;2300     *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N8
;;;2301     *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N6
;;;2302     *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N8
;;;2303     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N5
;;;2304     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N6
;;;2305     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N8
;;;2306     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N5
;;;2307     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
;;;2308     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
;;;2309     */
;;;2310   __STATIC_INLINE uint32_t LL_TIM_IC_GetFilter(TIM_TypeDef *TIMx, uint32_t Channel)
;;;2311   {
;;;2312     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2313     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2314     return ((READ_BIT(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iChannel]) << 16U);
;;;2315   }
;;;2316   
;;;2317   /**
;;;2318     * @brief  Set the input channel polarity.
;;;2319     * @rmtoll CCER         CC1P          LL_TIM_IC_SetPolarity\n
;;;2320     *         CCER         CC1NP         LL_TIM_IC_SetPolarity\n
;;;2321     *         CCER         CC2P          LL_TIM_IC_SetPolarity\n
;;;2322     *         CCER         CC2NP         LL_TIM_IC_SetPolarity\n
;;;2323     *         CCER         CC3P          LL_TIM_IC_SetPolarity\n
;;;2324     *         CCER         CC3NP         LL_TIM_IC_SetPolarity\n
;;;2325     *         CCER         CC4P          LL_TIM_IC_SetPolarity\n
;;;2326     * @param  TIMx Timer instance
;;;2327     * @param  Channel This parameter can be one of the following values:
;;;2328     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2329     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2330     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2331     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2332     * @param  ICPolarity This parameter can be one of the following values:
;;;2333     *         @arg @ref LL_TIM_IC_POLARITY_RISING
;;;2334     *         @arg @ref LL_TIM_IC_POLARITY_FALLING
;;;2335     * @retval None
;;;2336     */
;;;2337   __STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
;;;2338   {
;;;2339     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2340     MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
;;;2341                ICPolarity << SHIFT_TAB_CCxP[iChannel]);
;;;2342   }
;;;2343   
;;;2344   /**
;;;2345     * @brief  Get the current input channel polarity.
;;;2346     * @rmtoll CCER         CC1P          LL_TIM_IC_GetPolarity\n
;;;2347     *         CCER         CC1NP         LL_TIM_IC_GetPolarity\n
;;;2348     *         CCER         CC2P          LL_TIM_IC_GetPolarity\n
;;;2349     *         CCER         CC2NP         LL_TIM_IC_GetPolarity\n
;;;2350     *         CCER         CC3P          LL_TIM_IC_GetPolarity\n
;;;2351     *         CCER         CC3NP         LL_TIM_IC_GetPolarity\n
;;;2352     *         CCER         CC4P          LL_TIM_IC_GetPolarity\n
;;;2353     * @param  TIMx Timer instance
;;;2354     * @param  Channel This parameter can be one of the following values:
;;;2355     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2356     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2357     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2358     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2359     * @retval Returned value can be one of the following values:
;;;2360     *         @arg @ref LL_TIM_IC_POLARITY_RISING
;;;2361     *         @arg @ref LL_TIM_IC_POLARITY_FALLING
;;;2362     */
;;;2363   __STATIC_INLINE uint32_t LL_TIM_IC_GetPolarity(TIM_TypeDef *TIMx, uint32_t Channel)
;;;2364   {
;;;2365     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2366     return (READ_BIT(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel])) >>
;;;2367             SHIFT_TAB_CCxP[iChannel]);
;;;2368   }
;;;2369   
;;;2370   /**
;;;2371     * @brief  Connect the TIMx_CH1, CH2 and CH3 pins  to the TI1 input (XOR combination).
;;;2372     * @note Macro @ref IS_TIM_XOR_INSTANCE(TIMx) can be used to check whether or not
;;;2373     *       a timer instance provides an XOR input.
;;;2374     * @rmtoll CR2          TI1S          LL_TIM_IC_EnableXORCombination
;;;2375     * @param  TIMx Timer instance
;;;2376     * @retval None
;;;2377     */
;;;2378   __STATIC_INLINE void LL_TIM_IC_EnableXORCombination(TIM_TypeDef *TIMx)
;;;2379   {
;;;2380     SET_BIT(TIMx->CR2, TIM_CR2_TI1S);
;;;2381   }
;;;2382   
;;;2383   /**
;;;2384     * @brief  Disconnect the TIMx_CH1, CH2 and CH3 pins  from the TI1 input.
;;;2385     * @note Macro @ref IS_TIM_XOR_INSTANCE(TIMx) can be used to check whether or not
;;;2386     *       a timer instance provides an XOR input.
;;;2387     * @rmtoll CR2          TI1S          LL_TIM_IC_DisableXORCombination
;;;2388     * @param  TIMx Timer instance
;;;2389     * @retval None
;;;2390     */
;;;2391   __STATIC_INLINE void LL_TIM_IC_DisableXORCombination(TIM_TypeDef *TIMx)
;;;2392   {
;;;2393     CLEAR_BIT(TIMx->CR2, TIM_CR2_TI1S);
;;;2394   }
;;;2395   
;;;2396   /**
;;;2397     * @brief  Indicates whether the TIMx_CH1, CH2 and CH3 pins are connectected to the TI1 input.
;;;2398     * @note Macro @ref IS_TIM_XOR_INSTANCE(TIMx) can be used to check whether or not
;;;2399     * a timer instance provides an XOR input.
;;;2400     * @rmtoll CR2          TI1S          LL_TIM_IC_IsEnabledXORCombination
;;;2401     * @param  TIMx Timer instance
;;;2402     * @retval State of bit (1 or 0).
;;;2403     */
;;;2404   __STATIC_INLINE uint32_t LL_TIM_IC_IsEnabledXORCombination(TIM_TypeDef *TIMx)
;;;2405   {
;;;2406     return (READ_BIT(TIMx->CR2, TIM_CR2_TI1S) == (TIM_CR2_TI1S));
;;;2407   }
;;;2408   
;;;2409   /**
;;;2410     * @brief  Get captured value for input channel 1.
;;;2411     * @note Macro @ref IS_TIM_CC1_INSTANCE(TIMx) can be used to check whether or not
;;;2412     *       input channel 1 is supported by a timer instance.
;;;2413     * @rmtoll CCR1         CCR1          LL_TIM_IC_GetCaptureCH1
;;;2414     * @param  TIMx Timer instance
;;;2415     * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
;;;2416     */
;;;2417   __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH1(TIM_TypeDef *TIMx)
;;;2418   {
;;;2419     return (uint32_t)(READ_REG(TIMx->CCR1));
;;;2420   }
;;;2421   
;;;2422   /**
;;;2423     * @brief  Get captured value for input channel 2.
;;;2424     * @note Macro @ref IS_TIM_CC2_INSTANCE(TIMx) can be used to check whether or not
;;;2425     *       input channel 2 is supported by a timer instance.
;;;2426     * @rmtoll CCR2         CCR2          LL_TIM_IC_GetCaptureCH2
;;;2427     * @param  TIMx Timer instance
;;;2428     * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
;;;2429     */
;;;2430   __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH2(TIM_TypeDef *TIMx)
;;;2431   {
;;;2432     return (uint32_t)(READ_REG(TIMx->CCR2));
;;;2433   }
;;;2434   
;;;2435   /**
;;;2436     * @brief  Get captured value for input channel 3.
;;;2437     * @note Macro @ref IS_TIM_CC3_INSTANCE(TIMx) can be used to check whether or not
;;;2438     *       input channel 3 is supported by a timer instance.
;;;2439     * @rmtoll CCR3         CCR3          LL_TIM_IC_GetCaptureCH3
;;;2440     * @param  TIMx Timer instance
;;;2441     * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
;;;2442     */
;;;2443   __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH3(TIM_TypeDef *TIMx)
;;;2444   {
;;;2445     return (uint32_t)(READ_REG(TIMx->CCR3));
;;;2446   }
;;;2447   
;;;2448   /**
;;;2449     * @brief  Get captured value for input channel 4.
;;;2450     * @note Macro @ref IS_TIM_CC4_INSTANCE(TIMx) can be used to check whether or not
;;;2451     *       input channel 4 is supported by a timer instance.
;;;2452     * @rmtoll CCR4         CCR4          LL_TIM_IC_GetCaptureCH4
;;;2453     * @param  TIMx Timer instance
;;;2454     * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
;;;2455     */
;;;2456   __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH4(TIM_TypeDef *TIMx)
;;;2457   {
;;;2458     return (uint32_t)(READ_REG(TIMx->CCR4));
;;;2459   }
;;;2460   
;;;2461   /**
;;;2462     * @}
;;;2463     */
;;;2464   
;;;2465   /** @defgroup TIM_LL_EF_Clock_Selection Counter clock selection
;;;2466     * @{
;;;2467     */
;;;2468   /**
;;;2469     * @brief  Enable external clock mode 2.
;;;2470     * @note When external clock mode 2 is enabled the counter is clocked by any active edge on the ETRF signal.
;;;2471     * @note Macro @ref IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
;;;2472     *       whether or not a timer instance supports external clock mode2.
;;;2473     * @rmtoll SMCR         ECE           LL_TIM_EnableExternalClock
;;;2474     * @param  TIMx Timer instance
;;;2475     * @retval None
;;;2476     */
;;;2477   __STATIC_INLINE void LL_TIM_EnableExternalClock(TIM_TypeDef *TIMx)
;;;2478   {
;;;2479     SET_BIT(TIMx->SMCR, TIM_SMCR_ECE);
;;;2480   }
;;;2481   
;;;2482   /**
;;;2483     * @brief  Disable external clock mode 2.
;;;2484     * @note Macro @ref IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
;;;2485     *       whether or not a timer instance supports external clock mode2.
;;;2486     * @rmtoll SMCR         ECE           LL_TIM_DisableExternalClock
;;;2487     * @param  TIMx Timer instance
;;;2488     * @retval None
;;;2489     */
;;;2490   __STATIC_INLINE void LL_TIM_DisableExternalClock(TIM_TypeDef *TIMx)
;;;2491   {
;;;2492     CLEAR_BIT(TIMx->SMCR, TIM_SMCR_ECE);
;;;2493   }
;;;2494   
;;;2495   /**
;;;2496     * @brief  Indicate whether external clock mode 2 is enabled.
;;;2497     * @note Macro @ref IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
;;;2498     *       whether or not a timer instance supports external clock mode2.
;;;2499     * @rmtoll SMCR         ECE           LL_TIM_IsEnabledExternalClock
;;;2500     * @param  TIMx Timer instance
;;;2501     * @retval State of bit (1 or 0).
;;;2502     */
;;;2503   __STATIC_INLINE uint32_t LL_TIM_IsEnabledExternalClock(TIM_TypeDef *TIMx)
;;;2504   {
;;;2505     return (READ_BIT(TIMx->SMCR, TIM_SMCR_ECE) == (TIM_SMCR_ECE));
;;;2506   }
;;;2507   
;;;2508   /**
;;;2509     * @brief  Set the clock source of the counter clock.
;;;2510     * @note when selected clock source is external clock mode 1, the timer input
;;;2511     *       the external clock is applied is selected by calling the @ref LL_TIM_SetTriggerInput()
;;;2512     *       function. This timer input must be configured by calling
;;;2513     *       the @ref LL_TIM_IC_Config() function.
;;;2514     * @note Macro @ref IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(TIMx) can be used to check
;;;2515     *       whether or not a timer instance supports external clock mode1.
;;;2516     * @note Macro @ref IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
;;;2517     *       whether or not a timer instance supports external clock mode2.
;;;2518     * @rmtoll SMCR         SMS           LL_TIM_SetClockSource\n
;;;2519     *         SMCR         ECE           LL_TIM_SetClockSource
;;;2520     * @param  TIMx Timer instance
;;;2521     * @param  ClockSource This parameter can be one of the following values:
;;;2522     *         @arg @ref LL_TIM_CLOCKSOURCE_INTERNAL
;;;2523     *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
;;;2524     *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
;;;2525     * @retval None
;;;2526     */
;;;2527   __STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
;;;2528   {
;;;2529     MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
;;;2530   }
;;;2531   
;;;2532   /**
;;;2533     * @brief  Set the encoder interface mode.
;;;2534     * @note Macro @ref IS_TIM_ENCODER_INTERFACE_INSTANCE(TIMx) can be used to check
;;;2535     *       whether or not a timer instance supports the encoder mode.
;;;2536     * @rmtoll SMCR         SMS           LL_TIM_SetEncoderMode
;;;2537     * @param  TIMx Timer instance
;;;2538     * @param  EncoderMode This parameter can be one of the following values:
;;;2539     *         @arg @ref LL_TIM_ENCODERMODE_X2_TI1
;;;2540     *         @arg @ref LL_TIM_ENCODERMODE_X2_TI2
;;;2541     *         @arg @ref LL_TIM_ENCODERMODE_X4_TI12
;;;2542     * @retval None
;;;2543     */
;;;2544   __STATIC_INLINE void LL_TIM_SetEncoderMode(TIM_TypeDef *TIMx, uint32_t EncoderMode)
;;;2545   {
;;;2546     MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
;;;2547   }
;;;2548   
;;;2549   /**
;;;2550     * @}
;;;2551     */
;;;2552   
;;;2553   /** @defgroup TIM_LL_EF_Timer_Synchronization Timer synchronisation configuration
;;;2554     * @{
;;;2555     */
;;;2556   /**
;;;2557     * @brief  Set the trigger output (TRGO) used for timer synchronization .
;;;2558     * @note Macro @ref IS_TIM_MASTER_INSTANCE(TIMx) can be used to check
;;;2559     *       whether or not a timer instance can operate as a master timer.
;;;2560     * @rmtoll CR2          MMS           LL_TIM_SetTriggerOutput
;;;2561     * @param  TIMx Timer instance
;;;2562     * @param  TimerSynchronization This parameter can be one of the following values:
;;;2563     *         @arg @ref LL_TIM_TRGO_RESET
;;;2564     *         @arg @ref LL_TIM_TRGO_ENABLE
;;;2565     *         @arg @ref LL_TIM_TRGO_UPDATE
;;;2566     *         @arg @ref LL_TIM_TRGO_CC1IF
;;;2567     *         @arg @ref LL_TIM_TRGO_OC1REF
;;;2568     *         @arg @ref LL_TIM_TRGO_OC2REF
;;;2569     *         @arg @ref LL_TIM_TRGO_OC3REF
;;;2570     *         @arg @ref LL_TIM_TRGO_OC4REF
;;;2571     * @retval None
;;;2572     */
;;;2573   __STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
;;;2574   {
;;;2575     MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
;;;2576   }
;;;2577   
;;;2578   /**
;;;2579     * @brief  Set the synchronization mode of a slave timer.
;;;2580     * @note Macro @ref IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
;;;2581     *       a timer instance can operate as a slave timer.
;;;2582     * @rmtoll SMCR         SMS           LL_TIM_SetSlaveMode
;;;2583     * @param  TIMx Timer instance
;;;2584     * @param  SlaveMode This parameter can be one of the following values:
;;;2585     *         @arg @ref LL_TIM_SLAVEMODE_DISABLED
;;;2586     *         @arg @ref LL_TIM_SLAVEMODE_RESET
;;;2587     *         @arg @ref LL_TIM_SLAVEMODE_GATED
;;;2588     *         @arg @ref LL_TIM_SLAVEMODE_TRIGGER
;;;2589     * @retval None
;;;2590     */
;;;2591   __STATIC_INLINE void LL_TIM_SetSlaveMode(TIM_TypeDef *TIMx, uint32_t SlaveMode)
;;;2592   {
;;;2593     MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
;;;2594   }
;;;2595   
;;;2596   /**
;;;2597     * @brief  Set the selects the trigger input to be used to synchronize the counter.
;;;2598     * @note Macro @ref IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
;;;2599     *       a timer instance can operate as a slave timer.
;;;2600     * @rmtoll SMCR         TS            LL_TIM_SetTriggerInput
;;;2601     * @param  TIMx Timer instance
;;;2602     * @param  TriggerInput This parameter can be one of the following values:
;;;2603     *         @arg @ref LL_TIM_TS_ITR0
;;;2604     *         @arg @ref LL_TIM_TS_ITR1
;;;2605     *         @arg @ref LL_TIM_TS_ITR2
;;;2606     *         @arg @ref LL_TIM_TS_ITR3
;;;2607     *         @arg @ref LL_TIM_TS_TI1F_ED
;;;2608     *         @arg @ref LL_TIM_TS_TI1FP1
;;;2609     *         @arg @ref LL_TIM_TS_TI2FP2
;;;2610     *         @arg @ref LL_TIM_TS_ETRF
;;;2611     * @retval None
;;;2612     */
;;;2613   __STATIC_INLINE void LL_TIM_SetTriggerInput(TIM_TypeDef *TIMx, uint32_t TriggerInput)
;;;2614   {
;;;2615     MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
;;;2616   }
;;;2617   
;;;2618   /**
;;;2619     * @brief  Enable the Master/Slave mode.
;;;2620     * @note Macro @ref IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
;;;2621     *       a timer instance can operate as a slave timer.
;;;2622     * @rmtoll SMCR         MSM           LL_TIM_EnableMasterSlaveMode
;;;2623     * @param  TIMx Timer instance
;;;2624     * @retval None
;;;2625     */
;;;2626   __STATIC_INLINE void LL_TIM_EnableMasterSlaveMode(TIM_TypeDef *TIMx)
;;;2627   {
;;;2628     SET_BIT(TIMx->SMCR, TIM_SMCR_MSM);
;;;2629   }
;;;2630   
;;;2631   /**
;;;2632     * @brief  Disable the Master/Slave mode.
;;;2633     * @note Macro @ref IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
;;;2634     *       a timer instance can operate as a slave timer.
;;;2635     * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
;;;2636     * @param  TIMx Timer instance
;;;2637     * @retval None
;;;2638     */
;;;2639   __STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
;;;2640   {
;;;2641     CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
        0x08000970:    6881        .h      LDR      r1,[r0,#8]
        0x08000972:    f0210180    !...    BIC      r1,r1,#0x80
        0x08000976:    6081        .`      STR      r1,[r0,#8]
        0x08000978:    4770        pG      BX       lr
    i.LL_TIM_EnableCounter
    LL_TIM_EnableCounter
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h (1027)
        0x0800097a:    6801        .h      LDR      r1,[r0,#0]
        0x0800097c:    f0410101    A...    ORR      r1,r1,#1
        0x08000980:    6001        .`      STR      r1,[r0,#0]
;;;1028   }
        0x08000982:    4770        pG      BX       lr
    i.LL_TIM_EnableIT_UPDATE
    LL_TIM_EnableIT_UPDATE
;;;1029   
;;;1030   /**
;;;1031     * @brief  Disable timer counter.
;;;1032     * @rmtoll CR1          CEN           LL_TIM_DisableCounter
;;;1033     * @param  TIMx Timer instance
;;;1034     * @retval None
;;;1035     */
;;;1036   __STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
;;;1037   {
;;;1038     CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
;;;1039   }
;;;1040   
;;;1041   /**
;;;1042     * @brief  Indicates whether the timer counter is enabled.
;;;1043     * @rmtoll CR1          CEN           LL_TIM_IsEnabledCounter
;;;1044     * @param  TIMx Timer instance
;;;1045     * @retval State of bit (1 or 0).
;;;1046     */
;;;1047   __STATIC_INLINE uint32_t LL_TIM_IsEnabledCounter(TIM_TypeDef *TIMx)
;;;1048   {
;;;1049     return (READ_BIT(TIMx->CR1, TIM_CR1_CEN) == (TIM_CR1_CEN));
;;;1050   }
;;;1051   
;;;1052   /**
;;;1053     * @brief  Enable update event generation.
;;;1054     * @rmtoll CR1          UDIS          LL_TIM_EnableUpdateEvent
;;;1055     * @param  TIMx Timer instance
;;;1056     * @retval None
;;;1057     */
;;;1058   __STATIC_INLINE void LL_TIM_EnableUpdateEvent(TIM_TypeDef *TIMx)
;;;1059   {
;;;1060     SET_BIT(TIMx->CR1, TIM_CR1_UDIS);
;;;1061   }
;;;1062   
;;;1063   /**
;;;1064     * @brief  Disable update event generation.
;;;1065     * @rmtoll CR1          UDIS          LL_TIM_DisableUpdateEvent
;;;1066     * @param  TIMx Timer instance
;;;1067     * @retval None
;;;1068     */
;;;1069   __STATIC_INLINE void LL_TIM_DisableUpdateEvent(TIM_TypeDef *TIMx)
;;;1070   {
;;;1071     CLEAR_BIT(TIMx->CR1, TIM_CR1_UDIS);
;;;1072   }
;;;1073   
;;;1074   /**
;;;1075     * @brief  Indicates whether update event generation is enabled.
;;;1076     * @rmtoll CR1          UDIS          LL_TIM_IsEnabledUpdateEvent
;;;1077     * @param  TIMx Timer instance
;;;1078     * @retval State of bit (1 or 0).
;;;1079     */
;;;1080   __STATIC_INLINE uint32_t LL_TIM_IsEnabledUpdateEvent(TIM_TypeDef *TIMx)
;;;1081   {
;;;1082     return (READ_BIT(TIMx->CR1, TIM_CR1_UDIS) == (TIM_CR1_UDIS));
;;;1083   }
;;;1084   
;;;1085   /**
;;;1086     * @brief  Set update event source
;;;1087     * @note Update event source set to LL_TIM_UPDATESOURCE_REGULAR: any of the following events
;;;1088     *       generate an update interrupt or DMA request if enabled:
;;;1089     *        - Counter overflow/underflow
;;;1090     *        - Setting the UG bit
;;;1091     *        - Update generation through the slave mode controller
;;;1092     * @note Update event source set to LL_TIM_UPDATESOURCE_COUNTER: only counter
;;;1093     *       overflow/underflow generates an update interrupt or DMA request if enabled.
;;;1094     * @rmtoll CR1          URS           LL_TIM_SetUpdateSource
;;;1095     * @param  TIMx Timer instance
;;;1096     * @param  UpdateSource This parameter can be one of the following values:
;;;1097     *         @arg @ref LL_TIM_UPDATESOURCE_REGULAR
;;;1098     *         @arg @ref LL_TIM_UPDATESOURCE_COUNTER
;;;1099     * @retval None
;;;1100     */
;;;1101   __STATIC_INLINE void LL_TIM_SetUpdateSource(TIM_TypeDef *TIMx, uint32_t UpdateSource)
;;;1102   {
;;;1103     MODIFY_REG(TIMx->CR1, TIM_CR1_URS, UpdateSource);
;;;1104   }
;;;1105   
;;;1106   /**
;;;1107     * @brief  Get actual event update source
;;;1108     * @rmtoll CR1          URS           LL_TIM_GetUpdateSource
;;;1109     * @param  TIMx Timer instance
;;;1110     * @retval Returned value can be one of the following values:
;;;1111     *         @arg @ref LL_TIM_UPDATESOURCE_REGULAR
;;;1112     *         @arg @ref LL_TIM_UPDATESOURCE_COUNTER
;;;1113     */
;;;1114   __STATIC_INLINE uint32_t LL_TIM_GetUpdateSource(TIM_TypeDef *TIMx)
;;;1115   {
;;;1116     return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_URS));
;;;1117   }
;;;1118   
;;;1119   /**
;;;1120     * @brief  Set one pulse mode (one shot v.s. repetitive).
;;;1121     * @rmtoll CR1          OPM           LL_TIM_SetOnePulseMode
;;;1122     * @param  TIMx Timer instance
;;;1123     * @param  OnePulseMode This parameter can be one of the following values:
;;;1124     *         @arg @ref LL_TIM_ONEPULSEMODE_SINGLE
;;;1125     *         @arg @ref LL_TIM_ONEPULSEMODE_REPETITIVE
;;;1126     * @retval None
;;;1127     */
;;;1128   __STATIC_INLINE void LL_TIM_SetOnePulseMode(TIM_TypeDef *TIMx, uint32_t OnePulseMode)
;;;1129   {
;;;1130     MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
;;;1131   }
;;;1132   
;;;1133   /**
;;;1134     * @brief  Get actual one pulse mode.
;;;1135     * @rmtoll CR1          OPM           LL_TIM_GetOnePulseMode
;;;1136     * @param  TIMx Timer instance
;;;1137     * @retval Returned value can be one of the following values:
;;;1138     *         @arg @ref LL_TIM_ONEPULSEMODE_SINGLE
;;;1139     *         @arg @ref LL_TIM_ONEPULSEMODE_REPETITIVE
;;;1140     */
;;;1141   __STATIC_INLINE uint32_t LL_TIM_GetOnePulseMode(TIM_TypeDef *TIMx)
;;;1142   {
;;;1143     return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_OPM));
;;;1144   }
;;;1145   
;;;1146   /**
;;;1147     * @brief  Set the timer counter counting mode.
;;;1148     * @note Macro @ref IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx) can be used to
;;;1149     *       check whether or not the counter mode selection feature is supported
;;;1150     *       by a timer instance.
;;;1151     * @rmtoll CR1          DIR           LL_TIM_SetCounterMode\n
;;;1152     *         CR1          CMS           LL_TIM_SetCounterMode
;;;1153     * @param  TIMx Timer instance
;;;1154     * @param  CounterMode This parameter can be one of the following values:
;;;1155     *         @arg @ref LL_TIM_COUNTERMODE_UP
;;;1156     *         @arg @ref LL_TIM_COUNTERMODE_DOWN
;;;1157     *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP
;;;1158     *         @arg @ref LL_TIM_COUNTERMODE_CENTER_DOWN
;;;1159     *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP_DOWN
;;;1160     * @retval None
;;;1161     */
;;;1162   __STATIC_INLINE void LL_TIM_SetCounterMode(TIM_TypeDef *TIMx, uint32_t CounterMode)
;;;1163   {
;;;1164     MODIFY_REG(TIMx->CR1, TIM_CR1_DIR | TIM_CR1_CMS, CounterMode);
;;;1165   }
;;;1166   
;;;1167   /**
;;;1168     * @brief  Get actual counter mode.
;;;1169     * @note Macro @ref IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx) can be used to
;;;1170     *       check whether or not the counter mode selection feature is supported
;;;1171     *       by a timer instance.
;;;1172     * @rmtoll CR1          DIR           LL_TIM_GetCounterMode\n
;;;1173     *         CR1          CMS           LL_TIM_GetCounterMode
;;;1174     * @param  TIMx Timer instance
;;;1175     * @retval Returned value can be one of the following values:
;;;1176     *         @arg @ref LL_TIM_COUNTERMODE_UP
;;;1177     *         @arg @ref LL_TIM_COUNTERMODE_DOWN
;;;1178     *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP
;;;1179     *         @arg @ref LL_TIM_COUNTERMODE_CENTER_DOWN
;;;1180     *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP_DOWN
;;;1181     */
;;;1182   __STATIC_INLINE uint32_t LL_TIM_GetCounterMode(TIM_TypeDef *TIMx)
;;;1183   {
;;;1184     return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR | TIM_CR1_CMS));
;;;1185   }
;;;1186   
;;;1187   /**
;;;1188     * @brief  Enable auto-reload (ARR) preload.
;;;1189     * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
;;;1190     * @param  TIMx Timer instance
;;;1191     * @retval None
;;;1192     */
;;;1193   __STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
;;;1194   {
;;;1195     SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
;;;1196   }
;;;1197   
;;;1198   /**
;;;1199     * @brief  Disable auto-reload (ARR) preload.
;;;1200     * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
;;;1201     * @param  TIMx Timer instance
;;;1202     * @retval None
;;;1203     */
;;;1204   __STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
;;;1205   {
;;;1206     CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
;;;1207   }
;;;1208   
;;;1209   /**
;;;1210     * @brief  Indicates whether auto-reload (ARR) preload is enabled.
;;;1211     * @rmtoll CR1          ARPE          LL_TIM_IsEnabledARRPreload
;;;1212     * @param  TIMx Timer instance
;;;1213     * @retval State of bit (1 or 0).
;;;1214     */
;;;1215   __STATIC_INLINE uint32_t LL_TIM_IsEnabledARRPreload(TIM_TypeDef *TIMx)
;;;1216   {
;;;1217     return (READ_BIT(TIMx->CR1, TIM_CR1_ARPE) == (TIM_CR1_ARPE));
;;;1218   }
;;;1219   
;;;1220   /**
;;;1221     * @brief  Set the division ratio between the timer clock  and the sampling clock used by the dead-time generators (when supported) and the digital filters.
;;;1222     * @note Macro @ref IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx) can be used to check
;;;1223     *       whether or not the clock division feature is supported by the timer
;;;1224     *       instance.
;;;1225     * @rmtoll CR1          CKD           LL_TIM_SetClockDivision
;;;1226     * @param  TIMx Timer instance
;;;1227     * @param  ClockDivision This parameter can be one of the following values:
;;;1228     *         @arg @ref LL_TIM_CLOCKDIVISION_DIV1
;;;1229     *         @arg @ref LL_TIM_CLOCKDIVISION_DIV2
;;;1230     *         @arg @ref LL_TIM_CLOCKDIVISION_DIV4
;;;1231     * @retval None
;;;1232     */
;;;1233   __STATIC_INLINE void LL_TIM_SetClockDivision(TIM_TypeDef *TIMx, uint32_t ClockDivision)
;;;1234   {
;;;1235     MODIFY_REG(TIMx->CR1, TIM_CR1_CKD, ClockDivision);
;;;1236   }
;;;1237   
;;;1238   /**
;;;1239     * @brief  Get the actual division ratio between the timer clock  and the sampling clock used by the dead-time generators (when supported) and the digital filters.
;;;1240     * @note Macro @ref IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx) can be used to check
;;;1241     *       whether or not the clock division feature is supported by the timer
;;;1242     *       instance.
;;;1243     * @rmtoll CR1          CKD           LL_TIM_GetClockDivision
;;;1244     * @param  TIMx Timer instance
;;;1245     * @retval Returned value can be one of the following values:
;;;1246     *         @arg @ref LL_TIM_CLOCKDIVISION_DIV1
;;;1247     *         @arg @ref LL_TIM_CLOCKDIVISION_DIV2
;;;1248     *         @arg @ref LL_TIM_CLOCKDIVISION_DIV4
;;;1249     */
;;;1250   __STATIC_INLINE uint32_t LL_TIM_GetClockDivision(TIM_TypeDef *TIMx)
;;;1251   {
;;;1252     return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_CKD));
;;;1253   }
;;;1254   
;;;1255   /**
;;;1256     * @brief  Set the counter value.
;;;1257     * @rmtoll CNT          CNT           LL_TIM_SetCounter
;;;1258     * @param  TIMx Timer instance
;;;1259     * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF)
;;;1260     * @retval None
;;;1261     */
;;;1262   __STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
;;;1263   {
;;;1264     WRITE_REG(TIMx->CNT, Counter);
;;;1265   }
;;;1266   
;;;1267   /**
;;;1268     * @brief  Get the counter value.
;;;1269     * @rmtoll CNT          CNT           LL_TIM_GetCounter
;;;1270     * @param  TIMx Timer instance
;;;1271     * @retval Counter value (between Min_Data=0 and Max_Data=0xFFFF)
;;;1272     */
;;;1273   __STATIC_INLINE uint32_t LL_TIM_GetCounter(TIM_TypeDef *TIMx)
;;;1274   {
;;;1275     return (uint32_t)(READ_REG(TIMx->CNT));
;;;1276   }
;;;1277   
;;;1278   /**
;;;1279     * @brief  Get the current direction of the counter
;;;1280     * @rmtoll CR1          DIR           LL_TIM_GetDirection
;;;1281     * @param  TIMx Timer instance
;;;1282     * @retval Returned value can be one of the following values:
;;;1283     *         @arg @ref LL_TIM_COUNTERDIRECTION_UP
;;;1284     *         @arg @ref LL_TIM_COUNTERDIRECTION_DOWN
;;;1285     */
;;;1286   __STATIC_INLINE uint32_t LL_TIM_GetDirection(TIM_TypeDef *TIMx)
;;;1287   {
;;;1288     return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
;;;1289   }
;;;1290   
;;;1291   /**
;;;1292     * @brief  Set the prescaler value.
;;;1293     * @note The counter clock frequency CK_CNT is equal to fCK_PSC / (PSC[15:0] + 1).
;;;1294     * @note The prescaler can be changed on the fly as this control register is buffered. The new
;;;1295     *       prescaler ratio is taken into account at the next update event.
;;;1296     * @note Helper macro @ref __LL_TIM_CALC_PSC can be used to calculate the Prescaler parameter
;;;1297     * @rmtoll PSC          PSC           LL_TIM_SetPrescaler
;;;1298     * @param  TIMx Timer instance
;;;1299     * @param  Prescaler between Min_Data=0 and Max_Data=65535
;;;1300     * @retval None
;;;1301     */
;;;1302   __STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
;;;1303   {
;;;1304     WRITE_REG(TIMx->PSC, Prescaler);
;;;1305   }
;;;1306   
;;;1307   /**
;;;1308     * @brief  Get the prescaler value.
;;;1309     * @rmtoll PSC          PSC           LL_TIM_GetPrescaler
;;;1310     * @param  TIMx Timer instance
;;;1311     * @retval  Prescaler value between Min_Data=0 and Max_Data=65535
;;;1312     */
;;;1313   __STATIC_INLINE uint32_t LL_TIM_GetPrescaler(TIM_TypeDef *TIMx)
;;;1314   {
;;;1315     return (uint32_t)(READ_REG(TIMx->PSC));
;;;1316   }
;;;1317   
;;;1318   /**
;;;1319     * @brief  Set the auto-reload value.
;;;1320     * @note The counter is blocked while the auto-reload value is null.
;;;1321     * @note Helper macro @ref __LL_TIM_CALC_ARR can be used to calculate the AutoReload parameter
;;;1322     * @rmtoll ARR          ARR           LL_TIM_SetAutoReload
;;;1323     * @param  TIMx Timer instance
;;;1324     * @param  AutoReload between Min_Data=0 and Max_Data=65535
;;;1325     * @retval None
;;;1326     */
;;;1327   __STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
;;;1328   {
;;;1329     WRITE_REG(TIMx->ARR, AutoReload);
;;;1330   }
;;;1331   
;;;1332   /**
;;;1333     * @brief  Get the auto-reload value.
;;;1334     * @rmtoll ARR          ARR           LL_TIM_GetAutoReload
;;;1335     * @param  TIMx Timer instance
;;;1336     * @retval Auto-reload value
;;;1337     */
;;;1338   __STATIC_INLINE uint32_t LL_TIM_GetAutoReload(TIM_TypeDef *TIMx)
;;;1339   {
;;;1340     return (uint32_t)(READ_REG(TIMx->ARR));
;;;1341   }
;;;1342   
;;;1343   /**
;;;1344     * @brief  Set the repetition counter value.
;;;1345     * @note Macro @ref IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx) can be used to check
;;;1346     *       whether or not a timer instance supports a repetition counter.
;;;1347     * @rmtoll RCR          REP           LL_TIM_SetRepetitionCounter
;;;1348     * @param  TIMx Timer instance
;;;1349     * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
;;;1350     * @retval None
;;;1351     */
;;;1352   __STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
;;;1353   {
;;;1354     WRITE_REG(TIMx->RCR, RepetitionCounter);
;;;1355   }
;;;1356   
;;;1357   /**
;;;1358     * @brief  Get the repetition counter value.
;;;1359     * @note Macro @ref IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx) can be used to check
;;;1360     *       whether or not a timer instance supports a repetition counter.
;;;1361     * @rmtoll RCR          REP           LL_TIM_GetRepetitionCounter
;;;1362     * @param  TIMx Timer instance
;;;1363     * @retval Repetition counter value
;;;1364     */
;;;1365   __STATIC_INLINE uint32_t LL_TIM_GetRepetitionCounter(TIM_TypeDef *TIMx)
;;;1366   {
;;;1367     return (uint32_t)(READ_REG(TIMx->RCR));
;;;1368   }
;;;1369   
;;;1370   /**
;;;1371     * @}
;;;1372     */
;;;1373   
;;;1374   /** @defgroup TIM_LL_EF_Capture_Compare Capture Compare configuration
;;;1375     * @{
;;;1376     */
;;;1377   /**
;;;1378     * @brief  Enable  the capture/compare control bits (CCxE, CCxNE and OCxM) preload.
;;;1379     * @note CCxE, CCxNE and OCxM bits are preloaded, after having been written,
;;;1380     *       they are updated only when a commutation event (COM) occurs.
;;;1381     * @note Only on channels that have a complementary output.
;;;1382     * @note Macro @ref IS_TIM_COMMUTATION_EVENT_INSTANCE(TIMx) can be used to check
;;;1383     *       whether or not a timer instance is able to generate a commutation event.
;;;1384     * @rmtoll CR2          CCPC          LL_TIM_CC_EnablePreload
;;;1385     * @param  TIMx Timer instance
;;;1386     * @retval None
;;;1387     */
;;;1388   __STATIC_INLINE void LL_TIM_CC_EnablePreload(TIM_TypeDef *TIMx)
;;;1389   {
;;;1390     SET_BIT(TIMx->CR2, TIM_CR2_CCPC);
;;;1391   }
;;;1392   
;;;1393   /**
;;;1394     * @brief  Disable  the capture/compare control bits (CCxE, CCxNE and OCxM) preload.
;;;1395     * @note Macro @ref IS_TIM_COMMUTATION_EVENT_INSTANCE(TIMx) can be used to check
;;;1396     *       whether or not a timer instance is able to generate a commutation event.
;;;1397     * @rmtoll CR2          CCPC          LL_TIM_CC_DisablePreload
;;;1398     * @param  TIMx Timer instance
;;;1399     * @retval None
;;;1400     */
;;;1401   __STATIC_INLINE void LL_TIM_CC_DisablePreload(TIM_TypeDef *TIMx)
;;;1402   {
;;;1403     CLEAR_BIT(TIMx->CR2, TIM_CR2_CCPC);
;;;1404   }
;;;1405   
;;;1406   /**
;;;1407     * @brief  Set the updated source of the capture/compare control bits (CCxE, CCxNE and OCxM).
;;;1408     * @note Macro @ref IS_TIM_COMMUTATION_EVENT_INSTANCE(TIMx) can be used to check
;;;1409     *       whether or not a timer instance is able to generate a commutation event.
;;;1410     * @rmtoll CR2          CCUS          LL_TIM_CC_SetUpdate
;;;1411     * @param  TIMx Timer instance
;;;1412     * @param  CCUpdateSource This parameter can be one of the following values:
;;;1413     *         @arg @ref LL_TIM_CCUPDATESOURCE_COMG_ONLY
;;;1414     *         @arg @ref LL_TIM_CCUPDATESOURCE_COMG_AND_TRGI
;;;1415     * @retval None
;;;1416     */
;;;1417   __STATIC_INLINE void LL_TIM_CC_SetUpdate(TIM_TypeDef *TIMx, uint32_t CCUpdateSource)
;;;1418   {
;;;1419     MODIFY_REG(TIMx->CR2, TIM_CR2_CCUS, CCUpdateSource);
;;;1420   }
;;;1421   
;;;1422   /**
;;;1423     * @brief  Set the trigger of the capture/compare DMA request.
;;;1424     * @rmtoll CR2          CCDS          LL_TIM_CC_SetDMAReqTrigger
;;;1425     * @param  TIMx Timer instance
;;;1426     * @param  DMAReqTrigger This parameter can be one of the following values:
;;;1427     *         @arg @ref LL_TIM_CCDMAREQUEST_CC
;;;1428     *         @arg @ref LL_TIM_CCDMAREQUEST_UPDATE
;;;1429     * @retval None
;;;1430     */
;;;1431   __STATIC_INLINE void LL_TIM_CC_SetDMAReqTrigger(TIM_TypeDef *TIMx, uint32_t DMAReqTrigger)
;;;1432   {
;;;1433     MODIFY_REG(TIMx->CR2, TIM_CR2_CCDS, DMAReqTrigger);
;;;1434   }
;;;1435   
;;;1436   /**
;;;1437     * @brief  Get actual trigger of the capture/compare DMA request.
;;;1438     * @rmtoll CR2          CCDS          LL_TIM_CC_GetDMAReqTrigger
;;;1439     * @param  TIMx Timer instance
;;;1440     * @retval Returned value can be one of the following values:
;;;1441     *         @arg @ref LL_TIM_CCDMAREQUEST_CC
;;;1442     *         @arg @ref LL_TIM_CCDMAREQUEST_UPDATE
;;;1443     */
;;;1444   __STATIC_INLINE uint32_t LL_TIM_CC_GetDMAReqTrigger(TIM_TypeDef *TIMx)
;;;1445   {
;;;1446     return (uint32_t)(READ_BIT(TIMx->CR2, TIM_CR2_CCDS));
;;;1447   }
;;;1448   
;;;1449   /**
;;;1450     * @brief  Set the lock level to freeze the
;;;1451     *         configuration of several capture/compare parameters.
;;;1452     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;1453     *       the lock mechanism is supported by a timer instance.
;;;1454     * @rmtoll BDTR         LOCK          LL_TIM_CC_SetLockLevel
;;;1455     * @param  TIMx Timer instance
;;;1456     * @param  LockLevel This parameter can be one of the following values:
;;;1457     *         @arg @ref LL_TIM_LOCKLEVEL_OFF
;;;1458     *         @arg @ref LL_TIM_LOCKLEVEL_1
;;;1459     *         @arg @ref LL_TIM_LOCKLEVEL_2
;;;1460     *         @arg @ref LL_TIM_LOCKLEVEL_3
;;;1461     * @retval None
;;;1462     */
;;;1463   __STATIC_INLINE void LL_TIM_CC_SetLockLevel(TIM_TypeDef *TIMx, uint32_t LockLevel)
;;;1464   {
;;;1465     MODIFY_REG(TIMx->BDTR, TIM_BDTR_LOCK, LockLevel);
;;;1466   }
;;;1467   
;;;1468   /**
;;;1469     * @brief  Enable capture/compare channels.
;;;1470     * @rmtoll CCER         CC1E          LL_TIM_CC_EnableChannel\n
;;;1471     *         CCER         CC1NE         LL_TIM_CC_EnableChannel\n
;;;1472     *         CCER         CC2E          LL_TIM_CC_EnableChannel\n
;;;1473     *         CCER         CC2NE         LL_TIM_CC_EnableChannel\n
;;;1474     *         CCER         CC3E          LL_TIM_CC_EnableChannel\n
;;;1475     *         CCER         CC3NE         LL_TIM_CC_EnableChannel\n
;;;1476     *         CCER         CC4E          LL_TIM_CC_EnableChannel
;;;1477     * @param  TIMx Timer instance
;;;1478     * @param  Channels This parameter can be a combination of the following values:
;;;1479     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1480     *         @arg @ref LL_TIM_CHANNEL_CH1N
;;;1481     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1482     *         @arg @ref LL_TIM_CHANNEL_CH2N
;;;1483     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1484     *         @arg @ref LL_TIM_CHANNEL_CH3N
;;;1485     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1486     * @retval None
;;;1487     */
;;;1488   __STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
;;;1489   {
;;;1490     SET_BIT(TIMx->CCER, Channels);
;;;1491   }
;;;1492   
;;;1493   /**
;;;1494     * @brief  Disable capture/compare channels.
;;;1495     * @rmtoll CCER         CC1E          LL_TIM_CC_DisableChannel\n
;;;1496     *         CCER         CC1NE         LL_TIM_CC_DisableChannel\n
;;;1497     *         CCER         CC2E          LL_TIM_CC_DisableChannel\n
;;;1498     *         CCER         CC2NE         LL_TIM_CC_DisableChannel\n
;;;1499     *         CCER         CC3E          LL_TIM_CC_DisableChannel\n
;;;1500     *         CCER         CC3NE         LL_TIM_CC_DisableChannel\n
;;;1501     *         CCER         CC4E          LL_TIM_CC_DisableChannel
;;;1502     * @param  TIMx Timer instance
;;;1503     * @param  Channels This parameter can be a combination of the following values:
;;;1504     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1505     *         @arg @ref LL_TIM_CHANNEL_CH1N
;;;1506     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1507     *         @arg @ref LL_TIM_CHANNEL_CH2N
;;;1508     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1509     *         @arg @ref LL_TIM_CHANNEL_CH3N
;;;1510     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1511     * @retval None
;;;1512     */
;;;1513   __STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
;;;1514   {
;;;1515     CLEAR_BIT(TIMx->CCER, Channels);
;;;1516   }
;;;1517   
;;;1518   /**
;;;1519     * @brief  Indicate whether channel(s) is(are) enabled.
;;;1520     * @rmtoll CCER         CC1E          LL_TIM_CC_IsEnabledChannel\n
;;;1521     *         CCER         CC1NE         LL_TIM_CC_IsEnabledChannel\n
;;;1522     *         CCER         CC2E          LL_TIM_CC_IsEnabledChannel\n
;;;1523     *         CCER         CC2NE         LL_TIM_CC_IsEnabledChannel\n
;;;1524     *         CCER         CC3E          LL_TIM_CC_IsEnabledChannel\n
;;;1525     *         CCER         CC3NE         LL_TIM_CC_IsEnabledChannel\n
;;;1526     *         CCER         CC4E          LL_TIM_CC_IsEnabledChannel
;;;1527     * @param  TIMx Timer instance
;;;1528     * @param  Channels This parameter can be a combination of the following values:
;;;1529     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1530     *         @arg @ref LL_TIM_CHANNEL_CH1N
;;;1531     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1532     *         @arg @ref LL_TIM_CHANNEL_CH2N
;;;1533     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1534     *         @arg @ref LL_TIM_CHANNEL_CH3N
;;;1535     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1536     * @retval State of bit (1 or 0).
;;;1537     */
;;;1538   __STATIC_INLINE uint32_t LL_TIM_CC_IsEnabledChannel(TIM_TypeDef *TIMx, uint32_t Channels)
;;;1539   {
;;;1540     return (READ_BIT(TIMx->CCER, Channels) == (Channels));
;;;1541   }
;;;1542   
;;;1543   /**
;;;1544     * @}
;;;1545     */
;;;1546   
;;;1547   /** @defgroup TIM_LL_EF_Output_Channel Output channel configuration
;;;1548     * @{
;;;1549     */
;;;1550   /**
;;;1551     * @brief  Configure an output channel.
;;;1552     * @rmtoll CCMR1        CC1S          LL_TIM_OC_ConfigOutput\n
;;;1553     *         CCMR1        CC2S          LL_TIM_OC_ConfigOutput\n
;;;1554     *         CCMR2        CC3S          LL_TIM_OC_ConfigOutput\n
;;;1555     *         CCMR2        CC4S          LL_TIM_OC_ConfigOutput\n
;;;1556     *         CCER         CC1P          LL_TIM_OC_ConfigOutput\n
;;;1557     *         CCER         CC2P          LL_TIM_OC_ConfigOutput\n
;;;1558     *         CCER         CC3P          LL_TIM_OC_ConfigOutput\n
;;;1559     *         CCER         CC4P          LL_TIM_OC_ConfigOutput\n
;;;1560     *         CR2          OIS1          LL_TIM_OC_ConfigOutput\n
;;;1561     *         CR2          OIS2          LL_TIM_OC_ConfigOutput\n
;;;1562     *         CR2          OIS3          LL_TIM_OC_ConfigOutput\n
;;;1563     *         CR2          OIS4          LL_TIM_OC_ConfigOutput
;;;1564     * @param  TIMx Timer instance
;;;1565     * @param  Channel This parameter can be one of the following values:
;;;1566     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1567     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1568     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1569     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1570     * @param  Configuration This parameter must be a combination of all the following values:
;;;1571     *         @arg @ref LL_TIM_OCPOLARITY_HIGH or @ref LL_TIM_OCPOLARITY_LOW
;;;1572     *         @arg @ref LL_TIM_OCIDLESTATE_LOW or @ref LL_TIM_OCIDLESTATE_HIGH
;;;1573     * @retval None
;;;1574     */
;;;1575   __STATIC_INLINE void LL_TIM_OC_ConfigOutput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Configuration)
;;;1576   {
;;;1577     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1578     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1579     CLEAR_BIT(*pReg, (TIM_CCMR1_CC1S << SHIFT_TAB_OCxx[iChannel]));
;;;1580     MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),
;;;1581                (Configuration & TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]);
;;;1582     MODIFY_REG(TIMx->CR2, (TIM_CR2_OIS1 << SHIFT_TAB_OISx[iChannel]),
;;;1583                (Configuration & TIM_CR2_OIS1) << SHIFT_TAB_OISx[iChannel]);
;;;1584   }
;;;1585   
;;;1586   /**
;;;1587     * @brief  Define the behavior of the output reference signal OCxREF from which
;;;1588     *         OCx and OCxN (when relevant) are derived.
;;;1589     * @rmtoll CCMR1        OC1M          LL_TIM_OC_SetMode\n
;;;1590     *         CCMR1        OC2M          LL_TIM_OC_SetMode\n
;;;1591     *         CCMR2        OC3M          LL_TIM_OC_SetMode\n
;;;1592     *         CCMR2        OC4M          LL_TIM_OC_SetMode
;;;1593     * @param  TIMx Timer instance
;;;1594     * @param  Channel This parameter can be one of the following values:
;;;1595     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1596     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1597     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1598     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1599     * @param  Mode This parameter can be one of the following values:
;;;1600     *         @arg @ref LL_TIM_OCMODE_FROZEN
;;;1601     *         @arg @ref LL_TIM_OCMODE_ACTIVE
;;;1602     *         @arg @ref LL_TIM_OCMODE_INACTIVE
;;;1603     *         @arg @ref LL_TIM_OCMODE_TOGGLE
;;;1604     *         @arg @ref LL_TIM_OCMODE_FORCED_INACTIVE
;;;1605     *         @arg @ref LL_TIM_OCMODE_FORCED_ACTIVE
;;;1606     *         @arg @ref LL_TIM_OCMODE_PWM1
;;;1607     *         @arg @ref LL_TIM_OCMODE_PWM2
;;;1608     * @retval None
;;;1609     */
;;;1610   __STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
;;;1611   {
;;;1612     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1613     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1614     MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
;;;1615   }
;;;1616   
;;;1617   /**
;;;1618     * @brief  Get the output compare mode of an output channel.
;;;1619     * @rmtoll CCMR1        OC1M          LL_TIM_OC_GetMode\n
;;;1620     *         CCMR1        OC2M          LL_TIM_OC_GetMode\n
;;;1621     *         CCMR2        OC3M          LL_TIM_OC_GetMode\n
;;;1622     *         CCMR2        OC4M          LL_TIM_OC_GetMode
;;;1623     * @param  TIMx Timer instance
;;;1624     * @param  Channel This parameter can be one of the following values:
;;;1625     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1626     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1627     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1628     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1629     * @retval Returned value can be one of the following values:
;;;1630     *         @arg @ref LL_TIM_OCMODE_FROZEN
;;;1631     *         @arg @ref LL_TIM_OCMODE_ACTIVE
;;;1632     *         @arg @ref LL_TIM_OCMODE_INACTIVE
;;;1633     *         @arg @ref LL_TIM_OCMODE_TOGGLE
;;;1634     *         @arg @ref LL_TIM_OCMODE_FORCED_INACTIVE
;;;1635     *         @arg @ref LL_TIM_OCMODE_FORCED_ACTIVE
;;;1636     *         @arg @ref LL_TIM_OCMODE_PWM1
;;;1637     *         @arg @ref LL_TIM_OCMODE_PWM2
;;;1638     */
;;;1639   __STATIC_INLINE uint32_t LL_TIM_OC_GetMode(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1640   {
;;;1641     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1642     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1643     return (READ_BIT(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel])) >> SHIFT_TAB_OCxx[iChannel]);
;;;1644   }
;;;1645   
;;;1646   /**
;;;1647     * @brief  Set the polarity of an output channel.
;;;1648     * @rmtoll CCER         CC1P          LL_TIM_OC_SetPolarity\n
;;;1649     *         CCER         CC1NP         LL_TIM_OC_SetPolarity\n
;;;1650     *         CCER         CC2P          LL_TIM_OC_SetPolarity\n
;;;1651     *         CCER         CC2NP         LL_TIM_OC_SetPolarity\n
;;;1652     *         CCER         CC3P          LL_TIM_OC_SetPolarity\n
;;;1653     *         CCER         CC3NP         LL_TIM_OC_SetPolarity\n
;;;1654     *         CCER         CC4P          LL_TIM_OC_SetPolarity
;;;1655     * @param  TIMx Timer instance
;;;1656     * @param  Channel This parameter can be one of the following values:
;;;1657     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1658     *         @arg @ref LL_TIM_CHANNEL_CH1N
;;;1659     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1660     *         @arg @ref LL_TIM_CHANNEL_CH2N
;;;1661     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1662     *         @arg @ref LL_TIM_CHANNEL_CH3N
;;;1663     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1664     * @param  Polarity This parameter can be one of the following values:
;;;1665     *         @arg @ref LL_TIM_OCPOLARITY_HIGH
;;;1666     *         @arg @ref LL_TIM_OCPOLARITY_LOW
;;;1667     * @retval None
;;;1668     */
;;;1669   __STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
;;;1670   {
;;;1671     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1672     MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
;;;1673   }
;;;1674   
;;;1675   /**
;;;1676     * @brief  Get the polarity of an output channel.
;;;1677     * @rmtoll CCER         CC1P          LL_TIM_OC_GetPolarity\n
;;;1678     *         CCER         CC1NP         LL_TIM_OC_GetPolarity\n
;;;1679     *         CCER         CC2P          LL_TIM_OC_GetPolarity\n
;;;1680     *         CCER         CC2NP         LL_TIM_OC_GetPolarity\n
;;;1681     *         CCER         CC3P          LL_TIM_OC_GetPolarity\n
;;;1682     *         CCER         CC3NP         LL_TIM_OC_GetPolarity\n
;;;1683     *         CCER         CC4P          LL_TIM_OC_GetPolarity
;;;1684     * @param  TIMx Timer instance
;;;1685     * @param  Channel This parameter can be one of the following values:
;;;1686     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1687     *         @arg @ref LL_TIM_CHANNEL_CH1N
;;;1688     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1689     *         @arg @ref LL_TIM_CHANNEL_CH2N
;;;1690     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1691     *         @arg @ref LL_TIM_CHANNEL_CH3N
;;;1692     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1693     * @retval Returned value can be one of the following values:
;;;1694     *         @arg @ref LL_TIM_OCPOLARITY_HIGH
;;;1695     *         @arg @ref LL_TIM_OCPOLARITY_LOW
;;;1696     */
;;;1697   __STATIC_INLINE uint32_t LL_TIM_OC_GetPolarity(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1698   {
;;;1699     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1700     return (READ_BIT(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel])) >> SHIFT_TAB_CCxP[iChannel]);
;;;1701   }
;;;1702   
;;;1703   /**
;;;1704     * @brief  Set the IDLE state of an output channel
;;;1705     * @note This function is significant only for the timer instances
;;;1706     *       supporting the break feature. Macro @ref IS_TIM_BREAK_INSTANCE(TIMx)
;;;1707     *       can be used to check whether or not a timer instance provides
;;;1708     *       a break input.
;;;1709     * @rmtoll CR2         OIS1          LL_TIM_OC_SetIdleState\n
;;;1710     *         CR2         OIS1N         LL_TIM_OC_SetIdleState\n
;;;1711     *         CR2         OIS2          LL_TIM_OC_SetIdleState\n
;;;1712     *         CR2         OIS2N         LL_TIM_OC_SetIdleState\n
;;;1713     *         CR2         OIS3          LL_TIM_OC_SetIdleState\n
;;;1714     *         CR2         OIS3N         LL_TIM_OC_SetIdleState\n
;;;1715     *         CR2         OIS4          LL_TIM_OC_SetIdleState
;;;1716     * @param  TIMx Timer instance
;;;1717     * @param  Channel This parameter can be one of the following values:
;;;1718     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1719     *         @arg @ref LL_TIM_CHANNEL_CH1N
;;;1720     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1721     *         @arg @ref LL_TIM_CHANNEL_CH2N
;;;1722     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1723     *         @arg @ref LL_TIM_CHANNEL_CH3N
;;;1724     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1725     * @param  IdleState This parameter can be one of the following values:
;;;1726     *         @arg @ref LL_TIM_OCIDLESTATE_LOW
;;;1727     *         @arg @ref LL_TIM_OCIDLESTATE_HIGH
;;;1728     * @retval None
;;;1729     */
;;;1730   __STATIC_INLINE void LL_TIM_OC_SetIdleState(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t IdleState)
;;;1731   {
;;;1732     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1733     MODIFY_REG(TIMx->CR2, (TIM_CR2_OIS1 << SHIFT_TAB_OISx[iChannel]),  IdleState << SHIFT_TAB_OISx[iChannel]);
;;;1734   }
;;;1735   
;;;1736   /**
;;;1737     * @brief  Get the IDLE state of an output channel
;;;1738     * @rmtoll CR2         OIS1          LL_TIM_OC_GetIdleState\n
;;;1739     *         CR2         OIS1N         LL_TIM_OC_GetIdleState\n
;;;1740     *         CR2         OIS2          LL_TIM_OC_GetIdleState\n
;;;1741     *         CR2         OIS2N         LL_TIM_OC_GetIdleState\n
;;;1742     *         CR2         OIS3          LL_TIM_OC_GetIdleState\n
;;;1743     *         CR2         OIS3N         LL_TIM_OC_GetIdleState\n
;;;1744     *         CR2         OIS4          LL_TIM_OC_GetIdleState
;;;1745     * @param  TIMx Timer instance
;;;1746     * @param  Channel This parameter can be one of the following values:
;;;1747     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1748     *         @arg @ref LL_TIM_CHANNEL_CH1N
;;;1749     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1750     *         @arg @ref LL_TIM_CHANNEL_CH2N
;;;1751     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1752     *         @arg @ref LL_TIM_CHANNEL_CH3N
;;;1753     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1754     * @retval Returned value can be one of the following values:
;;;1755     *         @arg @ref LL_TIM_OCIDLESTATE_LOW
;;;1756     *         @arg @ref LL_TIM_OCIDLESTATE_HIGH
;;;1757     */
;;;1758   __STATIC_INLINE uint32_t LL_TIM_OC_GetIdleState(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1759   {
;;;1760     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1761     return (READ_BIT(TIMx->CR2, (TIM_CR2_OIS1 << SHIFT_TAB_OISx[iChannel])) >> SHIFT_TAB_OISx[iChannel]);
;;;1762   }
;;;1763   
;;;1764   /**
;;;1765     * @brief  Enable fast mode for the output channel.
;;;1766     * @note Acts only if the channel is configured in PWM1 or PWM2 mode.
;;;1767     * @rmtoll CCMR1        OC1FE          LL_TIM_OC_EnableFast\n
;;;1768     *         CCMR1        OC2FE          LL_TIM_OC_EnableFast\n
;;;1769     *         CCMR2        OC3FE          LL_TIM_OC_EnableFast\n
;;;1770     *         CCMR2        OC4FE          LL_TIM_OC_EnableFast
;;;1771     * @param  TIMx Timer instance
;;;1772     * @param  Channel This parameter can be one of the following values:
;;;1773     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1774     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1775     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1776     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1777     * @retval None
;;;1778     */
;;;1779   __STATIC_INLINE void LL_TIM_OC_EnableFast(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1780   {
;;;1781     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1782     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1783     SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
;;;1784   
;;;1785   }
;;;1786   
;;;1787   /**
;;;1788     * @brief  Disable fast mode for the output channel.
;;;1789     * @rmtoll CCMR1        OC1FE          LL_TIM_OC_DisableFast\n
;;;1790     *         CCMR1        OC2FE          LL_TIM_OC_DisableFast\n
;;;1791     *         CCMR2        OC3FE          LL_TIM_OC_DisableFast\n
;;;1792     *         CCMR2        OC4FE          LL_TIM_OC_DisableFast
;;;1793     * @param  TIMx Timer instance
;;;1794     * @param  Channel This parameter can be one of the following values:
;;;1795     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1796     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1797     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1798     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1799     * @retval None
;;;1800     */
;;;1801   __STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1802   {
;;;1803     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1804     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1805     CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
;;;1806   
;;;1807   }
;;;1808   
;;;1809   /**
;;;1810     * @brief  Indicates whether fast mode is enabled for the output channel.
;;;1811     * @rmtoll CCMR1        OC1FE          LL_TIM_OC_IsEnabledFast\n
;;;1812     *         CCMR1        OC2FE          LL_TIM_OC_IsEnabledFast\n
;;;1813     *         CCMR2        OC3FE          LL_TIM_OC_IsEnabledFast\n
;;;1814     *         CCMR2        OC4FE          LL_TIM_OC_IsEnabledFast\n
;;;1815     * @param  TIMx Timer instance
;;;1816     * @param  Channel This parameter can be one of the following values:
;;;1817     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1818     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1819     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1820     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1821     * @retval State of bit (1 or 0).
;;;1822     */
;;;1823   __STATIC_INLINE uint32_t LL_TIM_OC_IsEnabledFast(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1824   {
;;;1825     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1826     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1827     register uint32_t bitfield = TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel];
;;;1828     return (READ_BIT(*pReg, bitfield) == bitfield);
;;;1829   }
;;;1830   
;;;1831   /**
;;;1832     * @brief  Enable compare register (TIMx_CCRx) preload for the output channel.
;;;1833     * @rmtoll CCMR1        OC1PE          LL_TIM_OC_EnablePreload\n
;;;1834     *         CCMR1        OC2PE          LL_TIM_OC_EnablePreload\n
;;;1835     *         CCMR2        OC3PE          LL_TIM_OC_EnablePreload\n
;;;1836     *         CCMR2        OC4PE          LL_TIM_OC_EnablePreload
;;;1837     * @param  TIMx Timer instance
;;;1838     * @param  Channel This parameter can be one of the following values:
;;;1839     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1840     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1841     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1842     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1843     * @retval None
;;;1844     */
;;;1845   __STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1846   {
;;;1847     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1848     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1849     SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
;;;1850   }
;;;1851   
;;;1852   /**
;;;1853     * @brief  Disable compare register (TIMx_CCRx) preload for the output channel.
;;;1854     * @rmtoll CCMR1        OC1PE          LL_TIM_OC_DisablePreload\n
;;;1855     *         CCMR1        OC2PE          LL_TIM_OC_DisablePreload\n
;;;1856     *         CCMR2        OC3PE          LL_TIM_OC_DisablePreload\n
;;;1857     *         CCMR2        OC4PE          LL_TIM_OC_DisablePreload
;;;1858     * @param  TIMx Timer instance
;;;1859     * @param  Channel This parameter can be one of the following values:
;;;1860     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1861     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1862     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1863     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1864     * @retval None
;;;1865     */
;;;1866   __STATIC_INLINE void LL_TIM_OC_DisablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1867   {
;;;1868     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1869     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1870     CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
;;;1871   }
;;;1872   
;;;1873   /**
;;;1874     * @brief  Indicates whether compare register (TIMx_CCRx) preload is enabled for the output channel.
;;;1875     * @rmtoll CCMR1        OC1PE          LL_TIM_OC_IsEnabledPreload\n
;;;1876     *         CCMR1        OC2PE          LL_TIM_OC_IsEnabledPreload\n
;;;1877     *         CCMR2        OC3PE          LL_TIM_OC_IsEnabledPreload\n
;;;1878     *         CCMR2        OC4PE          LL_TIM_OC_IsEnabledPreload\n
;;;1879     * @param  TIMx Timer instance
;;;1880     * @param  Channel This parameter can be one of the following values:
;;;1881     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1882     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1883     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1884     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1885     * @retval State of bit (1 or 0).
;;;1886     */
;;;1887   __STATIC_INLINE uint32_t LL_TIM_OC_IsEnabledPreload(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1888   {
;;;1889     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1890     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1891     register uint32_t bitfield = TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel];
;;;1892     return (READ_BIT(*pReg, bitfield) == bitfield);
;;;1893   }
;;;1894   
;;;1895   /**
;;;1896     * @brief  Enable clearing the output channel on an external event.
;;;1897     * @note This function can only be used in Output compare and PWM modes. It does not work in Forced mode.
;;;1898     * @note Macro @ref IS_TIM_OCXREF_CLEAR_INSTANCE(TIMx) can be used to check whether
;;;1899     *       or not a timer instance can clear the OCxREF signal on an external event.
;;;1900     * @rmtoll CCMR1        OC1CE          LL_TIM_OC_EnableClear\n
;;;1901     *         CCMR1        OC2CE          LL_TIM_OC_EnableClear\n
;;;1902     *         CCMR2        OC3CE          LL_TIM_OC_EnableClear\n
;;;1903     *         CCMR2        OC4CE          LL_TIM_OC_EnableClear
;;;1904     * @param  TIMx Timer instance
;;;1905     * @param  Channel This parameter can be one of the following values:
;;;1906     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1907     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1908     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1909     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1910     * @retval None
;;;1911     */
;;;1912   __STATIC_INLINE void LL_TIM_OC_EnableClear(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1913   {
;;;1914     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1915     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1916     SET_BIT(*pReg, (TIM_CCMR1_OC1CE << SHIFT_TAB_OCxx[iChannel]));
;;;1917   }
;;;1918   
;;;1919   /**
;;;1920     * @brief  Disable clearing the output channel on an external event.
;;;1921     * @note Macro @ref IS_TIM_OCXREF_CLEAR_INSTANCE(TIMx) can be used to check whether
;;;1922     *       or not a timer instance can clear the OCxREF signal on an external event.
;;;1923     * @rmtoll CCMR1        OC1CE          LL_TIM_OC_DisableClear\n
;;;1924     *         CCMR1        OC2CE          LL_TIM_OC_DisableClear\n
;;;1925     *         CCMR2        OC3CE          LL_TIM_OC_DisableClear\n
;;;1926     *         CCMR2        OC4CE          LL_TIM_OC_DisableClear
;;;1927     * @param  TIMx Timer instance
;;;1928     * @param  Channel This parameter can be one of the following values:
;;;1929     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1930     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1931     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1932     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1933     * @retval None
;;;1934     */
;;;1935   __STATIC_INLINE void LL_TIM_OC_DisableClear(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1936   {
;;;1937     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1938     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1939     CLEAR_BIT(*pReg, (TIM_CCMR1_OC1CE << SHIFT_TAB_OCxx[iChannel]));
;;;1940   }
;;;1941   
;;;1942   /**
;;;1943     * @brief  Indicates clearing the output channel on an external event is enabled for the output channel.
;;;1944     * @note This function enables clearing the output channel on an external event.
;;;1945     * @note This function can only be used in Output compare and PWM modes. It does not work in Forced mode.
;;;1946     * @note Macro @ref IS_TIM_OCXREF_CLEAR_INSTANCE(TIMx) can be used to check whether
;;;1947     *       or not a timer instance can clear the OCxREF signal on an external event.
;;;1948     * @rmtoll CCMR1        OC1CE          LL_TIM_OC_IsEnabledClear\n
;;;1949     *         CCMR1        OC2CE          LL_TIM_OC_IsEnabledClear\n
;;;1950     *         CCMR2        OC3CE          LL_TIM_OC_IsEnabledClear\n
;;;1951     *         CCMR2        OC4CE          LL_TIM_OC_IsEnabledClear\n
;;;1952     * @param  TIMx Timer instance
;;;1953     * @param  Channel This parameter can be one of the following values:
;;;1954     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1955     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1956     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1957     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1958     * @retval State of bit (1 or 0).
;;;1959     */
;;;1960   __STATIC_INLINE uint32_t LL_TIM_OC_IsEnabledClear(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1961   {
;;;1962     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1963     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1964     register uint32_t bitfield = TIM_CCMR1_OC1CE << SHIFT_TAB_OCxx[iChannel];
;;;1965     return (READ_BIT(*pReg, bitfield) == bitfield);
;;;1966   }
;;;1967   
;;;1968   /**
;;;1969     * @brief  Set the dead-time delay (delay inserted between the rising edge of the OCxREF signal and the rising edge if the Ocx and OCxN signals).
;;;1970     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;1971     *       dead-time insertion feature is supported by a timer instance.
;;;1972     * @note Helper macro @ref __LL_TIM_CALC_DEADTIME can be used to calculate the DeadTime parameter
;;;1973     * @rmtoll BDTR         DTG           LL_TIM_OC_SetDeadTime
;;;1974     * @param  TIMx Timer instance
;;;1975     * @param  DeadTime between Min_Data=0 and Max_Data=255
;;;1976     * @retval None
;;;1977     */
;;;1978   __STATIC_INLINE void LL_TIM_OC_SetDeadTime(TIM_TypeDef *TIMx, uint32_t DeadTime)
;;;1979   {
;;;1980     MODIFY_REG(TIMx->BDTR, TIM_BDTR_DTG, DeadTime);
;;;1981   }
;;;1982   
;;;1983   /**
;;;1984     * @brief  Set compare value for output channel 1 (TIMx_CCR1).
;;;1985     * @note Macro @ref IS_TIM_CC1_INSTANCE(TIMx) can be used to check whether or not
;;;1986     *       output channel 1 is supported by a timer instance.
;;;1987     * @rmtoll CCR1         CCR1          LL_TIM_OC_SetCompareCH1
;;;1988     * @param  TIMx Timer instance
;;;1989     * @param  CompareValue between Min_Data=0 and Max_Data=65535
;;;1990     * @retval None
;;;1991     */
;;;1992   __STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
;;;1993   {
;;;1994     WRITE_REG(TIMx->CCR1, CompareValue);
;;;1995   }
;;;1996   
;;;1997   /**
;;;1998     * @brief  Set compare value for output channel 2 (TIMx_CCR2).
;;;1999     * @note Macro @ref IS_TIM_CC2_INSTANCE(TIMx) can be used to check whether or not
;;;2000     *       output channel 2 is supported by a timer instance.
;;;2001     * @rmtoll CCR2         CCR2          LL_TIM_OC_SetCompareCH2
;;;2002     * @param  TIMx Timer instance
;;;2003     * @param  CompareValue between Min_Data=0 and Max_Data=65535
;;;2004     * @retval None
;;;2005     */
;;;2006   __STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
;;;2007   {
;;;2008     WRITE_REG(TIMx->CCR2, CompareValue);
;;;2009   }
;;;2010   
;;;2011   /**
;;;2012     * @brief  Set compare value for output channel 3 (TIMx_CCR3).
;;;2013     * @note Macro @ref IS_TIM_CC3_INSTANCE(TIMx) can be used to check whether or not
;;;2014     *       output channel is supported by a timer instance.
;;;2015     * @rmtoll CCR3         CCR3          LL_TIM_OC_SetCompareCH3
;;;2016     * @param  TIMx Timer instance
;;;2017     * @param  CompareValue between Min_Data=0 and Max_Data=65535
;;;2018     * @retval None
;;;2019     */
;;;2020   __STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
;;;2021   {
;;;2022     WRITE_REG(TIMx->CCR3, CompareValue);
;;;2023   }
;;;2024   
;;;2025   /**
;;;2026     * @brief  Set compare value for output channel 4 (TIMx_CCR4).
;;;2027     * @note Macro @ref IS_TIM_CC4_INSTANCE(TIMx) can be used to check whether or not
;;;2028     *       output channel 4 is supported by a timer instance.
;;;2029     * @rmtoll CCR4         CCR4          LL_TIM_OC_SetCompareCH4
;;;2030     * @param  TIMx Timer instance
;;;2031     * @param  CompareValue between Min_Data=0 and Max_Data=65535
;;;2032     * @retval None
;;;2033     */
;;;2034   __STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
;;;2035   {
;;;2036     WRITE_REG(TIMx->CCR4, CompareValue);
;;;2037   }
;;;2038   
;;;2039   /**
;;;2040     * @brief  Get compare value (TIMx_CCR1) set for  output channel 1.
;;;2041     * @note Macro @ref IS_TIM_CC1_INSTANCE(TIMx) can be used to check whether or not
;;;2042     *       output channel 1 is supported by a timer instance.
;;;2043     * @rmtoll CCR1         CCR1          LL_TIM_OC_GetCompareCH1
;;;2044     * @param  TIMx Timer instance
;;;2045     * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
;;;2046     */
;;;2047   __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH1(TIM_TypeDef *TIMx)
;;;2048   {
;;;2049     return (uint32_t)(READ_REG(TIMx->CCR1));
;;;2050   }
;;;2051   
;;;2052   /**
;;;2053     * @brief  Get compare value (TIMx_CCR2) set for  output channel 2.
;;;2054     * @note Macro @ref IS_TIM_CC2_INSTANCE(TIMx) can be used to check whether or not
;;;2055     *       output channel 2 is supported by a timer instance.
;;;2056     * @rmtoll CCR2         CCR2          LL_TIM_OC_GetCompareCH2
;;;2057     * @param  TIMx Timer instance
;;;2058     * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
;;;2059     */
;;;2060   __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH2(TIM_TypeDef *TIMx)
;;;2061   {
;;;2062     return (uint32_t)(READ_REG(TIMx->CCR2));
;;;2063   }
;;;2064   
;;;2065   /**
;;;2066     * @brief  Get compare value (TIMx_CCR3) set for  output channel 3.
;;;2067     * @note Macro @ref IS_TIM_CC3_INSTANCE(TIMx) can be used to check whether or not
;;;2068     *       output channel 3 is supported by a timer instance.
;;;2069     * @rmtoll CCR3         CCR3          LL_TIM_OC_GetCompareCH3
;;;2070     * @param  TIMx Timer instance
;;;2071     * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
;;;2072     */
;;;2073   __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH3(TIM_TypeDef *TIMx)
;;;2074   {
;;;2075     return (uint32_t)(READ_REG(TIMx->CCR3));
;;;2076   }
;;;2077   
;;;2078   /**
;;;2079     * @brief  Get compare value (TIMx_CCR4) set for  output channel 4.
;;;2080     * @note Macro @ref IS_TIM_CC4_INSTANCE(TIMx) can be used to check whether or not
;;;2081     *       output channel 4 is supported by a timer instance.
;;;2082     * @rmtoll CCR4         CCR4          LL_TIM_OC_GetCompareCH4
;;;2083     * @param  TIMx Timer instance
;;;2084     * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
;;;2085     */
;;;2086   __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH4(TIM_TypeDef *TIMx)
;;;2087   {
;;;2088     return (uint32_t)(READ_REG(TIMx->CCR4));
;;;2089   }
;;;2090   
;;;2091   /**
;;;2092     * @}
;;;2093     */
;;;2094   
;;;2095   /** @defgroup TIM_LL_EF_Input_Channel Input channel configuration
;;;2096     * @{
;;;2097     */
;;;2098   /**
;;;2099     * @brief  Configure input channel.
;;;2100     * @rmtoll CCMR1        CC1S          LL_TIM_IC_Config\n
;;;2101     *         CCMR1        IC1PSC        LL_TIM_IC_Config\n
;;;2102     *         CCMR1        IC1F          LL_TIM_IC_Config\n
;;;2103     *         CCMR1        CC2S          LL_TIM_IC_Config\n
;;;2104     *         CCMR1        IC2PSC        LL_TIM_IC_Config\n
;;;2105     *         CCMR1        IC2F          LL_TIM_IC_Config\n
;;;2106     *         CCMR2        CC3S          LL_TIM_IC_Config\n
;;;2107     *         CCMR2        IC3PSC        LL_TIM_IC_Config\n
;;;2108     *         CCMR2        IC3F          LL_TIM_IC_Config\n
;;;2109     *         CCMR2        CC4S          LL_TIM_IC_Config\n
;;;2110     *         CCMR2        IC4PSC        LL_TIM_IC_Config\n
;;;2111     *         CCMR2        IC4F          LL_TIM_IC_Config\n
;;;2112     *         CCER         CC1P          LL_TIM_IC_Config\n
;;;2113     *         CCER         CC1NP         LL_TIM_IC_Config\n
;;;2114     *         CCER         CC2P          LL_TIM_IC_Config\n
;;;2115     *         CCER         CC2NP         LL_TIM_IC_Config\n
;;;2116     *         CCER         CC3P          LL_TIM_IC_Config\n
;;;2117     *         CCER         CC3NP         LL_TIM_IC_Config\n
;;;2118     *         CCER         CC4P          LL_TIM_IC_Config\n
;;;2119     * @param  TIMx Timer instance
;;;2120     * @param  Channel This parameter can be one of the following values:
;;;2121     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2122     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2123     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2124     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2125     * @param  Configuration This parameter must be a combination of all the following values:
;;;2126     *         @arg @ref LL_TIM_ACTIVEINPUT_DIRECTTI or @ref LL_TIM_ACTIVEINPUT_INDIRECTTI or @ref LL_TIM_ACTIVEINPUT_TRC
;;;2127     *         @arg @ref LL_TIM_ICPSC_DIV1 or ... or @ref LL_TIM_ICPSC_DIV8
;;;2128     *         @arg @ref LL_TIM_IC_FILTER_FDIV1 or ... or @ref LL_TIM_IC_FILTER_FDIV32_N8
;;;2129     *         @arg @ref LL_TIM_IC_POLARITY_RISING or @ref LL_TIM_IC_POLARITY_FALLING
;;;2130     * @retval None
;;;2131     */
;;;2132   __STATIC_INLINE void LL_TIM_IC_Config(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Configuration)
;;;2133   {
;;;2134     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2135     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2136     MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F | TIM_CCMR1_IC1PSC | TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]),
;;;2137                ((Configuration >> 16U) & (TIM_CCMR1_IC1F | TIM_CCMR1_IC1PSC | TIM_CCMR1_CC1S))  << SHIFT_TAB_ICxx[iChannel]);
;;;2138     MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
;;;2139                (Configuration & (TIM_CCER_CC1NP | TIM_CCER_CC1P)) << SHIFT_TAB_CCxP[iChannel]);
;;;2140   }
;;;2141   
;;;2142   /**
;;;2143     * @brief  Set the active input.
;;;2144     * @rmtoll CCMR1        CC1S          LL_TIM_IC_SetActiveInput\n
;;;2145     *         CCMR1        CC2S          LL_TIM_IC_SetActiveInput\n
;;;2146     *         CCMR2        CC3S          LL_TIM_IC_SetActiveInput\n
;;;2147     *         CCMR2        CC4S          LL_TIM_IC_SetActiveInput
;;;2148     * @param  TIMx Timer instance
;;;2149     * @param  Channel This parameter can be one of the following values:
;;;2150     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2151     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2152     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2153     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2154     * @param  ICActiveInput This parameter can be one of the following values:
;;;2155     *         @arg @ref LL_TIM_ACTIVEINPUT_DIRECTTI
;;;2156     *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
;;;2157     *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
;;;2158     * @retval None
;;;2159     */
;;;2160   __STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiveInput)
;;;2161   {
;;;2162     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2163     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2164     MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
;;;2165   }
;;;2166   
;;;2167   /**
;;;2168     * @brief  Get the current active input.
;;;2169     * @rmtoll CCMR1        CC1S          LL_TIM_IC_GetActiveInput\n
;;;2170     *         CCMR1        CC2S          LL_TIM_IC_GetActiveInput\n
;;;2171     *         CCMR2        CC3S          LL_TIM_IC_GetActiveInput\n
;;;2172     *         CCMR2        CC4S          LL_TIM_IC_GetActiveInput
;;;2173     * @param  TIMx Timer instance
;;;2174     * @param  Channel This parameter can be one of the following values:
;;;2175     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2176     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2177     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2178     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2179     * @retval Returned value can be one of the following values:
;;;2180     *         @arg @ref LL_TIM_ACTIVEINPUT_DIRECTTI
;;;2181     *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
;;;2182     *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
;;;2183     */
;;;2184   __STATIC_INLINE uint32_t LL_TIM_IC_GetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel)
;;;2185   {
;;;2186     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2187     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2188     return ((READ_BIT(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iChannel]) << 16U);
;;;2189   }
;;;2190   
;;;2191   /**
;;;2192     * @brief  Set the prescaler of input channel.
;;;2193     * @rmtoll CCMR1        IC1PSC        LL_TIM_IC_SetPrescaler\n
;;;2194     *         CCMR1        IC2PSC        LL_TIM_IC_SetPrescaler\n
;;;2195     *         CCMR2        IC3PSC        LL_TIM_IC_SetPrescaler\n
;;;2196     *         CCMR2        IC4PSC        LL_TIM_IC_SetPrescaler
;;;2197     * @param  TIMx Timer instance
;;;2198     * @param  Channel This parameter can be one of the following values:
;;;2199     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2200     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2201     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2202     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2203     * @param  ICPrescaler This parameter can be one of the following values:
;;;2204     *         @arg @ref LL_TIM_ICPSC_DIV1
;;;2205     *         @arg @ref LL_TIM_ICPSC_DIV2
;;;2206     *         @arg @ref LL_TIM_ICPSC_DIV4
;;;2207     *         @arg @ref LL_TIM_ICPSC_DIV8
;;;2208     * @retval None
;;;2209     */
;;;2210   __STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
;;;2211   {
;;;2212     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2213     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2214     MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
;;;2215   }
;;;2216   
;;;2217   /**
;;;2218     * @brief  Get the current prescaler value acting on an  input channel.
;;;2219     * @rmtoll CCMR1        IC1PSC        LL_TIM_IC_GetPrescaler\n
;;;2220     *         CCMR1        IC2PSC        LL_TIM_IC_GetPrescaler\n
;;;2221     *         CCMR2        IC3PSC        LL_TIM_IC_GetPrescaler\n
;;;2222     *         CCMR2        IC4PSC        LL_TIM_IC_GetPrescaler
;;;2223     * @param  TIMx Timer instance
;;;2224     * @param  Channel This parameter can be one of the following values:
;;;2225     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2226     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2227     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2228     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2229     * @retval Returned value can be one of the following values:
;;;2230     *         @arg @ref LL_TIM_ICPSC_DIV1
;;;2231     *         @arg @ref LL_TIM_ICPSC_DIV2
;;;2232     *         @arg @ref LL_TIM_ICPSC_DIV4
;;;2233     *         @arg @ref LL_TIM_ICPSC_DIV8
;;;2234     */
;;;2235   __STATIC_INLINE uint32_t LL_TIM_IC_GetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel)
;;;2236   {
;;;2237     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2238     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2239     return ((READ_BIT(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iChannel]) << 16U);
;;;2240   }
;;;2241   
;;;2242   /**
;;;2243     * @brief  Set the input filter duration.
;;;2244     * @rmtoll CCMR1        IC1F          LL_TIM_IC_SetFilter\n
;;;2245     *         CCMR1        IC2F          LL_TIM_IC_SetFilter\n
;;;2246     *         CCMR2        IC3F          LL_TIM_IC_SetFilter\n
;;;2247     *         CCMR2        IC4F          LL_TIM_IC_SetFilter
;;;2248     * @param  TIMx Timer instance
;;;2249     * @param  Channel This parameter can be one of the following values:
;;;2250     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2251     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2252     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2253     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2254     * @param  ICFilter This parameter can be one of the following values:
;;;2255     *         @arg @ref LL_TIM_IC_FILTER_FDIV1
;;;2256     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N2
;;;2257     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N4
;;;2258     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N8
;;;2259     *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N6
;;;2260     *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N8
;;;2261     *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N6
;;;2262     *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N8
;;;2263     *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N6
;;;2264     *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N8
;;;2265     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N5
;;;2266     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N6
;;;2267     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N8
;;;2268     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N5
;;;2269     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
;;;2270     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
;;;2271     * @retval None
;;;2272     */
;;;2273   __STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
;;;2274   {
;;;2275     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2276     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2277     MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
;;;2278   }
;;;2279   
;;;2280   /**
;;;2281     * @brief  Get the input filter duration.
;;;2282     * @rmtoll CCMR1        IC1F          LL_TIM_IC_GetFilter\n
;;;2283     *         CCMR1        IC2F          LL_TIM_IC_GetFilter\n
;;;2284     *         CCMR2        IC3F          LL_TIM_IC_GetFilter\n
;;;2285     *         CCMR2        IC4F          LL_TIM_IC_GetFilter
;;;2286     * @param  TIMx Timer instance
;;;2287     * @param  Channel This parameter can be one of the following values:
;;;2288     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2289     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2290     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2291     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2292     * @retval Returned value can be one of the following values:
;;;2293     *         @arg @ref LL_TIM_IC_FILTER_FDIV1
;;;2294     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N2
;;;2295     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N4
;;;2296     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N8
;;;2297     *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N6
;;;2298     *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N8
;;;2299     *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N6
;;;2300     *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N8
;;;2301     *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N6
;;;2302     *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N8
;;;2303     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N5
;;;2304     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N6
;;;2305     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N8
;;;2306     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N5
;;;2307     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
;;;2308     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
;;;2309     */
;;;2310   __STATIC_INLINE uint32_t LL_TIM_IC_GetFilter(TIM_TypeDef *TIMx, uint32_t Channel)
;;;2311   {
;;;2312     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2313     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2314     return ((READ_BIT(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iChannel]) << 16U);
;;;2315   }
;;;2316   
;;;2317   /**
;;;2318     * @brief  Set the input channel polarity.
;;;2319     * @rmtoll CCER         CC1P          LL_TIM_IC_SetPolarity\n
;;;2320     *         CCER         CC1NP         LL_TIM_IC_SetPolarity\n
;;;2321     *         CCER         CC2P          LL_TIM_IC_SetPolarity\n
;;;2322     *         CCER         CC2NP         LL_TIM_IC_SetPolarity\n
;;;2323     *         CCER         CC3P          LL_TIM_IC_SetPolarity\n
;;;2324     *         CCER         CC3NP         LL_TIM_IC_SetPolarity\n
;;;2325     *         CCER         CC4P          LL_TIM_IC_SetPolarity\n
;;;2326     * @param  TIMx Timer instance
;;;2327     * @param  Channel This parameter can be one of the following values:
;;;2328     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2329     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2330     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2331     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2332     * @param  ICPolarity This parameter can be one of the following values:
;;;2333     *         @arg @ref LL_TIM_IC_POLARITY_RISING
;;;2334     *         @arg @ref LL_TIM_IC_POLARITY_FALLING
;;;2335     * @retval None
;;;2336     */
;;;2337   __STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
;;;2338   {
;;;2339     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2340     MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
;;;2341                ICPolarity << SHIFT_TAB_CCxP[iChannel]);
;;;2342   }
;;;2343   
;;;2344   /**
;;;2345     * @brief  Get the current input channel polarity.
;;;2346     * @rmtoll CCER         CC1P          LL_TIM_IC_GetPolarity\n
;;;2347     *         CCER         CC1NP         LL_TIM_IC_GetPolarity\n
;;;2348     *         CCER         CC2P          LL_TIM_IC_GetPolarity\n
;;;2349     *         CCER         CC2NP         LL_TIM_IC_GetPolarity\n
;;;2350     *         CCER         CC3P          LL_TIM_IC_GetPolarity\n
;;;2351     *         CCER         CC3NP         LL_TIM_IC_GetPolarity\n
;;;2352     *         CCER         CC4P          LL_TIM_IC_GetPolarity\n
;;;2353     * @param  TIMx Timer instance
;;;2354     * @param  Channel This parameter can be one of the following values:
;;;2355     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2356     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2357     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2358     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2359     * @retval Returned value can be one of the following values:
;;;2360     *         @arg @ref LL_TIM_IC_POLARITY_RISING
;;;2361     *         @arg @ref LL_TIM_IC_POLARITY_FALLING
;;;2362     */
;;;2363   __STATIC_INLINE uint32_t LL_TIM_IC_GetPolarity(TIM_TypeDef *TIMx, uint32_t Channel)
;;;2364   {
;;;2365     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2366     return (READ_BIT(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel])) >>
;;;2367             SHIFT_TAB_CCxP[iChannel]);
;;;2368   }
;;;2369   
;;;2370   /**
;;;2371     * @brief  Connect the TIMx_CH1, CH2 and CH3 pins  to the TI1 input (XOR combination).
;;;2372     * @note Macro @ref IS_TIM_XOR_INSTANCE(TIMx) can be used to check whether or not
;;;2373     *       a timer instance provides an XOR input.
;;;2374     * @rmtoll CR2          TI1S          LL_TIM_IC_EnableXORCombination
;;;2375     * @param  TIMx Timer instance
;;;2376     * @retval None
;;;2377     */
;;;2378   __STATIC_INLINE void LL_TIM_IC_EnableXORCombination(TIM_TypeDef *TIMx)
;;;2379   {
;;;2380     SET_BIT(TIMx->CR2, TIM_CR2_TI1S);
;;;2381   }
;;;2382   
;;;2383   /**
;;;2384     * @brief  Disconnect the TIMx_CH1, CH2 and CH3 pins  from the TI1 input.
;;;2385     * @note Macro @ref IS_TIM_XOR_INSTANCE(TIMx) can be used to check whether or not
;;;2386     *       a timer instance provides an XOR input.
;;;2387     * @rmtoll CR2          TI1S          LL_TIM_IC_DisableXORCombination
;;;2388     * @param  TIMx Timer instance
;;;2389     * @retval None
;;;2390     */
;;;2391   __STATIC_INLINE void LL_TIM_IC_DisableXORCombination(TIM_TypeDef *TIMx)
;;;2392   {
;;;2393     CLEAR_BIT(TIMx->CR2, TIM_CR2_TI1S);
;;;2394   }
;;;2395   
;;;2396   /**
;;;2397     * @brief  Indicates whether the TIMx_CH1, CH2 and CH3 pins are connectected to the TI1 input.
;;;2398     * @note Macro @ref IS_TIM_XOR_INSTANCE(TIMx) can be used to check whether or not
;;;2399     * a timer instance provides an XOR input.
;;;2400     * @rmtoll CR2          TI1S          LL_TIM_IC_IsEnabledXORCombination
;;;2401     * @param  TIMx Timer instance
;;;2402     * @retval State of bit (1 or 0).
;;;2403     */
;;;2404   __STATIC_INLINE uint32_t LL_TIM_IC_IsEnabledXORCombination(TIM_TypeDef *TIMx)
;;;2405   {
;;;2406     return (READ_BIT(TIMx->CR2, TIM_CR2_TI1S) == (TIM_CR2_TI1S));
;;;2407   }
;;;2408   
;;;2409   /**
;;;2410     * @brief  Get captured value for input channel 1.
;;;2411     * @note Macro @ref IS_TIM_CC1_INSTANCE(TIMx) can be used to check whether or not
;;;2412     *       input channel 1 is supported by a timer instance.
;;;2413     * @rmtoll CCR1         CCR1          LL_TIM_IC_GetCaptureCH1
;;;2414     * @param  TIMx Timer instance
;;;2415     * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
;;;2416     */
;;;2417   __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH1(TIM_TypeDef *TIMx)
;;;2418   {
;;;2419     return (uint32_t)(READ_REG(TIMx->CCR1));
;;;2420   }
;;;2421   
;;;2422   /**
;;;2423     * @brief  Get captured value for input channel 2.
;;;2424     * @note Macro @ref IS_TIM_CC2_INSTANCE(TIMx) can be used to check whether or not
;;;2425     *       input channel 2 is supported by a timer instance.
;;;2426     * @rmtoll CCR2         CCR2          LL_TIM_IC_GetCaptureCH2
;;;2427     * @param  TIMx Timer instance
;;;2428     * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
;;;2429     */
;;;2430   __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH2(TIM_TypeDef *TIMx)
;;;2431   {
;;;2432     return (uint32_t)(READ_REG(TIMx->CCR2));
;;;2433   }
;;;2434   
;;;2435   /**
;;;2436     * @brief  Get captured value for input channel 3.
;;;2437     * @note Macro @ref IS_TIM_CC3_INSTANCE(TIMx) can be used to check whether or not
;;;2438     *       input channel 3 is supported by a timer instance.
;;;2439     * @rmtoll CCR3         CCR3          LL_TIM_IC_GetCaptureCH3
;;;2440     * @param  TIMx Timer instance
;;;2441     * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
;;;2442     */
;;;2443   __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH3(TIM_TypeDef *TIMx)
;;;2444   {
;;;2445     return (uint32_t)(READ_REG(TIMx->CCR3));
;;;2446   }
;;;2447   
;;;2448   /**
;;;2449     * @brief  Get captured value for input channel 4.
;;;2450     * @note Macro @ref IS_TIM_CC4_INSTANCE(TIMx) can be used to check whether or not
;;;2451     *       input channel 4 is supported by a timer instance.
;;;2452     * @rmtoll CCR4         CCR4          LL_TIM_IC_GetCaptureCH4
;;;2453     * @param  TIMx Timer instance
;;;2454     * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
;;;2455     */
;;;2456   __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH4(TIM_TypeDef *TIMx)
;;;2457   {
;;;2458     return (uint32_t)(READ_REG(TIMx->CCR4));
;;;2459   }
;;;2460   
;;;2461   /**
;;;2462     * @}
;;;2463     */
;;;2464   
;;;2465   /** @defgroup TIM_LL_EF_Clock_Selection Counter clock selection
;;;2466     * @{
;;;2467     */
;;;2468   /**
;;;2469     * @brief  Enable external clock mode 2.
;;;2470     * @note When external clock mode 2 is enabled the counter is clocked by any active edge on the ETRF signal.
;;;2471     * @note Macro @ref IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
;;;2472     *       whether or not a timer instance supports external clock mode2.
;;;2473     * @rmtoll SMCR         ECE           LL_TIM_EnableExternalClock
;;;2474     * @param  TIMx Timer instance
;;;2475     * @retval None
;;;2476     */
;;;2477   __STATIC_INLINE void LL_TIM_EnableExternalClock(TIM_TypeDef *TIMx)
;;;2478   {
;;;2479     SET_BIT(TIMx->SMCR, TIM_SMCR_ECE);
;;;2480   }
;;;2481   
;;;2482   /**
;;;2483     * @brief  Disable external clock mode 2.
;;;2484     * @note Macro @ref IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
;;;2485     *       whether or not a timer instance supports external clock mode2.
;;;2486     * @rmtoll SMCR         ECE           LL_TIM_DisableExternalClock
;;;2487     * @param  TIMx Timer instance
;;;2488     * @retval None
;;;2489     */
;;;2490   __STATIC_INLINE void LL_TIM_DisableExternalClock(TIM_TypeDef *TIMx)
;;;2491   {
;;;2492     CLEAR_BIT(TIMx->SMCR, TIM_SMCR_ECE);
;;;2493   }
;;;2494   
;;;2495   /**
;;;2496     * @brief  Indicate whether external clock mode 2 is enabled.
;;;2497     * @note Macro @ref IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
;;;2498     *       whether or not a timer instance supports external clock mode2.
;;;2499     * @rmtoll SMCR         ECE           LL_TIM_IsEnabledExternalClock
;;;2500     * @param  TIMx Timer instance
;;;2501     * @retval State of bit (1 or 0).
;;;2502     */
;;;2503   __STATIC_INLINE uint32_t LL_TIM_IsEnabledExternalClock(TIM_TypeDef *TIMx)
;;;2504   {
;;;2505     return (READ_BIT(TIMx->SMCR, TIM_SMCR_ECE) == (TIM_SMCR_ECE));
;;;2506   }
;;;2507   
;;;2508   /**
;;;2509     * @brief  Set the clock source of the counter clock.
;;;2510     * @note when selected clock source is external clock mode 1, the timer input
;;;2511     *       the external clock is applied is selected by calling the @ref LL_TIM_SetTriggerInput()
;;;2512     *       function. This timer input must be configured by calling
;;;2513     *       the @ref LL_TIM_IC_Config() function.
;;;2514     * @note Macro @ref IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(TIMx) can be used to check
;;;2515     *       whether or not a timer instance supports external clock mode1.
;;;2516     * @note Macro @ref IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
;;;2517     *       whether or not a timer instance supports external clock mode2.
;;;2518     * @rmtoll SMCR         SMS           LL_TIM_SetClockSource\n
;;;2519     *         SMCR         ECE           LL_TIM_SetClockSource
;;;2520     * @param  TIMx Timer instance
;;;2521     * @param  ClockSource This parameter can be one of the following values:
;;;2522     *         @arg @ref LL_TIM_CLOCKSOURCE_INTERNAL
;;;2523     *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
;;;2524     *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
;;;2525     * @retval None
;;;2526     */
;;;2527   __STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
;;;2528   {
;;;2529     MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
;;;2530   }
;;;2531   
;;;2532   /**
;;;2533     * @brief  Set the encoder interface mode.
;;;2534     * @note Macro @ref IS_TIM_ENCODER_INTERFACE_INSTANCE(TIMx) can be used to check
;;;2535     *       whether or not a timer instance supports the encoder mode.
;;;2536     * @rmtoll SMCR         SMS           LL_TIM_SetEncoderMode
;;;2537     * @param  TIMx Timer instance
;;;2538     * @param  EncoderMode This parameter can be one of the following values:
;;;2539     *         @arg @ref LL_TIM_ENCODERMODE_X2_TI1
;;;2540     *         @arg @ref LL_TIM_ENCODERMODE_X2_TI2
;;;2541     *         @arg @ref LL_TIM_ENCODERMODE_X4_TI12
;;;2542     * @retval None
;;;2543     */
;;;2544   __STATIC_INLINE void LL_TIM_SetEncoderMode(TIM_TypeDef *TIMx, uint32_t EncoderMode)
;;;2545   {
;;;2546     MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
;;;2547   }
;;;2548   
;;;2549   /**
;;;2550     * @}
;;;2551     */
;;;2552   
;;;2553   /** @defgroup TIM_LL_EF_Timer_Synchronization Timer synchronisation configuration
;;;2554     * @{
;;;2555     */
;;;2556   /**
;;;2557     * @brief  Set the trigger output (TRGO) used for timer synchronization .
;;;2558     * @note Macro @ref IS_TIM_MASTER_INSTANCE(TIMx) can be used to check
;;;2559     *       whether or not a timer instance can operate as a master timer.
;;;2560     * @rmtoll CR2          MMS           LL_TIM_SetTriggerOutput
;;;2561     * @param  TIMx Timer instance
;;;2562     * @param  TimerSynchronization This parameter can be one of the following values:
;;;2563     *         @arg @ref LL_TIM_TRGO_RESET
;;;2564     *         @arg @ref LL_TIM_TRGO_ENABLE
;;;2565     *         @arg @ref LL_TIM_TRGO_UPDATE
;;;2566     *         @arg @ref LL_TIM_TRGO_CC1IF
;;;2567     *         @arg @ref LL_TIM_TRGO_OC1REF
;;;2568     *         @arg @ref LL_TIM_TRGO_OC2REF
;;;2569     *         @arg @ref LL_TIM_TRGO_OC3REF
;;;2570     *         @arg @ref LL_TIM_TRGO_OC4REF
;;;2571     * @retval None
;;;2572     */
;;;2573   __STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
;;;2574   {
;;;2575     MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
;;;2576   }
;;;2577   
;;;2578   /**
;;;2579     * @brief  Set the synchronization mode of a slave timer.
;;;2580     * @note Macro @ref IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
;;;2581     *       a timer instance can operate as a slave timer.
;;;2582     * @rmtoll SMCR         SMS           LL_TIM_SetSlaveMode
;;;2583     * @param  TIMx Timer instance
;;;2584     * @param  SlaveMode This parameter can be one of the following values:
;;;2585     *         @arg @ref LL_TIM_SLAVEMODE_DISABLED
;;;2586     *         @arg @ref LL_TIM_SLAVEMODE_RESET
;;;2587     *         @arg @ref LL_TIM_SLAVEMODE_GATED
;;;2588     *         @arg @ref LL_TIM_SLAVEMODE_TRIGGER
;;;2589     * @retval None
;;;2590     */
;;;2591   __STATIC_INLINE void LL_TIM_SetSlaveMode(TIM_TypeDef *TIMx, uint32_t SlaveMode)
;;;2592   {
;;;2593     MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
;;;2594   }
;;;2595   
;;;2596   /**
;;;2597     * @brief  Set the selects the trigger input to be used to synchronize the counter.
;;;2598     * @note Macro @ref IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
;;;2599     *       a timer instance can operate as a slave timer.
;;;2600     * @rmtoll SMCR         TS            LL_TIM_SetTriggerInput
;;;2601     * @param  TIMx Timer instance
;;;2602     * @param  TriggerInput This parameter can be one of the following values:
;;;2603     *         @arg @ref LL_TIM_TS_ITR0
;;;2604     *         @arg @ref LL_TIM_TS_ITR1
;;;2605     *         @arg @ref LL_TIM_TS_ITR2
;;;2606     *         @arg @ref LL_TIM_TS_ITR3
;;;2607     *         @arg @ref LL_TIM_TS_TI1F_ED
;;;2608     *         @arg @ref LL_TIM_TS_TI1FP1
;;;2609     *         @arg @ref LL_TIM_TS_TI2FP2
;;;2610     *         @arg @ref LL_TIM_TS_ETRF
;;;2611     * @retval None
;;;2612     */
;;;2613   __STATIC_INLINE void LL_TIM_SetTriggerInput(TIM_TypeDef *TIMx, uint32_t TriggerInput)
;;;2614   {
;;;2615     MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
;;;2616   }
;;;2617   
;;;2618   /**
;;;2619     * @brief  Enable the Master/Slave mode.
;;;2620     * @note Macro @ref IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
;;;2621     *       a timer instance can operate as a slave timer.
;;;2622     * @rmtoll SMCR         MSM           LL_TIM_EnableMasterSlaveMode
;;;2623     * @param  TIMx Timer instance
;;;2624     * @retval None
;;;2625     */
;;;2626   __STATIC_INLINE void LL_TIM_EnableMasterSlaveMode(TIM_TypeDef *TIMx)
;;;2627   {
;;;2628     SET_BIT(TIMx->SMCR, TIM_SMCR_MSM);
;;;2629   }
;;;2630   
;;;2631   /**
;;;2632     * @brief  Disable the Master/Slave mode.
;;;2633     * @note Macro @ref IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
;;;2634     *       a timer instance can operate as a slave timer.
;;;2635     * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
;;;2636     * @param  TIMx Timer instance
;;;2637     * @retval None
;;;2638     */
;;;2639   __STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
;;;2640   {
;;;2641     CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
;;;2642   }
;;;2643   
;;;2644   /**
;;;2645     * @brief Indicates whether the Master/Slave mode is enabled.
;;;2646     * @note Macro @ref IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
;;;2647     * a timer instance can operate as a slave timer.
;;;2648     * @rmtoll SMCR         MSM           LL_TIM_IsEnabledMasterSlaveMode
;;;2649     * @param  TIMx Timer instance
;;;2650     * @retval State of bit (1 or 0).
;;;2651     */
;;;2652   __STATIC_INLINE uint32_t LL_TIM_IsEnabledMasterSlaveMode(TIM_TypeDef *TIMx)
;;;2653   {
;;;2654     return (READ_BIT(TIMx->SMCR, TIM_SMCR_MSM) == (TIM_SMCR_MSM));
;;;2655   }
;;;2656   
;;;2657   /**
;;;2658     * @brief  Configure the external trigger (ETR) input.
;;;2659     * @note Macro @ref IS_TIM_ETR_INSTANCE(TIMx) can be used to check whether or not
;;;2660     *       a timer instance provides an external trigger input.
;;;2661     * @rmtoll SMCR         ETP           LL_TIM_ConfigETR\n
;;;2662     *         SMCR         ETPS          LL_TIM_ConfigETR\n
;;;2663     *         SMCR         ETF           LL_TIM_ConfigETR
;;;2664     * @param  TIMx Timer instance
;;;2665     * @param  ETRPolarity This parameter can be one of the following values:
;;;2666     *         @arg @ref LL_TIM_ETR_POLARITY_NONINVERTED
;;;2667     *         @arg @ref LL_TIM_ETR_POLARITY_INVERTED
;;;2668     * @param  ETRPrescaler This parameter can be one of the following values:
;;;2669     *         @arg @ref LL_TIM_ETR_PRESCALER_DIV1
;;;2670     *         @arg @ref LL_TIM_ETR_PRESCALER_DIV2
;;;2671     *         @arg @ref LL_TIM_ETR_PRESCALER_DIV4
;;;2672     *         @arg @ref LL_TIM_ETR_PRESCALER_DIV8
;;;2673     * @param  ETRFilter This parameter can be one of the following values:
;;;2674     *         @arg @ref LL_TIM_ETR_FILTER_FDIV1
;;;2675     *         @arg @ref LL_TIM_ETR_FILTER_FDIV1_N2
;;;2676     *         @arg @ref LL_TIM_ETR_FILTER_FDIV1_N4
;;;2677     *         @arg @ref LL_TIM_ETR_FILTER_FDIV1_N8
;;;2678     *         @arg @ref LL_TIM_ETR_FILTER_FDIV2_N6
;;;2679     *         @arg @ref LL_TIM_ETR_FILTER_FDIV2_N8
;;;2680     *         @arg @ref LL_TIM_ETR_FILTER_FDIV4_N6
;;;2681     *         @arg @ref LL_TIM_ETR_FILTER_FDIV4_N8
;;;2682     *         @arg @ref LL_TIM_ETR_FILTER_FDIV8_N6
;;;2683     *         @arg @ref LL_TIM_ETR_FILTER_FDIV8_N8
;;;2684     *         @arg @ref LL_TIM_ETR_FILTER_FDIV16_N5
;;;2685     *         @arg @ref LL_TIM_ETR_FILTER_FDIV16_N6
;;;2686     *         @arg @ref LL_TIM_ETR_FILTER_FDIV16_N8
;;;2687     *         @arg @ref LL_TIM_ETR_FILTER_FDIV32_N5
;;;2688     *         @arg @ref LL_TIM_ETR_FILTER_FDIV32_N6
;;;2689     *         @arg @ref LL_TIM_ETR_FILTER_FDIV32_N8
;;;2690     * @retval None
;;;2691     */
;;;2692   __STATIC_INLINE void LL_TIM_ConfigETR(TIM_TypeDef *TIMx, uint32_t ETRPolarity, uint32_t ETRPrescaler,
;;;2693                                         uint32_t ETRFilter)
;;;2694   {
;;;2695     MODIFY_REG(TIMx->SMCR, TIM_SMCR_ETP | TIM_SMCR_ETPS | TIM_SMCR_ETF, ETRPolarity | ETRPrescaler | ETRFilter);
;;;2696   }
;;;2697   
;;;2698   /**
;;;2699     * @}
;;;2700     */
;;;2701   
;;;2702   /** @defgroup TIM_LL_EF_Break_Function Break function configuration
;;;2703     * @{
;;;2704     */
;;;2705   /**
;;;2706     * @brief  Enable the break function.
;;;2707     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;2708     *       a timer instance provides a break input.
;;;2709     * @rmtoll BDTR         BKE           LL_TIM_EnableBRK
;;;2710     * @param  TIMx Timer instance
;;;2711     * @retval None
;;;2712     */
;;;2713   __STATIC_INLINE void LL_TIM_EnableBRK(TIM_TypeDef *TIMx)
;;;2714   {
;;;2715     SET_BIT(TIMx->BDTR, TIM_BDTR_BKE);
;;;2716   }
;;;2717   
;;;2718   /**
;;;2719     * @brief  Disable the break function.
;;;2720     * @rmtoll BDTR         BKE           LL_TIM_DisableBRK
;;;2721     * @param  TIMx Timer instance
;;;2722     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;2723     *       a timer instance provides a break input.
;;;2724     * @retval None
;;;2725     */
;;;2726   __STATIC_INLINE void LL_TIM_DisableBRK(TIM_TypeDef *TIMx)
;;;2727   {
;;;2728     CLEAR_BIT(TIMx->BDTR, TIM_BDTR_BKE);
;;;2729   }
;;;2730   
;;;2731   /**
;;;2732     * @brief  Configure the break input.
;;;2733     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;2734     *       a timer instance provides a break input.
;;;2735     * @rmtoll BDTR         BKP           LL_TIM_ConfigBRK
;;;2736     * @param  TIMx Timer instance
;;;2737     * @param  BreakPolarity This parameter can be one of the following values:
;;;2738     *         @arg @ref LL_TIM_BREAK_POLARITY_LOW
;;;2739     *         @arg @ref LL_TIM_BREAK_POLARITY_HIGH
;;;2740     * @retval None
;;;2741     */
;;;2742   __STATIC_INLINE void LL_TIM_ConfigBRK(TIM_TypeDef *TIMx, uint32_t BreakPolarity)
;;;2743   {
;;;2744     MODIFY_REG(TIMx->BDTR, TIM_BDTR_BKP, BreakPolarity);
;;;2745   }
;;;2746   
;;;2747   /**
;;;2748     * @brief  Select the outputs off state (enabled v.s. disabled) in Idle and Run modes.
;;;2749     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;2750     *       a timer instance provides a break input.
;;;2751     * @rmtoll BDTR         OSSI          LL_TIM_SetOffStates\n
;;;2752     *         BDTR         OSSR          LL_TIM_SetOffStates
;;;2753     * @param  TIMx Timer instance
;;;2754     * @param  OffStateIdle This parameter can be one of the following values:
;;;2755     *         @arg @ref LL_TIM_OSSI_DISABLE
;;;2756     *         @arg @ref LL_TIM_OSSI_ENABLE
;;;2757     * @param  OffStateRun This parameter can be one of the following values:
;;;2758     *         @arg @ref LL_TIM_OSSR_DISABLE
;;;2759     *         @arg @ref LL_TIM_OSSR_ENABLE
;;;2760     * @retval None
;;;2761     */
;;;2762   __STATIC_INLINE void LL_TIM_SetOffStates(TIM_TypeDef *TIMx, uint32_t OffStateIdle, uint32_t OffStateRun)
;;;2763   {
;;;2764     MODIFY_REG(TIMx->BDTR, TIM_BDTR_OSSI | TIM_BDTR_OSSR, OffStateIdle | OffStateRun);
;;;2765   }
;;;2766   
;;;2767   /**
;;;2768     * @brief  Enable automatic output (MOE can be set by software or automatically when a break input is active).
;;;2769     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;2770     *       a timer instance provides a break input.
;;;2771     * @rmtoll BDTR         AOE           LL_TIM_EnableAutomaticOutput
;;;2772     * @param  TIMx Timer instance
;;;2773     * @retval None
;;;2774     */
;;;2775   __STATIC_INLINE void LL_TIM_EnableAutomaticOutput(TIM_TypeDef *TIMx)
;;;2776   {
;;;2777     SET_BIT(TIMx->BDTR, TIM_BDTR_AOE);
;;;2778   }
;;;2779   
;;;2780   /**
;;;2781     * @brief  Disable automatic output (MOE can be set only by software).
;;;2782     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;2783     *       a timer instance provides a break input.
;;;2784     * @rmtoll BDTR         AOE           LL_TIM_DisableAutomaticOutput
;;;2785     * @param  TIMx Timer instance
;;;2786     * @retval None
;;;2787     */
;;;2788   __STATIC_INLINE void LL_TIM_DisableAutomaticOutput(TIM_TypeDef *TIMx)
;;;2789   {
;;;2790     CLEAR_BIT(TIMx->BDTR, TIM_BDTR_AOE);
;;;2791   }
;;;2792   
;;;2793   /**
;;;2794     * @brief  Indicate whether automatic output is enabled.
;;;2795     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;2796     *       a timer instance provides a break input.
;;;2797     * @rmtoll BDTR         AOE           LL_TIM_IsEnabledAutomaticOutput
;;;2798     * @param  TIMx Timer instance
;;;2799     * @retval State of bit (1 or 0).
;;;2800     */
;;;2801   __STATIC_INLINE uint32_t LL_TIM_IsEnabledAutomaticOutput(TIM_TypeDef *TIMx)
;;;2802   {
;;;2803     return (READ_BIT(TIMx->BDTR, TIM_BDTR_AOE) == (TIM_BDTR_AOE));
;;;2804   }
;;;2805   
;;;2806   /**
;;;2807     * @brief  Enable the outputs (set the MOE bit in TIMx_BDTR register).
;;;2808     * @note The MOE bit in TIMx_BDTR register allows to enable /disable the outputs by
;;;2809     *       software and is reset in case of break or break2 event
;;;2810     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;2811     *       a timer instance provides a break input.
;;;2812     * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
;;;2813     * @param  TIMx Timer instance
;;;2814     * @retval None
;;;2815     */
;;;2816   __STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
;;;2817   {
;;;2818     SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
;;;2819   }
;;;2820   
;;;2821   /**
;;;2822     * @brief  Disable the outputs (reset the MOE bit in TIMx_BDTR register).
;;;2823     * @note The MOE bit in TIMx_BDTR register allows to enable /disable the outputs by
;;;2824     *       software and is reset in case of break or break2 event.
;;;2825     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;2826     *       a timer instance provides a break input.
;;;2827     * @rmtoll BDTR         MOE           LL_TIM_DisableAllOutputs
;;;2828     * @param  TIMx Timer instance
;;;2829     * @retval None
;;;2830     */
;;;2831   __STATIC_INLINE void LL_TIM_DisableAllOutputs(TIM_TypeDef *TIMx)
;;;2832   {
;;;2833     CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
;;;2834   }
;;;2835   
;;;2836   /**
;;;2837     * @brief  Indicates whether outputs are enabled.
;;;2838     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;2839     *       a timer instance provides a break input.
;;;2840     * @rmtoll BDTR         MOE           LL_TIM_IsEnabledAllOutputs
;;;2841     * @param  TIMx Timer instance
;;;2842     * @retval State of bit (1 or 0).
;;;2843     */
;;;2844   __STATIC_INLINE uint32_t LL_TIM_IsEnabledAllOutputs(TIM_TypeDef *TIMx)
;;;2845   {
;;;2846     return (READ_BIT(TIMx->BDTR, TIM_BDTR_MOE) == (TIM_BDTR_MOE));
;;;2847   }
;;;2848   
;;;2849   /**
;;;2850     * @}
;;;2851     */
;;;2852   
;;;2853   /** @defgroup TIM_LL_EF_DMA_Burst_Mode DMA burst mode configuration
;;;2854     * @{
;;;2855     */
;;;2856   /**
;;;2857     * @brief  Configures the timer DMA burst feature.
;;;2858     * @note Macro @ref IS_TIM_DMABURST_INSTANCE(TIMx) can be used to check whether or
;;;2859     *       not a timer instance supports the DMA burst mode.
;;;2860     * @rmtoll DCR          DBL           LL_TIM_ConfigDMABurst\n
;;;2861     *         DCR          DBA           LL_TIM_ConfigDMABurst
;;;2862     * @param  TIMx Timer instance
;;;2863     * @param  DMABurstBaseAddress This parameter can be one of the following values:
;;;2864     *         @arg @ref LL_TIM_DMABURST_BASEADDR_CR1
;;;2865     *         @arg @ref LL_TIM_DMABURST_BASEADDR_CR2
;;;2866     *         @arg @ref LL_TIM_DMABURST_BASEADDR_SMCR
;;;2867     *         @arg @ref LL_TIM_DMABURST_BASEADDR_DIER
;;;2868     *         @arg @ref LL_TIM_DMABURST_BASEADDR_SR
;;;2869     *         @arg @ref LL_TIM_DMABURST_BASEADDR_EGR
;;;2870     *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCMR1
;;;2871     *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCMR2
;;;2872     *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCER
;;;2873     *         @arg @ref LL_TIM_DMABURST_BASEADDR_CNT
;;;2874     *         @arg @ref LL_TIM_DMABURST_BASEADDR_PSC
;;;2875     *         @arg @ref LL_TIM_DMABURST_BASEADDR_ARR
;;;2876     *         @arg @ref LL_TIM_DMABURST_BASEADDR_RCR
;;;2877     *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCR1
;;;2878     *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCR2
;;;2879     *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCR3
;;;2880     *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCR4
;;;2881     *         @arg @ref LL_TIM_DMABURST_BASEADDR_BDTR
;;;2882     * @param  DMABurstLength This parameter can be one of the following values:
;;;2883     *         @arg @ref LL_TIM_DMABURST_LENGTH_1TRANSFER
;;;2884     *         @arg @ref LL_TIM_DMABURST_LENGTH_2TRANSFERS
;;;2885     *         @arg @ref LL_TIM_DMABURST_LENGTH_3TRANSFERS
;;;2886     *         @arg @ref LL_TIM_DMABURST_LENGTH_4TRANSFERS
;;;2887     *         @arg @ref LL_TIM_DMABURST_LENGTH_5TRANSFERS
;;;2888     *         @arg @ref LL_TIM_DMABURST_LENGTH_6TRANSFERS
;;;2889     *         @arg @ref LL_TIM_DMABURST_LENGTH_7TRANSFERS
;;;2890     *         @arg @ref LL_TIM_DMABURST_LENGTH_8TRANSFERS
;;;2891     *         @arg @ref LL_TIM_DMABURST_LENGTH_9TRANSFERS
;;;2892     *         @arg @ref LL_TIM_DMABURST_LENGTH_10TRANSFERS
;;;2893     *         @arg @ref LL_TIM_DMABURST_LENGTH_11TRANSFERS
;;;2894     *         @arg @ref LL_TIM_DMABURST_LENGTH_12TRANSFERS
;;;2895     *         @arg @ref LL_TIM_DMABURST_LENGTH_13TRANSFERS
;;;2896     *         @arg @ref LL_TIM_DMABURST_LENGTH_14TRANSFERS
;;;2897     *         @arg @ref LL_TIM_DMABURST_LENGTH_15TRANSFERS
;;;2898     *         @arg @ref LL_TIM_DMABURST_LENGTH_16TRANSFERS
;;;2899     *         @arg @ref LL_TIM_DMABURST_LENGTH_17TRANSFERS
;;;2900     *         @arg @ref LL_TIM_DMABURST_LENGTH_18TRANSFERS
;;;2901     * @retval None
;;;2902     */
;;;2903   __STATIC_INLINE void LL_TIM_ConfigDMABurst(TIM_TypeDef *TIMx, uint32_t DMABurstBaseAddress, uint32_t DMABurstLength)
;;;2904   {
;;;2905     MODIFY_REG(TIMx->DCR, TIM_DCR_DBL | TIM_DCR_DBA, DMABurstBaseAddress | DMABurstLength);
;;;2906   }
;;;2907   
;;;2908   /**
;;;2909     * @}
;;;2910     */
;;;2911   
;;;2912   
;;;2913   /**
;;;2914     * @}
;;;2915     */
;;;2916   
;;;2917   
;;;2918   /** @defgroup TIM_LL_EF_FLAG_Management FLAG-Management
;;;2919     * @{
;;;2920     */
;;;2921   /**
;;;2922     * @brief  Clear the update interrupt flag (UIF).
;;;2923     * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
;;;2924     * @param  TIMx Timer instance
;;;2925     * @retval None
;;;2926     */
;;;2927   __STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
;;;2928   {
;;;2929     WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
;;;2930   }
;;;2931   
;;;2932   /**
;;;2933     * @brief  Indicate whether update interrupt flag (UIF) is set (update interrupt is pending).
;;;2934     * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
;;;2935     * @param  TIMx Timer instance
;;;2936     * @retval State of bit (1 or 0).
;;;2937     */
;;;2938   __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
;;;2939   {
;;;2940     return (READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF));
;;;2941   }
;;;2942   
;;;2943   /**
;;;2944     * @brief  Clear the Capture/Compare 1 interrupt flag (CC1F).
;;;2945     * @rmtoll SR           CC1IF         LL_TIM_ClearFlag_CC1
;;;2946     * @param  TIMx Timer instance
;;;2947     * @retval None
;;;2948     */
;;;2949   __STATIC_INLINE void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
;;;2950   {
;;;2951     WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
;;;2952   }
;;;2953   
;;;2954   /**
;;;2955     * @brief  Indicate whether Capture/Compare 1 interrupt flag (CC1F) is set (Capture/Compare 1 interrupt is pending).
;;;2956     * @rmtoll SR           CC1IF         LL_TIM_IsActiveFlag_CC1
;;;2957     * @param  TIMx Timer instance
;;;2958     * @retval State of bit (1 or 0).
;;;2959     */
;;;2960   __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC1(TIM_TypeDef *TIMx)
;;;2961   {
;;;2962     return (READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF));
;;;2963   }
;;;2964   
;;;2965   /**
;;;2966     * @brief  Clear the Capture/Compare 2 interrupt flag (CC2F).
;;;2967     * @rmtoll SR           CC2IF         LL_TIM_ClearFlag_CC2
;;;2968     * @param  TIMx Timer instance
;;;2969     * @retval None
;;;2970     */
;;;2971   __STATIC_INLINE void LL_TIM_ClearFlag_CC2(TIM_TypeDef *TIMx)
;;;2972   {
;;;2973     WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
;;;2974   }
;;;2975   
;;;2976   /**
;;;2977     * @brief  Indicate whether Capture/Compare 2 interrupt flag (CC2F) is set (Capture/Compare 2 interrupt is pending).
;;;2978     * @rmtoll SR           CC2IF         LL_TIM_IsActiveFlag_CC2
;;;2979     * @param  TIMx Timer instance
;;;2980     * @retval State of bit (1 or 0).
;;;2981     */
;;;2982   __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC2(TIM_TypeDef *TIMx)
;;;2983   {
;;;2984     return (READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF));
;;;2985   }
;;;2986   
;;;2987   /**
;;;2988     * @brief  Clear the Capture/Compare 3 interrupt flag (CC3F).
;;;2989     * @rmtoll SR           CC3IF         LL_TIM_ClearFlag_CC3
;;;2990     * @param  TIMx Timer instance
;;;2991     * @retval None
;;;2992     */
;;;2993   __STATIC_INLINE void LL_TIM_ClearFlag_CC3(TIM_TypeDef *TIMx)
;;;2994   {
;;;2995     WRITE_REG(TIMx->SR, ~(TIM_SR_CC3IF));
;;;2996   }
;;;2997   
;;;2998   /**
;;;2999     * @brief  Indicate whether Capture/Compare 3 interrupt flag (CC3F) is set (Capture/Compare 3 interrupt is pending).
;;;3000     * @rmtoll SR           CC3IF         LL_TIM_IsActiveFlag_CC3
;;;3001     * @param  TIMx Timer instance
;;;3002     * @retval State of bit (1 or 0).
;;;3003     */
;;;3004   __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC3(TIM_TypeDef *TIMx)
;;;3005   {
;;;3006     return (READ_BIT(TIMx->SR, TIM_SR_CC3IF) == (TIM_SR_CC3IF));
;;;3007   }
;;;3008   
;;;3009   /**
;;;3010     * @brief  Clear the Capture/Compare 4 interrupt flag (CC4F).
;;;3011     * @rmtoll SR           CC4IF         LL_TIM_ClearFlag_CC4
;;;3012     * @param  TIMx Timer instance
;;;3013     * @retval None
;;;3014     */
;;;3015   __STATIC_INLINE void LL_TIM_ClearFlag_CC4(TIM_TypeDef *TIMx)
;;;3016   {
;;;3017     WRITE_REG(TIMx->SR, ~(TIM_SR_CC4IF));
;;;3018   }
;;;3019   
;;;3020   /**
;;;3021     * @brief  Indicate whether Capture/Compare 4 interrupt flag (CC4F) is set (Capture/Compare 4 interrupt is pending).
;;;3022     * @rmtoll SR           CC4IF         LL_TIM_IsActiveFlag_CC4
;;;3023     * @param  TIMx Timer instance
;;;3024     * @retval State of bit (1 or 0).
;;;3025     */
;;;3026   __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC4(TIM_TypeDef *TIMx)
;;;3027   {
;;;3028     return (READ_BIT(TIMx->SR, TIM_SR_CC4IF) == (TIM_SR_CC4IF));
;;;3029   }
;;;3030   
;;;3031   /**
;;;3032     * @brief  Clear the commutation interrupt flag (COMIF).
;;;3033     * @rmtoll SR           COMIF         LL_TIM_ClearFlag_COM
;;;3034     * @param  TIMx Timer instance
;;;3035     * @retval None
;;;3036     */
;;;3037   __STATIC_INLINE void LL_TIM_ClearFlag_COM(TIM_TypeDef *TIMx)
;;;3038   {
;;;3039     WRITE_REG(TIMx->SR, ~(TIM_SR_COMIF));
;;;3040   }
;;;3041   
;;;3042   /**
;;;3043     * @brief  Indicate whether commutation interrupt flag (COMIF) is set (commutation interrupt is pending).
;;;3044     * @rmtoll SR           COMIF         LL_TIM_IsActiveFlag_COM
;;;3045     * @param  TIMx Timer instance
;;;3046     * @retval State of bit (1 or 0).
;;;3047     */
;;;3048   __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_COM(TIM_TypeDef *TIMx)
;;;3049   {
;;;3050     return (READ_BIT(TIMx->SR, TIM_SR_COMIF) == (TIM_SR_COMIF));
;;;3051   }
;;;3052   
;;;3053   /**
;;;3054     * @brief  Clear the trigger interrupt flag (TIF).
;;;3055     * @rmtoll SR           TIF           LL_TIM_ClearFlag_TRIG
;;;3056     * @param  TIMx Timer instance
;;;3057     * @retval None
;;;3058     */
;;;3059   __STATIC_INLINE void LL_TIM_ClearFlag_TRIG(TIM_TypeDef *TIMx)
;;;3060   {
;;;3061     WRITE_REG(TIMx->SR, ~(TIM_SR_TIF));
;;;3062   }
;;;3063   
;;;3064   /**
;;;3065     * @brief  Indicate whether trigger interrupt flag (TIF) is set (trigger interrupt is pending).
;;;3066     * @rmtoll SR           TIF           LL_TIM_IsActiveFlag_TRIG
;;;3067     * @param  TIMx Timer instance
;;;3068     * @retval State of bit (1 or 0).
;;;3069     */
;;;3070   __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_TRIG(TIM_TypeDef *TIMx)
;;;3071   {
;;;3072     return (READ_BIT(TIMx->SR, TIM_SR_TIF) == (TIM_SR_TIF));
;;;3073   }
;;;3074   
;;;3075   /**
;;;3076     * @brief  Clear the break interrupt flag (BIF).
;;;3077     * @rmtoll SR           BIF           LL_TIM_ClearFlag_BRK
;;;3078     * @param  TIMx Timer instance
;;;3079     * @retval None
;;;3080     */
;;;3081   __STATIC_INLINE void LL_TIM_ClearFlag_BRK(TIM_TypeDef *TIMx)
;;;3082   {
;;;3083     WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
;;;3084   }
;;;3085   
;;;3086   /**
;;;3087     * @brief  Indicate whether break interrupt flag (BIF) is set (break interrupt is pending).
;;;3088     * @rmtoll SR           BIF           LL_TIM_IsActiveFlag_BRK
;;;3089     * @param  TIMx Timer instance
;;;3090     * @retval State of bit (1 or 0).
;;;3091     */
;;;3092   __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
;;;3093   {
;;;3094     return (READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF));
;;;3095   }
;;;3096   
;;;3097   /**
;;;3098     * @brief  Clear the Capture/Compare 1 over-capture interrupt flag (CC1OF).
;;;3099     * @rmtoll SR           CC1OF         LL_TIM_ClearFlag_CC1OVR
;;;3100     * @param  TIMx Timer instance
;;;3101     * @retval None
;;;3102     */
;;;3103   __STATIC_INLINE void LL_TIM_ClearFlag_CC1OVR(TIM_TypeDef *TIMx)
;;;3104   {
;;;3105     WRITE_REG(TIMx->SR, ~(TIM_SR_CC1OF));
;;;3106   }
;;;3107   
;;;3108   /**
;;;3109     * @brief  Indicate whether Capture/Compare 1 over-capture interrupt flag (CC1OF) is set (Capture/Compare 1 interrupt is pending).
;;;3110     * @rmtoll SR           CC1OF         LL_TIM_IsActiveFlag_CC1OVR
;;;3111     * @param  TIMx Timer instance
;;;3112     * @retval State of bit (1 or 0).
;;;3113     */
;;;3114   __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC1OVR(TIM_TypeDef *TIMx)
;;;3115   {
;;;3116     return (READ_BIT(TIMx->SR, TIM_SR_CC1OF) == (TIM_SR_CC1OF));
;;;3117   }
;;;3118   
;;;3119   /**
;;;3120     * @brief  Clear the Capture/Compare 2 over-capture interrupt flag (CC2OF).
;;;3121     * @rmtoll SR           CC2OF         LL_TIM_ClearFlag_CC2OVR
;;;3122     * @param  TIMx Timer instance
;;;3123     * @retval None
;;;3124     */
;;;3125   __STATIC_INLINE void LL_TIM_ClearFlag_CC2OVR(TIM_TypeDef *TIMx)
;;;3126   {
;;;3127     WRITE_REG(TIMx->SR, ~(TIM_SR_CC2OF));
;;;3128   }
;;;3129   
;;;3130   /**
;;;3131     * @brief  Indicate whether Capture/Compare 2 over-capture interrupt flag (CC2OF) is set (Capture/Compare 2 over-capture interrupt is pending).
;;;3132     * @rmtoll SR           CC2OF         LL_TIM_IsActiveFlag_CC2OVR
;;;3133     * @param  TIMx Timer instance
;;;3134     * @retval State of bit (1 or 0).
;;;3135     */
;;;3136   __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC2OVR(TIM_TypeDef *TIMx)
;;;3137   {
;;;3138     return (READ_BIT(TIMx->SR, TIM_SR_CC2OF) == (TIM_SR_CC2OF));
;;;3139   }
;;;3140   
;;;3141   /**
;;;3142     * @brief  Clear the Capture/Compare 3 over-capture interrupt flag (CC3OF).
;;;3143     * @rmtoll SR           CC3OF         LL_TIM_ClearFlag_CC3OVR
;;;3144     * @param  TIMx Timer instance
;;;3145     * @retval None
;;;3146     */
;;;3147   __STATIC_INLINE void LL_TIM_ClearFlag_CC3OVR(TIM_TypeDef *TIMx)
;;;3148   {
;;;3149     WRITE_REG(TIMx->SR, ~(TIM_SR_CC3OF));
;;;3150   }
;;;3151   
;;;3152   /**
;;;3153     * @brief  Indicate whether Capture/Compare 3 over-capture interrupt flag (CC3OF) is set (Capture/Compare 3 over-capture interrupt is pending).
;;;3154     * @rmtoll SR           CC3OF         LL_TIM_IsActiveFlag_CC3OVR
;;;3155     * @param  TIMx Timer instance
;;;3156     * @retval State of bit (1 or 0).
;;;3157     */
;;;3158   __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC3OVR(TIM_TypeDef *TIMx)
;;;3159   {
;;;3160     return (READ_BIT(TIMx->SR, TIM_SR_CC3OF) == (TIM_SR_CC3OF));
;;;3161   }
;;;3162   
;;;3163   /**
;;;3164     * @brief  Clear the Capture/Compare 4 over-capture interrupt flag (CC4OF).
;;;3165     * @rmtoll SR           CC4OF         LL_TIM_ClearFlag_CC4OVR
;;;3166     * @param  TIMx Timer instance
;;;3167     * @retval None
;;;3168     */
;;;3169   __STATIC_INLINE void LL_TIM_ClearFlag_CC4OVR(TIM_TypeDef *TIMx)
;;;3170   {
;;;3171     WRITE_REG(TIMx->SR, ~(TIM_SR_CC4OF));
;;;3172   }
;;;3173   
;;;3174   /**
;;;3175     * @brief  Indicate whether Capture/Compare 4 over-capture interrupt flag (CC4OF) is set (Capture/Compare 4 over-capture interrupt is pending).
;;;3176     * @rmtoll SR           CC4OF         LL_TIM_IsActiveFlag_CC4OVR
;;;3177     * @param  TIMx Timer instance
;;;3178     * @retval State of bit (1 or 0).
;;;3179     */
;;;3180   __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC4OVR(TIM_TypeDef *TIMx)
;;;3181   {
;;;3182     return (READ_BIT(TIMx->SR, TIM_SR_CC4OF) == (TIM_SR_CC4OF));
;;;3183   }
;;;3184   
;;;3185   /**
;;;3186     * @}
;;;3187     */
;;;3188   
;;;3189   /** @defgroup TIM_LL_EF_IT_Management IT-Management
;;;3190     * @{
;;;3191     */
;;;3192   /**
;;;3193     * @brief  Enable update interrupt (UIE).
;;;3194     * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
;;;3195     * @param  TIMx Timer instance
;;;3196     * @retval None
;;;3197     */
;;;3198   __STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
;;;3199   {
;;;3200     SET_BIT(TIMx->DIER, TIM_DIER_UIE);
        0x08000984:    68c1        .h      LDR      r1,[r0,#0xc]
        0x08000986:    f0410101    A...    ORR      r1,r1,#1
        0x0800098a:    60c1        .`      STR      r1,[r0,#0xc]
        0x0800098c:    4770        pG      BX       lr
    i.LL_TIM_EnableMasterSlaveMode
    LL_TIM_EnableMasterSlaveMode
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h (2628)
        0x0800098e:    6881        .h      LDR      r1,[r0,#8]
        0x08000990:    f0410180    A...    ORR      r1,r1,#0x80
        0x08000994:    6081        .`      STR      r1,[r0,#8]
;;;2629   }
        0x08000996:    4770        pG      BX       lr
    i.LL_TIM_IC_SetActiveInput
    LL_TIM_IC_SetActiveInput
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h (2161)
        0x08000998:    b5f0        ..      PUSH     {r4-r7,lr}
        0x0800099a:    4603        .F      MOV      r3,r0
        0x0800099c:    4614        .F      MOV      r4,r2
;;;2162     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
        0x0800099e:    2901        .)      CMP      r1,#1
        0x080009a0:    d101        ..      BNE      0x80009a6 ; LL_TIM_IC_SetActiveInput + 14
        0x080009a2:    2500        .%      MOVS     r5,#0
        0x080009a4:    e016        ..      B        0x80009d4 ; LL_TIM_IC_SetActiveInput + 60
        0x080009a6:    2904        .)      CMP      r1,#4
        0x080009a8:    d101        ..      BNE      0x80009ae ; LL_TIM_IC_SetActiveInput + 22
        0x080009aa:    2501        .%      MOVS     r5,#1
        0x080009ac:    e012        ..      B        0x80009d4 ; LL_TIM_IC_SetActiveInput + 60
        0x080009ae:    2910        .)      CMP      r1,#0x10
        0x080009b0:    d101        ..      BNE      0x80009b6 ; LL_TIM_IC_SetActiveInput + 30
        0x080009b2:    2502        .%      MOVS     r5,#2
        0x080009b4:    e00e        ..      B        0x80009d4 ; LL_TIM_IC_SetActiveInput + 60
        0x080009b6:    2940        @)      CMP      r1,#0x40
        0x080009b8:    d101        ..      BNE      0x80009be ; LL_TIM_IC_SetActiveInput + 38
        0x080009ba:    2503        .%      MOVS     r5,#3
        0x080009bc:    e00a        ..      B        0x80009d4 ; LL_TIM_IC_SetActiveInput + 60
        0x080009be:    f5b17f80    ....    CMP      r1,#0x100
        0x080009c2:    d101        ..      BNE      0x80009c8 ; LL_TIM_IC_SetActiveInput + 48
        0x080009c4:    2504        .%      MOVS     r5,#4
        0x080009c6:    e005        ..      B        0x80009d4 ; LL_TIM_IC_SetActiveInput + 60
        0x080009c8:    f5b16f80    ...o    CMP      r1,#0x400
        0x080009cc:    d101        ..      BNE      0x80009d2 ; LL_TIM_IC_SetActiveInput + 58
        0x080009ce:    2505        .%      MOVS     r5,#5
        0x080009d0:    e000        ..      B        0x80009d4 ; LL_TIM_IC_SetActiveInput + 60
        0x080009d2:    2506        .%      MOVS     r5,#6
        0x080009d4:    4628        (F      MOV      r0,r5
;;;2163     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
        0x080009d6:    4d09        .M      LDR      r5,[pc,#36] ; [0x80009fc] = 0x8003b47
        0x080009d8:    5c2e        .\      LDRB     r6,[r5,r0]
        0x080009da:    f1030518    ....    ADD      r5,r3,#0x18
        0x080009de:    1972        r.      ADDS     r2,r6,r5
;;;2164     MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
        0x080009e0:    4e07        .N      LDR      r6,[pc,#28] ; [0x8000a00] = 0x8003b55
        0x080009e2:    5c37        7\      LDRB     r7,[r6,r0]
        0x080009e4:    2603        .&      MOVS     r6,#3
        0x080009e6:    40be        .@      LSLS     r6,r6,r7
        0x080009e8:    6815        .h      LDR      r5,[r2,#0]
        0x080009ea:    43b5        .C      BICS     r5,r5,r6
        0x080009ec:    0c26        &.      LSRS     r6,r4,#16
        0x080009ee:    4f04        .O      LDR      r7,[pc,#16] ; [0x8000a00] = 0x8003b55
        0x080009f0:    5c3f        ?\      LDRB     r7,[r7,r0]
        0x080009f2:    40be        .@      LSLS     r6,r6,r7
        0x080009f4:    4335        5C      ORRS     r5,r5,r6
        0x080009f6:    6015        .`      STR      r5,[r2,#0]
;;;2165   }
        0x080009f8:    bdf0        ..      POP      {r4-r7,pc}
    $d
        0x080009fa:    0000        ..      DCW    0
        0x080009fc:    08003b47    G;..    DCD    134232903
        0x08000a00:    08003b55    U;..    DCD    134232917
    $t
    i.LL_TIM_IC_SetFilter
    LL_TIM_IC_SetFilter
;;;2166   
;;;2167   /**
;;;2168     * @brief  Get the current active input.
;;;2169     * @rmtoll CCMR1        CC1S          LL_TIM_IC_GetActiveInput\n
;;;2170     *         CCMR1        CC2S          LL_TIM_IC_GetActiveInput\n
;;;2171     *         CCMR2        CC3S          LL_TIM_IC_GetActiveInput\n
;;;2172     *         CCMR2        CC4S          LL_TIM_IC_GetActiveInput
;;;2173     * @param  TIMx Timer instance
;;;2174     * @param  Channel This parameter can be one of the following values:
;;;2175     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2176     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2177     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2178     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2179     * @retval Returned value can be one of the following values:
;;;2180     *         @arg @ref LL_TIM_ACTIVEINPUT_DIRECTTI
;;;2181     *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
;;;2182     *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
;;;2183     */
;;;2184   __STATIC_INLINE uint32_t LL_TIM_IC_GetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel)
;;;2185   {
;;;2186     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2187     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2188     return ((READ_BIT(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iChannel]) << 16U);
;;;2189   }
;;;2190   
;;;2191   /**
;;;2192     * @brief  Set the prescaler of input channel.
;;;2193     * @rmtoll CCMR1        IC1PSC        LL_TIM_IC_SetPrescaler\n
;;;2194     *         CCMR1        IC2PSC        LL_TIM_IC_SetPrescaler\n
;;;2195     *         CCMR2        IC3PSC        LL_TIM_IC_SetPrescaler\n
;;;2196     *         CCMR2        IC4PSC        LL_TIM_IC_SetPrescaler
;;;2197     * @param  TIMx Timer instance
;;;2198     * @param  Channel This parameter can be one of the following values:
;;;2199     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2200     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2201     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2202     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2203     * @param  ICPrescaler This parameter can be one of the following values:
;;;2204     *         @arg @ref LL_TIM_ICPSC_DIV1
;;;2205     *         @arg @ref LL_TIM_ICPSC_DIV2
;;;2206     *         @arg @ref LL_TIM_ICPSC_DIV4
;;;2207     *         @arg @ref LL_TIM_ICPSC_DIV8
;;;2208     * @retval None
;;;2209     */
;;;2210   __STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
;;;2211   {
;;;2212     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2213     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2214     MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
;;;2215   }
;;;2216   
;;;2217   /**
;;;2218     * @brief  Get the current prescaler value acting on an  input channel.
;;;2219     * @rmtoll CCMR1        IC1PSC        LL_TIM_IC_GetPrescaler\n
;;;2220     *         CCMR1        IC2PSC        LL_TIM_IC_GetPrescaler\n
;;;2221     *         CCMR2        IC3PSC        LL_TIM_IC_GetPrescaler\n
;;;2222     *         CCMR2        IC4PSC        LL_TIM_IC_GetPrescaler
;;;2223     * @param  TIMx Timer instance
;;;2224     * @param  Channel This parameter can be one of the following values:
;;;2225     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2226     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2227     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2228     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2229     * @retval Returned value can be one of the following values:
;;;2230     *         @arg @ref LL_TIM_ICPSC_DIV1
;;;2231     *         @arg @ref LL_TIM_ICPSC_DIV2
;;;2232     *         @arg @ref LL_TIM_ICPSC_DIV4
;;;2233     *         @arg @ref LL_TIM_ICPSC_DIV8
;;;2234     */
;;;2235   __STATIC_INLINE uint32_t LL_TIM_IC_GetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel)
;;;2236   {
;;;2237     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2238     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2239     return ((READ_BIT(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iChannel]) << 16U);
;;;2240   }
;;;2241   
;;;2242   /**
;;;2243     * @brief  Set the input filter duration.
;;;2244     * @rmtoll CCMR1        IC1F          LL_TIM_IC_SetFilter\n
;;;2245     *         CCMR1        IC2F          LL_TIM_IC_SetFilter\n
;;;2246     *         CCMR2        IC3F          LL_TIM_IC_SetFilter\n
;;;2247     *         CCMR2        IC4F          LL_TIM_IC_SetFilter
;;;2248     * @param  TIMx Timer instance
;;;2249     * @param  Channel This parameter can be one of the following values:
;;;2250     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2251     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2252     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2253     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2254     * @param  ICFilter This parameter can be one of the following values:
;;;2255     *         @arg @ref LL_TIM_IC_FILTER_FDIV1
;;;2256     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N2
;;;2257     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N4
;;;2258     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N8
;;;2259     *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N6
;;;2260     *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N8
;;;2261     *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N6
;;;2262     *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N8
;;;2263     *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N6
;;;2264     *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N8
;;;2265     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N5
;;;2266     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N6
;;;2267     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N8
;;;2268     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N5
;;;2269     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
;;;2270     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
;;;2271     * @retval None
;;;2272     */
;;;2273   __STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
;;;2274   {
        0x08000a04:    b5f0        ..      PUSH     {r4-r7,lr}
        0x08000a06:    4603        .F      MOV      r3,r0
        0x08000a08:    4614        .F      MOV      r4,r2
;;;2275     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
        0x08000a0a:    2901        .)      CMP      r1,#1
        0x08000a0c:    d101        ..      BNE      0x8000a12 ; LL_TIM_IC_SetFilter + 14
        0x08000a0e:    2500        .%      MOVS     r5,#0
        0x08000a10:    e016        ..      B        0x8000a40 ; LL_TIM_IC_SetFilter + 60
        0x08000a12:    2904        .)      CMP      r1,#4
        0x08000a14:    d101        ..      BNE      0x8000a1a ; LL_TIM_IC_SetFilter + 22
        0x08000a16:    2501        .%      MOVS     r5,#1
        0x08000a18:    e012        ..      B        0x8000a40 ; LL_TIM_IC_SetFilter + 60
        0x08000a1a:    2910        .)      CMP      r1,#0x10
        0x08000a1c:    d101        ..      BNE      0x8000a22 ; LL_TIM_IC_SetFilter + 30
        0x08000a1e:    2502        .%      MOVS     r5,#2
        0x08000a20:    e00e        ..      B        0x8000a40 ; LL_TIM_IC_SetFilter + 60
        0x08000a22:    2940        @)      CMP      r1,#0x40
        0x08000a24:    d101        ..      BNE      0x8000a2a ; LL_TIM_IC_SetFilter + 38
        0x08000a26:    2503        .%      MOVS     r5,#3
        0x08000a28:    e00a        ..      B        0x8000a40 ; LL_TIM_IC_SetFilter + 60
        0x08000a2a:    f5b17f80    ....    CMP      r1,#0x100
        0x08000a2e:    d101        ..      BNE      0x8000a34 ; LL_TIM_IC_SetFilter + 48
        0x08000a30:    2504        .%      MOVS     r5,#4
        0x08000a32:    e005        ..      B        0x8000a40 ; LL_TIM_IC_SetFilter + 60
        0x08000a34:    f5b16f80    ...o    CMP      r1,#0x400
        0x08000a38:    d101        ..      BNE      0x8000a3e ; LL_TIM_IC_SetFilter + 58
        0x08000a3a:    2505        .%      MOVS     r5,#5
        0x08000a3c:    e000        ..      B        0x8000a40 ; LL_TIM_IC_SetFilter + 60
        0x08000a3e:    2506        .%      MOVS     r5,#6
        0x08000a40:    4628        (F      MOV      r0,r5
;;;2276     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
        0x08000a42:    4d09        .M      LDR      r5,[pc,#36] ; [0x8000a68] = 0x8003b47
        0x08000a44:    5c2e        .\      LDRB     r6,[r5,r0]
        0x08000a46:    f1030518    ....    ADD      r5,r3,#0x18
        0x08000a4a:    1972        r.      ADDS     r2,r6,r5
;;;2277     MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
        0x08000a4c:    4e07        .N      LDR      r6,[pc,#28] ; [0x8000a6c] = 0x8003b55
        0x08000a4e:    5c37        7\      LDRB     r7,[r6,r0]
        0x08000a50:    26f0        .&      MOVS     r6,#0xf0
        0x08000a52:    40be        .@      LSLS     r6,r6,r7
        0x08000a54:    6815        .h      LDR      r5,[r2,#0]
        0x08000a56:    43b5        .C      BICS     r5,r5,r6
        0x08000a58:    0c26        &.      LSRS     r6,r4,#16
        0x08000a5a:    4f04        .O      LDR      r7,[pc,#16] ; [0x8000a6c] = 0x8003b55
        0x08000a5c:    5c3f        ?\      LDRB     r7,[r7,r0]
        0x08000a5e:    40be        .@      LSLS     r6,r6,r7
        0x08000a60:    4335        5C      ORRS     r5,r5,r6
        0x08000a62:    6015        .`      STR      r5,[r2,#0]
;;;2278   }
        0x08000a64:    bdf0        ..      POP      {r4-r7,pc}
    $d
        0x08000a66:    0000        ..      DCW    0
        0x08000a68:    08003b47    G;..    DCD    134232903
        0x08000a6c:    08003b55    U;..    DCD    134232917
    $t
    i.LL_TIM_IC_SetPolarity
    LL_TIM_IC_SetPolarity
;;;2279   
;;;2280   /**
;;;2281     * @brief  Get the input filter duration.
;;;2282     * @rmtoll CCMR1        IC1F          LL_TIM_IC_GetFilter\n
;;;2283     *         CCMR1        IC2F          LL_TIM_IC_GetFilter\n
;;;2284     *         CCMR2        IC3F          LL_TIM_IC_GetFilter\n
;;;2285     *         CCMR2        IC4F          LL_TIM_IC_GetFilter
;;;2286     * @param  TIMx Timer instance
;;;2287     * @param  Channel This parameter can be one of the following values:
;;;2288     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2289     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2290     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2291     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2292     * @retval Returned value can be one of the following values:
;;;2293     *         @arg @ref LL_TIM_IC_FILTER_FDIV1
;;;2294     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N2
;;;2295     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N4
;;;2296     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N8
;;;2297     *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N6
;;;2298     *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N8
;;;2299     *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N6
;;;2300     *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N8
;;;2301     *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N6
;;;2302     *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N8
;;;2303     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N5
;;;2304     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N6
;;;2305     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N8
;;;2306     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N5
;;;2307     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
;;;2308     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
;;;2309     */
;;;2310   __STATIC_INLINE uint32_t LL_TIM_IC_GetFilter(TIM_TypeDef *TIMx, uint32_t Channel)
;;;2311   {
;;;2312     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2313     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2314     return ((READ_BIT(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iChannel]) << 16U);
;;;2315   }
;;;2316   
;;;2317   /**
;;;2318     * @brief  Set the input channel polarity.
;;;2319     * @rmtoll CCER         CC1P          LL_TIM_IC_SetPolarity\n
;;;2320     *         CCER         CC1NP         LL_TIM_IC_SetPolarity\n
;;;2321     *         CCER         CC2P          LL_TIM_IC_SetPolarity\n
;;;2322     *         CCER         CC2NP         LL_TIM_IC_SetPolarity\n
;;;2323     *         CCER         CC3P          LL_TIM_IC_SetPolarity\n
;;;2324     *         CCER         CC3NP         LL_TIM_IC_SetPolarity\n
;;;2325     *         CCER         CC4P          LL_TIM_IC_SetPolarity\n
;;;2326     * @param  TIMx Timer instance
;;;2327     * @param  Channel This parameter can be one of the following values:
;;;2328     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2329     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2330     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2331     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2332     * @param  ICPolarity This parameter can be one of the following values:
;;;2333     *         @arg @ref LL_TIM_IC_POLARITY_RISING
;;;2334     *         @arg @ref LL_TIM_IC_POLARITY_FALLING
;;;2335     * @retval None
;;;2336     */
;;;2337   __STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
;;;2338   {
        0x08000a70:    b570        p.      PUSH     {r4-r6,lr}
;;;2339     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
        0x08000a72:    2901        .)      CMP      r1,#1
        0x08000a74:    d101        ..      BNE      0x8000a7a ; LL_TIM_IC_SetPolarity + 10
        0x08000a76:    2400        .$      MOVS     r4,#0
        0x08000a78:    e016        ..      B        0x8000aa8 ; LL_TIM_IC_SetPolarity + 56
        0x08000a7a:    2904        .)      CMP      r1,#4
        0x08000a7c:    d101        ..      BNE      0x8000a82 ; LL_TIM_IC_SetPolarity + 18
        0x08000a7e:    2401        .$      MOVS     r4,#1
        0x08000a80:    e012        ..      B        0x8000aa8 ; LL_TIM_IC_SetPolarity + 56
        0x08000a82:    2910        .)      CMP      r1,#0x10
        0x08000a84:    d101        ..      BNE      0x8000a8a ; LL_TIM_IC_SetPolarity + 26
        0x08000a86:    2402        .$      MOVS     r4,#2
        0x08000a88:    e00e        ..      B        0x8000aa8 ; LL_TIM_IC_SetPolarity + 56
        0x08000a8a:    2940        @)      CMP      r1,#0x40
        0x08000a8c:    d101        ..      BNE      0x8000a92 ; LL_TIM_IC_SetPolarity + 34
        0x08000a8e:    2403        .$      MOVS     r4,#3
        0x08000a90:    e00a        ..      B        0x8000aa8 ; LL_TIM_IC_SetPolarity + 56
        0x08000a92:    f5b17f80    ....    CMP      r1,#0x100
        0x08000a96:    d101        ..      BNE      0x8000a9c ; LL_TIM_IC_SetPolarity + 44
        0x08000a98:    2404        .$      MOVS     r4,#4
        0x08000a9a:    e005        ..      B        0x8000aa8 ; LL_TIM_IC_SetPolarity + 56
        0x08000a9c:    f5b16f80    ...o    CMP      r1,#0x400
        0x08000aa0:    d101        ..      BNE      0x8000aa6 ; LL_TIM_IC_SetPolarity + 54
        0x08000aa2:    2405        .$      MOVS     r4,#5
        0x08000aa4:    e000        ..      B        0x8000aa8 ; LL_TIM_IC_SetPolarity + 56
        0x08000aa6:    2406        .$      MOVS     r4,#6
        0x08000aa8:    4623        #F      MOV      r3,r4
;;;2340     MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
        0x08000aaa:    6a04        .j      LDR      r4,[r0,#0x20]
        0x08000aac:    4d05        .M      LDR      r5,[pc,#20] ; [0x8000ac4] = 0x8003b5c
        0x08000aae:    5cee        .\      LDRB     r6,[r5,r3]
        0x08000ab0:    250a        .%      MOVS     r5,#0xa
        0x08000ab2:    40b5        .@      LSLS     r5,r5,r6
        0x08000ab4:    43ac        .C      BICS     r4,r4,r5
        0x08000ab6:    4d03        .M      LDR      r5,[pc,#12] ; [0x8000ac4] = 0x8003b5c
        0x08000ab8:    5ced        .\      LDRB     r5,[r5,r3]
        0x08000aba:    fa02f505    ....    LSL      r5,r2,r5
        0x08000abe:    432c        ,C      ORRS     r4,r4,r5
        0x08000ac0:    6204        .b      STR      r4,[r0,#0x20]
;;;2341                ICPolarity << SHIFT_TAB_CCxP[iChannel]);
;;;2342   }
        0x08000ac2:    bd70        p.      POP      {r4-r6,pc}
    $d
        0x08000ac4:    08003b5c    \;..    DCD    134232924
    $t
    i.LL_TIM_IC_SetPrescaler
    LL_TIM_IC_SetPrescaler
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h (2211)
        0x08000ac8:    b5f0        ..      PUSH     {r4-r7,lr}
        0x08000aca:    4603        .F      MOV      r3,r0
        0x08000acc:    4614        .F      MOV      r4,r2
;;;2212     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
        0x08000ace:    2901        .)      CMP      r1,#1
        0x08000ad0:    d101        ..      BNE      0x8000ad6 ; LL_TIM_IC_SetPrescaler + 14
        0x08000ad2:    2500        .%      MOVS     r5,#0
        0x08000ad4:    e016        ..      B        0x8000b04 ; LL_TIM_IC_SetPrescaler + 60
        0x08000ad6:    2904        .)      CMP      r1,#4
        0x08000ad8:    d101        ..      BNE      0x8000ade ; LL_TIM_IC_SetPrescaler + 22
        0x08000ada:    2501        .%      MOVS     r5,#1
        0x08000adc:    e012        ..      B        0x8000b04 ; LL_TIM_IC_SetPrescaler + 60
        0x08000ade:    2910        .)      CMP      r1,#0x10
        0x08000ae0:    d101        ..      BNE      0x8000ae6 ; LL_TIM_IC_SetPrescaler + 30
        0x08000ae2:    2502        .%      MOVS     r5,#2
        0x08000ae4:    e00e        ..      B        0x8000b04 ; LL_TIM_IC_SetPrescaler + 60
        0x08000ae6:    2940        @)      CMP      r1,#0x40
        0x08000ae8:    d101        ..      BNE      0x8000aee ; LL_TIM_IC_SetPrescaler + 38
        0x08000aea:    2503        .%      MOVS     r5,#3
        0x08000aec:    e00a        ..      B        0x8000b04 ; LL_TIM_IC_SetPrescaler + 60
        0x08000aee:    f5b17f80    ....    CMP      r1,#0x100
        0x08000af2:    d101        ..      BNE      0x8000af8 ; LL_TIM_IC_SetPrescaler + 48
        0x08000af4:    2504        .%      MOVS     r5,#4
        0x08000af6:    e005        ..      B        0x8000b04 ; LL_TIM_IC_SetPrescaler + 60
        0x08000af8:    f5b16f80    ...o    CMP      r1,#0x400
        0x08000afc:    d101        ..      BNE      0x8000b02 ; LL_TIM_IC_SetPrescaler + 58
        0x08000afe:    2505        .%      MOVS     r5,#5
        0x08000b00:    e000        ..      B        0x8000b04 ; LL_TIM_IC_SetPrescaler + 60
        0x08000b02:    2506        .%      MOVS     r5,#6
        0x08000b04:    4628        (F      MOV      r0,r5
;;;2213     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
        0x08000b06:    4d09        .M      LDR      r5,[pc,#36] ; [0x8000b2c] = 0x8003b47
        0x08000b08:    5c2e        .\      LDRB     r6,[r5,r0]
        0x08000b0a:    f1030518    ....    ADD      r5,r3,#0x18
        0x08000b0e:    1972        r.      ADDS     r2,r6,r5
;;;2214     MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
        0x08000b10:    4e07        .N      LDR      r6,[pc,#28] ; [0x8000b30] = 0x8003b55
        0x08000b12:    5c37        7\      LDRB     r7,[r6,r0]
        0x08000b14:    260c        .&      MOVS     r6,#0xc
        0x08000b16:    40be        .@      LSLS     r6,r6,r7
        0x08000b18:    6815        .h      LDR      r5,[r2,#0]
        0x08000b1a:    43b5        .C      BICS     r5,r5,r6
        0x08000b1c:    0c26        &.      LSRS     r6,r4,#16
        0x08000b1e:    4f04        .O      LDR      r7,[pc,#16] ; [0x8000b30] = 0x8003b55
        0x08000b20:    5c3f        ?\      LDRB     r7,[r7,r0]
        0x08000b22:    40be        .@      LSLS     r6,r6,r7
        0x08000b24:    4335        5C      ORRS     r5,r5,r6
        0x08000b26:    6015        .`      STR      r5,[r2,#0]
;;;2215   }
        0x08000b28:    bdf0        ..      POP      {r4-r7,pc}
    $d
        0x08000b2a:    0000        ..      DCW    0
        0x08000b2c:    08003b47    G;..    DCD    134232903
        0x08000b30:    08003b55    U;..    DCD    134232917
    $t
    i.LL_TIM_Init
    LL_TIM_Init
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_tim.c
;;;341    {
        0x08000b34:    b510        ..      PUSH     {r4,lr}
        0x08000b36:    4602        .F      MOV      r2,r0
;;;342      uint32_t tmpcr1 = 0U;
        0x08000b38:    2300        .#      MOVS     r3,#0
;;;343    
;;;344      /* Check the parameters */
;;;345      assert_param(IS_TIM_INSTANCE(TIMx));
;;;346      assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
;;;347      assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));
;;;348    
;;;349      tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
        0x08000b3a:    6813        .h      LDR      r3,[r2,#0]
;;;350    
;;;351      if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
        0x08000b3c:    481b        .H      LDR      r0,[pc,#108] ; [0x8000bac] = 0x40012c00
        0x08000b3e:    4282        .B      CMP      r2,r0
        0x08000b40:    d008        ..      BEQ      0x8000b54 ; LL_TIM_Init + 32
        0x08000b42:    f1b24f80    ...O    CMP      r2,#0x40000000
        0x08000b46:    d005        ..      BEQ      0x8000b54 ; LL_TIM_Init + 32
        0x08000b48:    4819        .H      LDR      r0,[pc,#100] ; [0x8000bb0] = 0x40000400
        0x08000b4a:    4282        .B      CMP      r2,r0
        0x08000b4c:    d002        ..      BEQ      0x8000b54 ; LL_TIM_Init + 32
        0x08000b4e:    4819        .H      LDR      r0,[pc,#100] ; [0x8000bb4] = 0x40000800
        0x08000b50:    4282        .B      CMP      r2,r0
        0x08000b52:    d104        ..      BNE      0x8000b5e ; LL_TIM_Init + 42
;;;352      {
;;;353        /* Select the Counter Mode */
;;;354        MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
        0x08000b54:    f0230070    #.p.    BIC      r0,r3,#0x70
        0x08000b58:    684c        Lh      LDR      r4,[r1,#4]
        0x08000b5a:    ea400304    @...    ORR      r3,r0,r4
;;;355      }
;;;356    
;;;357      if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
        0x08000b5e:    4813        .H      LDR      r0,[pc,#76] ; [0x8000bac] = 0x40012c00
        0x08000b60:    4282        .B      CMP      r2,r0
        0x08000b62:    d008        ..      BEQ      0x8000b76 ; LL_TIM_Init + 66
        0x08000b64:    f1b24f80    ...O    CMP      r2,#0x40000000
        0x08000b68:    d005        ..      BEQ      0x8000b76 ; LL_TIM_Init + 66
        0x08000b6a:    4811        .H      LDR      r0,[pc,#68] ; [0x8000bb0] = 0x40000400
        0x08000b6c:    4282        .B      CMP      r2,r0
        0x08000b6e:    d002        ..      BEQ      0x8000b76 ; LL_TIM_Init + 66
        0x08000b70:    4810        .H      LDR      r0,[pc,#64] ; [0x8000bb4] = 0x40000800
        0x08000b72:    4282        .B      CMP      r2,r0
        0x08000b74:    d104        ..      BNE      0x8000b80 ; LL_TIM_Init + 76
;;;358      {
;;;359        /* Set the clock division */
;;;360        MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
        0x08000b76:    f4237040    #.@p    BIC      r0,r3,#0x300
        0x08000b7a:    68cc        .h      LDR      r4,[r1,#0xc]
        0x08000b7c:    ea400304    @...    ORR      r3,r0,r4
;;;361      }
;;;362    
;;;363      /* Write to TIMx CR1 */
;;;364      LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
        0x08000b80:    6013        .`      STR      r3,[r2,#0]
;;;365    
;;;366      /* Set the Autoreload value */
;;;367      LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
        0x08000b82:    6888        .h      LDR      r0,[r1,#8]
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;1329     WRITE_REG(TIMx->ARR, AutoReload);
        0x08000b84:    62d0        .b      STR      r0,[r2,#0x2c]
;;;1330   }
        0x08000b86:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_tim.c
;;;370      LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
        0x08000b88:    8808        ..      LDRH     r0,[r1,#0]
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;1304     WRITE_REG(TIMx->PSC, Prescaler);
        0x08000b8a:    6290        .b      STR      r0,[r2,#0x28]
;;;1305   }
        0x08000b8c:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_tim.c
;;;372      if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
        0x08000b8e:    4807        .H      LDR      r0,[pc,#28] ; [0x8000bac] = 0x40012c00
        0x08000b90:    4282        .B      CMP      r2,r0
        0x08000b92:    d103        ..      BNE      0x8000b9c ; LL_TIM_Init + 104
;;;373      {
;;;374        /* Set the Repetition Counter value */
;;;375        LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
        0x08000b94:    7c08        .|      LDRB     r0,[r1,#0x10]
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;1354     WRITE_REG(TIMx->RCR, RepetitionCounter);
        0x08000b96:    6310        .c      STR      r0,[r2,#0x30]
;;;1355   }
        0x08000b98:    bf00        ..      NOP      
        0x08000b9a:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_tim.c
;;;380      LL_TIM_GenerateEvent_UPDATE(TIMx);
        0x08000b9c:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;3709     SET_BIT(TIMx->EGR, TIM_EGR_UG);
        0x08000b9e:    6950        Pi      LDR      r0,[r2,#0x14]
        0x08000ba0:    f0400001    @...    ORR      r0,r0,#1
        0x08000ba4:    6150        Pa      STR      r0,[r2,#0x14]
;;;3710   }
        0x08000ba6:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_tim.c
;;;382      return SUCCESS;
        0x08000ba8:    2001        .       MOVS     r0,#1
;;;383    }
        0x08000baa:    bd10        ..      POP      {r4,pc}
    $d
        0x08000bac:    40012c00    .,.@    DCD    1073818624
        0x08000bb0:    40000400    ...@    DCD    1073742848
        0x08000bb4:    40000800    ...@    DCD    1073743872
    $t
    i.LL_TIM_IsActiveFlag_UPDATE
    LL_TIM_IsActiveFlag_UPDATE
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;2939   {
        0x08000bb8:    4601        .F      MOV      r1,r0
;;;2940     return (READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF));
        0x08000bba:    6908        .i      LDR      r0,[r1,#0x10]
        0x08000bbc:    f0000001    ....    AND      r0,r0,#1
;;;2941   }
        0x08000bc0:    4770        pG      BX       lr
        0x08000bc2:    0000        ..      MOVS     r0,r0
    i.LL_TIM_OC_DisableFast
    LL_TIM_OC_DisableFast
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h (1802)
        0x08000bc4:    b570        p.      PUSH     {r4-r6,lr}
        0x08000bc6:    4602        .F      MOV      r2,r0
;;;1803     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
        0x08000bc8:    2901        .)      CMP      r1,#1
        0x08000bca:    d101        ..      BNE      0x8000bd0 ; LL_TIM_OC_DisableFast + 12
        0x08000bcc:    2400        .$      MOVS     r4,#0
        0x08000bce:    e016        ..      B        0x8000bfe ; LL_TIM_OC_DisableFast + 58
        0x08000bd0:    2904        .)      CMP      r1,#4
        0x08000bd2:    d101        ..      BNE      0x8000bd8 ; LL_TIM_OC_DisableFast + 20
        0x08000bd4:    2401        .$      MOVS     r4,#1
        0x08000bd6:    e012        ..      B        0x8000bfe ; LL_TIM_OC_DisableFast + 58
        0x08000bd8:    2910        .)      CMP      r1,#0x10
        0x08000bda:    d101        ..      BNE      0x8000be0 ; LL_TIM_OC_DisableFast + 28
        0x08000bdc:    2402        .$      MOVS     r4,#2
        0x08000bde:    e00e        ..      B        0x8000bfe ; LL_TIM_OC_DisableFast + 58
        0x08000be0:    2940        @)      CMP      r1,#0x40
        0x08000be2:    d101        ..      BNE      0x8000be8 ; LL_TIM_OC_DisableFast + 36
        0x08000be4:    2403        .$      MOVS     r4,#3
        0x08000be6:    e00a        ..      B        0x8000bfe ; LL_TIM_OC_DisableFast + 58
        0x08000be8:    f5b17f80    ....    CMP      r1,#0x100
        0x08000bec:    d101        ..      BNE      0x8000bf2 ; LL_TIM_OC_DisableFast + 46
        0x08000bee:    2404        .$      MOVS     r4,#4
        0x08000bf0:    e005        ..      B        0x8000bfe ; LL_TIM_OC_DisableFast + 58
        0x08000bf2:    f5b16f80    ...o    CMP      r1,#0x400
        0x08000bf6:    d101        ..      BNE      0x8000bfc ; LL_TIM_OC_DisableFast + 56
        0x08000bf8:    2405        .$      MOVS     r4,#5
        0x08000bfa:    e000        ..      B        0x8000bfe ; LL_TIM_OC_DisableFast + 58
        0x08000bfc:    2406        .$      MOVS     r4,#6
        0x08000bfe:    4623        #F      MOV      r3,r4
;;;1804     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
        0x08000c00:    4c06        .L      LDR      r4,[pc,#24] ; [0x8000c1c] = 0x8003b47
        0x08000c02:    5ce5        .\      LDRB     r5,[r4,r3]
        0x08000c04:    f1020418    ....    ADD      r4,r2,#0x18
        0x08000c08:    1928        (.      ADDS     r0,r5,r4
;;;1805     CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
        0x08000c0a:    4d05        .M      LDR      r5,[pc,#20] ; [0x8000c20] = 0x8003b4e
        0x08000c0c:    5cee        .\      LDRB     r6,[r5,r3]
        0x08000c0e:    2504        .%      MOVS     r5,#4
        0x08000c10:    40b5        .@      LSLS     r5,r5,r6
        0x08000c12:    6804        .h      LDR      r4,[r0,#0]
        0x08000c14:    43ac        .C      BICS     r4,r4,r5
        0x08000c16:    6004        .`      STR      r4,[r0,#0]
;;;1806   
;;;1807   }
        0x08000c18:    bd70        p.      POP      {r4-r6,pc}
    $d
        0x08000c1a:    0000        ..      DCW    0
        0x08000c1c:    08003b47    G;..    DCD    134232903
        0x08000c20:    08003b4e    N;..    DCD    134232910
    $t
    i.LL_TIM_OC_EnablePreload
    LL_TIM_OC_EnablePreload
;;;1808   
;;;1809   /**
;;;1810     * @brief  Indicates whether fast mode is enabled for the output channel.
;;;1811     * @rmtoll CCMR1        OC1FE          LL_TIM_OC_IsEnabledFast\n
;;;1812     *         CCMR1        OC2FE          LL_TIM_OC_IsEnabledFast\n
;;;1813     *         CCMR2        OC3FE          LL_TIM_OC_IsEnabledFast\n
;;;1814     *         CCMR2        OC4FE          LL_TIM_OC_IsEnabledFast\n
;;;1815     * @param  TIMx Timer instance
;;;1816     * @param  Channel This parameter can be one of the following values:
;;;1817     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1818     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1819     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1820     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1821     * @retval State of bit (1 or 0).
;;;1822     */
;;;1823   __STATIC_INLINE uint32_t LL_TIM_OC_IsEnabledFast(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1824   {
;;;1825     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1826     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1827     register uint32_t bitfield = TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel];
;;;1828     return (READ_BIT(*pReg, bitfield) == bitfield);
;;;1829   }
;;;1830   
;;;1831   /**
;;;1832     * @brief  Enable compare register (TIMx_CCRx) preload for the output channel.
;;;1833     * @rmtoll CCMR1        OC1PE          LL_TIM_OC_EnablePreload\n
;;;1834     *         CCMR1        OC2PE          LL_TIM_OC_EnablePreload\n
;;;1835     *         CCMR2        OC3PE          LL_TIM_OC_EnablePreload\n
;;;1836     *         CCMR2        OC4PE          LL_TIM_OC_EnablePreload
;;;1837     * @param  TIMx Timer instance
;;;1838     * @param  Channel This parameter can be one of the following values:
;;;1839     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1840     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1841     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1842     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1843     * @retval None
;;;1844     */
;;;1845   __STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1846   {
        0x08000c24:    b570        p.      PUSH     {r4-r6,lr}
        0x08000c26:    4602        .F      MOV      r2,r0
;;;1847     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
        0x08000c28:    2901        .)      CMP      r1,#1
        0x08000c2a:    d101        ..      BNE      0x8000c30 ; LL_TIM_OC_EnablePreload + 12
        0x08000c2c:    2400        .$      MOVS     r4,#0
        0x08000c2e:    e016        ..      B        0x8000c5e ; LL_TIM_OC_EnablePreload + 58
        0x08000c30:    2904        .)      CMP      r1,#4
        0x08000c32:    d101        ..      BNE      0x8000c38 ; LL_TIM_OC_EnablePreload + 20
        0x08000c34:    2401        .$      MOVS     r4,#1
        0x08000c36:    e012        ..      B        0x8000c5e ; LL_TIM_OC_EnablePreload + 58
        0x08000c38:    2910        .)      CMP      r1,#0x10
        0x08000c3a:    d101        ..      BNE      0x8000c40 ; LL_TIM_OC_EnablePreload + 28
        0x08000c3c:    2402        .$      MOVS     r4,#2
        0x08000c3e:    e00e        ..      B        0x8000c5e ; LL_TIM_OC_EnablePreload + 58
        0x08000c40:    2940        @)      CMP      r1,#0x40
        0x08000c42:    d101        ..      BNE      0x8000c48 ; LL_TIM_OC_EnablePreload + 36
        0x08000c44:    2403        .$      MOVS     r4,#3
        0x08000c46:    e00a        ..      B        0x8000c5e ; LL_TIM_OC_EnablePreload + 58
        0x08000c48:    f5b17f80    ....    CMP      r1,#0x100
        0x08000c4c:    d101        ..      BNE      0x8000c52 ; LL_TIM_OC_EnablePreload + 46
        0x08000c4e:    2404        .$      MOVS     r4,#4
        0x08000c50:    e005        ..      B        0x8000c5e ; LL_TIM_OC_EnablePreload + 58
        0x08000c52:    f5b16f80    ...o    CMP      r1,#0x400
        0x08000c56:    d101        ..      BNE      0x8000c5c ; LL_TIM_OC_EnablePreload + 56
        0x08000c58:    2405        .$      MOVS     r4,#5
        0x08000c5a:    e000        ..      B        0x8000c5e ; LL_TIM_OC_EnablePreload + 58
        0x08000c5c:    2406        .$      MOVS     r4,#6
        0x08000c5e:    4623        #F      MOV      r3,r4
;;;1848     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
        0x08000c60:    4c06        .L      LDR      r4,[pc,#24] ; [0x8000c7c] = 0x8003b47
        0x08000c62:    5ce5        .\      LDRB     r5,[r4,r3]
        0x08000c64:    f1020418    ....    ADD      r4,r2,#0x18
        0x08000c68:    1928        (.      ADDS     r0,r5,r4
;;;1849     SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
        0x08000c6a:    4d05        .M      LDR      r5,[pc,#20] ; [0x8000c80] = 0x8003b4e
        0x08000c6c:    5cee        .\      LDRB     r6,[r5,r3]
        0x08000c6e:    2508        .%      MOVS     r5,#8
        0x08000c70:    40b5        .@      LSLS     r5,r5,r6
        0x08000c72:    6804        .h      LDR      r4,[r0,#0]
        0x08000c74:    432c        ,C      ORRS     r4,r4,r5
        0x08000c76:    6004        .`      STR      r4,[r0,#0]
;;;1850   }
        0x08000c78:    bd70        p.      POP      {r4-r6,pc}
    $d
        0x08000c7a:    0000        ..      DCW    0
        0x08000c7c:    08003b47    G;..    DCD    134232903
        0x08000c80:    08003b4e    N;..    DCD    134232910
    $t
    i.LL_TIM_OC_Init
    LL_TIM_OC_Init
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_tim.c
;;;418    {
        0x08000c84:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x08000c88:    4606        .F      MOV      r6,r0
        0x08000c8a:    460c        .F      MOV      r4,r1
        0x08000c8c:    4615        .F      MOV      r5,r2
;;;419      ErrorStatus result = ERROR;
        0x08000c8e:    2700        .'      MOVS     r7,#0
;;;420    
;;;421      switch (Channel)
        0x08000c90:    2c01        .,      CMP      r4,#1
        0x08000c92:    d008        ..      BEQ      0x8000ca6 ; LL_TIM_OC_Init + 34
        0x08000c94:    2c10        .,      CMP      r4,#0x10
        0x08000c96:    d00c        ..      BEQ      0x8000cb2 ; LL_TIM_OC_Init + 46
        0x08000c98:    f5b47f80    ....    CMP      r4,#0x100
        0x08000c9c:    d00f        ..      BEQ      0x8000cbe ; LL_TIM_OC_Init + 58
        0x08000c9e:    f5b45f80    ..._    CMP      r4,#0x1000
        0x08000ca2:    d118        ..      BNE      0x8000cd6 ; LL_TIM_OC_Init + 82
        0x08000ca4:    e011        ..      B        0x8000cca ; LL_TIM_OC_Init + 70
;;;422      {
;;;423        case LL_TIM_CHANNEL_CH1:
;;;424          result = OC1Config(TIMx, TIM_OC_InitStruct);
        0x08000ca6:    4629        )F      MOV      r1,r5
        0x08000ca8:    4630        0F      MOV      r0,r6
        0x08000caa:    f000fb91    ....    BL       OC1Config ; 0x80013d0
        0x08000cae:    4607        .F      MOV      r7,r0
;;;425          break;
        0x08000cb0:    e012        ..      B        0x8000cd8 ; LL_TIM_OC_Init + 84
;;;426        case LL_TIM_CHANNEL_CH2:
;;;427          result = OC2Config(TIMx, TIM_OC_InitStruct);
        0x08000cb2:    4629        )F      MOV      r1,r5
        0x08000cb4:    4630        0F      MOV      r0,r6
        0x08000cb6:    f000fbc9    ....    BL       OC2Config ; 0x800144c
        0x08000cba:    4607        .F      MOV      r7,r0
;;;428          break;
        0x08000cbc:    e00c        ..      B        0x8000cd8 ; LL_TIM_OC_Init + 84
;;;429        case LL_TIM_CHANNEL_CH3:
;;;430          result = OC3Config(TIMx, TIM_OC_InitStruct);
        0x08000cbe:    4629        )F      MOV      r1,r5
        0x08000cc0:    4630        0F      MOV      r0,r6
        0x08000cc2:    f000fc07    ....    BL       OC3Config ; 0x80014d4
        0x08000cc6:    4607        .F      MOV      r7,r0
;;;431          break;
        0x08000cc8:    e006        ..      B        0x8000cd8 ; LL_TIM_OC_Init + 84
;;;432        case LL_TIM_CHANNEL_CH4:
;;;433          result = OC4Config(TIMx, TIM_OC_InitStruct);
        0x08000cca:    4629        )F      MOV      r1,r5
        0x08000ccc:    4630        0F      MOV      r0,r6
        0x08000cce:    f000fc3f    ..?.    BL       OC4Config ; 0x8001550
        0x08000cd2:    4607        .F      MOV      r7,r0
;;;434          break;
        0x08000cd4:    e000        ..      B        0x8000cd8 ; LL_TIM_OC_Init + 84
;;;435        default:
;;;436          break;
        0x08000cd6:    bf00        ..      NOP      
        0x08000cd8:    bf00        ..      NOP      
;;;437      }
;;;438    
;;;439      return result;
        0x08000cda:    4638        8F      MOV      r0,r7
;;;440    }
        0x08000cdc:    e8bd81f0    ....    POP      {r4-r8,pc}
    i.LL_TIM_OC_SetCompareCH2
    LL_TIM_OC_SetCompareCH2
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;2008     WRITE_REG(TIMx->CCR2, CompareValue);
        0x08000ce0:    6381        .c      STR      r1,[r0,#0x38]
;;;2009   }
        0x08000ce2:    4770        pG      BX       lr
    i.LL_TIM_SetClockSource
    LL_TIM_SetClockSource
;;;2010   
;;;2011   /**
;;;2012     * @brief  Set compare value for output channel 3 (TIMx_CCR3).
;;;2013     * @note Macro @ref IS_TIM_CC3_INSTANCE(TIMx) can be used to check whether or not
;;;2014     *       output channel is supported by a timer instance.
;;;2015     * @rmtoll CCR3         CCR3          LL_TIM_OC_SetCompareCH3
;;;2016     * @param  TIMx Timer instance
;;;2017     * @param  CompareValue between Min_Data=0 and Max_Data=65535
;;;2018     * @retval None
;;;2019     */
;;;2020   __STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
;;;2021   {
;;;2022     WRITE_REG(TIMx->CCR3, CompareValue);
;;;2023   }
;;;2024   
;;;2025   /**
;;;2026     * @brief  Set compare value for output channel 4 (TIMx_CCR4).
;;;2027     * @note Macro @ref IS_TIM_CC4_INSTANCE(TIMx) can be used to check whether or not
;;;2028     *       output channel 4 is supported by a timer instance.
;;;2029     * @rmtoll CCR4         CCR4          LL_TIM_OC_SetCompareCH4
;;;2030     * @param  TIMx Timer instance
;;;2031     * @param  CompareValue between Min_Data=0 and Max_Data=65535
;;;2032     * @retval None
;;;2033     */
;;;2034   __STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
;;;2035   {
;;;2036     WRITE_REG(TIMx->CCR4, CompareValue);
;;;2037   }
;;;2038   
;;;2039   /**
;;;2040     * @brief  Get compare value (TIMx_CCR1) set for  output channel 1.
;;;2041     * @note Macro @ref IS_TIM_CC1_INSTANCE(TIMx) can be used to check whether or not
;;;2042     *       output channel 1 is supported by a timer instance.
;;;2043     * @rmtoll CCR1         CCR1          LL_TIM_OC_GetCompareCH1
;;;2044     * @param  TIMx Timer instance
;;;2045     * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
;;;2046     */
;;;2047   __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH1(TIM_TypeDef *TIMx)
;;;2048   {
;;;2049     return (uint32_t)(READ_REG(TIMx->CCR1));
;;;2050   }
;;;2051   
;;;2052   /**
;;;2053     * @brief  Get compare value (TIMx_CCR2) set for  output channel 2.
;;;2054     * @note Macro @ref IS_TIM_CC2_INSTANCE(TIMx) can be used to check whether or not
;;;2055     *       output channel 2 is supported by a timer instance.
;;;2056     * @rmtoll CCR2         CCR2          LL_TIM_OC_GetCompareCH2
;;;2057     * @param  TIMx Timer instance
;;;2058     * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
;;;2059     */
;;;2060   __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH2(TIM_TypeDef *TIMx)
;;;2061   {
;;;2062     return (uint32_t)(READ_REG(TIMx->CCR2));
;;;2063   }
;;;2064   
;;;2065   /**
;;;2066     * @brief  Get compare value (TIMx_CCR3) set for  output channel 3.
;;;2067     * @note Macro @ref IS_TIM_CC3_INSTANCE(TIMx) can be used to check whether or not
;;;2068     *       output channel 3 is supported by a timer instance.
;;;2069     * @rmtoll CCR3         CCR3          LL_TIM_OC_GetCompareCH3
;;;2070     * @param  TIMx Timer instance
;;;2071     * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
;;;2072     */
;;;2073   __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH3(TIM_TypeDef *TIMx)
;;;2074   {
;;;2075     return (uint32_t)(READ_REG(TIMx->CCR3));
;;;2076   }
;;;2077   
;;;2078   /**
;;;2079     * @brief  Get compare value (TIMx_CCR4) set for  output channel 4.
;;;2080     * @note Macro @ref IS_TIM_CC4_INSTANCE(TIMx) can be used to check whether or not
;;;2081     *       output channel 4 is supported by a timer instance.
;;;2082     * @rmtoll CCR4         CCR4          LL_TIM_OC_GetCompareCH4
;;;2083     * @param  TIMx Timer instance
;;;2084     * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
;;;2085     */
;;;2086   __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH4(TIM_TypeDef *TIMx)
;;;2087   {
;;;2088     return (uint32_t)(READ_REG(TIMx->CCR4));
;;;2089   }
;;;2090   
;;;2091   /**
;;;2092     * @}
;;;2093     */
;;;2094   
;;;2095   /** @defgroup TIM_LL_EF_Input_Channel Input channel configuration
;;;2096     * @{
;;;2097     */
;;;2098   /**
;;;2099     * @brief  Configure input channel.
;;;2100     * @rmtoll CCMR1        CC1S          LL_TIM_IC_Config\n
;;;2101     *         CCMR1        IC1PSC        LL_TIM_IC_Config\n
;;;2102     *         CCMR1        IC1F          LL_TIM_IC_Config\n
;;;2103     *         CCMR1        CC2S          LL_TIM_IC_Config\n
;;;2104     *         CCMR1        IC2PSC        LL_TIM_IC_Config\n
;;;2105     *         CCMR1        IC2F          LL_TIM_IC_Config\n
;;;2106     *         CCMR2        CC3S          LL_TIM_IC_Config\n
;;;2107     *         CCMR2        IC3PSC        LL_TIM_IC_Config\n
;;;2108     *         CCMR2        IC3F          LL_TIM_IC_Config\n
;;;2109     *         CCMR2        CC4S          LL_TIM_IC_Config\n
;;;2110     *         CCMR2        IC4PSC        LL_TIM_IC_Config\n
;;;2111     *         CCMR2        IC4F          LL_TIM_IC_Config\n
;;;2112     *         CCER         CC1P          LL_TIM_IC_Config\n
;;;2113     *         CCER         CC1NP         LL_TIM_IC_Config\n
;;;2114     *         CCER         CC2P          LL_TIM_IC_Config\n
;;;2115     *         CCER         CC2NP         LL_TIM_IC_Config\n
;;;2116     *         CCER         CC3P          LL_TIM_IC_Config\n
;;;2117     *         CCER         CC3NP         LL_TIM_IC_Config\n
;;;2118     *         CCER         CC4P          LL_TIM_IC_Config\n
;;;2119     * @param  TIMx Timer instance
;;;2120     * @param  Channel This parameter can be one of the following values:
;;;2121     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2122     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2123     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2124     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2125     * @param  Configuration This parameter must be a combination of all the following values:
;;;2126     *         @arg @ref LL_TIM_ACTIVEINPUT_DIRECTTI or @ref LL_TIM_ACTIVEINPUT_INDIRECTTI or @ref LL_TIM_ACTIVEINPUT_TRC
;;;2127     *         @arg @ref LL_TIM_ICPSC_DIV1 or ... or @ref LL_TIM_ICPSC_DIV8
;;;2128     *         @arg @ref LL_TIM_IC_FILTER_FDIV1 or ... or @ref LL_TIM_IC_FILTER_FDIV32_N8
;;;2129     *         @arg @ref LL_TIM_IC_POLARITY_RISING or @ref LL_TIM_IC_POLARITY_FALLING
;;;2130     * @retval None
;;;2131     */
;;;2132   __STATIC_INLINE void LL_TIM_IC_Config(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Configuration)
;;;2133   {
;;;2134     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2135     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2136     MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F | TIM_CCMR1_IC1PSC | TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]),
;;;2137                ((Configuration >> 16U) & (TIM_CCMR1_IC1F | TIM_CCMR1_IC1PSC | TIM_CCMR1_CC1S))  << SHIFT_TAB_ICxx[iChannel]);
;;;2138     MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
;;;2139                (Configuration & (TIM_CCER_CC1NP | TIM_CCER_CC1P)) << SHIFT_TAB_CCxP[iChannel]);
;;;2140   }
;;;2141   
;;;2142   /**
;;;2143     * @brief  Set the active input.
;;;2144     * @rmtoll CCMR1        CC1S          LL_TIM_IC_SetActiveInput\n
;;;2145     *         CCMR1        CC2S          LL_TIM_IC_SetActiveInput\n
;;;2146     *         CCMR2        CC3S          LL_TIM_IC_SetActiveInput\n
;;;2147     *         CCMR2        CC4S          LL_TIM_IC_SetActiveInput
;;;2148     * @param  TIMx Timer instance
;;;2149     * @param  Channel This parameter can be one of the following values:
;;;2150     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2151     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2152     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2153     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2154     * @param  ICActiveInput This parameter can be one of the following values:
;;;2155     *         @arg @ref LL_TIM_ACTIVEINPUT_DIRECTTI
;;;2156     *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
;;;2157     *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
;;;2158     * @retval None
;;;2159     */
;;;2160   __STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiveInput)
;;;2161   {
;;;2162     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2163     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2164     MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
;;;2165   }
;;;2166   
;;;2167   /**
;;;2168     * @brief  Get the current active input.
;;;2169     * @rmtoll CCMR1        CC1S          LL_TIM_IC_GetActiveInput\n
;;;2170     *         CCMR1        CC2S          LL_TIM_IC_GetActiveInput\n
;;;2171     *         CCMR2        CC3S          LL_TIM_IC_GetActiveInput\n
;;;2172     *         CCMR2        CC4S          LL_TIM_IC_GetActiveInput
;;;2173     * @param  TIMx Timer instance
;;;2174     * @param  Channel This parameter can be one of the following values:
;;;2175     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2176     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2177     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2178     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2179     * @retval Returned value can be one of the following values:
;;;2180     *         @arg @ref LL_TIM_ACTIVEINPUT_DIRECTTI
;;;2181     *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
;;;2182     *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
;;;2183     */
;;;2184   __STATIC_INLINE uint32_t LL_TIM_IC_GetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel)
;;;2185   {
;;;2186     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2187     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2188     return ((READ_BIT(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iChannel]) << 16U);
;;;2189   }
;;;2190   
;;;2191   /**
;;;2192     * @brief  Set the prescaler of input channel.
;;;2193     * @rmtoll CCMR1        IC1PSC        LL_TIM_IC_SetPrescaler\n
;;;2194     *         CCMR1        IC2PSC        LL_TIM_IC_SetPrescaler\n
;;;2195     *         CCMR2        IC3PSC        LL_TIM_IC_SetPrescaler\n
;;;2196     *         CCMR2        IC4PSC        LL_TIM_IC_SetPrescaler
;;;2197     * @param  TIMx Timer instance
;;;2198     * @param  Channel This parameter can be one of the following values:
;;;2199     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2200     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2201     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2202     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2203     * @param  ICPrescaler This parameter can be one of the following values:
;;;2204     *         @arg @ref LL_TIM_ICPSC_DIV1
;;;2205     *         @arg @ref LL_TIM_ICPSC_DIV2
;;;2206     *         @arg @ref LL_TIM_ICPSC_DIV4
;;;2207     *         @arg @ref LL_TIM_ICPSC_DIV8
;;;2208     * @retval None
;;;2209     */
;;;2210   __STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
;;;2211   {
;;;2212     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2213     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2214     MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
;;;2215   }
;;;2216   
;;;2217   /**
;;;2218     * @brief  Get the current prescaler value acting on an  input channel.
;;;2219     * @rmtoll CCMR1        IC1PSC        LL_TIM_IC_GetPrescaler\n
;;;2220     *         CCMR1        IC2PSC        LL_TIM_IC_GetPrescaler\n
;;;2221     *         CCMR2        IC3PSC        LL_TIM_IC_GetPrescaler\n
;;;2222     *         CCMR2        IC4PSC        LL_TIM_IC_GetPrescaler
;;;2223     * @param  TIMx Timer instance
;;;2224     * @param  Channel This parameter can be one of the following values:
;;;2225     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2226     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2227     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2228     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2229     * @retval Returned value can be one of the following values:
;;;2230     *         @arg @ref LL_TIM_ICPSC_DIV1
;;;2231     *         @arg @ref LL_TIM_ICPSC_DIV2
;;;2232     *         @arg @ref LL_TIM_ICPSC_DIV4
;;;2233     *         @arg @ref LL_TIM_ICPSC_DIV8
;;;2234     */
;;;2235   __STATIC_INLINE uint32_t LL_TIM_IC_GetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel)
;;;2236   {
;;;2237     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2238     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2239     return ((READ_BIT(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iChannel]) << 16U);
;;;2240   }
;;;2241   
;;;2242   /**
;;;2243     * @brief  Set the input filter duration.
;;;2244     * @rmtoll CCMR1        IC1F          LL_TIM_IC_SetFilter\n
;;;2245     *         CCMR1        IC2F          LL_TIM_IC_SetFilter\n
;;;2246     *         CCMR2        IC3F          LL_TIM_IC_SetFilter\n
;;;2247     *         CCMR2        IC4F          LL_TIM_IC_SetFilter
;;;2248     * @param  TIMx Timer instance
;;;2249     * @param  Channel This parameter can be one of the following values:
;;;2250     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2251     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2252     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2253     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2254     * @param  ICFilter This parameter can be one of the following values:
;;;2255     *         @arg @ref LL_TIM_IC_FILTER_FDIV1
;;;2256     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N2
;;;2257     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N4
;;;2258     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N8
;;;2259     *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N6
;;;2260     *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N8
;;;2261     *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N6
;;;2262     *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N8
;;;2263     *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N6
;;;2264     *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N8
;;;2265     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N5
;;;2266     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N6
;;;2267     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N8
;;;2268     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N5
;;;2269     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
;;;2270     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
;;;2271     * @retval None
;;;2272     */
;;;2273   __STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
;;;2274   {
;;;2275     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2276     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2277     MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
;;;2278   }
;;;2279   
;;;2280   /**
;;;2281     * @brief  Get the input filter duration.
;;;2282     * @rmtoll CCMR1        IC1F          LL_TIM_IC_GetFilter\n
;;;2283     *         CCMR1        IC2F          LL_TIM_IC_GetFilter\n
;;;2284     *         CCMR2        IC3F          LL_TIM_IC_GetFilter\n
;;;2285     *         CCMR2        IC4F          LL_TIM_IC_GetFilter
;;;2286     * @param  TIMx Timer instance
;;;2287     * @param  Channel This parameter can be one of the following values:
;;;2288     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2289     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2290     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2291     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2292     * @retval Returned value can be one of the following values:
;;;2293     *         @arg @ref LL_TIM_IC_FILTER_FDIV1
;;;2294     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N2
;;;2295     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N4
;;;2296     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N8
;;;2297     *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N6
;;;2298     *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N8
;;;2299     *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N6
;;;2300     *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N8
;;;2301     *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N6
;;;2302     *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N8
;;;2303     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N5
;;;2304     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N6
;;;2305     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N8
;;;2306     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N5
;;;2307     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
;;;2308     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
;;;2309     */
;;;2310   __STATIC_INLINE uint32_t LL_TIM_IC_GetFilter(TIM_TypeDef *TIMx, uint32_t Channel)
;;;2311   {
;;;2312     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2313     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2314     return ((READ_BIT(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iChannel]) << 16U);
;;;2315   }
;;;2316   
;;;2317   /**
;;;2318     * @brief  Set the input channel polarity.
;;;2319     * @rmtoll CCER         CC1P          LL_TIM_IC_SetPolarity\n
;;;2320     *         CCER         CC1NP         LL_TIM_IC_SetPolarity\n
;;;2321     *         CCER         CC2P          LL_TIM_IC_SetPolarity\n
;;;2322     *         CCER         CC2NP         LL_TIM_IC_SetPolarity\n
;;;2323     *         CCER         CC3P          LL_TIM_IC_SetPolarity\n
;;;2324     *         CCER         CC3NP         LL_TIM_IC_SetPolarity\n
;;;2325     *         CCER         CC4P          LL_TIM_IC_SetPolarity\n
;;;2326     * @param  TIMx Timer instance
;;;2327     * @param  Channel This parameter can be one of the following values:
;;;2328     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2329     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2330     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2331     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2332     * @param  ICPolarity This parameter can be one of the following values:
;;;2333     *         @arg @ref LL_TIM_IC_POLARITY_RISING
;;;2334     *         @arg @ref LL_TIM_IC_POLARITY_FALLING
;;;2335     * @retval None
;;;2336     */
;;;2337   __STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
;;;2338   {
;;;2339     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2340     MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
;;;2341                ICPolarity << SHIFT_TAB_CCxP[iChannel]);
;;;2342   }
;;;2343   
;;;2344   /**
;;;2345     * @brief  Get the current input channel polarity.
;;;2346     * @rmtoll CCER         CC1P          LL_TIM_IC_GetPolarity\n
;;;2347     *         CCER         CC1NP         LL_TIM_IC_GetPolarity\n
;;;2348     *         CCER         CC2P          LL_TIM_IC_GetPolarity\n
;;;2349     *         CCER         CC2NP         LL_TIM_IC_GetPolarity\n
;;;2350     *         CCER         CC3P          LL_TIM_IC_GetPolarity\n
;;;2351     *         CCER         CC3NP         LL_TIM_IC_GetPolarity\n
;;;2352     *         CCER         CC4P          LL_TIM_IC_GetPolarity\n
;;;2353     * @param  TIMx Timer instance
;;;2354     * @param  Channel This parameter can be one of the following values:
;;;2355     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2356     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2357     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2358     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2359     * @retval Returned value can be one of the following values:
;;;2360     *         @arg @ref LL_TIM_IC_POLARITY_RISING
;;;2361     *         @arg @ref LL_TIM_IC_POLARITY_FALLING
;;;2362     */
;;;2363   __STATIC_INLINE uint32_t LL_TIM_IC_GetPolarity(TIM_TypeDef *TIMx, uint32_t Channel)
;;;2364   {
;;;2365     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2366     return (READ_BIT(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel])) >>
;;;2367             SHIFT_TAB_CCxP[iChannel]);
;;;2368   }
;;;2369   
;;;2370   /**
;;;2371     * @brief  Connect the TIMx_CH1, CH2 and CH3 pins  to the TI1 input (XOR combination).
;;;2372     * @note Macro @ref IS_TIM_XOR_INSTANCE(TIMx) can be used to check whether or not
;;;2373     *       a timer instance provides an XOR input.
;;;2374     * @rmtoll CR2          TI1S          LL_TIM_IC_EnableXORCombination
;;;2375     * @param  TIMx Timer instance
;;;2376     * @retval None
;;;2377     */
;;;2378   __STATIC_INLINE void LL_TIM_IC_EnableXORCombination(TIM_TypeDef *TIMx)
;;;2379   {
;;;2380     SET_BIT(TIMx->CR2, TIM_CR2_TI1S);
;;;2381   }
;;;2382   
;;;2383   /**
;;;2384     * @brief  Disconnect the TIMx_CH1, CH2 and CH3 pins  from the TI1 input.
;;;2385     * @note Macro @ref IS_TIM_XOR_INSTANCE(TIMx) can be used to check whether or not
;;;2386     *       a timer instance provides an XOR input.
;;;2387     * @rmtoll CR2          TI1S          LL_TIM_IC_DisableXORCombination
;;;2388     * @param  TIMx Timer instance
;;;2389     * @retval None
;;;2390     */
;;;2391   __STATIC_INLINE void LL_TIM_IC_DisableXORCombination(TIM_TypeDef *TIMx)
;;;2392   {
;;;2393     CLEAR_BIT(TIMx->CR2, TIM_CR2_TI1S);
;;;2394   }
;;;2395   
;;;2396   /**
;;;2397     * @brief  Indicates whether the TIMx_CH1, CH2 and CH3 pins are connectected to the TI1 input.
;;;2398     * @note Macro @ref IS_TIM_XOR_INSTANCE(TIMx) can be used to check whether or not
;;;2399     * a timer instance provides an XOR input.
;;;2400     * @rmtoll CR2          TI1S          LL_TIM_IC_IsEnabledXORCombination
;;;2401     * @param  TIMx Timer instance
;;;2402     * @retval State of bit (1 or 0).
;;;2403     */
;;;2404   __STATIC_INLINE uint32_t LL_TIM_IC_IsEnabledXORCombination(TIM_TypeDef *TIMx)
;;;2405   {
;;;2406     return (READ_BIT(TIMx->CR2, TIM_CR2_TI1S) == (TIM_CR2_TI1S));
;;;2407   }
;;;2408   
;;;2409   /**
;;;2410     * @brief  Get captured value for input channel 1.
;;;2411     * @note Macro @ref IS_TIM_CC1_INSTANCE(TIMx) can be used to check whether or not
;;;2412     *       input channel 1 is supported by a timer instance.
;;;2413     * @rmtoll CCR1         CCR1          LL_TIM_IC_GetCaptureCH1
;;;2414     * @param  TIMx Timer instance
;;;2415     * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
;;;2416     */
;;;2417   __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH1(TIM_TypeDef *TIMx)
;;;2418   {
;;;2419     return (uint32_t)(READ_REG(TIMx->CCR1));
;;;2420   }
;;;2421   
;;;2422   /**
;;;2423     * @brief  Get captured value for input channel 2.
;;;2424     * @note Macro @ref IS_TIM_CC2_INSTANCE(TIMx) can be used to check whether or not
;;;2425     *       input channel 2 is supported by a timer instance.
;;;2426     * @rmtoll CCR2         CCR2          LL_TIM_IC_GetCaptureCH2
;;;2427     * @param  TIMx Timer instance
;;;2428     * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
;;;2429     */
;;;2430   __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH2(TIM_TypeDef *TIMx)
;;;2431   {
;;;2432     return (uint32_t)(READ_REG(TIMx->CCR2));
;;;2433   }
;;;2434   
;;;2435   /**
;;;2436     * @brief  Get captured value for input channel 3.
;;;2437     * @note Macro @ref IS_TIM_CC3_INSTANCE(TIMx) can be used to check whether or not
;;;2438     *       input channel 3 is supported by a timer instance.
;;;2439     * @rmtoll CCR3         CCR3          LL_TIM_IC_GetCaptureCH3
;;;2440     * @param  TIMx Timer instance
;;;2441     * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
;;;2442     */
;;;2443   __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH3(TIM_TypeDef *TIMx)
;;;2444   {
;;;2445     return (uint32_t)(READ_REG(TIMx->CCR3));
;;;2446   }
;;;2447   
;;;2448   /**
;;;2449     * @brief  Get captured value for input channel 4.
;;;2450     * @note Macro @ref IS_TIM_CC4_INSTANCE(TIMx) can be used to check whether or not
;;;2451     *       input channel 4 is supported by a timer instance.
;;;2452     * @rmtoll CCR4         CCR4          LL_TIM_IC_GetCaptureCH4
;;;2453     * @param  TIMx Timer instance
;;;2454     * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
;;;2455     */
;;;2456   __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH4(TIM_TypeDef *TIMx)
;;;2457   {
;;;2458     return (uint32_t)(READ_REG(TIMx->CCR4));
;;;2459   }
;;;2460   
;;;2461   /**
;;;2462     * @}
;;;2463     */
;;;2464   
;;;2465   /** @defgroup TIM_LL_EF_Clock_Selection Counter clock selection
;;;2466     * @{
;;;2467     */
;;;2468   /**
;;;2469     * @brief  Enable external clock mode 2.
;;;2470     * @note When external clock mode 2 is enabled the counter is clocked by any active edge on the ETRF signal.
;;;2471     * @note Macro @ref IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
;;;2472     *       whether or not a timer instance supports external clock mode2.
;;;2473     * @rmtoll SMCR         ECE           LL_TIM_EnableExternalClock
;;;2474     * @param  TIMx Timer instance
;;;2475     * @retval None
;;;2476     */
;;;2477   __STATIC_INLINE void LL_TIM_EnableExternalClock(TIM_TypeDef *TIMx)
;;;2478   {
;;;2479     SET_BIT(TIMx->SMCR, TIM_SMCR_ECE);
;;;2480   }
;;;2481   
;;;2482   /**
;;;2483     * @brief  Disable external clock mode 2.
;;;2484     * @note Macro @ref IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
;;;2485     *       whether or not a timer instance supports external clock mode2.
;;;2486     * @rmtoll SMCR         ECE           LL_TIM_DisableExternalClock
;;;2487     * @param  TIMx Timer instance
;;;2488     * @retval None
;;;2489     */
;;;2490   __STATIC_INLINE void LL_TIM_DisableExternalClock(TIM_TypeDef *TIMx)
;;;2491   {
;;;2492     CLEAR_BIT(TIMx->SMCR, TIM_SMCR_ECE);
;;;2493   }
;;;2494   
;;;2495   /**
;;;2496     * @brief  Indicate whether external clock mode 2 is enabled.
;;;2497     * @note Macro @ref IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
;;;2498     *       whether or not a timer instance supports external clock mode2.
;;;2499     * @rmtoll SMCR         ECE           LL_TIM_IsEnabledExternalClock
;;;2500     * @param  TIMx Timer instance
;;;2501     * @retval State of bit (1 or 0).
;;;2502     */
;;;2503   __STATIC_INLINE uint32_t LL_TIM_IsEnabledExternalClock(TIM_TypeDef *TIMx)
;;;2504   {
;;;2505     return (READ_BIT(TIMx->SMCR, TIM_SMCR_ECE) == (TIM_SMCR_ECE));
;;;2506   }
;;;2507   
;;;2508   /**
;;;2509     * @brief  Set the clock source of the counter clock.
;;;2510     * @note when selected clock source is external clock mode 1, the timer input
;;;2511     *       the external clock is applied is selected by calling the @ref LL_TIM_SetTriggerInput()
;;;2512     *       function. This timer input must be configured by calling
;;;2513     *       the @ref LL_TIM_IC_Config() function.
;;;2514     * @note Macro @ref IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(TIMx) can be used to check
;;;2515     *       whether or not a timer instance supports external clock mode1.
;;;2516     * @note Macro @ref IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
;;;2517     *       whether or not a timer instance supports external clock mode2.
;;;2518     * @rmtoll SMCR         SMS           LL_TIM_SetClockSource\n
;;;2519     *         SMCR         ECE           LL_TIM_SetClockSource
;;;2520     * @param  TIMx Timer instance
;;;2521     * @param  ClockSource This parameter can be one of the following values:
;;;2522     *         @arg @ref LL_TIM_CLOCKSOURCE_INTERNAL
;;;2523     *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
;;;2524     *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
;;;2525     * @retval None
;;;2526     */
;;;2527   __STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
;;;2528   {
;;;2529     MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
        0x08000ce4:    6882        .h      LDR      r2,[r0,#8]
        0x08000ce6:    f2440307    D...    MOV      r3,#0x4007
        0x08000cea:    439a        .C      BICS     r2,r2,r3
        0x08000cec:    430a        .C      ORRS     r2,r2,r1
        0x08000cee:    6082        .`      STR      r2,[r0,#8]
;;;2530   }
        0x08000cf0:    4770        pG      BX       lr
    i.LL_TIM_SetSlaveMode
    LL_TIM_SetSlaveMode
;;;2531   
;;;2532   /**
;;;2533     * @brief  Set the encoder interface mode.
;;;2534     * @note Macro @ref IS_TIM_ENCODER_INTERFACE_INSTANCE(TIMx) can be used to check
;;;2535     *       whether or not a timer instance supports the encoder mode.
;;;2536     * @rmtoll SMCR         SMS           LL_TIM_SetEncoderMode
;;;2537     * @param  TIMx Timer instance
;;;2538     * @param  EncoderMode This parameter can be one of the following values:
;;;2539     *         @arg @ref LL_TIM_ENCODERMODE_X2_TI1
;;;2540     *         @arg @ref LL_TIM_ENCODERMODE_X2_TI2
;;;2541     *         @arg @ref LL_TIM_ENCODERMODE_X4_TI12
;;;2542     * @retval None
;;;2543     */
;;;2544   __STATIC_INLINE void LL_TIM_SetEncoderMode(TIM_TypeDef *TIMx, uint32_t EncoderMode)
;;;2545   {
;;;2546     MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
;;;2547   }
;;;2548   
;;;2549   /**
;;;2550     * @}
;;;2551     */
;;;2552   
;;;2553   /** @defgroup TIM_LL_EF_Timer_Synchronization Timer synchronisation configuration
;;;2554     * @{
;;;2555     */
;;;2556   /**
;;;2557     * @brief  Set the trigger output (TRGO) used for timer synchronization .
;;;2558     * @note Macro @ref IS_TIM_MASTER_INSTANCE(TIMx) can be used to check
;;;2559     *       whether or not a timer instance can operate as a master timer.
;;;2560     * @rmtoll CR2          MMS           LL_TIM_SetTriggerOutput
;;;2561     * @param  TIMx Timer instance
;;;2562     * @param  TimerSynchronization This parameter can be one of the following values:
;;;2563     *         @arg @ref LL_TIM_TRGO_RESET
;;;2564     *         @arg @ref LL_TIM_TRGO_ENABLE
;;;2565     *         @arg @ref LL_TIM_TRGO_UPDATE
;;;2566     *         @arg @ref LL_TIM_TRGO_CC1IF
;;;2567     *         @arg @ref LL_TIM_TRGO_OC1REF
;;;2568     *         @arg @ref LL_TIM_TRGO_OC2REF
;;;2569     *         @arg @ref LL_TIM_TRGO_OC3REF
;;;2570     *         @arg @ref LL_TIM_TRGO_OC4REF
;;;2571     * @retval None
;;;2572     */
;;;2573   __STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
;;;2574   {
;;;2575     MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
;;;2576   }
;;;2577   
;;;2578   /**
;;;2579     * @brief  Set the synchronization mode of a slave timer.
;;;2580     * @note Macro @ref IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
;;;2581     *       a timer instance can operate as a slave timer.
;;;2582     * @rmtoll SMCR         SMS           LL_TIM_SetSlaveMode
;;;2583     * @param  TIMx Timer instance
;;;2584     * @param  SlaveMode This parameter can be one of the following values:
;;;2585     *         @arg @ref LL_TIM_SLAVEMODE_DISABLED
;;;2586     *         @arg @ref LL_TIM_SLAVEMODE_RESET
;;;2587     *         @arg @ref LL_TIM_SLAVEMODE_GATED
;;;2588     *         @arg @ref LL_TIM_SLAVEMODE_TRIGGER
;;;2589     * @retval None
;;;2590     */
;;;2591   __STATIC_INLINE void LL_TIM_SetSlaveMode(TIM_TypeDef *TIMx, uint32_t SlaveMode)
;;;2592   {
;;;2593     MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
        0x08000cf2:    6882        .h      LDR      r2,[r0,#8]
        0x08000cf4:    f0220207    "...    BIC      r2,r2,#7
        0x08000cf8:    430a        .C      ORRS     r2,r2,r1
        0x08000cfa:    6082        .`      STR      r2,[r0,#8]
;;;2594   }
        0x08000cfc:    4770        pG      BX       lr
    i.LL_TIM_SetSlaveMode
    LL_TIM_SetSlaveMode
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h (2593)
        0x08000cfe:    6882        .h      LDR      r2,[r0,#8]
        0x08000d00:    f0220207    "...    BIC      r2,r2,#7
        0x08000d04:    430a        .C      ORRS     r2,r2,r1
        0x08000d06:    6082        .`      STR      r2,[r0,#8]
;;;2594   }
        0x08000d08:    4770        pG      BX       lr
    i.LL_TIM_SetTriggerInput
    LL_TIM_SetTriggerInput
;;;2595   
;;;2596   /**
;;;2597     * @brief  Set the selects the trigger input to be used to synchronize the counter.
;;;2598     * @note Macro @ref IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
;;;2599     *       a timer instance can operate as a slave timer.
;;;2600     * @rmtoll SMCR         TS            LL_TIM_SetTriggerInput
;;;2601     * @param  TIMx Timer instance
;;;2602     * @param  TriggerInput This parameter can be one of the following values:
;;;2603     *         @arg @ref LL_TIM_TS_ITR0
;;;2604     *         @arg @ref LL_TIM_TS_ITR1
;;;2605     *         @arg @ref LL_TIM_TS_ITR2
;;;2606     *         @arg @ref LL_TIM_TS_ITR3
;;;2607     *         @arg @ref LL_TIM_TS_TI1F_ED
;;;2608     *         @arg @ref LL_TIM_TS_TI1FP1
;;;2609     *         @arg @ref LL_TIM_TS_TI2FP2
;;;2610     *         @arg @ref LL_TIM_TS_ETRF
;;;2611     * @retval None
;;;2612     */
;;;2613   __STATIC_INLINE void LL_TIM_SetTriggerInput(TIM_TypeDef *TIMx, uint32_t TriggerInput)
;;;2614   {
;;;2615     MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
        0x08000d0a:    6882        .h      LDR      r2,[r0,#8]
        0x08000d0c:    f0220270    ".p.    BIC      r2,r2,#0x70
        0x08000d10:    430a        .C      ORRS     r2,r2,r1
        0x08000d12:    6082        .`      STR      r2,[r0,#8]
;;;2616   }
        0x08000d14:    4770        pG      BX       lr
    i.LL_TIM_SetTriggerOutput
    LL_TIM_SetTriggerOutput
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h (2575)
        0x08000d16:    6842        Bh      LDR      r2,[r0,#4]
        0x08000d18:    f0220270    ".p.    BIC      r2,r2,#0x70
        0x08000d1c:    430a        .C      ORRS     r2,r2,r1
        0x08000d1e:    6042        B`      STR      r2,[r0,#4]
;;;2576   }
        0x08000d20:    4770        pG      BX       lr
    i.LL_mDelay
    LL_mDelay
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_utils.c
;;;201    {
        0x08000d22:    b508        ..      PUSH     {r3,lr}
;;;202      __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
        0x08000d24:    f04f21e0    O..!    MOV      r1,#0xe000e000
        0x08000d28:    6909        .i      LDR      r1,[r1,#0x10]
        0x08000d2a:    9100        ..      STR      r1,[sp,#0]
;;;203      /* Add this code to indicate that local variable is not used */
;;;204      ((void)tmp);
        0x08000d2c:    bf00        ..      NOP      
;;;205    
;;;206      /* Add a period to guaranty minimum wait */
;;;207      if (Delay < LL_MAX_DELAY)
        0x08000d2e:    1c41        A.      ADDS     r1,r0,#1
        0x08000d30:    b101        ..      CBZ      r1,0x8000d34 ; LL_mDelay + 18
;;;208      {
;;;209        Delay++;
        0x08000d32:    1c40        @.      ADDS     r0,r0,#1
;;;210      }
;;;211    
;;;212      while (Delay)
        0x08000d34:    e006        ..      B        0x8000d44 ; LL_mDelay + 34
        0x08000d36:    f04f21e0    O..!    MOV      r1,#0xe000e000
        0x08000d3a:    6909        .i      LDR      r1,[r1,#0x10]
        0x08000d3c:    f4013180    ...1    AND      r1,r1,#0x10000
        0x08000d40:    b101        ..      CBZ      r1,0x8000d44 ; LL_mDelay + 34
        0x08000d42:    1e40        @.      SUBS     r0,r0,#1
        0x08000d44:    2800        .(      CMP      r0,#0
        0x08000d46:    d1f6        ..      BNE      0x8000d36 ; LL_mDelay + 20
;;;213      {
;;;214        if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
;;;215        {
;;;216          Delay--;
;;;217        }
;;;218      }
;;;219    }
        0x08000d48:    bd08        ..      POP      {r3,pc}
        0x08000d4a:    0000        ..      MOVS     r0,r0
    i.MX_DMA_Init
    MX_DMA_Init
;;; .\../Src/main.c
;;;862    {
        0x08000d4c:    b538        8.      PUSH     {r3-r5,lr}
;;;863      /* Init with LL driver */
;;;864      /* DMA controller clock enable */
;;;865      LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
        0x08000d4e:    2001        .       MOVS     r0,#1
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h
;;;288      SET_BIT(RCC->AHBENR, Periphs);
        0x08000d50:    490d        .I      LDR      r1,[pc,#52] ; [0x8000d88] = 0x40021000
        0x08000d52:    6949        Ii      LDR      r1,[r1,#0x14]
        0x08000d54:    4301        .C      ORRS     r1,r1,r0
        0x08000d56:    4a0c        .J      LDR      r2,[pc,#48] ; [0x8000d88] = 0x40021000
        0x08000d58:    6151        Qa      STR      r1,[r2,#0x14]
;;;289      /* Delay after an RCC peripheral clock enabling */
;;;290      tmpreg = READ_BIT(RCC->AHBENR, Periphs);
        0x08000d5a:    4611        .F      MOV      r1,r2
        0x08000d5c:    6949        Ii      LDR      r1,[r1,#0x14]
        0x08000d5e:    4001        .@      ANDS     r1,r1,r0
        0x08000d60:    9100        ..      STR      r1,[sp,#0]
;;;291      (void)tmpreg;
        0x08000d62:    bf00        ..      NOP      
;;;292    }
        0x08000d64:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;869      NVIC_SetPriority(DMA1_Channel4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
        0x08000d66:    f000fb17    ....    BL       NVIC_GetPriorityGrouping ; 0x8001398
        0x08000d6a:    4605        .F      MOV      r5,r0
        0x08000d6c:    2200        ."      MOVS     r2,#0
        0x08000d6e:    2102        .!      MOVS     r1,#2
        0x08000d70:    f000faf1    ....    BL       NVIC_EncodePriority ; 0x8001356
        0x08000d74:    4604        .F      MOV      r4,r0
        0x08000d76:    4621        !F      MOV      r1,r4
        0x08000d78:    200e        .       MOVS     r0,#0xe
        0x08000d7a:    f000fb15    ....    BL       NVIC_SetPriority ; 0x80013a8
;;;870      NVIC_EnableIRQ(DMA1_Channel4_IRQn);
        0x08000d7e:    200e        .       MOVS     r0,#0xe
        0x08000d80:    f000fade    ....    BL       NVIC_EnableIRQ ; 0x8001340
;;;871    
;;;872    }
        0x08000d84:    bd38        8.      POP      {r3-r5,pc}
    $d
        0x08000d86:    0000        ..      DCW    0
        0x08000d88:    40021000    ...@    DCD    1073876992
    $t
    i.MX_GPIO_Init
    MX_GPIO_Init
;;;873    
;;;874    /** Configure pins as 
;;;875            * Analog 
;;;876            * Input 
;;;877            * Output
;;;878            * EVENT_OUT
;;;879            * EXTI
;;;880            * Free pins are configured automatically as Analog (this feature is enabled through 
;;;881            * the Code Generation settings)
;;;882    */
;;;883    static void MX_GPIO_Init(void)
;;;884    {
        0x08000d8c:    b500        ..      PUSH     {lr}
        0x08000d8e:    b085        ..      SUB      sp,sp,#0x14
;;;885    
;;;886      LL_GPIO_InitTypeDef GPIO_InitStruct;
;;;887    
;;;888      /* GPIO Ports Clock Enable */
;;;889      LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
        0x08000d90:    2010        .       MOVS     r0,#0x10
        0x08000d92:    f7fffb6b    ..k.    BL       LL_APB2_GRP1_EnableClock ; 0x800046c
;;;890      LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
        0x08000d96:    2020                MOVS     r0,#0x20
        0x08000d98:    f7fffb68    ..h.    BL       LL_APB2_GRP1_EnableClock ; 0x800046c
;;;891      LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
        0x08000d9c:    2004        .       MOVS     r0,#4
        0x08000d9e:    f7fffb65    ..e.    BL       LL_APB2_GRP1_EnableClock ; 0x800046c
;;;892      LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
        0x08000da2:    2008        .       MOVS     r0,#8
        0x08000da4:    f7fffb62    ..b.    BL       LL_APB2_GRP1_EnableClock ; 0x800046c
;;;893    
;;;894      /**/
;;;895      LL_GPIO_ResetOutputPin(GPIOC, LED_Pin|MOTOR_X_DIR_Pin);
        0x08000da8:    492b        +I      LDR      r1,[pc,#172] ; [0x8000e58] = 0x4a000a0
        0x08000daa:    482c        ,H      LDR      r0,[pc,#176] ; [0x8000e5c] = 0x40011000
        0x08000dac:    f7fffc60    ..`.    BL       LL_GPIO_ResetOutputPin ; 0x8000670
;;;896    
;;;897      /**/
;;;898      LL_GPIO_ResetOutputPin(GPIOA, MOTOR_X_ENABLE_Pin|MOTOR_Z_DIR_Pin);
        0x08000db0:    f2482182    H..!    MOV      r1,#0x8282
        0x08000db4:    482a        *H      LDR      r0,[pc,#168] ; [0x8000e60] = 0x40010800
        0x08000db6:    f7fffc5b    ..[.    BL       LL_GPIO_ResetOutputPin ; 0x8000670
;;;899    
;;;900      /**/
;;;901      LL_GPIO_ResetOutputPin(MOTOR_Z_ENABLE_GPIO_Port, MOTOR_Z_ENABLE_Pin);
        0x08000dba:    f2402102    @..!    MOV      r1,#0x202
        0x08000dbe:    4829        )H      LDR      r0,[pc,#164] ; [0x8000e64] = 0x40010c00
        0x08000dc0:    f7fffc56    ..V.    BL       LL_GPIO_ResetOutputPin ; 0x8000670
;;;902    
;;;903      /**/
;;;904      GPIO_InitStruct.Pin = LED_Pin|MOTOR_X_DIR_Pin;
        0x08000dc4:    4824        $H      LDR      r0,[pc,#144] ; [0x8000e58] = 0x4a000a0
        0x08000dc6:    9000        ..      STR      r0,[sp,#0]
;;;905      GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
        0x08000dc8:    2001        .       MOVS     r0,#1
        0x08000dca:    9001        ..      STR      r0,[sp,#4]
;;;906      GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
        0x08000dcc:    2002        .       MOVS     r0,#2
        0x08000dce:    9002        ..      STR      r0,[sp,#8]
;;;907      GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
        0x08000dd0:    2000        .       MOVS     r0,#0
        0x08000dd2:    9003        ..      STR      r0,[sp,#0xc]
;;;908      LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
        0x08000dd4:    4669        iF      MOV      r1,sp
        0x08000dd6:    4821        !H      LDR      r0,[pc,#132] ; [0x8000e5c] = 0x40011000
        0x08000dd8:    f7fffbac    ....    BL       LL_GPIO_Init ; 0x8000534
;;;909    
;;;910      /**/
;;;911      GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
        0x08000ddc:    4822        "H      LDR      r0,[pc,#136] ; [0x8000e68] = 0x4400040
        0x08000dde:    9000        ..      STR      r0,[sp,#0]
;;;912      GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
        0x08000de0:    2000        .       MOVS     r0,#0
        0x08000de2:    9001        ..      STR      r0,[sp,#4]
;;;913      LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
        0x08000de4:    4669        iF      MOV      r1,sp
        0x08000de6:    481d        .H      LDR      r0,[pc,#116] ; [0x8000e5c] = 0x40011000
        0x08000de8:    f7fffba4    ....    BL       LL_GPIO_Init ; 0x8000534
;;;914    
;;;915      /**/
;;;916      GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_4 
        0x08000dec:    481f        .H      LDR      r0,[pc,#124] ; [0x8000e6c] = 0x49c7dfd
        0x08000dee:    9000        ..      STR      r0,[sp,#0]
;;;917                              |LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_10|LL_GPIO_PIN_11 
;;;918                              |LL_GPIO_PIN_12|LL_GPIO_PIN_15;
;;;919      GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
        0x08000df0:    2000        .       MOVS     r0,#0
        0x08000df2:    9001        ..      STR      r0,[sp,#4]
;;;920      LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
        0x08000df4:    4669        iF      MOV      r1,sp
        0x08000df6:    481a        .H      LDR      r0,[pc,#104] ; [0x8000e60] = 0x40010800
        0x08000df8:    f7fffb9c    ....    BL       LL_GPIO_Init ; 0x8000534
;;;921    
;;;922      /**/
;;;923      GPIO_InitStruct.Pin = MOTOR_X_ENABLE_Pin|MOTOR_Z_DIR_Pin;
        0x08000dfc:    f2482082    H..     MOV      r0,#0x8282
        0x08000e00:    9000        ..      STR      r0,[sp,#0]
;;;924      GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
        0x08000e02:    2001        .       MOVS     r0,#1
        0x08000e04:    9001        ..      STR      r0,[sp,#4]
;;;925      GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
        0x08000e06:    2002        .       MOVS     r0,#2
        0x08000e08:    9002        ..      STR      r0,[sp,#8]
;;;926      GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
        0x08000e0a:    2000        .       MOVS     r0,#0
        0x08000e0c:    9003        ..      STR      r0,[sp,#0xc]
;;;927      LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
        0x08000e0e:    4669        iF      MOV      r1,sp
        0x08000e10:    4813        .H      LDR      r0,[pc,#76] ; [0x8000e60] = 0x40010800
        0x08000e12:    f7fffb8f    ....    BL       LL_GPIO_Init ; 0x8000534
;;;928    
;;;929      /**/
;;;930      GPIO_InitStruct.Pin = MOTOR_Z_ENABLE_Pin;
        0x08000e16:    f2402002    @..     MOV      r0,#0x202
        0x08000e1a:    9000        ..      STR      r0,[sp,#0]
;;;931      GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
        0x08000e1c:    2001        .       MOVS     r0,#1
        0x08000e1e:    9001        ..      STR      r0,[sp,#4]
;;;932      GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
        0x08000e20:    2002        .       MOVS     r0,#2
        0x08000e22:    9002        ..      STR      r0,[sp,#8]
;;;933      GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
        0x08000e24:    2000        .       MOVS     r0,#0
        0x08000e26:    9003        ..      STR      r0,[sp,#0xc]
;;;934      LL_GPIO_Init(MOTOR_Z_ENABLE_GPIO_Port, &GPIO_InitStruct);
        0x08000e28:    4669        iF      MOV      r1,sp
        0x08000e2a:    480e        .H      LDR      r0,[pc,#56] ; [0x8000e64] = 0x40010c00
        0x08000e2c:    f7fffb82    ....    BL       LL_GPIO_Init ; 0x8000534
;;;935    
;;;936      /**/
;;;937      GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14 
        0x08000e30:    480f        .H      LDR      r0,[pc,#60] ; [0x8000e70] = 0x4f23cfe
        0x08000e32:    9000        ..      STR      r0,[sp,#0]
;;;938                              |LL_GPIO_PIN_15|LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5 
;;;939                              |LL_GPIO_PIN_9;
;;;940      GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
        0x08000e34:    2000        .       MOVS     r0,#0
        0x08000e36:    9001        ..      STR      r0,[sp,#4]
;;;941      LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
        0x08000e38:    4669        iF      MOV      r1,sp
        0x08000e3a:    480a        .H      LDR      r0,[pc,#40] ; [0x8000e64] = 0x40010c00
        0x08000e3c:    f7fffb7a    ..z.    BL       LL_GPIO_Init ; 0x8000534
;;;942    
;;;943      /**/
;;;944      GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin;
        0x08000e40:    480c        .H      LDR      r0,[pc,#48] ; [0x8000e74] = 0x4030003
        0x08000e42:    9000        ..      STR      r0,[sp,#0]
;;;945      GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
        0x08000e44:    2008        .       MOVS     r0,#8
        0x08000e46:    9001        ..      STR      r0,[sp,#4]
;;;946      GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
        0x08000e48:    2001        .       MOVS     r0,#1
        0x08000e4a:    9004        ..      STR      r0,[sp,#0x10]
;;;947      LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
        0x08000e4c:    4669        iF      MOV      r1,sp
        0x08000e4e:    4804        .H      LDR      r0,[pc,#16] ; [0x8000e60] = 0x40010800
        0x08000e50:    f7fffb70    ..p.    BL       LL_GPIO_Init ; 0x8000534
;;;948    
;;;949    }
        0x08000e54:    b005        ..      ADD      sp,sp,#0x14
        0x08000e56:    bd00        ..      POP      {pc}
    $d
        0x08000e58:    04a000a0    ....    DCD    77594784
        0x08000e5c:    40011000    ...@    DCD    1073811456
        0x08000e60:    40010800    ...@    DCD    1073809408
        0x08000e64:    40010c00    ...@    DCD    1073810432
        0x08000e68:    04400040    @.@.    DCD    71303232
        0x08000e6c:    049c7dfd    .}..    DCD    77364733
        0x08000e70:    04f23cfe    .<..    DCD    82984190
        0x08000e74:    04030003    ....    DCD    67305475
    $t
    i.MX_I2C2_Init
    MX_I2C2_Init
;;; .\../Src/main.c (579)
        0x08000e78:    b530        0.      PUSH     {r4,r5,lr}
        0x08000e7a:    b08b        ..      SUB      sp,sp,#0x2c
;;;580    
;;;581      LL_I2C_InitTypeDef I2C_InitStruct;
;;;582    
;;;583      LL_GPIO_InitTypeDef GPIO_InitStruct;
;;;584    
;;;585      /**I2C2 GPIO Configuration  
;;;586      PB10   ------> I2C2_SCL
;;;587      PB11   ------> I2C2_SDA 
;;;588      */
;;;589      GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
        0x08000e7c:    485a        ZH      LDR      r0,[pc,#360] ; [0x8000fe8] = 0x40c000c
        0x08000e7e:    9000        ..      STR      r0,[sp,#0]
;;;590      GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
        0x08000e80:    2009        .       MOVS     r0,#9
        0x08000e82:    9001        ..      STR      r0,[sp,#4]
;;;591      GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
        0x08000e84:    2003        .       MOVS     r0,#3
        0x08000e86:    9002        ..      STR      r0,[sp,#8]
;;;592      GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
        0x08000e88:    2004        .       MOVS     r0,#4
        0x08000e8a:    9003        ..      STR      r0,[sp,#0xc]
;;;593      LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
        0x08000e8c:    4669        iF      MOV      r1,sp
        0x08000e8e:    4857        WH      LDR      r0,[pc,#348] ; [0x8000fec] = 0x40010c00
        0x08000e90:    f7fffb50    ..P.    BL       LL_GPIO_Init ; 0x8000534
;;;594    
;;;595      /* Peripheral clock enable */
;;;596      LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
        0x08000e94:    f44f0080    O...    MOV      r0,#0x400000
        0x08000e98:    f7fffada    ....    BL       LL_APB1_GRP1_EnableClock ; 0x8000450
;;;597    
;;;598      /* I2C2 DMA Init */
;;;599      
;;;600      /* I2C2_TX Init */
;;;601      LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_4, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
        0x08000e9c:    4854        TH      LDR      r0,[pc,#336] ; [0x8000ff0] = 0x40020000
        0x08000e9e:    2104        .!      MOVS     r1,#4
        0x08000ea0:    2210        ."      MOVS     r2,#0x10
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h
;;;571      MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
        0x08000ea2:    1e4b        K.      SUBS     r3,r1,#1
        0x08000ea4:    4c53        SL      LDR      r4,[pc,#332] ; [0x8000ff4] = 0x8003b40
        0x08000ea6:    5ce3        .\      LDRB     r3,[r4,r3]
        0x08000ea8:    58c3        .X      LDR      r3,[r0,r3]
        0x08000eaa:    f2440410    D...    MOV      r4,#0x4010
        0x08000eae:    43a3        .C      BICS     r3,r3,r4
        0x08000eb0:    4313        .C      ORRS     r3,r3,r2
        0x08000eb2:    1e4c        L.      SUBS     r4,r1,#1
        0x08000eb4:    4d4f        OM      LDR      r5,[pc,#316] ; [0x8000ff4] = 0x8003b40
        0x08000eb6:    5d2c        ,]      LDRB     r4,[r5,r4]
        0x08000eb8:    5103        .Q      STR      r3,[r0,r4]
;;;572                 DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
;;;573    }
        0x08000eba:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;603      LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PRIORITY_LOW);
        0x08000ebc:    2200        ."      MOVS     r2,#0
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h
;;;851      MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
        0x08000ebe:    1e4b        K.      SUBS     r3,r1,#1
        0x08000ec0:    462c        ,F      MOV      r4,r5
        0x08000ec2:    5ce3        .\      LDRB     r3,[r4,r3]
        0x08000ec4:    58c3        .X      LDR      r3,[r0,r3]
        0x08000ec6:    f4235340    #.@S    BIC      r3,r3,#0x3000
        0x08000eca:    4313        .C      ORRS     r3,r3,r2
        0x08000ecc:    1e4c        L.      SUBS     r4,r1,#1
        0x08000ece:    5d2c        ,]      LDRB     r4,[r5,r4]
        0x08000ed0:    5103        .Q      STR      r3,[r0,r4]
;;;852                 Priority);
;;;853    }
        0x08000ed2:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;605      LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MODE_NORMAL);
        0x08000ed4:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h
;;;620      MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
        0x08000ed6:    1e4b        K.      SUBS     r3,r1,#1
        0x08000ed8:    462c        ,F      MOV      r4,r5
        0x08000eda:    5ce3        .\      LDRB     r3,[r4,r3]
        0x08000edc:    58c3        .X      LDR      r3,[r0,r3]
        0x08000ede:    f0230320    #. .    BIC      r3,r3,#0x20
        0x08000ee2:    4313        .C      ORRS     r3,r3,r2
        0x08000ee4:    1e4c        L.      SUBS     r4,r1,#1
        0x08000ee6:    5d2c        ,]      LDRB     r4,[r5,r4]
        0x08000ee8:    5103        .Q      STR      r3,[r0,r4]
;;;621                 Mode);
;;;622    }
        0x08000eea:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;607      LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PERIPH_NOINCREMENT);
        0x08000eec:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h
;;;665      MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
        0x08000eee:    1e4b        K.      SUBS     r3,r1,#1
        0x08000ef0:    462c        ,F      MOV      r4,r5
        0x08000ef2:    5ce3        .\      LDRB     r3,[r4,r3]
        0x08000ef4:    58c3        .X      LDR      r3,[r0,r3]
        0x08000ef6:    f0230340    #.@.    BIC      r3,r3,#0x40
        0x08000efa:    4313        .C      ORRS     r3,r3,r2
        0x08000efc:    1e4c        L.      SUBS     r4,r1,#1
        0x08000efe:    5d2c        ,]      LDRB     r4,[r5,r4]
        0x08000f00:    5103        .Q      STR      r3,[r0,r4]
;;;666                 PeriphOrM2MSrcIncMode);
;;;667    }
        0x08000f02:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;609      LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MEMORY_INCREMENT);
        0x08000f04:    2280        ."      MOVS     r2,#0x80
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h
;;;710      MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
        0x08000f06:    1e4b        K.      SUBS     r3,r1,#1
        0x08000f08:    462c        ,F      MOV      r4,r5
        0x08000f0a:    5ce3        .\      LDRB     r3,[r4,r3]
        0x08000f0c:    58c3        .X      LDR      r3,[r0,r3]
        0x08000f0e:    f0230380    #...    BIC      r3,r3,#0x80
        0x08000f12:    4313        .C      ORRS     r3,r3,r2
        0x08000f14:    1e4c        L.      SUBS     r4,r1,#1
        0x08000f16:    5d2c        ,]      LDRB     r4,[r5,r4]
        0x08000f18:    5103        .Q      STR      r3,[r0,r4]
;;;711                 MemoryOrM2MDstIncMode);
;;;712    }
        0x08000f1a:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;611      LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PDATAALIGN_BYTE);
        0x08000f1c:    2200        ."      MOVS     r2,#0
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h
;;;756      MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
        0x08000f1e:    1e4b        K.      SUBS     r3,r1,#1
        0x08000f20:    462c        ,F      MOV      r4,r5
        0x08000f22:    5ce3        .\      LDRB     r3,[r4,r3]
        0x08000f24:    58c3        .X      LDR      r3,[r0,r3]
        0x08000f26:    f4237340    #.@s    BIC      r3,r3,#0x300
        0x08000f2a:    4313        .C      ORRS     r3,r3,r2
        0x08000f2c:    1e4c        L.      SUBS     r4,r1,#1
        0x08000f2e:    5d2c        ,]      LDRB     r4,[r5,r4]
        0x08000f30:    5103        .Q      STR      r3,[r0,r4]
;;;757                 PeriphOrM2MSrcDataSize);
;;;758    }
        0x08000f32:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;613      LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MDATAALIGN_BYTE);
        0x08000f34:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h
;;;803      MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
        0x08000f36:    1e4b        K.      SUBS     r3,r1,#1
        0x08000f38:    462c        ,F      MOV      r4,r5
        0x08000f3a:    5ce3        .\      LDRB     r3,[r4,r3]
        0x08000f3c:    58c3        .X      LDR      r3,[r0,r3]
        0x08000f3e:    f4236340    #.@c    BIC      r3,r3,#0xc00
        0x08000f42:    4313        .C      ORRS     r3,r3,r2
        0x08000f44:    1e4c        L.      SUBS     r4,r1,#1
        0x08000f46:    5d2c        ,]      LDRB     r4,[r5,r4]
        0x08000f48:    5103        .Q      STR      r3,[r0,r4]
;;;804                 MemoryOrM2MDstDataSize);
;;;805    }
        0x08000f4a:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;616      NVIC_SetPriority(I2C2_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
        0x08000f4c:    f000fa24    ..$.    BL       NVIC_GetPriorityGrouping ; 0x8001398
        0x08000f50:    4605        .F      MOV      r5,r0
        0x08000f52:    2200        ."      MOVS     r2,#0
        0x08000f54:    2102        .!      MOVS     r1,#2
        0x08000f56:    f000f9fe    ....    BL       NVIC_EncodePriority ; 0x8001356
        0x08000f5a:    4604        .F      MOV      r4,r0
        0x08000f5c:    4621        !F      MOV      r1,r4
        0x08000f5e:    2021        !       MOVS     r0,#0x21
        0x08000f60:    f000fa22    ..".    BL       NVIC_SetPriority ; 0x80013a8
;;;617      NVIC_EnableIRQ(I2C2_EV_IRQn);
        0x08000f64:    2021        !       MOVS     r0,#0x21
        0x08000f66:    f000f9eb    ....    BL       NVIC_EnableIRQ ; 0x8001340
;;;618      NVIC_SetPriority(I2C2_ER_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
        0x08000f6a:    f000fa15    ....    BL       NVIC_GetPriorityGrouping ; 0x8001398
        0x08000f6e:    4605        .F      MOV      r5,r0
        0x08000f70:    2200        ."      MOVS     r2,#0
        0x08000f72:    2102        .!      MOVS     r1,#2
        0x08000f74:    f000f9ef    ....    BL       NVIC_EncodePriority ; 0x8001356
        0x08000f78:    4604        .F      MOV      r4,r0
        0x08000f7a:    4621        !F      MOV      r1,r4
        0x08000f7c:    2022        "       MOVS     r0,#0x22
        0x08000f7e:    f000fa13    ....    BL       NVIC_SetPriority ; 0x80013a8
;;;619      NVIC_EnableIRQ(I2C2_ER_IRQn);
        0x08000f82:    2022        "       MOVS     r0,#0x22
        0x08000f84:    f000f9dc    ....    BL       NVIC_EnableIRQ ; 0x8001340
;;;620    
;;;621        /**I2C Initialization 
;;;622        */
;;;623      LL_I2C_DisableOwnAddress2(I2C2);
        0x08000f88:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;590      CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
        0x08000f8a:    481b        .H      LDR      r0,[pc,#108] ; [0x8000ff8] = 0x40005800
        0x08000f8c:    68c0        .h      LDR      r0,[r0,#0xc]
        0x08000f8e:    f0200001     ...    BIC      r0,r0,#1
        0x08000f92:    4919        .I      LDR      r1,[pc,#100] ; [0x8000ff8] = 0x40005800
        0x08000f94:    60c8        .`      STR      r0,[r1,#0xc]
;;;591    }
        0x08000f96:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;625      LL_I2C_DisableGeneralCall(I2C2);
        0x08000f98:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;526      CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
        0x08000f9a:    4608        .F      MOV      r0,r1
        0x08000f9c:    6800        .h      LDR      r0,[r0,#0]
        0x08000f9e:    f0200040     .@.    BIC      r0,r0,#0x40
        0x08000fa2:    6008        .`      STR      r0,[r1,#0]
;;;527    }
        0x08000fa4:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;627      LL_I2C_EnableClockStretching(I2C2);
        0x08000fa6:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;479      CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
        0x08000fa8:    4608        .F      MOV      r0,r1
        0x08000faa:    6800        .h      LDR      r0,[r0,#0]
        0x08000fac:    f0200080     ...    BIC      r0,r0,#0x80
        0x08000fb0:    6008        .`      STR      r0,[r1,#0]
;;;480    }
        0x08000fb2:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;629      I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
        0x08000fb4:    2000        .       MOVS     r0,#0
        0x08000fb6:    9005        ..      STR      r0,[sp,#0x14]
;;;630      I2C_InitStruct.ClockSpeed = 400000;
        0x08000fb8:    4810        .H      LDR      r0,[pc,#64] ; [0x8000ffc] = 0x61a80
        0x08000fba:    9006        ..      STR      r0,[sp,#0x18]
;;;631      I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
        0x08000fbc:    2000        .       MOVS     r0,#0
        0x08000fbe:    9007        ..      STR      r0,[sp,#0x1c]
;;;632      I2C_InitStruct.OwnAddress1 = 0;
        0x08000fc0:    9008        ..      STR      r0,[sp,#0x20]
;;;633      I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
        0x08000fc2:    1508        ..      ASRS     r0,r1,#20
        0x08000fc4:    9009        ..      STR      r0,[sp,#0x24]
;;;634      I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
        0x08000fc6:    0100        ..      LSLS     r0,r0,#4
        0x08000fc8:    900a        ..      STR      r0,[sp,#0x28]
;;;635      LL_I2C_Init(I2C2, &I2C_InitStruct);
        0x08000fca:    a905        ..      ADD      r1,sp,#0x14
        0x08000fcc:    480a        .H      LDR      r0,[pc,#40] ; [0x8000ff8] = 0x40005800
        0x08000fce:    f7fffbbc    ....    BL       LL_I2C_Init ; 0x800074a
;;;636    
;;;637      LL_I2C_SetOwnAddress2(I2C2, 0);
        0x08000fd2:    2000        .       MOVS     r0,#0
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;568      MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
        0x08000fd4:    4908        .I      LDR      r1,[pc,#32] ; [0x8000ff8] = 0x40005800
        0x08000fd6:    68c9        .h      LDR      r1,[r1,#0xc]
        0x08000fd8:    f02101fe    !...    BIC      r1,r1,#0xfe
        0x08000fdc:    4301        .C      ORRS     r1,r1,r0
        0x08000fde:    4a06        .J      LDR      r2,[pc,#24] ; [0x8000ff8] = 0x40005800
        0x08000fe0:    60d1        .`      STR      r1,[r2,#0xc]
;;;569    }
        0x08000fe2:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;639    }
        0x08000fe4:    b00b        ..      ADD      sp,sp,#0x2c
        0x08000fe6:    bd30        0.      POP      {r4,r5,pc}
    $d
        0x08000fe8:    040c000c    ....    DCD    67895308
        0x08000fec:    40010c00    ...@    DCD    1073810432
        0x08000ff0:    40020000    ...@    DCD    1073872896
        0x08000ff4:    08003b40    @;..    DCD    134232896
        0x08000ff8:    40005800    .X.@    DCD    1073764352
        0x08000ffc:    00061a80    ....    DCD    400000
    $t
    i.MX_TIM1_Init
    MX_TIM1_Init
;;;640    
;;;641    /* TIM1 init function */
;;;642    static void MX_TIM1_Init(void)
;;;643    {
        0x08001000:    b530        0.      PUSH     {r4,r5,lr}
        0x08001002:    b093        ..      SUB      sp,sp,#0x4c
;;;644    
;;;645      LL_TIM_InitTypeDef TIM_InitStruct;
;;;646      LL_TIM_OC_InitTypeDef TIM_OC_InitStruct;
;;;647      LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct;
;;;648    
;;;649      /* Peripheral clock enable */
;;;650      LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
        0x08001004:    f44f6000    O..`    MOV      r0,#0x800
        0x08001008:    f7fffa30    ..0.    BL       LL_APB2_GRP1_EnableClock ; 0x800046c
;;;651    
;;;652      /* TIM1 interrupt Init */
;;;653      NVIC_SetPriority(TIM1_UP_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
        0x0800100c:    f000f9c4    ....    BL       NVIC_GetPriorityGrouping ; 0x8001398
        0x08001010:    4605        .F      MOV      r5,r0
        0x08001012:    2200        ."      MOVS     r2,#0
        0x08001014:    210f        .!      MOVS     r1,#0xf
        0x08001016:    f000f99e    ....    BL       NVIC_EncodePriority ; 0x8001356
        0x0800101a:    4604        .F      MOV      r4,r0
        0x0800101c:    4621        !F      MOV      r1,r4
        0x0800101e:    2019        .       MOVS     r0,#0x19
        0x08001020:    f000f9c2    ....    BL       NVIC_SetPriority ; 0x80013a8
;;;654      NVIC_EnableIRQ(TIM1_UP_IRQn);
        0x08001024:    2019        .       MOVS     r0,#0x19
        0x08001026:    f000f98b    ....    BL       NVIC_EnableIRQ ; 0x8001340
;;;655    
;;;656      TIM_InitStruct.Prescaler = 720;
        0x0800102a:    f44f7034    O.4p    MOV      r0,#0x2d0
        0x0800102e:    f8ad0038    ..8.    STRH     r0,[sp,#0x38]
;;;657      TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
        0x08001032:    2000        .       MOVS     r0,#0
        0x08001034:    900f        ..      STR      r0,[sp,#0x3c]
;;;658      TIM_InitStruct.Autoreload = 0;
        0x08001036:    9010        ..      STR      r0,[sp,#0x40]
;;;659      TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
        0x08001038:    9011        ..      STR      r0,[sp,#0x44]
;;;660      TIM_InitStruct.RepetitionCounter = 0;
        0x0800103a:    f88d0048    ..H.    STRB     r0,[sp,#0x48]
;;;661      LL_TIM_Init(TIM1, &TIM_InitStruct);
        0x0800103e:    a90e        ..      ADD      r1,sp,#0x38
        0x08001040:    481d        .H      LDR      r0,[pc,#116] ; [0x80010b8] = 0x40012c00
        0x08001042:    f7fffd77    ..w.    BL       LL_TIM_Init ; 0x8000b34
;;;662    
;;;663      LL_TIM_DisableARRPreload(TIM1);
        0x08001046:    481c        .H      LDR      r0,[pc,#112] ; [0x80010b8] = 0x40012c00
        0x08001048:    f7fffc8d    ....    BL       LL_TIM_DisableARRPreload ; 0x8000966
;;;664    
;;;665      LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
        0x0800104c:    2100        .!      MOVS     r1,#0
        0x0800104e:    481a        .H      LDR      r0,[pc,#104] ; [0x80010b8] = 0x40012c00
        0x08001050:    f7fffe48    ..H.    BL       LL_TIM_SetClockSource ; 0x8000ce4
;;;666    
;;;667      LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
        0x08001054:    2101        .!      MOVS     r1,#1
        0x08001056:    4818        .H      LDR      r0,[pc,#96] ; [0x80010b8] = 0x40012c00
        0x08001058:    f7fffde4    ....    BL       LL_TIM_OC_EnablePreload ; 0x8000c24
;;;668    
;;;669      TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
        0x0800105c:    2060        `       MOVS     r0,#0x60
        0x0800105e:    9006        ..      STR      r0,[sp,#0x18]
;;;670      TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
        0x08001060:    2000        .       MOVS     r0,#0
        0x08001062:    9007        ..      STR      r0,[sp,#0x1c]
;;;671      TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
        0x08001064:    9008        ..      STR      r0,[sp,#0x20]
;;;672      TIM_OC_InitStruct.CompareValue = 0;
        0x08001066:    9009        ..      STR      r0,[sp,#0x24]
;;;673      TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
        0x08001068:    900a        ..      STR      r0,[sp,#0x28]
;;;674      TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
        0x0800106a:    900b        ..      STR      r0,[sp,#0x2c]
;;;675      TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
        0x0800106c:    900c        ..      STR      r0,[sp,#0x30]
;;;676      TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
        0x0800106e:    900d        ..      STR      r0,[sp,#0x34]
;;;677      LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
        0x08001070:    aa06        ..      ADD      r2,sp,#0x18
        0x08001072:    2101        .!      MOVS     r1,#1
        0x08001074:    4810        .H      LDR      r0,[pc,#64] ; [0x80010b8] = 0x40012c00
        0x08001076:    f7fffe05    ....    BL       LL_TIM_OC_Init ; 0x8000c84
;;;678    
;;;679      LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
        0x0800107a:    2101        .!      MOVS     r1,#1
        0x0800107c:    480e        .H      LDR      r0,[pc,#56] ; [0x80010b8] = 0x40012c00
        0x0800107e:    f7fffda1    ....    BL       LL_TIM_OC_DisableFast ; 0x8000bc4
;;;680    
;;;681      LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
        0x08001082:    2100        .!      MOVS     r1,#0
        0x08001084:    480c        .H      LDR      r0,[pc,#48] ; [0x80010b8] = 0x40012c00
        0x08001086:    f7fffe46    ..F.    BL       LL_TIM_SetTriggerOutput ; 0x8000d16
;;;682    
;;;683      LL_TIM_DisableMasterSlaveMode(TIM1);
        0x0800108a:    480b        .H      LDR      r0,[pc,#44] ; [0x80010b8] = 0x40012c00
        0x0800108c:    f7fffc70    ..p.    BL       LL_TIM_DisableMasterSlaveMode ; 0x8000970
;;;684    
;;;685      TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
        0x08001090:    2000        .       MOVS     r0,#0
        0x08001092:    9000        ..      STR      r0,[sp,#0]
;;;686      TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
        0x08001094:    9001        ..      STR      r0,[sp,#4]
;;;687      TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
        0x08001096:    9002        ..      STR      r0,[sp,#8]
;;;688      TIM_BDTRInitStruct.DeadTime = 0;
        0x08001098:    f88d000c    ....    STRB     r0,[sp,#0xc]
;;;689      TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
        0x0800109c:    f8ad000e    ....    STRH     r0,[sp,#0xe]
;;;690      TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
        0x080010a0:    f44f5000    O..P    MOV      r0,#0x2000
        0x080010a4:    9004        ..      STR      r0,[sp,#0x10]
;;;691      TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
        0x080010a6:    2000        .       MOVS     r0,#0
        0x080010a8:    9005        ..      STR      r0,[sp,#0x14]
;;;692      LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
        0x080010aa:    4669        iF      MOV      r1,sp
        0x080010ac:    4802        .H      LDR      r0,[pc,#8] ; [0x80010b8] = 0x40012c00
        0x080010ae:    f7fffc2d    ..-.    BL       LL_TIM_BDTR_Init ; 0x800090c
;;;693    
;;;694    }
        0x080010b2:    b013        ..      ADD      sp,sp,#0x4c
        0x080010b4:    bd30        0.      POP      {r4,r5,pc}
    $d
        0x080010b6:    0000        ..      DCW    0
        0x080010b8:    40012c00    .,.@    DCD    1073818624
    $t
    i.MX_TIM2_Init
    MX_TIM2_Init
;;;695    
;;;696    /* TIM2 init function */
;;;697    static void MX_TIM2_Init(void)
;;;698    {
        0x080010bc:    b530        0.      PUSH     {r4,r5,lr}
        0x080010be:    b08d        ..      SUB      sp,sp,#0x34
;;;699    
;;;700      LL_TIM_InitTypeDef TIM_InitStruct;
;;;701      LL_TIM_OC_InitTypeDef TIM_OC_InitStruct;
;;;702    
;;;703      /* Peripheral clock enable */
;;;704      LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
        0x080010c0:    2001        .       MOVS     r0,#1
        0x080010c2:    f7fff9c5    ....    BL       LL_APB1_GRP1_EnableClock ; 0x8000450
;;;705    
;;;706      /* TIM2 interrupt Init */
;;;707      NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
        0x080010c6:    f000f967    ..g.    BL       NVIC_GetPriorityGrouping ; 0x8001398
        0x080010ca:    4605        .F      MOV      r5,r0
        0x080010cc:    2200        ."      MOVS     r2,#0
        0x080010ce:    210f        .!      MOVS     r1,#0xf
        0x080010d0:    f000f941    ..A.    BL       NVIC_EncodePriority ; 0x8001356
        0x080010d4:    4604        .F      MOV      r4,r0
        0x080010d6:    4621        !F      MOV      r1,r4
        0x080010d8:    201c        .       MOVS     r0,#0x1c
        0x080010da:    f000f965    ..e.    BL       NVIC_SetPriority ; 0x80013a8
;;;708      NVIC_EnableIRQ(TIM2_IRQn);
        0x080010de:    201c        .       MOVS     r0,#0x1c
        0x080010e0:    f000f92e    ....    BL       NVIC_EnableIRQ ; 0x8001340
;;;709    
;;;710      TIM_InitStruct.Prescaler = 7200;
        0x080010e4:    f44f50e1    O..P    MOV      r0,#0x1c20
        0x080010e8:    f8ad0020    .. .    STRH     r0,[sp,#0x20]
;;;711      TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
        0x080010ec:    2000        .       MOVS     r0,#0
        0x080010ee:    9009        ..      STR      r0,[sp,#0x24]
;;;712      TIM_InitStruct.Autoreload = 0;
        0x080010f0:    900a        ..      STR      r0,[sp,#0x28]
;;;713      TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
        0x080010f2:    900b        ..      STR      r0,[sp,#0x2c]
;;;714      LL_TIM_Init(TIM2, &TIM_InitStruct);
        0x080010f4:    a908        ..      ADD      r1,sp,#0x20
        0x080010f6:    f04f4080    O..@    MOV      r0,#0x40000000
        0x080010fa:    f7fffd1b    ....    BL       LL_TIM_Init ; 0x8000b34
;;;715    
;;;716      LL_TIM_EnableARRPreload(TIM2);
        0x080010fe:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;1195     SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
        0x08001100:    f04f4080    O..@    MOV      r0,#0x40000000
        0x08001104:    6800        .h      LDR      r0,[r0,#0]
        0x08001106:    f0400080    @...    ORR      r0,r0,#0x80
        0x0800110a:    f04f4180    O..A    MOV      r1,#0x40000000
        0x0800110e:    6008        .`      STR      r0,[r1,#0]
;;;1196   }
        0x08001110:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;718      LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
        0x08001112:    2100        .!      MOVS     r1,#0
        0x08001114:    f04f4080    O..@    MOV      r0,#0x40000000
        0x08001118:    f7fffde4    ....    BL       LL_TIM_SetClockSource ; 0x8000ce4
;;;719    
;;;720      LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
        0x0800111c:    2101        .!      MOVS     r1,#1
        0x0800111e:    0788        ..      LSLS     r0,r1,#30
        0x08001120:    f7fffd80    ....    BL       LL_TIM_OC_EnablePreload ; 0x8000c24
;;;721    
;;;722      TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
        0x08001124:    2060        `       MOVS     r0,#0x60
        0x08001126:    9000        ..      STR      r0,[sp,#0]
;;;723      TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
        0x08001128:    2000        .       MOVS     r0,#0
        0x0800112a:    9001        ..      STR      r0,[sp,#4]
;;;724      TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
        0x0800112c:    9002        ..      STR      r0,[sp,#8]
;;;725      TIM_OC_InitStruct.CompareValue = 0;
        0x0800112e:    9003        ..      STR      r0,[sp,#0xc]
;;;726      TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
        0x08001130:    9004        ..      STR      r0,[sp,#0x10]
;;;727      LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
        0x08001132:    466a        jF      MOV      r2,sp
        0x08001134:    2101        .!      MOVS     r1,#1
        0x08001136:    0788        ..      LSLS     r0,r1,#30
        0x08001138:    f7fffda4    ....    BL       LL_TIM_OC_Init ; 0x8000c84
;;;728    
;;;729      LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
        0x0800113c:    2101        .!      MOVS     r1,#1
        0x0800113e:    0788        ..      LSLS     r0,r1,#30
        0x08001140:    f7fffd40    ..@.    BL       LL_TIM_OC_DisableFast ; 0x8000bc4
;;;730    
;;;731      LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
        0x08001144:    2120         !      MOVS     r1,#0x20
        0x08001146:    0648        H.      LSLS     r0,r1,#25
        0x08001148:    f7fffde5    ....    BL       LL_TIM_SetTriggerOutput ; 0x8000d16
;;;732    
;;;733      LL_TIM_EnableMasterSlaveMode(TIM2);
        0x0800114c:    f04f4080    O..@    MOV      r0,#0x40000000
        0x08001150:    f7fffc1d    ....    BL       LL_TIM_EnableMasterSlaveMode ; 0x800098e
;;;734    
;;;735    }
        0x08001154:    b00d        ..      ADD      sp,sp,#0x34
        0x08001156:    bd30        0.      POP      {r4,r5,pc}
    i.MX_TIM3_Init
    MX_TIM3_Init
;;;736    
;;;737    /* TIM3 init function */
;;;738    static void MX_TIM3_Init(void)
;;;739    {
        0x08001158:    b500        ..      PUSH     {lr}
        0x0800115a:    b093        ..      SUB      sp,sp,#0x4c
;;;740    
;;;741      LL_TIM_InitTypeDef TIM_InitStruct;
;;;742      LL_TIM_OC_InitTypeDef TIM_OC_InitStruct;
;;;743    
;;;744      LL_GPIO_InitTypeDef GPIO_InitStruct;
;;;745    
;;;746      /* Peripheral clock enable */
;;;747      LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
        0x0800115c:    2002        .       MOVS     r0,#2
        0x0800115e:    f7fff977    ..w.    BL       LL_APB1_GRP1_EnableClock ; 0x8000450
;;;748    
;;;749      TIM_InitStruct.Prescaler = 0;
        0x08001162:    2000        .       MOVS     r0,#0
        0x08001164:    f8ad0038    ..8.    STRH     r0,[sp,#0x38]
;;;750      TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
        0x08001168:    900f        ..      STR      r0,[sp,#0x3c]
;;;751      TIM_InitStruct.Autoreload = min_pulse;
        0x0800116a:    2091        .       MOVS     r0,#0x91
        0x0800116c:    9010        ..      STR      r0,[sp,#0x40]
;;;752      TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
        0x0800116e:    2000        .       MOVS     r0,#0
        0x08001170:    9011        ..      STR      r0,[sp,#0x44]
;;;753      LL_TIM_Init(TIM3, &TIM_InitStruct);
        0x08001172:    a90e        ..      ADD      r1,sp,#0x38
        0x08001174:    482b        +H      LDR      r0,[pc,#172] ; [0x8001224] = 0x40000400
        0x08001176:    f7fffcdd    ....    BL       LL_TIM_Init ; 0x8000b34
;;;754    
;;;755      LL_TIM_DisableARRPreload(TIM3);
        0x0800117a:    482a        *H      LDR      r0,[pc,#168] ; [0x8001224] = 0x40000400
        0x0800117c:    f7fffbf3    ....    BL       LL_TIM_DisableARRPreload ; 0x8000966
;;;756    
;;;757      LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH3);
        0x08001180:    f44f7180    O..q    MOV      r1,#0x100
        0x08001184:    4827        'H      LDR      r0,[pc,#156] ; [0x8001224] = 0x40000400
        0x08001186:    f7fffd4d    ..M.    BL       LL_TIM_OC_EnablePreload ; 0x8000c24
;;;758    
;;;759      TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM2;
        0x0800118a:    2070        p       MOVS     r0,#0x70
        0x0800118c:    9006        ..      STR      r0,[sp,#0x18]
;;;760      TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
        0x0800118e:    2000        .       MOVS     r0,#0
        0x08001190:    9007        ..      STR      r0,[sp,#0x1c]
;;;761      TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
        0x08001192:    9008        ..      STR      r0,[sp,#0x20]
;;;762      TIM_OC_InitStruct.CompareValue = 0;
        0x08001194:    9009        ..      STR      r0,[sp,#0x24]
;;;763      TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
        0x08001196:    900a        ..      STR      r0,[sp,#0x28]
;;;764      LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
        0x08001198:    aa06        ..      ADD      r2,sp,#0x18
        0x0800119a:    f44f7180    O..q    MOV      r1,#0x100
        0x0800119e:    4821        !H      LDR      r0,[pc,#132] ; [0x8001224] = 0x40000400
        0x080011a0:    f7fffd70    ..p.    BL       LL_TIM_OC_Init ; 0x8000c84
;;;765    
;;;766      LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH3);
        0x080011a4:    f44f7180    O..q    MOV      r1,#0x100
        0x080011a8:    481e        .H      LDR      r0,[pc,#120] ; [0x8001224] = 0x40000400
        0x080011aa:    f7fffd0b    ....    BL       LL_TIM_OC_DisableFast ; 0x8000bc4
;;;767    
;;;768      LL_TIM_SetOnePulseMode(TIM3, LL_TIM_ONEPULSEMODE_SINGLE);
        0x080011ae:    2008        .       MOVS     r0,#8
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;1130     MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
        0x080011b0:    491c        .I      LDR      r1,[pc,#112] ; [0x8001224] = 0x40000400
        0x080011b2:    6809        .h      LDR      r1,[r1,#0]
        0x080011b4:    f0210108    !...    BIC      r1,r1,#8
        0x080011b8:    4301        .C      ORRS     r1,r1,r0
        0x080011ba:    4a1a        .J      LDR      r2,[pc,#104] ; [0x8001224] = 0x40000400
        0x080011bc:    6011        .`      STR      r1,[r2,#0]
;;;1131   }
        0x080011be:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;770      LL_TIM_SetTriggerInput(TIM3, LL_TIM_TS_ITR3);
        0x080011c0:    2030        0       MOVS     r0,#0x30
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;2615     MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
        0x080011c2:    4611        .F      MOV      r1,r2
        0x080011c4:    6889        .h      LDR      r1,[r1,#8]
        0x080011c6:    f0210170    !.p.    BIC      r1,r1,#0x70
        0x080011ca:    4301        .C      ORRS     r1,r1,r0
        0x080011cc:    6091        .`      STR      r1,[r2,#8]
;;;2616   }
        0x080011ce:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;772      LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_TRIGGER);
        0x080011d0:    2106        .!      MOVS     r1,#6
        0x080011d2:    4610        .F      MOV      r0,r2
        0x080011d4:    f7fffd93    ....    BL       LL_TIM_SetSlaveMode ; 0x8000cfe
;;;773    
;;;774      LL_TIM_DisableIT_TRIG(TIM3);
        0x080011d8:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;3409     CLEAR_BIT(TIMx->DIER, TIM_DIER_TIE);
        0x080011da:    4812        .H      LDR      r0,[pc,#72] ; [0x8001224] = 0x40000400
        0x080011dc:    68c0        .h      LDR      r0,[r0,#0xc]
        0x080011de:    f0200040     .@.    BIC      r0,r0,#0x40
        0x080011e2:    4910        .I      LDR      r1,[pc,#64] ; [0x8001224] = 0x40000400
        0x080011e4:    60c8        .`      STR      r0,[r1,#0xc]
;;;3410   }
        0x080011e6:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;776      LL_TIM_DisableDMAReq_TRIG(TIM3);
        0x080011e8:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;3680     CLEAR_BIT(TIMx->DIER, TIM_DIER_TDE);
        0x080011ea:    4608        .F      MOV      r0,r1
        0x080011ec:    68c0        .h      LDR      r0,[r0,#0xc]
        0x080011ee:    f4204080     ..@    BIC      r0,r0,#0x4000
        0x080011f2:    60c8        .`      STR      r0,[r1,#0xc]
;;;3681   }
        0x080011f4:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;778      LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
        0x080011f6:    2100        .!      MOVS     r1,#0
        0x080011f8:    480a        .H      LDR      r0,[pc,#40] ; [0x8001224] = 0x40000400
        0x080011fa:    f7fffd8c    ....    BL       LL_TIM_SetTriggerOutput ; 0x8000d16
;;;779    
;;;780      LL_TIM_DisableMasterSlaveMode(TIM3);
        0x080011fe:    4809        .H      LDR      r0,[pc,#36] ; [0x8001224] = 0x40000400
        0x08001200:    f7fffbb6    ....    BL       LL_TIM_DisableMasterSlaveMode ; 0x8000970
;;;781    
;;;782      /**TIM3 GPIO Configuration  
;;;783      PB0   ------> TIM3_CH3 
;;;784      */
;;;785      GPIO_InitStruct.Pin = MOTOR_Z_STEP_Pin;
        0x08001204:    f2401001    @...    MOV      r0,#0x101
        0x08001208:    9001        ..      STR      r0,[sp,#4]
;;;786      GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
        0x0800120a:    2009        .       MOVS     r0,#9
        0x0800120c:    9002        ..      STR      r0,[sp,#8]
;;;787      GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
        0x0800120e:    2003        .       MOVS     r0,#3
        0x08001210:    9003        ..      STR      r0,[sp,#0xc]
;;;788      GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
        0x08001212:    2000        .       MOVS     r0,#0
        0x08001214:    9004        ..      STR      r0,[sp,#0x10]
;;;789      LL_GPIO_Init(MOTOR_Z_STEP_GPIO_Port, &GPIO_InitStruct);
        0x08001216:    a901        ..      ADD      r1,sp,#4
        0x08001218:    4803        .H      LDR      r0,[pc,#12] ; [0x8001228] = 0x40010c00
        0x0800121a:    f7fff98b    ....    BL       LL_GPIO_Init ; 0x8000534
;;;790    
;;;791    }
        0x0800121e:    b013        ..      ADD      sp,sp,#0x4c
        0x08001220:    bd00        ..      POP      {pc}
    $d
        0x08001222:    0000        ..      DCW    0
        0x08001224:    40000400    ...@    DCD    1073742848
        0x08001228:    40010c00    ...@    DCD    1073810432
    $t
    i.MX_TIM4_Init
    MX_TIM4_Init
;;;792    
;;;793    /* TIM4 init function */
;;;794    static void MX_TIM4_Init(void)
;;;795    {
        0x0800122c:    b530        0.      PUSH     {r4,r5,lr}
        0x0800122e:    b08b        ..      SUB      sp,sp,#0x2c
;;;796    
;;;797      LL_TIM_InitTypeDef TIM_InitStruct;
;;;798    
;;;799      LL_GPIO_InitTypeDef GPIO_InitStruct;
;;;800    
;;;801      /* Peripheral clock enable */
;;;802      LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
        0x08001230:    2004        .       MOVS     r0,#4
        0x08001232:    f7fff90d    ....    BL       LL_APB1_GRP1_EnableClock ; 0x8000450
;;;803      
;;;804      /**TIM4 GPIO Configuration  
;;;805      PB6   ------> TIM4_CH1
;;;806      PB7   ------> TIM4_CH2
;;;807      PB8   ------> TIM4_CH3 
;;;808      */
;;;809      GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin|ENC_ZERO_Pin;
        0x08001236:    483f        ?H      LDR      r0,[pc,#252] ; [0x8001334] = 0x401c0c1
        0x08001238:    9001        ..      STR      r0,[sp,#4]
;;;810      GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
        0x0800123a:    2008        .       MOVS     r0,#8
        0x0800123c:    9002        ..      STR      r0,[sp,#8]
;;;811      GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
        0x0800123e:    2001        .       MOVS     r0,#1
        0x08001240:    9005        ..      STR      r0,[sp,#0x14]
;;;812      LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
        0x08001242:    a901        ..      ADD      r1,sp,#4
        0x08001244:    483c        <H      LDR      r0,[pc,#240] ; [0x8001338] = 0x40010c00
        0x08001246:    f7fff975    ..u.    BL       LL_GPIO_Init ; 0x8000534
;;;813    
;;;814      /* TIM4 interrupt Init */
;;;815      NVIC_SetPriority(TIM4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
        0x0800124a:    f000f8a5    ....    BL       NVIC_GetPriorityGrouping ; 0x8001398
        0x0800124e:    4605        .F      MOV      r5,r0
        0x08001250:    2200        ."      MOVS     r2,#0
        0x08001252:    4611        .F      MOV      r1,r2
        0x08001254:    f000f87f    ....    BL       NVIC_EncodePriority ; 0x8001356
        0x08001258:    4604        .F      MOV      r4,r0
        0x0800125a:    4621        !F      MOV      r1,r4
        0x0800125c:    201e        .       MOVS     r0,#0x1e
        0x0800125e:    f000f8a3    ....    BL       NVIC_SetPriority ; 0x80013a8
;;;816      NVIC_EnableIRQ(TIM4_IRQn);
        0x08001262:    201e        .       MOVS     r0,#0x1e
        0x08001264:    f000f86c    ..l.    BL       NVIC_EnableIRQ ; 0x8001340
;;;817    
;;;818      TIM_InitStruct.Prescaler = 0;
        0x08001268:    2000        .       MOVS     r0,#0
        0x0800126a:    f8ad0018    ....    STRH     r0,[sp,#0x18]
;;;819      TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
        0x0800126e:    9007        ..      STR      r0,[sp,#0x1c]
;;;820      TIM_InitStruct.Autoreload = 8;
        0x08001270:    2008        .       MOVS     r0,#8
        0x08001272:    9008        ..      STR      r0,[sp,#0x20]
;;;821      TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
        0x08001274:    2000        .       MOVS     r0,#0
        0x08001276:    9009        ..      STR      r0,[sp,#0x24]
;;;822      LL_TIM_Init(TIM4, &TIM_InitStruct);
        0x08001278:    a906        ..      ADD      r1,sp,#0x18
        0x0800127a:    4830        0H      LDR      r0,[pc,#192] ; [0x800133c] = 0x40000800
        0x0800127c:    f7fffc5a    ..Z.    BL       LL_TIM_Init ; 0x8000b34
;;;823    
;;;824      LL_TIM_DisableARRPreload(TIM4);
        0x08001280:    482e        .H      LDR      r0,[pc,#184] ; [0x800133c] = 0x40000800
        0x08001282:    f7fffb70    ..p.    BL       LL_TIM_DisableARRPreload ; 0x8000966
;;;825    
;;;826      LL_TIM_SetEncoderMode(TIM4, LL_TIM_ENCODERMODE_X2_TI1);
        0x08001286:    2001        .       MOVS     r0,#1
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;2546     MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
        0x08001288:    492c        ,I      LDR      r1,[pc,#176] ; [0x800133c] = 0x40000800
        0x0800128a:    6889        .h      LDR      r1,[r1,#8]
        0x0800128c:    f0210107    !...    BIC      r1,r1,#7
        0x08001290:    4301        .C      ORRS     r1,r1,r0
        0x08001292:    4a2a        *J      LDR      r2,[pc,#168] ; [0x800133c] = 0x40000800
        0x08001294:    6091        .`      STR      r1,[r2,#8]
;;;2547   }
        0x08001296:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;828      LL_TIM_IC_SetActiveInput(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
        0x08001298:    0402        ..      LSLS     r2,r0,#16
        0x0800129a:    2101        .!      MOVS     r1,#1
        0x0800129c:    4827        'H      LDR      r0,[pc,#156] ; [0x800133c] = 0x40000800
        0x0800129e:    f7fffb7b    ..{.    BL       LL_TIM_IC_SetActiveInput ; 0x8000998
;;;829    
;;;830      LL_TIM_IC_SetPrescaler(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
        0x080012a2:    2200        ."      MOVS     r2,#0
        0x080012a4:    2101        .!      MOVS     r1,#1
        0x080012a6:    4825        %H      LDR      r0,[pc,#148] ; [0x800133c] = 0x40000800
        0x080012a8:    f7fffc0e    ....    BL       LL_TIM_IC_SetPrescaler ; 0x8000ac8
;;;831    
;;;832      LL_TIM_IC_SetFilter(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV32_N8);
        0x080012ac:    f44f0270    O.p.    MOV      r2,#0xf00000
        0x080012b0:    2101        .!      MOVS     r1,#1
        0x080012b2:    4822        "H      LDR      r0,[pc,#136] ; [0x800133c] = 0x40000800
        0x080012b4:    f7fffba6    ....    BL       LL_TIM_IC_SetFilter ; 0x8000a04
;;;833    
;;;834      LL_TIM_IC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
        0x080012b8:    2200        ."      MOVS     r2,#0
        0x080012ba:    2101        .!      MOVS     r1,#1
        0x080012bc:    481f        .H      LDR      r0,[pc,#124] ; [0x800133c] = 0x40000800
        0x080012be:    f7fffbd7    ....    BL       LL_TIM_IC_SetPolarity ; 0x8000a70
;;;835    
;;;836      LL_TIM_IC_SetActiveInput(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
        0x080012c2:    f44f3280    O..2    MOV      r2,#0x10000
        0x080012c6:    2110        .!      MOVS     r1,#0x10
        0x080012c8:    481c        .H      LDR      r0,[pc,#112] ; [0x800133c] = 0x40000800
        0x080012ca:    f7fffb65    ..e.    BL       LL_TIM_IC_SetActiveInput ; 0x8000998
;;;837    
;;;838      LL_TIM_IC_SetPrescaler(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
        0x080012ce:    2200        ."      MOVS     r2,#0
        0x080012d0:    2110        .!      MOVS     r1,#0x10
        0x080012d2:    481a        .H      LDR      r0,[pc,#104] ; [0x800133c] = 0x40000800
        0x080012d4:    f7fffbf8    ....    BL       LL_TIM_IC_SetPrescaler ; 0x8000ac8
;;;839    
;;;840      LL_TIM_IC_SetFilter(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV32_N8);
        0x080012d8:    f44f0270    O.p.    MOV      r2,#0xf00000
        0x080012dc:    2110        .!      MOVS     r1,#0x10
        0x080012de:    4817        .H      LDR      r0,[pc,#92] ; [0x800133c] = 0x40000800
        0x080012e0:    f7fffb90    ....    BL       LL_TIM_IC_SetFilter ; 0x8000a04
;;;841    
;;;842      LL_TIM_IC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
        0x080012e4:    2200        ."      MOVS     r2,#0
        0x080012e6:    2110        .!      MOVS     r1,#0x10
        0x080012e8:    4814        .H      LDR      r0,[pc,#80] ; [0x800133c] = 0x40000800
        0x080012ea:    f7fffbc1    ....    BL       LL_TIM_IC_SetPolarity ; 0x8000a70
;;;843    
;;;844      LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_UPDATE);
        0x080012ee:    2120         !      MOVS     r1,#0x20
        0x080012f0:    4812        .H      LDR      r0,[pc,#72] ; [0x800133c] = 0x40000800
        0x080012f2:    f7fffd10    ....    BL       LL_TIM_SetTriggerOutput ; 0x8000d16
;;;845    
;;;846      LL_TIM_EnableMasterSlaveMode(TIM4);
        0x080012f6:    4811        .H      LDR      r0,[pc,#68] ; [0x800133c] = 0x40000800
        0x080012f8:    f7fffb49    ..I.    BL       LL_TIM_EnableMasterSlaveMode ; 0x800098e
;;;847    
;;;848      LL_TIM_IC_SetActiveInput(TIM4, LL_TIM_CHANNEL_CH3, LL_TIM_ACTIVEINPUT_DIRECTTI);
        0x080012fc:    f44f3280    O..2    MOV      r2,#0x10000
        0x08001300:    1211        ..      ASRS     r1,r2,#8
        0x08001302:    480e        .H      LDR      r0,[pc,#56] ; [0x800133c] = 0x40000800
        0x08001304:    f7fffb48    ..H.    BL       LL_TIM_IC_SetActiveInput ; 0x8000998
;;;849    
;;;850      LL_TIM_IC_SetPrescaler(TIM4, LL_TIM_CHANNEL_CH3, LL_TIM_ICPSC_DIV1);
        0x08001308:    2200        ."      MOVS     r2,#0
        0x0800130a:    f44f7180    O..q    MOV      r1,#0x100
        0x0800130e:    480b        .H      LDR      r0,[pc,#44] ; [0x800133c] = 0x40000800
        0x08001310:    f7fffbda    ....    BL       LL_TIM_IC_SetPrescaler ; 0x8000ac8
;;;851    
;;;852      LL_TIM_IC_SetFilter(TIM4, LL_TIM_CHANNEL_CH3, LL_TIM_IC_FILTER_FDIV32_N8);
        0x08001314:    f44f0270    O.p.    MOV      r2,#0xf00000
        0x08001318:    f44f7180    O..q    MOV      r1,#0x100
        0x0800131c:    4807        .H      LDR      r0,[pc,#28] ; [0x800133c] = 0x40000800
        0x0800131e:    f7fffb71    ..q.    BL       LL_TIM_IC_SetFilter ; 0x8000a04
;;;853    
;;;854      LL_TIM_IC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH3, LL_TIM_IC_POLARITY_RISING);
        0x08001322:    2200        ."      MOVS     r2,#0
        0x08001324:    f44f7180    O..q    MOV      r1,#0x100
        0x08001328:    4804        .H      LDR      r0,[pc,#16] ; [0x800133c] = 0x40000800
        0x0800132a:    f7fffba1    ....    BL       LL_TIM_IC_SetPolarity ; 0x8000a70
;;;855    
;;;856    }
        0x0800132e:    b00b        ..      ADD      sp,sp,#0x2c
        0x08001330:    bd30        0.      POP      {r4,r5,pc}
    $d
        0x08001332:    0000        ..      DCW    0
        0x08001334:    0401c0c1    ....    DCD    67223745
        0x08001338:    40010c00    ...@    DCD    1073810432
        0x0800133c:    40000800    ...@    DCD    1073743872
    $t
    i.NVIC_EnableIRQ
    NVIC_EnableIRQ
;;; ../Drivers/CMSIS/Include/core_cm3.h
;;;1454     NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
        0x08001340:    f000021f    ....    AND      r2,r0,#0x1f
        0x08001344:    2101        .!      MOVS     r1,#1
        0x08001346:    4091        .@      LSLS     r1,r1,r2
        0x08001348:    0942        B.      LSRS     r2,r0,#5
        0x0800134a:    0092        ..      LSLS     r2,r2,#2
        0x0800134c:    f10222e0    ..."    ADD      r2,r2,#0xe000e000
        0x08001350:    f8c21100    ....    STR      r1,[r2,#0x100]
;;;1455   }
        0x08001354:    4770        pG      BX       lr
    i.NVIC_EncodePriority
    NVIC_EncodePriority
;;;1456   
;;;1457   
;;;1458   /**
;;;1459     \brief   Disable External Interrupt
;;;1460     \details Disables a device-specific interrupt in the NVIC interrupt controller.
;;;1461     \param [in]      IRQn  External interrupt number. Value cannot be negative.
;;;1462    */
;;;1463   __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
;;;1464   {
;;;1465     NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
;;;1466   }
;;;1467   
;;;1468   
;;;1469   /**
;;;1470     \brief   Get Pending Interrupt
;;;1471     \details Reads the pending register in the NVIC and returns the pending bit for the specified interrupt.
;;;1472     \param [in]      IRQn  Interrupt number.
;;;1473     \return             0  Interrupt status is not pending.
;;;1474     \return             1  Interrupt status is pending.
;;;1475    */
;;;1476   __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
;;;1477   {
;;;1478     return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
;;;1479   }
;;;1480   
;;;1481   
;;;1482   /**
;;;1483     \brief   Set Pending Interrupt
;;;1484     \details Sets the pending bit of an external interrupt.
;;;1485     \param [in]      IRQn  Interrupt number. Value cannot be negative.
;;;1486    */
;;;1487   __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
;;;1488   {
;;;1489     NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
;;;1490   }
;;;1491   
;;;1492   
;;;1493   /**
;;;1494     \brief   Clear Pending Interrupt
;;;1495     \details Clears the pending bit of an external interrupt.
;;;1496     \param [in]      IRQn  External interrupt number. Value cannot be negative.
;;;1497    */
;;;1498   __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
;;;1499   {
;;;1500     NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
;;;1501   }
;;;1502   
;;;1503   
;;;1504   /**
;;;1505     \brief   Get Active Interrupt
;;;1506     \details Reads the active register in NVIC and returns the active bit.
;;;1507     \param [in]      IRQn  Interrupt number.
;;;1508     \return             0  Interrupt status is not active.
;;;1509     \return             1  Interrupt status is active.
;;;1510    */
;;;1511   __STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
;;;1512   {
;;;1513     return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
;;;1514   }
;;;1515   
;;;1516   
;;;1517   /**
;;;1518     \brief   Set Interrupt Priority
;;;1519     \details Sets the priority of an interrupt.
;;;1520     \note    The priority cannot be set for every core interrupt.
;;;1521     \param [in]      IRQn  Interrupt number.
;;;1522     \param [in]  priority  Priority to set.
;;;1523    */
;;;1524   __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
;;;1525   {
;;;1526     if ((int32_t)(IRQn) < 0)
;;;1527     {
;;;1528       SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
;;;1529     }
;;;1530     else
;;;1531     {
;;;1532       NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
;;;1533     }
;;;1534   }
;;;1535   
;;;1536   
;;;1537   /**
;;;1538     \brief   Get Interrupt Priority
;;;1539     \details Reads the priority of an interrupt.
;;;1540              The interrupt number can be positive to specify an external (device specific) interrupt,
;;;1541              or negative to specify an internal (core) interrupt.
;;;1542     \param [in]   IRQn  Interrupt number.
;;;1543     \return             Interrupt Priority.
;;;1544                         Value is aligned automatically to the implemented priority bits of the microcontroller.
;;;1545    */
;;;1546   __STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
;;;1547   {
;;;1548   
;;;1549     if ((int32_t)(IRQn) < 0)
;;;1550     {
;;;1551       return(((uint32_t)SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
;;;1552     }
;;;1553     else
;;;1554     {
;;;1555       return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
;;;1556     }
;;;1557   }
;;;1558   
;;;1559   
;;;1560   /**
;;;1561     \brief   Encode Priority
;;;1562     \details Encodes the priority for an interrupt with the given priority group,
;;;1563              preemptive priority value, and subpriority value.
;;;1564              In case of a conflict between priority grouping and available
;;;1565              priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
;;;1566     \param [in]     PriorityGroup  Used priority group.
;;;1567     \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
;;;1568     \param [in]       SubPriority  Subpriority value (starting from 0).
;;;1569     \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
;;;1570    */
;;;1571   __STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
;;;1572   {
        0x08001356:    b5f0        ..      PUSH     {r4-r7,lr}
        0x08001358:    4603        .F      MOV      r3,r0
        0x0800135a:    460c        .F      MOV      r4,r1
;;;1573     uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
        0x0800135c:    f0030107    ....    AND      r1,r3,#7
;;;1574     uint32_t PreemptPriorityBits;
;;;1575     uint32_t SubPriorityBits;
;;;1576   
;;;1577     PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
        0x08001360:    f1c10007    ....    RSB      r0,r1,#7
        0x08001364:    2804        .(      CMP      r0,#4
        0x08001366:    d901        ..      BLS      0x800136c ; NVIC_EncodePriority + 22
        0x08001368:    2004        .       MOVS     r0,#4
        0x0800136a:    e001        ..      B        0x8001370 ; NVIC_EncodePriority + 26
        0x0800136c:    f1c10007    ....    RSB      r0,r1,#7
        0x08001370:    4606        .F      MOV      r6,r0
;;;1578     SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
        0x08001372:    1d08        ..      ADDS     r0,r1,#4
        0x08001374:    2807        .(      CMP      r0,#7
        0x08001376:    d201        ..      BCS      0x800137c ; NVIC_EncodePriority + 38
        0x08001378:    2000        .       MOVS     r0,#0
        0x0800137a:    e000        ..      B        0x800137e ; NVIC_EncodePriority + 40
        0x0800137c:    1ec8        ..      SUBS     r0,r1,#3
        0x0800137e:    4605        .F      MOV      r5,r0
;;;1579   
;;;1580     return (
        0x08001380:    2001        .       MOVS     r0,#1
        0x08001382:    40b0        .@      LSLS     r0,r0,r6
        0x08001384:    1e40        @.      SUBS     r0,r0,#1
        0x08001386:    4020         @      ANDS     r0,r0,r4
        0x08001388:    40a8        .@      LSLS     r0,r0,r5
        0x0800138a:    2701        .'      MOVS     r7,#1
        0x0800138c:    40af        .@      LSLS     r7,r7,r5
        0x0800138e:    1e7f        ..      SUBS     r7,r7,#1
        0x08001390:    4017        .@      ANDS     r7,r7,r2
        0x08001392:    4338        8C      ORRS     r0,r0,r7
;;;1581              ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
;;;1582              ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
;;;1583            );
;;;1584   }
        0x08001394:    bdf0        ..      POP      {r4-r7,pc}
        0x08001396:    0000        ..      MOVS     r0,r0
    i.NVIC_GetPriorityGrouping
    NVIC_GetPriorityGrouping
;;; ../Drivers/CMSIS/Include/core_cm3.h (1443)
        0x08001398:    4802        .H      LDR      r0,[pc,#8] ; [0x80013a4] = 0xe000ed0c
        0x0800139a:    6800        .h      LDR      r0,[r0,#0]
        0x0800139c:    f3c02002    ...     UBFX     r0,r0,#8,#3
;;;1444   }
        0x080013a0:    4770        pG      BX       lr
    $d
        0x080013a2:    0000        ..      DCW    0
        0x080013a4:    e000ed0c    ....    DCD    3758157068
    $t
    i.NVIC_SetPriority
    NVIC_SetPriority
;;;1445   
;;;1446   
;;;1447   /**
;;;1448     \brief   Enable External Interrupt
;;;1449     \details Enables a device-specific interrupt in the NVIC interrupt controller.
;;;1450     \param [in]      IRQn  External interrupt number. Value cannot be negative.
;;;1451    */
;;;1452   __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
;;;1453   {
;;;1454     NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
;;;1455   }
;;;1456   
;;;1457   
;;;1458   /**
;;;1459     \brief   Disable External Interrupt
;;;1460     \details Disables a device-specific interrupt in the NVIC interrupt controller.
;;;1461     \param [in]      IRQn  External interrupt number. Value cannot be negative.
;;;1462    */
;;;1463   __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
;;;1464   {
;;;1465     NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
;;;1466   }
;;;1467   
;;;1468   
;;;1469   /**
;;;1470     \brief   Get Pending Interrupt
;;;1471     \details Reads the pending register in the NVIC and returns the pending bit for the specified interrupt.
;;;1472     \param [in]      IRQn  Interrupt number.
;;;1473     \return             0  Interrupt status is not pending.
;;;1474     \return             1  Interrupt status is pending.
;;;1475    */
;;;1476   __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
;;;1477   {
;;;1478     return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
;;;1479   }
;;;1480   
;;;1481   
;;;1482   /**
;;;1483     \brief   Set Pending Interrupt
;;;1484     \details Sets the pending bit of an external interrupt.
;;;1485     \param [in]      IRQn  Interrupt number. Value cannot be negative.
;;;1486    */
;;;1487   __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
;;;1488   {
;;;1489     NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
;;;1490   }
;;;1491   
;;;1492   
;;;1493   /**
;;;1494     \brief   Clear Pending Interrupt
;;;1495     \details Clears the pending bit of an external interrupt.
;;;1496     \param [in]      IRQn  External interrupt number. Value cannot be negative.
;;;1497    */
;;;1498   __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
;;;1499   {
;;;1500     NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
;;;1501   }
;;;1502   
;;;1503   
;;;1504   /**
;;;1505     \brief   Get Active Interrupt
;;;1506     \details Reads the active register in NVIC and returns the active bit.
;;;1507     \param [in]      IRQn  Interrupt number.
;;;1508     \return             0  Interrupt status is not active.
;;;1509     \return             1  Interrupt status is active.
;;;1510    */
;;;1511   __STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
;;;1512   {
;;;1513     return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
;;;1514   }
;;;1515   
;;;1516   
;;;1517   /**
;;;1518     \brief   Set Interrupt Priority
;;;1519     \details Sets the priority of an interrupt.
;;;1520     \note    The priority cannot be set for every core interrupt.
;;;1521     \param [in]      IRQn  Interrupt number.
;;;1522     \param [in]  priority  Priority to set.
;;;1523    */
;;;1524   __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
;;;1525   {
        0x080013a8:    b510        ..      PUSH     {r4,lr}
;;;1526     if ((int32_t)(IRQn) < 0)
        0x080013aa:    2800        .(      CMP      r0,#0
        0x080013ac:    da07        ..      BGE      0x80013be ; NVIC_SetPriority + 22
;;;1527     {
;;;1528       SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
        0x080013ae:    070a        ..      LSLS     r2,r1,#28
        0x080013b0:    0e14        ..      LSRS     r4,r2,#24
        0x080013b2:    4a05        .J      LDR      r2,[pc,#20] ; [0x80013c8] = 0xe000ed18
        0x080013b4:    f000030f    ....    AND      r3,r0,#0xf
        0x080013b8:    1f1b        ..      SUBS     r3,r3,#4
        0x080013ba:    54d4        .T      STRB     r4,[r2,r3]
        0x080013bc:    e003        ..      B        0x80013c6 ; NVIC_SetPriority + 30
;;;1529     }
;;;1530     else
;;;1531     {
;;;1532       NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
        0x080013be:    070a        ..      LSLS     r2,r1,#28
        0x080013c0:    0e13        ..      LSRS     r3,r2,#24
        0x080013c2:    4a02        .J      LDR      r2,[pc,#8] ; [0x80013cc] = 0xe000e400
        0x080013c4:    5413        .T      STRB     r3,[r2,r0]
;;;1533     }
;;;1534   }
        0x080013c6:    bd10        ..      POP      {r4,pc}
    $d
        0x080013c8:    e000ed18    ....    DCD    3758157080
        0x080013cc:    e000e400    ....    DCD    3758154752
    $t
    i.OC1Config
    OC1Config
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_tim.c
;;;766    {
        0x080013d0:    b570        p.      PUSH     {r4-r6,lr}
        0x080013d2:    4602        .F      MOV      r2,r0
;;;767      uint32_t tmpccmr1 = 0U;
        0x080013d4:    2400        .$      MOVS     r4,#0
;;;768      uint32_t tmpccer = 0U;
        0x080013d6:    2300        .#      MOVS     r3,#0
;;;769      uint32_t tmpcr2 = 0U;
        0x080013d8:    2500        .%      MOVS     r5,#0
;;;770    
;;;771      /* Check the parameters */
;;;772      assert_param(IS_TIM_CC1_INSTANCE(TIMx));
;;;773      assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
;;;774      assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
;;;775      assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
;;;776      assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
;;;777      assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
;;;778    
;;;779      /* Disable the Channel 1: Reset the CC1E Bit */
;;;780      CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
        0x080013da:    6a10        .j      LDR      r0,[r2,#0x20]
        0x080013dc:    f0200001     ...    BIC      r0,r0,#1
        0x080013e0:    6210        .b      STR      r0,[r2,#0x20]
;;;781    
;;;782      /* Get the TIMx CCER register value */
;;;783      tmpccer = LL_TIM_ReadReg(TIMx, CCER);
        0x080013e2:    6a13        .j      LDR      r3,[r2,#0x20]
;;;784    
;;;785      /* Get the TIMx CR2 register value */
;;;786      tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
        0x080013e4:    6855        Uh      LDR      r5,[r2,#4]
;;;787    
;;;788      /* Get the TIMx CCMR1 register value */
;;;789      tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
        0x080013e6:    6994        .i      LDR      r4,[r2,#0x18]
;;;790    
;;;791      /* Reset Capture/Compare selection Bits */
;;;792      CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
        0x080013e8:    f0240403    $...    BIC      r4,r4,#3
;;;793    
;;;794      /* Set the Output Compare Mode */
;;;795      MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
        0x080013ec:    f0240070    $.p.    BIC      r0,r4,#0x70
        0x080013f0:    680e        .h      LDR      r6,[r1,#0]
        0x080013f2:    ea400406    @...    ORR      r4,r0,r6
;;;796    
;;;797      /* Set the Output Compare Polarity */
;;;798      MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
        0x080013f6:    f0230002    #...    BIC      r0,r3,#2
        0x080013fa:    690e        .i      LDR      r6,[r1,#0x10]
        0x080013fc:    ea400306    @...    ORR      r3,r0,r6
;;;799    
;;;800      /* Set the Output State */
;;;801      MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
        0x08001400:    f0230001    #...    BIC      r0,r3,#1
        0x08001404:    684e        Nh      LDR      r6,[r1,#4]
        0x08001406:    ea400306    @...    ORR      r3,r0,r6
;;;802    
;;;803      if (IS_TIM_BREAK_INSTANCE(TIMx))
        0x0800140a:    480f        .H      LDR      r0,[pc,#60] ; [0x8001448] = 0x40012c00
        0x0800140c:    4282        .B      CMP      r2,r0
        0x0800140e:    d113        ..      BNE      0x8001438 ; OC1Config + 104
;;;804      {
;;;805        assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
;;;806        assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));
;;;807    
;;;808        /* Set the complementary output Polarity */
;;;809        MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
        0x08001410:    f0230008    #...    BIC      r0,r3,#8
        0x08001414:    694e        Ni      LDR      r6,[r1,#0x14]
        0x08001416:    ea400386    @...    ORR      r3,r0,r6,LSL #2
;;;810    
;;;811        /* Set the complementary output State */
;;;812        MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
        0x0800141a:    f0230004    #...    BIC      r0,r3,#4
        0x0800141e:    688e        .h      LDR      r6,[r1,#8]
        0x08001420:    ea400386    @...    ORR      r3,r0,r6,LSL #2
;;;813    
;;;814        /* Set the Output Idle state */
;;;815        MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
        0x08001424:    f4257080    %..p    BIC      r0,r5,#0x100
        0x08001428:    698e        .i      LDR      r6,[r1,#0x18]
        0x0800142a:    ea400506    @...    ORR      r5,r0,r6
;;;816    
;;;817        /* Set the complementary output Idle state */
;;;818        MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
        0x0800142e:    f4257000    %..p    BIC      r0,r5,#0x200
        0x08001432:    69ce        .i      LDR      r6,[r1,#0x1c]
        0x08001434:    ea400546    @.F.    ORR      r5,r0,r6,LSL #1
;;;819      }
;;;820    
;;;821      /* Write to TIMx CR2 */
;;;822      LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
        0x08001438:    6055        U`      STR      r5,[r2,#4]
;;;823    
;;;824      /* Write to TIMx CCMR1 */
;;;825      LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
        0x0800143a:    6194        .a      STR      r4,[r2,#0x18]
;;;826    
;;;827      /* Set the Capture Compare Register value */
;;;828      LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
        0x0800143c:    68c8        .h      LDR      r0,[r1,#0xc]
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;1994     WRITE_REG(TIMx->CCR1, CompareValue);
        0x0800143e:    6350        Pc      STR      r0,[r2,#0x34]
;;;1995   }
        0x08001440:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_tim.c
;;;831      LL_TIM_WriteReg(TIMx, CCER, tmpccer);
        0x08001442:    6213        .b      STR      r3,[r2,#0x20]
;;;832    
;;;833      return SUCCESS;
        0x08001444:    2001        .       MOVS     r0,#1
;;;834    }
        0x08001446:    bd70        p.      POP      {r4-r6,pc}
    $d
        0x08001448:    40012c00    .,.@    DCD    1073818624
    $t
    i.OC2Config
    OC2Config
;;;835    
;;;836    /**
;;;837      * @brief  Configure the TIMx output channel 2.
;;;838      * @param  TIMx Timer Instance
;;;839      * @param  TIM_OCInitStruct pointer to the the TIMx output channel 2 configuration data structure
;;;840      * @retval An ErrorStatus enumeration value:
;;;841      *          - SUCCESS: TIMx registers are de-initialized
;;;842      *          - ERROR: not applicable
;;;843      */
;;;844    static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
;;;845    {
        0x0800144c:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x08001450:    4604        .F      MOV      r4,r0
        0x08001452:    460d        .F      MOV      r5,r1
;;;846      uint32_t tmpccmr1 = 0U;
        0x08001454:    2700        .'      MOVS     r7,#0
;;;847      uint32_t tmpccer = 0U;
        0x08001456:    2600        .&      MOVS     r6,#0
;;;848      uint32_t tmpcr2 = 0U;
        0x08001458:    46b0        .F      MOV      r8,r6
;;;849    
;;;850      /* Check the parameters */
;;;851      assert_param(IS_TIM_CC2_INSTANCE(TIMx));
;;;852      assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
;;;853      assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
;;;854      assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
;;;855      assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
;;;856      assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
;;;857    
;;;858      /* Disable the Channel 2: Reset the CC2E Bit */
;;;859      CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
        0x0800145a:    6a20         j      LDR      r0,[r4,#0x20]
        0x0800145c:    f0200010     ...    BIC      r0,r0,#0x10
        0x08001460:    6220         b      STR      r0,[r4,#0x20]
;;;860    
;;;861      /* Get the TIMx CCER register value */
;;;862      tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
        0x08001462:    6a26        &j      LDR      r6,[r4,#0x20]
;;;863    
;;;864      /* Get the TIMx CR2 register value */
;;;865      tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
        0x08001464:    f8d48004    ....    LDR      r8,[r4,#4]
;;;866    
;;;867      /* Get the TIMx CCMR1 register value */
;;;868      tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
        0x08001468:    69a7        .i      LDR      r7,[r4,#0x18]
;;;869    
;;;870      /* Reset Capture/Compare selection Bits */
;;;871      CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
        0x0800146a:    f4277740    '.@w    BIC      r7,r7,#0x300
;;;872    
;;;873      /* Select the Output Compare Mode */
;;;874      MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
        0x0800146e:    f42740e0    '..@    BIC      r0,r7,#0x7000
        0x08001472:    6829        )h      LDR      r1,[r5,#0]
        0x08001474:    ea402701    @..'    ORR      r7,r0,r1,LSL #8
;;;875    
;;;876      /* Set the Output Compare Polarity */
;;;877      MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
        0x08001478:    f0260020    &. .    BIC      r0,r6,#0x20
        0x0800147c:    6929        )i      LDR      r1,[r5,#0x10]
        0x0800147e:    ea401601    @...    ORR      r6,r0,r1,LSL #4
;;;878    
;;;879      /* Set the Output State */
;;;880      MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
        0x08001482:    f0260010    &...    BIC      r0,r6,#0x10
        0x08001486:    6869        ih      LDR      r1,[r5,#4]
        0x08001488:    ea401601    @...    ORR      r6,r0,r1,LSL #4
;;;881    
;;;882      if (IS_TIM_BREAK_INSTANCE(TIMx))
        0x0800148c:    4810        .H      LDR      r0,[pc,#64] ; [0x80014d0] = 0x40012c00
        0x0800148e:    4284        .B      CMP      r4,r0
        0x08001490:    d113        ..      BNE      0x80014ba ; OC2Config + 110
;;;883      {
;;;884        assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
;;;885        assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));
;;;886    
;;;887        /* Set the complementary output Polarity */
;;;888        MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
        0x08001492:    f0260080    &...    BIC      r0,r6,#0x80
        0x08001496:    6969        ii      LDR      r1,[r5,#0x14]
        0x08001498:    ea401681    @...    ORR      r6,r0,r1,LSL #6
;;;889    
;;;890        /* Set the complementary output State */
;;;891        MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
        0x0800149c:    f0260040    &.@.    BIC      r0,r6,#0x40
        0x080014a0:    68a9        .h      LDR      r1,[r5,#8]
        0x080014a2:    ea401681    @...    ORR      r6,r0,r1,LSL #6
;;;892    
;;;893        /* Set the Output Idle state */
;;;894        MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
        0x080014a6:    f4286080    (..`    BIC      r0,r8,#0x400
        0x080014aa:    69a9        .i      LDR      r1,[r5,#0x18]
        0x080014ac:    ea400881    @...    ORR      r8,r0,r1,LSL #2
;;;895    
;;;896        /* Set the complementary output Idle state */
;;;897        MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
        0x080014b0:    f4286000    (..`    BIC      r0,r8,#0x800
        0x080014b4:    69e9        .i      LDR      r1,[r5,#0x1c]
        0x080014b6:    ea4008c1    @...    ORR      r8,r0,r1,LSL #3
;;;898      }
;;;899    
;;;900      /* Write to TIMx CR2 */
;;;901      LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
        0x080014ba:    f8c48004    ....    STR      r8,[r4,#4]
;;;902    
;;;903      /* Write to TIMx CCMR1 */
;;;904      LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
        0x080014be:    61a7        .a      STR      r7,[r4,#0x18]
;;;905    
;;;906      /* Set the Capture Compare Register value */
;;;907      LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
        0x080014c0:    4620         F      MOV      r0,r4
        0x080014c2:    68e9        .h      LDR      r1,[r5,#0xc]
        0x080014c4:    f7fffc0c    ....    BL       LL_TIM_OC_SetCompareCH2 ; 0x8000ce0
;;;908    
;;;909      /* Write to TIMx CCER */
;;;910      LL_TIM_WriteReg(TIMx, CCER, tmpccer);
        0x080014c8:    6226        &b      STR      r6,[r4,#0x20]
;;;911    
;;;912      return SUCCESS;
        0x080014ca:    2001        .       MOVS     r0,#1
;;;913    }
        0x080014cc:    e8bd81f0    ....    POP      {r4-r8,pc}
    $d
        0x080014d0:    40012c00    .,.@    DCD    1073818624
    $t
    i.OC3Config
    OC3Config
;;;914    
;;;915    /**
;;;916      * @brief  Configure the TIMx output channel 3.
;;;917      * @param  TIMx Timer Instance
;;;918      * @param  TIM_OCInitStruct pointer to the the TIMx output channel 3 configuration data structure
;;;919      * @retval An ErrorStatus enumeration value:
;;;920      *          - SUCCESS: TIMx registers are de-initialized
;;;921      *          - ERROR: not applicable
;;;922      */
;;;923    static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
;;;924    {
        0x080014d4:    b570        p.      PUSH     {r4-r6,lr}
        0x080014d6:    4602        .F      MOV      r2,r0
;;;925      uint32_t tmpccmr2 = 0U;
        0x080014d8:    2400        .$      MOVS     r4,#0
;;;926      uint32_t tmpccer = 0U;
        0x080014da:    2300        .#      MOVS     r3,#0
;;;927      uint32_t tmpcr2 = 0U;
        0x080014dc:    2500        .%      MOVS     r5,#0
;;;928    
;;;929      /* Check the parameters */
;;;930      assert_param(IS_TIM_CC3_INSTANCE(TIMx));
;;;931      assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
;;;932      assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
;;;933      assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
;;;934      assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
;;;935      assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
;;;936    
;;;937      /* Disable the Channel 3: Reset the CC3E Bit */
;;;938      CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
        0x080014de:    6a10        .j      LDR      r0,[r2,#0x20]
        0x080014e0:    f4207080     ..p    BIC      r0,r0,#0x100
        0x080014e4:    6210        .b      STR      r0,[r2,#0x20]
;;;939    
;;;940      /* Get the TIMx CCER register value */
;;;941      tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
        0x080014e6:    6a13        .j      LDR      r3,[r2,#0x20]
;;;942    
;;;943      /* Get the TIMx CR2 register value */
;;;944      tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
        0x080014e8:    6855        Uh      LDR      r5,[r2,#4]
;;;945    
;;;946      /* Get the TIMx CCMR2 register value */
;;;947      tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
        0x080014ea:    69d4        .i      LDR      r4,[r2,#0x1c]
;;;948    
;;;949      /* Reset Capture/Compare selection Bits */
;;;950      CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
        0x080014ec:    f0240403    $...    BIC      r4,r4,#3
;;;951    
;;;952      /* Select the Output Compare Mode */
;;;953      MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
        0x080014f0:    f0240070    $.p.    BIC      r0,r4,#0x70
        0x080014f4:    680e        .h      LDR      r6,[r1,#0]
        0x080014f6:    ea400406    @...    ORR      r4,r0,r6
;;;954    
;;;955      /* Set the Output Compare Polarity */
;;;956      MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
        0x080014fa:    f4237000    #..p    BIC      r0,r3,#0x200
        0x080014fe:    690e        .i      LDR      r6,[r1,#0x10]
        0x08001500:    ea402306    @..#    ORR      r3,r0,r6,LSL #8
;;;957    
;;;958      /* Set the Output State */
;;;959      MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
        0x08001504:    f4237080    #..p    BIC      r0,r3,#0x100
        0x08001508:    684e        Nh      LDR      r6,[r1,#4]
        0x0800150a:    ea402306    @..#    ORR      r3,r0,r6,LSL #8
;;;960    
;;;961      if (IS_TIM_BREAK_INSTANCE(TIMx))
        0x0800150e:    480f        .H      LDR      r0,[pc,#60] ; [0x800154c] = 0x40012c00
        0x08001510:    4282        .B      CMP      r2,r0
        0x08001512:    d113        ..      BNE      0x800153c ; OC3Config + 104
;;;962      {
;;;963        assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
;;;964        assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));
;;;965    
;;;966        /* Set the complementary output Polarity */
;;;967        MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
        0x08001514:    f4236000    #..`    BIC      r0,r3,#0x800
        0x08001518:    694e        Ni      LDR      r6,[r1,#0x14]
        0x0800151a:    ea402386    @..#    ORR      r3,r0,r6,LSL #10
;;;968    
;;;969        /* Set the complementary output State */
;;;970        MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
        0x0800151e:    f4236080    #..`    BIC      r0,r3,#0x400
        0x08001522:    688e        .h      LDR      r6,[r1,#8]
        0x08001524:    ea402386    @..#    ORR      r3,r0,r6,LSL #10
;;;971    
;;;972        /* Set the Output Idle state */
;;;973        MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
        0x08001528:    f4255080    %..P    BIC      r0,r5,#0x1000
        0x0800152c:    698e        .i      LDR      r6,[r1,#0x18]
        0x0800152e:    ea401506    @...    ORR      r5,r0,r6,LSL #4
;;;974    
;;;975        /* Set the complementary output Idle state */
;;;976        MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
        0x08001532:    f4255000    %..P    BIC      r0,r5,#0x2000
        0x08001536:    69ce        .i      LDR      r6,[r1,#0x1c]
        0x08001538:    ea401546    @.F.    ORR      r5,r0,r6,LSL #5
;;;977      }
;;;978    
;;;979      /* Write to TIMx CR2 */
;;;980      LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
        0x0800153c:    6055        U`      STR      r5,[r2,#4]
;;;981    
;;;982      /* Write to TIMx CCMR2 */
;;;983      LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
        0x0800153e:    61d4        .a      STR      r4,[r2,#0x1c]
;;;984    
;;;985      /* Set the Capture Compare Register value */
;;;986      LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
        0x08001540:    68c8        .h      LDR      r0,[r1,#0xc]
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;2022     WRITE_REG(TIMx->CCR3, CompareValue);
        0x08001542:    63d0        .c      STR      r0,[r2,#0x3c]
;;;2023   }
        0x08001544:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_tim.c
;;;989      LL_TIM_WriteReg(TIMx, CCER, tmpccer);
        0x08001546:    6213        .b      STR      r3,[r2,#0x20]
;;;990    
;;;991      return SUCCESS;
        0x08001548:    2001        .       MOVS     r0,#1
;;;992    }
        0x0800154a:    bd70        p.      POP      {r4-r6,pc}
    $d
        0x0800154c:    40012c00    .,.@    DCD    1073818624
    $t
    i.OC4Config
    OC4Config
;;;993    
;;;994    /**
;;;995      * @brief  Configure the TIMx output channel 4.
;;;996      * @param  TIMx Timer Instance
;;;997      * @param  TIM_OCInitStruct pointer to the the TIMx output channel 4 configuration data structure
;;;998      * @retval An ErrorStatus enumeration value:
;;;999      *          - SUCCESS: TIMx registers are de-initialized
;;;1000     *          - ERROR: not applicable
;;;1001     */
;;;1002   static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
;;;1003   {
        0x08001550:    b570        p.      PUSH     {r4-r6,lr}
        0x08001552:    4602        .F      MOV      r2,r0
;;;1004     uint32_t tmpccmr2 = 0U;
        0x08001554:    2300        .#      MOVS     r3,#0
;;;1005     uint32_t tmpccer = 0U;
        0x08001556:    2400        .$      MOVS     r4,#0
;;;1006     uint32_t tmpcr2 = 0U;
        0x08001558:    2500        .%      MOVS     r5,#0
;;;1007   
;;;1008     /* Check the parameters */
;;;1009     assert_param(IS_TIM_CC4_INSTANCE(TIMx));
;;;1010     assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
;;;1011     assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
;;;1012     assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
;;;1013     assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
;;;1014     assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
;;;1015   
;;;1016     /* Disable the Channel 4: Reset the CC4E Bit */
;;;1017     CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
        0x0800155a:    6a10        .j      LDR      r0,[r2,#0x20]
        0x0800155c:    f4205080     ..P    BIC      r0,r0,#0x1000
        0x08001560:    6210        .b      STR      r0,[r2,#0x20]
;;;1018   
;;;1019     /* Get the TIMx CCER register value */
;;;1020     tmpccer = LL_TIM_ReadReg(TIMx, CCER);
        0x08001562:    6a14        .j      LDR      r4,[r2,#0x20]
;;;1021   
;;;1022     /* Get the TIMx CR2 register value */
;;;1023     tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
        0x08001564:    6855        Uh      LDR      r5,[r2,#4]
;;;1024   
;;;1025     /* Get the TIMx CCMR2 register value */
;;;1026     tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
        0x08001566:    69d3        .i      LDR      r3,[r2,#0x1c]
;;;1027   
;;;1028     /* Reset Capture/Compare selection Bits */
;;;1029     CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
        0x08001568:    f4237340    #.@s    BIC      r3,r3,#0x300
;;;1030   
;;;1031     /* Select the Output Compare Mode */
;;;1032     MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
        0x0800156c:    f42340e0    #..@    BIC      r0,r3,#0x7000
        0x08001570:    680e        .h      LDR      r6,[r1,#0]
        0x08001572:    ea402306    @..#    ORR      r3,r0,r6,LSL #8
;;;1033   
;;;1034     /* Set the Output Compare Polarity */
;;;1035     MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
        0x08001576:    f4245000    $..P    BIC      r0,r4,#0x2000
        0x0800157a:    690e        .i      LDR      r6,[r1,#0x10]
        0x0800157c:    ea403406    @..4    ORR      r4,r0,r6,LSL #12
;;;1036   
;;;1037     /* Set the Output State */
;;;1038     MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
        0x08001580:    f4245080    $..P    BIC      r0,r4,#0x1000
        0x08001584:    684e        Nh      LDR      r6,[r1,#4]
        0x08001586:    ea403406    @..4    ORR      r4,r0,r6,LSL #12
;;;1039   
;;;1040     if (IS_TIM_BREAK_INSTANCE(TIMx))
        0x0800158a:    4808        .H      LDR      r0,[pc,#32] ; [0x80015ac] = 0x40012c00
        0x0800158c:    4282        .B      CMP      r2,r0
        0x0800158e:    d104        ..      BNE      0x800159a ; OC4Config + 74
;;;1041     {
;;;1042       assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
;;;1043       assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));
;;;1044   
;;;1045       /* Set the Output Idle state */
;;;1046       MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
        0x08001590:    f4254080    %..@    BIC      r0,r5,#0x4000
        0x08001594:    698e        .i      LDR      r6,[r1,#0x18]
        0x08001596:    ea401586    @...    ORR      r5,r0,r6,LSL #6
;;;1047     }
;;;1048   
;;;1049     /* Write to TIMx CR2 */
;;;1050     LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
        0x0800159a:    6055        U`      STR      r5,[r2,#4]
;;;1051   
;;;1052     /* Write to TIMx CCMR2 */
;;;1053     LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
        0x0800159c:    61d3        .a      STR      r3,[r2,#0x1c]
;;;1054   
;;;1055     /* Set the Capture Compare Register value */
;;;1056     LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
        0x0800159e:    68c8        .h      LDR      r0,[r1,#0xc]
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;2036     WRITE_REG(TIMx->CCR4, CompareValue);
        0x080015a0:    6410        .d      STR      r0,[r2,#0x40]
;;;2037   }
        0x080015a2:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_tim.c
;;;1059     LL_TIM_WriteReg(TIMx, CCER, tmpccer);
        0x080015a4:    6214        .b      STR      r4,[r2,#0x20]
;;;1060   
;;;1061     return SUCCESS;
        0x080015a6:    2001        .       MOVS     r0,#1
;;;1062   }
        0x080015a8:    bd70        p.      POP      {r4-r6,pc}
    $d
        0x080015aa:    0000        ..      DCW    0
        0x080015ac:    40012c00    .,.@    DCD    1073818624
    $t
    i.PendSV_Handler
    PendSV_Handler
;;; .\../Src/stm32f1xx_it.c
;;;109    }
        0x080015b0:    4770        pG      BX       lr
        0x080015b2:    0000        ..      MOVS     r0,r0
    i.RCC_GetHCLKClockFreq
    RCC_GetHCLKClockFreq
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_rcc.c
;;;388    {
        0x080015b4:    4601        .F      MOV      r1,r0
;;;389      /* HCLK clock frequency */
;;;390      return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
        0x080015b6:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;1116     return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
        0x080015b8:    4804        .H      LDR      r0,[pc,#16] ; [0x80015cc] = 0x40021000
        0x080015ba:    6840        @h      LDR      r0,[r0,#4]
        0x080015bc:    f00000f0    ....    AND      r0,r0,#0xf0
        0x080015c0:    0900        ..      LSRS     r0,r0,#4
        0x080015c2:    4a03        .J      LDR      r2,[pc,#12] ; [0x80015d0] = 0x8002994
        0x080015c4:    5c12        .\      LDRB     r2,[r2,r0]
        0x080015c6:    fa21f002    !...    LSR      r0,r1,r2
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_rcc.c
;;;391    }
        0x080015ca:    4770        pG      BX       lr
    $d
        0x080015cc:    40021000    ...@    DCD    1073876992
        0x080015d0:    08002994    .)..    DCD    134228372
    $t
    i.RCC_GetPCLK1ClockFreq
    RCC_GetPCLK1ClockFreq
;;;392    
;;;393    /**
;;;394      * @brief  Return PCLK1 clock frequency
;;;395      * @param  HCLK_Frequency HCLK clock frequency
;;;396      * @retval PCLK1 clock frequency (in Hz)
;;;397      */
;;;398    uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
;;;399    {
        0x080015d4:    4601        .F      MOV      r1,r0
;;;400      /* PCLK1 clock frequency */
;;;401      return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
        0x080015d6:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;1131     return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
        0x080015d8:    4805        .H      LDR      r0,[pc,#20] ; [0x80015f0] = 0x40021000
        0x080015da:    6840        @h      LDR      r0,[r0,#4]
        0x080015dc:    f40060e0    ...`    AND      r0,r0,#0x700
        0x080015e0:    4a04        .J      LDR      r2,[pc,#16] ; [0x80015f4] = 0x80029a4
        0x080015e2:    eb022010    ...     ADD      r0,r2,r0,LSR #8
        0x080015e6:    7802        .x      LDRB     r2,[r0,#0]
        0x080015e8:    fa21f002    !...    LSR      r0,r1,r2
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_rcc.c
;;;402    }
        0x080015ec:    4770        pG      BX       lr
    $d
        0x080015ee:    0000        ..      DCW    0
        0x080015f0:    40021000    ...@    DCD    1073876992
        0x080015f4:    080029a4    .)..    DCD    134228388
    $t
    i.RCC_GetPCLK2ClockFreq
    RCC_GetPCLK2ClockFreq
;;;403    
;;;404    /**
;;;405      * @brief  Return PCLK2 clock frequency
;;;406      * @param  HCLK_Frequency HCLK clock frequency
;;;407      * @retval PCLK2 clock frequency (in Hz)
;;;408      */
;;;409    uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
;;;410    {
        0x080015f8:    4601        .F      MOV      r1,r0
;;;411      /* PCLK2 clock frequency */
;;;412      return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
        0x080015fa:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;1146     return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
        0x080015fc:    4805        .H      LDR      r0,[pc,#20] ; [0x8001614] = 0x40021000
        0x080015fe:    6840        @h      LDR      r0,[r0,#4]
        0x08001600:    f4005060    ..`P    AND      r0,r0,#0x3800
        0x08001604:    4a04        .J      LDR      r2,[pc,#16] ; [0x8001618] = 0x80029a4
        0x08001606:    eb0220d0    ...     ADD      r0,r2,r0,LSR #11
        0x0800160a:    7802        .x      LDRB     r2,[r0,#0]
        0x0800160c:    fa21f002    !...    LSR      r0,r1,r2
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_rcc.c
;;;413    }
        0x08001610:    4770        pG      BX       lr
    $d
        0x08001612:    0000        ..      DCW    0
        0x08001614:    40021000    ...@    DCD    1073876992
        0x08001618:    080029a4    .)..    DCD    134228388
    $t
    i.RCC_GetSystemClockFreq
    RCC_GetSystemClockFreq
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_rcc.c (356)
        0x0800161c:    b510        ..      PUSH     {r4,lr}
;;;357      uint32_t frequency = 0U;
        0x0800161e:    2400        .$      MOVS     r4,#0
;;;358    
;;;359      /* Get SYSCLK source -------------------------------------------------------*/
;;;360      switch (LL_RCC_GetSysClkSource())
        0x08001620:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;1045     return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
        0x08001622:    480b        .H      LDR      r0,[pc,#44] ; [0x8001650] = 0x40021000
        0x08001624:    6840        @h      LDR      r0,[r0,#4]
        0x08001626:    f000000c    ....    AND      r0,r0,#0xc
        0x0800162a:    b120         .      CBZ      r0,0x8001636 ; RCC_GetSystemClockFreq + 26
        0x0800162c:    2804        .(      CMP      r0,#4
        0x0800162e:    d004        ..      BEQ      0x800163a ; RCC_GetSystemClockFreq + 30
        0x08001630:    2808        .(      CMP      r0,#8
        0x08001632:    d108        ..      BNE      0x8001646 ; RCC_GetSystemClockFreq + 42
        0x08001634:    e003        ..      B        0x800163e ; RCC_GetSystemClockFreq + 34
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_rcc.c
;;;363          frequency = HSI_VALUE;
        0x08001636:    4c07        .L      LDR      r4,[pc,#28] ; [0x8001654] = 0x7a1200
;;;364          break;
        0x08001638:    e007        ..      B        0x800164a ; RCC_GetSystemClockFreq + 46
;;;365    
;;;366        case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
;;;367          frequency = HSE_VALUE;
        0x0800163a:    4c06        .L      LDR      r4,[pc,#24] ; [0x8001654] = 0x7a1200
;;;368          break;
        0x0800163c:    e005        ..      B        0x800164a ; RCC_GetSystemClockFreq + 46
;;;369    
;;;370        case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
;;;371          frequency = RCC_PLL_GetFreqDomain_SYS();
        0x0800163e:    f000f80b    ....    BL       RCC_PLL_GetFreqDomain_SYS ; 0x8001658
        0x08001642:    4604        .F      MOV      r4,r0
;;;372          break;
        0x08001644:    e001        ..      B        0x800164a ; RCC_GetSystemClockFreq + 46
;;;373    
;;;374        default:
;;;375          frequency = HSI_VALUE;
        0x08001646:    4c03        .L      LDR      r4,[pc,#12] ; [0x8001654] = 0x7a1200
;;;376          break;
        0x08001648:    bf00        ..      NOP      
        0x0800164a:    bf00        ..      NOP      
;;;377      }
;;;378    
;;;379      return frequency;
        0x0800164c:    4620         F      MOV      r0,r4
;;;380    }
        0x0800164e:    bd10        ..      POP      {r4,pc}
    $d
        0x08001650:    40021000    ...@    DCD    1073876992
        0x08001654:    007a1200    ..z.    DCD    8000000
    $t
    i.RCC_PLL_GetFreqDomain_SYS
    RCC_PLL_GetFreqDomain_SYS
;;;381    
;;;382    /**
;;;383      * @brief  Return HCLK clock frequency
;;;384      * @param  SYSCLK_Frequency SYSCLK clock frequency
;;;385      * @retval HCLK clock frequency (in Hz)
;;;386      */
;;;387    uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
;;;388    {
;;;389      /* HCLK clock frequency */
;;;390      return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
;;;391    }
;;;392    
;;;393    /**
;;;394      * @brief  Return PCLK1 clock frequency
;;;395      * @param  HCLK_Frequency HCLK clock frequency
;;;396      * @retval PCLK1 clock frequency (in Hz)
;;;397      */
;;;398    uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
;;;399    {
;;;400      /* PCLK1 clock frequency */
;;;401      return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
;;;402    }
;;;403    
;;;404    /**
;;;405      * @brief  Return PCLK2 clock frequency
;;;406      * @param  HCLK_Frequency HCLK clock frequency
;;;407      * @retval PCLK2 clock frequency (in Hz)
;;;408      */
;;;409    uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
;;;410    {
;;;411      /* PCLK2 clock frequency */
;;;412      return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
;;;413    }
;;;414    
;;;415    /**
;;;416      * @brief  Return PLL clock frequency used for system domain
;;;417      * @retval PLL clock frequency (in Hz)
;;;418      */
;;;419    uint32_t RCC_PLL_GetFreqDomain_SYS(void)
;;;420    {
;;;421      uint32_t pllinputfreq = 0U, pllsource = 0U;
        0x08001658:    2100        .!      MOVS     r1,#0
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_rcc.c (421)
        0x0800165a:    2200        ."      MOVS     r2,#0
;;;422    
;;;423      /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */
;;;424    
;;;425      /* Get PLL source */
;;;426      pllsource = LL_RCC_PLL_GetMainSource();
        0x0800165c:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;1543     return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
        0x0800165e:    4811        .H      LDR      r0,[pc,#68] ; [0x80016a4] = 0x40021000
        0x08001660:    6840        @h      LDR      r0,[r0,#4]
        0x08001662:    f4003080    ...0    AND      r0,r0,#0x10000
        0x08001666:    4602        .F      MOV      r2,r0
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_rcc.c
;;;428      switch (pllsource)
        0x08001668:    b11a        ..      CBZ      r2,0x8001672 ; RCC_PLL_GetFreqDomain_SYS + 26
        0x0800166a:    f5b23f80    ...?    CMP      r2,#0x10000
        0x0800166e:    d10c        ..      BNE      0x800168a ; RCC_PLL_GetFreqDomain_SYS + 50
        0x08001670:    e001        ..      B        0x8001676 ; RCC_PLL_GetFreqDomain_SYS + 30
;;;429      {
;;;430        case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
;;;431          pllinputfreq = HSI_VALUE / 2U;
        0x08001672:    490d        .I      LDR      r1,[pc,#52] ; [0x80016a8] = 0x3d0900
;;;432          break;
        0x08001674:    e00b        ..      B        0x800168e ; RCC_PLL_GetFreqDomain_SYS + 54
;;;433    
;;;434        case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
;;;435          pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
        0x08001676:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;1605     return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE));
        0x08001678:    480a        .H      LDR      r0,[pc,#40] ; [0x80016a4] = 0x40021000
        0x0800167a:    6840        @h      LDR      r0,[r0,#4]
        0x0800167c:    f4003000    ...0    AND      r0,r0,#0x20000
        0x08001680:    1c40        @.      ADDS     r0,r0,#1
        0x08001682:    4b0a        .K      LDR      r3,[pc,#40] ; [0x80016ac] = 0x7a1200
        0x08001684:    fbb3f1f0    ....    UDIV     r1,r3,r0
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_rcc.c
;;;436          break;
        0x08001688:    e001        ..      B        0x800168e ; RCC_PLL_GetFreqDomain_SYS + 54
;;;437    
;;;438    #if defined(RCC_PLL2_SUPPORT)
;;;439        case LL_RCC_PLLSOURCE_PLL2:       /* PLL2 used as PLL clock source */
;;;440          pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
;;;441          break;
;;;442    #endif /* RCC_PLL2_SUPPORT */
;;;443    
;;;444        default:
;;;445          pllinputfreq = HSI_VALUE / 2U;
        0x0800168a:    4907        .I      LDR      r1,[pc,#28] ; [0x80016a8] = 0x3d0900
;;;446          break;
        0x0800168c:    bf00        ..      NOP      
        0x0800168e:    bf00        ..      NOP      
;;;447      }
;;;448      return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
        0x08001690:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;1572     return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
        0x08001692:    4804        .H      LDR      r0,[pc,#16] ; [0x80016a4] = 0x40021000
        0x08001694:    6840        @h      LDR      r0,[r0,#4]
        0x08001696:    f4001070    ..p.    AND      r0,r0,#0x3c0000
        0x0800169a:    2302        .#      MOVS     r3,#2
        0x0800169c:    eb034090    ...@    ADD      r0,r3,r0,LSR #18
        0x080016a0:    4348        HC      MULS     r0,r1,r0
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_rcc.c
;;;449    }
        0x080016a2:    4770        pG      BX       lr
    $d
        0x080016a4:    40021000    ...@    DCD    1073876992
        0x080016a8:    003d0900    ..=.    DCD    4000000
        0x080016ac:    007a1200    ..z.    DCD    8000000
    $t
    i.SSD1306_Fill
    SSD1306_Fill
;;; .\..\Src\ssd1306.c
;;;125    void SSD1306_Fill(uint8_t color) {
        0x080016b0:    b510        ..      PUSH     {r4,lr}
        0x080016b2:    4604        .F      MOV      r4,r0
;;;126    	/* Set memory */
;;;127    	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, SSD1306_WIDTH * SSD1306_HEIGHT / 8);
        0x080016b4:    b90c        ..      CBNZ     r4,0x80016ba ; SSD1306_Fill + 10
        0x080016b6:    2000        .       MOVS     r0,#0
        0x080016b8:    e000        ..      B        0x80016bc ; SSD1306_Fill + 12
        0x080016ba:    20ff        .       MOVS     r0,#0xff
        0x080016bc:    4602        .F      MOV      r2,r0
        0x080016be:    f44f6180    O..a    MOV      r1,#0x400
        0x080016c2:    4802        .H      LDR      r0,[pc,#8] ; [0x80016cc] = 0x20000008
        0x080016c4:    6800        .h      LDR      r0,[r0,#0]
        0x080016c6:    f7fefd5e    ..^.    BL       __aeabi_memset ; 0x8000186
;;;128    }
        0x080016ca:    bd10        ..      POP      {r4,pc}
    $d
        0x080016cc:    20000008    ...     DCD    536870920
    $t
    i.SSD1306_GotoXY
    SSD1306_GotoXY
;;;129    
;;;130    void SSD1306_DrawPixel(uint16_t x, uint16_t y, uint8_t color) {
;;;131    	if (
;;;132    		x >= SSD1306_WIDTH ||
;;;133    		y >= SSD1306_HEIGHT
;;;134    	) {
;;;135    		/* Error */
;;;136    		return;
;;;137    	}
;;;138    	
;;;139    	/* Check if pixels are inverted */
;;;140    	if (SSD1306.Inverted) {
;;;141    		color = (uint8_t)!color;
;;;142    	}
;;;143    	
;;;144    	/* Set color */
;;;145    	if (color == SSD1306_COLOR_WHITE) {
;;;146    		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
;;;147    	} else {
;;;148    		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
;;;149    	}
;;;150    }
;;;151    
;;;152    void SSD1306_GotoXY(uint16_t x, uint16_t y) {
;;;153    	/* Set write pointers */
;;;154    	SSD1306.CurrentX = x;
        0x080016d0:    4a01        .J      LDR      r2,[pc,#4] ; [0x80016d8] = 0x2000000c
        0x080016d2:    8010        ..      STRH     r0,[r2,#0]
;;;155    	SSD1306.CurrentY = y;
        0x080016d4:    8051        Q.      STRH     r1,[r2,#2]
;;;156    }
        0x080016d6:    4770        pG      BX       lr
    $d
        0x080016d8:    2000000c    ...     DCD    536870924
    $t
    i.SSD1306_Init
    SSD1306_Init
;;; .\..\Src\ssd1306.c (50)
        0x080016dc:    b570        p.      PUSH     {r4-r6,lr}
        0x080016de:    4604        .F      MOV      r4,r0
;;;51     
;;;52     	hi2c_screen = hi2c;
        0x080016e0:    4850        PH      LDR      r0,[pc,#320] ; [0x8001824] = 0x20000004
        0x080016e2:    6004        .`      STR      r4,[r0,#0]
;;;53     	/* Init I2C */
;;;54     	ssd1306_I2C_Init();
        0x080016e4:    f000ffc0    ....    BL       ssd1306_I2C_Init ; 0x8002668
;;;55     /* haltodo	
;;;56     	// Check if LCD connected to I2C
;;;57     	if (HAL_I2C_IsDeviceReady(hi2c_screen, SSD1306_I2C_ADDR, 5, 1000) != HAL_OK) {
;;;58     		return 0;
;;;59     	}
;;;60     	*/
;;;61     	/* A little delay */
;;;62     	uint32_t p = 2500;
        0x080016e8:    f64015c4    @...    MOV      r5,#0x9c4
;;;63     	while(p>0)
        0x080016ec:    e000        ..      B        0x80016f0 ; SSD1306_Init + 20
        0x080016ee:    1e6d        m.      SUBS     r5,r5,#1
        0x080016f0:    2d00        .-      CMP      r5,#0
        0x080016f2:    d1fc        ..      BNE      0x80016ee ; SSD1306_Init + 18
;;;64     		p--;
;;;65     	
;;;66     	/* Init LCD */
;;;67     	SSD1306_WRITECOMMAND(0xAE); //display off
        0x080016f4:    22ae        ."      MOVS     r2,#0xae
        0x080016f6:    2100        .!      MOVS     r1,#0
        0x080016f8:    2078        x       MOVS     r0,#0x78
        0x080016fa:    f000ffbd    ....    BL       ssd1306_I2C_Write ; 0x8002678
;;;68     	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
        0x080016fe:    2220         "      MOVS     r2,#0x20
        0x08001700:    2100        .!      MOVS     r1,#0
        0x08001702:    2078        x       MOVS     r0,#0x78
        0x08001704:    f000ffb8    ....    BL       ssd1306_I2C_Write ; 0x8002678
;;;69     	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
        0x08001708:    2210        ."      MOVS     r2,#0x10
        0x0800170a:    2100        .!      MOVS     r1,#0
        0x0800170c:    2078        x       MOVS     r0,#0x78
        0x0800170e:    f000ffb3    ....    BL       ssd1306_I2C_Write ; 0x8002678
;;;70     	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
        0x08001712:    22b0        ."      MOVS     r2,#0xb0
        0x08001714:    2100        .!      MOVS     r1,#0
        0x08001716:    2078        x       MOVS     r0,#0x78
        0x08001718:    f000ffae    ....    BL       ssd1306_I2C_Write ; 0x8002678
;;;71     	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
        0x0800171c:    22c8        ."      MOVS     r2,#0xc8
        0x0800171e:    2100        .!      MOVS     r1,#0
        0x08001720:    2078        x       MOVS     r0,#0x78
        0x08001722:    f000ffa9    ....    BL       ssd1306_I2C_Write ; 0x8002678
;;;72     	SSD1306_WRITECOMMAND(0x00); //---set low column address
        0x08001726:    2200        ."      MOVS     r2,#0
        0x08001728:    4611        .F      MOV      r1,r2
        0x0800172a:    2078        x       MOVS     r0,#0x78
        0x0800172c:    f000ffa4    ....    BL       ssd1306_I2C_Write ; 0x8002678
;;;73     	SSD1306_WRITECOMMAND(0x10); //---set high column address
        0x08001730:    2210        ."      MOVS     r2,#0x10
        0x08001732:    2100        .!      MOVS     r1,#0
        0x08001734:    2078        x       MOVS     r0,#0x78
        0x08001736:    f000ff9f    ....    BL       ssd1306_I2C_Write ; 0x8002678
;;;74     	SSD1306_WRITECOMMAND(0x40); //--set start line address
        0x0800173a:    2240        @"      MOVS     r2,#0x40
        0x0800173c:    2100        .!      MOVS     r1,#0
        0x0800173e:    2078        x       MOVS     r0,#0x78
        0x08001740:    f000ff9a    ....    BL       ssd1306_I2C_Write ; 0x8002678
;;;75     	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
        0x08001744:    2281        ."      MOVS     r2,#0x81
        0x08001746:    2100        .!      MOVS     r1,#0
        0x08001748:    2078        x       MOVS     r0,#0x78
        0x0800174a:    f000ff95    ....    BL       ssd1306_I2C_Write ; 0x8002678
;;;76     	SSD1306_WRITECOMMAND(0xFF);
        0x0800174e:    22ff        ."      MOVS     r2,#0xff
        0x08001750:    2100        .!      MOVS     r1,#0
        0x08001752:    2078        x       MOVS     r0,#0x78
        0x08001754:    f000ff90    ....    BL       ssd1306_I2C_Write ; 0x8002678
;;;77     	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
        0x08001758:    22a1        ."      MOVS     r2,#0xa1
        0x0800175a:    2100        .!      MOVS     r1,#0
        0x0800175c:    2078        x       MOVS     r0,#0x78
        0x0800175e:    f000ff8b    ....    BL       ssd1306_I2C_Write ; 0x8002678
;;;78     	SSD1306_WRITECOMMAND(0xA6); //--set normal display
        0x08001762:    22a6        ."      MOVS     r2,#0xa6
        0x08001764:    2100        .!      MOVS     r1,#0
        0x08001766:    2078        x       MOVS     r0,#0x78
        0x08001768:    f000ff86    ....    BL       ssd1306_I2C_Write ; 0x8002678
;;;79     	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
        0x0800176c:    22a8        ."      MOVS     r2,#0xa8
        0x0800176e:    2100        .!      MOVS     r1,#0
        0x08001770:    2078        x       MOVS     r0,#0x78
        0x08001772:    f000ff81    ....    BL       ssd1306_I2C_Write ; 0x8002678
;;;80     	SSD1306_WRITECOMMAND(0x3F); //
        0x08001776:    223f        ?"      MOVS     r2,#0x3f
        0x08001778:    2100        .!      MOVS     r1,#0
        0x0800177a:    2078        x       MOVS     r0,#0x78
        0x0800177c:    f000ff7c    ..|.    BL       ssd1306_I2C_Write ; 0x8002678
;;;81     	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
        0x08001780:    22a4        ."      MOVS     r2,#0xa4
        0x08001782:    2100        .!      MOVS     r1,#0
        0x08001784:    2078        x       MOVS     r0,#0x78
        0x08001786:    f000ff77    ..w.    BL       ssd1306_I2C_Write ; 0x8002678
;;;82     	SSD1306_WRITECOMMAND(0xD3); //-set display offset
        0x0800178a:    22d3        ."      MOVS     r2,#0xd3
        0x0800178c:    2100        .!      MOVS     r1,#0
        0x0800178e:    2078        x       MOVS     r0,#0x78
        0x08001790:    f000ff72    ..r.    BL       ssd1306_I2C_Write ; 0x8002678
;;;83     	SSD1306_WRITECOMMAND(0x00); //-not offset
        0x08001794:    2200        ."      MOVS     r2,#0
        0x08001796:    4611        .F      MOV      r1,r2
        0x08001798:    2078        x       MOVS     r0,#0x78
        0x0800179a:    f000ff6d    ..m.    BL       ssd1306_I2C_Write ; 0x8002678
;;;84     	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
        0x0800179e:    22d5        ."      MOVS     r2,#0xd5
        0x080017a0:    2100        .!      MOVS     r1,#0
        0x080017a2:    2078        x       MOVS     r0,#0x78
        0x080017a4:    f000ff68    ..h.    BL       ssd1306_I2C_Write ; 0x8002678
;;;85     	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
        0x080017a8:    22f0        ."      MOVS     r2,#0xf0
        0x080017aa:    2100        .!      MOVS     r1,#0
        0x080017ac:    2078        x       MOVS     r0,#0x78
        0x080017ae:    f000ff63    ..c.    BL       ssd1306_I2C_Write ; 0x8002678
;;;86     	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
        0x080017b2:    22d9        ."      MOVS     r2,#0xd9
        0x080017b4:    2100        .!      MOVS     r1,#0
        0x080017b6:    2078        x       MOVS     r0,#0x78
        0x080017b8:    f000ff5e    ..^.    BL       ssd1306_I2C_Write ; 0x8002678
;;;87     	SSD1306_WRITECOMMAND(0x22); //
        0x080017bc:    2222        ""      MOVS     r2,#0x22
        0x080017be:    2100        .!      MOVS     r1,#0
        0x080017c0:    2078        x       MOVS     r0,#0x78
        0x080017c2:    f000ff59    ..Y.    BL       ssd1306_I2C_Write ; 0x8002678
;;;88     	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
        0x080017c6:    22da        ."      MOVS     r2,#0xda
        0x080017c8:    2100        .!      MOVS     r1,#0
        0x080017ca:    2078        x       MOVS     r0,#0x78
        0x080017cc:    f000ff54    ..T.    BL       ssd1306_I2C_Write ; 0x8002678
;;;89     	SSD1306_WRITECOMMAND(0x12);
        0x080017d0:    2212        ."      MOVS     r2,#0x12
        0x080017d2:    2100        .!      MOVS     r1,#0
        0x080017d4:    2078        x       MOVS     r0,#0x78
        0x080017d6:    f000ff4f    ..O.    BL       ssd1306_I2C_Write ; 0x8002678
;;;90     	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
        0x080017da:    22db        ."      MOVS     r2,#0xdb
        0x080017dc:    2100        .!      MOVS     r1,#0
        0x080017de:    2078        x       MOVS     r0,#0x78
        0x080017e0:    f000ff4a    ..J.    BL       ssd1306_I2C_Write ; 0x8002678
;;;91     	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
        0x080017e4:    2220         "      MOVS     r2,#0x20
        0x080017e6:    2100        .!      MOVS     r1,#0
        0x080017e8:    2078        x       MOVS     r0,#0x78
        0x080017ea:    f000ff45    ..E.    BL       ssd1306_I2C_Write ; 0x8002678
;;;92     	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
        0x080017ee:    228d        ."      MOVS     r2,#0x8d
        0x080017f0:    2100        .!      MOVS     r1,#0
        0x080017f2:    2078        x       MOVS     r0,#0x78
        0x080017f4:    f000ff40    ..@.    BL       ssd1306_I2C_Write ; 0x8002678
;;;93     	SSD1306_WRITECOMMAND(0x14); //
        0x080017f8:    2214        ."      MOVS     r2,#0x14
        0x080017fa:    2100        .!      MOVS     r1,#0
        0x080017fc:    2078        x       MOVS     r0,#0x78
        0x080017fe:    f000ff3b    ..;.    BL       ssd1306_I2C_Write ; 0x8002678
;;;94     	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
        0x08001802:    22af        ."      MOVS     r2,#0xaf
        0x08001804:    2100        .!      MOVS     r1,#0
        0x08001806:    2078        x       MOVS     r0,#0x78
        0x08001808:    f000ff36    ..6.    BL       ssd1306_I2C_Write ; 0x8002678
;;;95     	
;;;96     	/* Clear screen */
;;;97     	SSD1306_Fill(SSD1306_COLOR_BLACK);
        0x0800180c:    2000        .       MOVS     r0,#0
        0x0800180e:    f7ffff4f    ..O.    BL       SSD1306_Fill ; 0x80016b0
;;;98     	
;;;99     	/* Update screen */
;;;100    	SSD1306_UpdateScreen();
        0x08001812:    f000f8b5    ....    BL       SSD1306_UpdateScreen ; 0x8001980
;;;101    	
;;;102    	/* Set default values */
;;;103    	SSD1306.CurrentX = 0;
        0x08001816:    2000        .       MOVS     r0,#0
        0x08001818:    4903        .I      LDR      r1,[pc,#12] ; [0x8001828] = 0x2000000c
        0x0800181a:    8008        ..      STRH     r0,[r1,#0]
;;;104    	SSD1306.CurrentY = 0;
        0x0800181c:    8048        H.      STRH     r0,[r1,#2]
;;;105    	
;;;106    	/* Initialized OK */
;;;107    	SSD1306.Initialized = 1;
        0x0800181e:    2001        .       MOVS     r0,#1
        0x08001820:    7148        Hq      STRB     r0,[r1,#5]
;;;108    	
;;;109    	/* Return OK */
;;;110    	return 1;
;;;111    }
        0x08001822:    bd70        p.      POP      {r4-r6,pc}
    $d
        0x08001824:    20000004    ...     DCD    536870916
        0x08001828:    2000000c    ...     DCD    536870924
    $t
    i.SSD1306_Putc2big
    SSD1306_Putc2big
;;;112    
;;;113    void SSD1306_ToggleInvert(void) {
;;;114    	uint16_t i;
;;;115    	
;;;116    	/* Toggle invert */
;;;117    	SSD1306.Inverted = !SSD1306.Inverted;
;;;118    	
;;;119    	/* Do memory toggle */
;;;120    	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
;;;121    		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
;;;122    	}
;;;123    }
;;;124    
;;;125    void SSD1306_Fill(uint8_t color) {
;;;126    	/* Set memory */
;;;127    	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, SSD1306_WIDTH * SSD1306_HEIGHT / 8);
;;;128    }
;;;129    
;;;130    void SSD1306_DrawPixel(uint16_t x, uint16_t y, uint8_t color) {
;;;131    	if (
;;;132    		x >= SSD1306_WIDTH ||
;;;133    		y >= SSD1306_HEIGHT
;;;134    	) {
;;;135    		/* Error */
;;;136    		return;
;;;137    	}
;;;138    	
;;;139    	/* Check if pixels are inverted */
;;;140    	if (SSD1306.Inverted) {
;;;141    		color = (uint8_t)!color;
;;;142    	}
;;;143    	
;;;144    	/* Set color */
;;;145    	if (color == SSD1306_COLOR_WHITE) {
;;;146    		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
;;;147    	} else {
;;;148    		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
;;;149    	}
;;;150    }
;;;151    
;;;152    void SSD1306_GotoXY(uint16_t x, uint16_t y) {
;;;153    	/* Set write pointers */
;;;154    	SSD1306.CurrentX = x;
;;;155    	SSD1306.CurrentY = y;
;;;156    }
;;;157    
;;;158    void SSD1306_Putc2big(char ch, const FONT_INFO* Font) {
        0x0800182c:    e92d43f0    -..C    PUSH     {r4-r9,lr}
        0x08001830:    4604        .F      MOV      r4,r0
;;;159    	char ch_index = ch - Font->startChar;
        0x08001832:    7848        Hx      LDRB     r0,[r1,#1]
        0x08001834:    1a20         .      SUBS     r0,r4,r0
        0x08001836:    b2c2        ..      UXTB     r2,r0
;;;160    	uint16_t offset =  Font->charInfo[ch_index].offset;
        0x08001838:    6848        Hh      LDR      r0,[r1,#4]
        0x0800183a:    eb000082    ....    ADD      r0,r0,r2,LSL #2
        0x0800183e:    8847        G.      LDRH     r7,[r0,#2]
;;;161    	uint16_t x = SSD1306.CurrentX, y = SSD1306.CurrentY / 8;
        0x08001840:    481a        .H      LDR      r0,[pc,#104] ; [0x80018ac] = 0x2000000c
        0x08001842:    8805        ..      LDRH     r5,[r0,#0]
        0x08001844:    4603        .F      MOV      r3,r0
        0x08001846:    8858        X.      LDRH     r0,[r3,#2]
        0x08001848:    17c3        ..      ASRS     r3,r0,#31
        0x0800184a:    eb007353    ..Ss    ADD      r3,r0,r3,LSR #29
        0x0800184e:    10de        ..      ASRS     r6,r3,#3
;;;162    	for (int h = y; h < Font->heightPages + y; h++ ){
        0x08001850:    4630        0F      MOV      r0,r6
        0x08001852:    e01b        ..      B        0x800188c ; SSD1306_Putc2big + 96
;;;163    		for (int w = x; w < Font->charInfo[ch_index].widthBits+x; w++ ){
        0x08001854:    462b        +F      MOV      r3,r5
        0x08001856:    e011        ..      B        0x800187c ; SSD1306_Putc2big + 80
        0x08001858:    46bc        .F      MOV      r12,r7
        0x0800185a:    f1070801    ....    ADD      r8,r7,#1
        0x0800185e:    fa1ff788    ....    UXTH     r7,r8
        0x08001862:    f8d19008    ....    LDR      r9,[r1,#8]
        0x08001866:    f819c00c    ....    LDRB     r12,[r9,r12]
        0x0800186a:    eb0318c0    ....    ADD      r8,r3,r0,LSL #7
        0x0800186e:    f8df9040    ..@.    LDR      r9,[pc,#64] ; [0x80018b0] = 0x20000008
        0x08001872:    f8d99000    ....    LDR      r9,[r9,#0]
        0x08001876:    f809c008    ....    STRB     r12,[r9,r8]
        0x0800187a:    1c5b        [.      ADDS     r3,r3,#1
        0x0800187c:    f8d1c004    ....    LDR      r12,[r1,#4]
        0x08001880:    f81cc022    ..".    LDRB     r12,[r12,r2,LSL #2]
        0x08001884:    44ac        .D      ADD      r12,r12,r5
        0x08001886:    459c        .E      CMP      r12,r3
        0x08001888:    dce6        ..      BGT      0x8001858 ; SSD1306_Putc2big + 44
        0x0800188a:    1c40        @.      ADDS     r0,r0,#1
        0x0800188c:    780b        .x      LDRB     r3,[r1,#0]
        0x0800188e:    4433        3D      ADD      r3,r3,r6
        0x08001890:    4283        .B      CMP      r3,r0
        0x08001892:    dcdf        ..      BGT      0x8001854 ; SSD1306_Putc2big + 40
;;;164    			SSD1306_Buffer[w + h * SSD1306_WIDTH] = Font->data[offset++];
;;;165    		}
;;;166    	}
;;;167    	SSD1306.CurrentX += Font->charInfo[ch_index].widthBits + 1;
        0x08001894:    6848        Hh      LDR      r0,[r1,#4]
        0x08001896:    f8100022    ..".    LDRB     r0,[r0,r2,LSL #2]
        0x0800189a:    1c40        @.      ADDS     r0,r0,#1
        0x0800189c:    4b03        .K      LDR      r3,[pc,#12] ; [0x80018ac] = 0x2000000c
        0x0800189e:    881b        ..      LDRH     r3,[r3,#0]
        0x080018a0:    4418        .D      ADD      r0,r0,r3
        0x080018a2:    4b02        .K      LDR      r3,[pc,#8] ; [0x80018ac] = 0x2000000c
        0x080018a4:    8018        ..      STRH     r0,[r3,#0]
;;;168    }
        0x080018a6:    e8bd83f0    ....    POP      {r4-r9,pc}
    $d
        0x080018aa:    0000        ..      DCW    0
        0x080018ac:    2000000c    ...     DCD    536870924
        0x080018b0:    20000008    ...     DCD    536870920
    $t
    i.SSD1306_Putc2bigInv
    SSD1306_Putc2bigInv
;;;169    
;;;170    void SSD1306_Putc2bigInv(char ch, const FONT_INFO* Font) {
        0x080018b4:    e92d43f0    -..C    PUSH     {r4-r9,lr}
        0x080018b8:    4604        .F      MOV      r4,r0
;;;171    	char ch_index = ch - Font->startChar;
        0x080018ba:    7848        Hx      LDRB     r0,[r1,#1]
        0x080018bc:    1a20         .      SUBS     r0,r4,r0
        0x080018be:    b2c2        ..      UXTB     r2,r0
;;;172    	uint16_t offset =  Font->charInfo[ch_index].offset;
        0x080018c0:    6848        Hh      LDR      r0,[r1,#4]
        0x080018c2:    eb000082    ....    ADD      r0,r0,r2,LSL #2
        0x080018c6:    8847        G.      LDRH     r7,[r0,#2]
;;;173    	uint16_t x = SSD1306.CurrentX, y = SSD1306.CurrentY / 8;
        0x080018c8:    481e        .H      LDR      r0,[pc,#120] ; [0x8001944] = 0x2000000c
        0x080018ca:    8805        ..      LDRH     r5,[r0,#0]
        0x080018cc:    4603        .F      MOV      r3,r0
        0x080018ce:    8858        X.      LDRH     r0,[r3,#2]
        0x080018d0:    17c3        ..      ASRS     r3,r0,#31
        0x080018d2:    eb007353    ..Ss    ADD      r3,r0,r3,LSR #29
        0x080018d6:    10de        ..      ASRS     r6,r3,#3
;;;174    	for (int h = y; h < Font->heightPages + y; h++ ){
        0x080018d8:    4630        0F      MOV      r0,r6
        0x080018da:    e023        #.      B        0x8001924 ; SSD1306_Putc2bigInv + 112
;;;175    		for (int w = x; w < Font->charInfo[ch_index].widthBits+x; w++ ){
        0x080018dc:    462b        +F      MOV      r3,r5
        0x080018de:    e019        ..      B        0x8001914 ; SSD1306_Putc2bigInv + 96
        0x080018e0:    46bc        .F      MOV      r12,r7
        0x080018e2:    f1070801    ....    ADD      r8,r7,#1
        0x080018e6:    fa1ff788    ....    UXTH     r7,r8
        0x080018ea:    f8d19008    ....    LDR      r9,[r1,#8]
        0x080018ee:    f819c00c    ....    LDRB     r12,[r9,r12]
        0x080018f2:    f1bc0f00    ....    CMP      r12,#0
        0x080018f6:    d102        ..      BNE      0x80018fe ; SSD1306_Putc2bigInv + 74
        0x080018f8:    f04f0c01    O...    MOV      r12,#1
        0x080018fc:    e001        ..      B        0x8001902 ; SSD1306_Putc2bigInv + 78
        0x080018fe:    f04f0c00    O...    MOV      r12,#0
        0x08001902:    eb0318c0    ....    ADD      r8,r3,r0,LSL #7
        0x08001906:    f8df9040    ..@.    LDR      r9,[pc,#64] ; [0x8001948] = 0x20000008
        0x0800190a:    f8d99000    ....    LDR      r9,[r9,#0]
        0x0800190e:    f809c008    ....    STRB     r12,[r9,r8]
        0x08001912:    1c5b        [.      ADDS     r3,r3,#1
        0x08001914:    f8d1c004    ....    LDR      r12,[r1,#4]
        0x08001918:    f81cc022    ..".    LDRB     r12,[r12,r2,LSL #2]
        0x0800191c:    44ac        .D      ADD      r12,r12,r5
        0x0800191e:    459c        .E      CMP      r12,r3
        0x08001920:    dcde        ..      BGT      0x80018e0 ; SSD1306_Putc2bigInv + 44
        0x08001922:    1c40        @.      ADDS     r0,r0,#1
        0x08001924:    780b        .x      LDRB     r3,[r1,#0]
        0x08001926:    4433        3D      ADD      r3,r3,r6
        0x08001928:    4283        .B      CMP      r3,r0
        0x0800192a:    dcd7        ..      BGT      0x80018dc ; SSD1306_Putc2bigInv + 40
;;;176    			SSD1306_Buffer[w + h * SSD1306_WIDTH] = !Font->data[offset++];
;;;177    		}
;;;178    	}
;;;179    	SSD1306.CurrentX += Font->charInfo[ch_index].widthBits + 1;
        0x0800192c:    6848        Hh      LDR      r0,[r1,#4]
        0x0800192e:    f8100022    ..".    LDRB     r0,[r0,r2,LSL #2]
        0x08001932:    1c40        @.      ADDS     r0,r0,#1
        0x08001934:    4b03        .K      LDR      r3,[pc,#12] ; [0x8001944] = 0x2000000c
        0x08001936:    881b        ..      LDRH     r3,[r3,#0]
        0x08001938:    4418        .D      ADD      r0,r0,r3
        0x0800193a:    4b02        .K      LDR      r3,[pc,#8] ; [0x8001944] = 0x2000000c
        0x0800193c:    8018        ..      STRH     r0,[r3,#0]
;;;180    }
        0x0800193e:    e8bd83f0    ....    POP      {r4-r9,pc}
    $d
        0x08001942:    0000        ..      DCW    0
        0x08001944:    2000000c    ...     DCD    536870924
        0x08001948:    20000008    ...     DCD    536870920
    $t
    i.SSD1306_Puts2
    SSD1306_Puts2
;;;181    
;;;182    char SSD1306_Puts2(char* str, const FONT_INFO* Font, uint8_t color) {
        0x0800194c:    b570        p.      PUSH     {r4-r6,lr}
        0x0800194e:    4604        .F      MOV      r4,r0
        0x08001950:    460e        .F      MOV      r6,r1
        0x08001952:    4615        .F      MOV      r5,r2
;;;183    	/* Write characters */
;;;184    	if(color){
        0x08001954:    b14d        M.      CBZ      r5,0x800196a ; SSD1306_Puts2 + 30
;;;185    		while (*str) {
        0x08001956:    e004        ..      B        0x8001962 ; SSD1306_Puts2 + 22
        0x08001958:    7820         x      LDRB     r0,[r4,#0]
        0x0800195a:    4631        1F      MOV      r1,r6
        0x0800195c:    f7ffff66    ..f.    BL       SSD1306_Putc2big ; 0x800182c
        0x08001960:    1c64        d.      ADDS     r4,r4,#1
        0x08001962:    7820         x      LDRB     r0,[r4,#0]
        0x08001964:    2800        .(      CMP      r0,#0
        0x08001966:    d1f7        ..      BNE      0x8001958 ; SSD1306_Puts2 + 12
        0x08001968:    e008        ..      B        0x800197c ; SSD1306_Puts2 + 48
;;;186    			/* Write character by character */
;;;187    			SSD1306_Putc2big(*str, Font);
;;;188    			str++;
;;;189    		}
;;;190    	} else {
;;;191    		while (*str) {
        0x0800196a:    e004        ..      B        0x8001976 ; SSD1306_Puts2 + 42
        0x0800196c:    7820         x      LDRB     r0,[r4,#0]
        0x0800196e:    4631        1F      MOV      r1,r6
        0x08001970:    f7ffffa0    ....    BL       SSD1306_Putc2bigInv ; 0x80018b4
        0x08001974:    1c64        d.      ADDS     r4,r4,#1
        0x08001976:    7820         x      LDRB     r0,[r4,#0]
        0x08001978:    2800        .(      CMP      r0,#0
        0x0800197a:    d1f7        ..      BNE      0x800196c ; SSD1306_Puts2 + 32
;;;192    			/* Write character by character */
;;;193    			SSD1306_Putc2bigInv(*str, Font);
;;;194    			str++;
;;;195    		}
;;;196    	}
;;;197    
;;;198    	/* Everything OK, zero should be returned */
;;;199    	return *str;
        0x0800197c:    7820         x      LDRB     r0,[r4,#0]
;;;200    }
        0x0800197e:    bd70        p.      POP      {r4-r6,pc}
    i.SSD1306_UpdateScreen
    SSD1306_UpdateScreen
;;;201    
;;;202    char SSD1306_Putc(char ch, FontDef_t* Font, uint8_t color) {
;;;203    	uint32_t i, b, j;
;;;204    	
;;;205    	b = 0;
;;;206    	
;;;207    	for (i = 0; i < Font->FontHeight; i++) {
;;;208    		b = Font->data[(ch - 32) * Font->FontHeight + i];
;;;209    		for (j = 0; j < Font->FontWidth; j++) {
;;;210    			if ((b << j) & 0x8000) {
;;;211    				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (uint8_t) color);
;;;212    			} else {
;;;213    				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (uint8_t) !color);
;;;214    			}
;;;215    		}
;;;216    	}
;;;217    	/* Increase pointer */
;;;218    	SSD1306.CurrentX += Font->FontWidth;
;;;219    	
;;;220    	/* Return character written */
;;;221    	return ch;
;;;222    }
;;;223    
;;;224    char SSD1306_Puts(char* str, FontDef_t* Font, uint8_t color) {
;;;225    	/* Write characters */
;;;226    	while (*str) {
;;;227    		/* Write character by character */
;;;228    		if (SSD1306_Putc(*str, Font, color) != *str) {
;;;229    			/* Return error */
;;;230    			return *str;
;;;231    		}
;;;232    		
;;;233    		/* Increase string pointer */
;;;234    		str++;
;;;235    	}
;;;236    	
;;;237    	/* Everything OK, zero should be returned */
;;;238    	return *str;
;;;239    }
;;;240     
;;;241    
;;;242    void ssd1306_I2C_Init() {
;;;243    	//MX_I2C1_Init();
;;;244    //	Activate_I2C_Master();
;;;245    
;;;246    	uint32_t p = 250000;
;;;247    	while(p>0)
;;;248    		p--;
;;;249    	//HAL_I2C_DeInit(hi2c_screen);
;;;250    	//p = 250000;
;;;251    	//while(p>0)
;;;252    	//	p--;
;;;253    	//MX_I2C1_Init();
;;;254    }
;;;255    /*
;;;256    void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
;;;257    	uint8_t dt[count + 1];
;;;258    	dt[0] = reg;
;;;259    	uint8_t i;
;;;260    	for(i = 1; i <= count; i++)
;;;261    		dt[i] = data[i-1];
;;;262    //	Handle_I2C_Master(hi2c_screen, address, dt, count, 10);
;;;263    	// haltodo HAL_I2C_Master_Transmit(hi2c_screen, address, dt, count, 10);
;;;264    }
;;;265    
;;;266    
;;;267    void ssd1306_I2C_WriteMulti_DMA(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {	
;;;268    	//haltodo HAL_I2C_Master_Transmit(hi2c_screen, address, &reg, 1, 100);
;;;269    	//haltodo HAL_I2C_Master_Transmit_DMA(hi2c_screen, address, data, count);
;;;270    }
;;;271    */
;;;272    
;;;273    void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
;;;274    	uint8_t dt[2] = {reg, data};
;;;275    //	dt[0] = reg;
;;;276    //	dt[1] = data;
;;;277    	Handle_I2C_MasterDMA_IT(hi2c_screen, address, dt, 2, 10);
;;;278    //	HAL_I2C_Master_Transmit(hi2c_screen, address, dt, 2, 10);
;;;279    }
;;;280    
;;;281    void SSD1306_UpdateScreen(void) {
        0x08001980:    b510        ..      PUSH     {r4,lr}
;;;282    	SSD1306_Buffer_all[0] = 0x40;
        0x08001982:    2040        @       MOVS     r0,#0x40
        0x08001984:    4903        .I      LDR      r1,[pc,#12] ; [0x8001994] = 0x20000598
        0x08001986:    7008        .p      STRB     r0,[r1,#0]
;;;283    //	HAL_I2C_Master_Transmit(hi2c_screen, SSD1306_I2C_ADDR, SSD1306_Buffer_all, SSD1306_WIDTH * SSD1306_HEIGHT / 8 + 1, 100);
;;;284    	Handle_I2C_MasterDMA_IT_async(SSD1306_I2C_ADDR, SSD1306_Buffer_all, SSD1306_WIDTH * SSD1306_HEIGHT / 8 + 1);
        0x08001988:    f2404201    @..B    MOV      r2,#0x401
        0x0800198c:    2078        x       MOVS     r0,#0x78
        0x0800198e:    f7fefcf3    ....    BL       Handle_I2C_MasterDMA_IT_async ; 0x8000378
;;;285    //	Handle_I2C_MasterDMA_IT(hi2c_screen, SSD1306_I2C_ADDR, SSD1306_Buffer_all, SSD1306_WIDTH * SSD1306_HEIGHT / 8 + 1, 100);
;;;286    //  if(LL_I2C_IsActiveFlag_SB(I2C2)) {
;;;287    
;;;288    	/* haltodo
;;;289    	if(hi2c_screen->hdmatx->State == HAL_DMA_STATE_READY)
;;;290    		HAL_I2C_Master_Transmit_DMA(hi2c_screen, SSD1306_I2C_ADDR, SSD1306_Buffer_all, SSD1306_WIDTH * SSD1306_HEIGHT / 8 + 1);
;;;291    //	HAL_I2C_Master_Transmit(hi2c_screen, SSD1306_I2C_ADDR, SSD1306_Buffer_all, SSD1306_WIDTH * SSD1306_HEIGHT / 8 + 1, 100);
;;;292    //	while(HAL_DMA_GetState(hi2c_screen->hdmatx) != HAL_DMA_STATE_READY)
;;;293    //	{
;;;294    //		HAL_Delay(1); //Change for your RTOS
;;;295    //	}
;;;296    	*/
;;;297    //	}
;;;298    }
        0x08001992:    bd10        ..      POP      {r4,pc}
    $d
        0x08001994:    20000598    ...     DCD    536872344
    $t
    i.SVC_Handler
    SVC_Handler
;;; .\../Src/stm32f1xx_it.c
;;;96     }
        0x08001998:    4770        pG      BX       lr
        0x0800199a:    0000        ..      MOVS     r0,r0
    i.SysTick_Handler
    SysTick_Handler
;;;97     
;;;98     /**
;;;99     * @brief This function handles Pendable request for system service.
;;;100    */
;;;101    void PendSV_Handler(void)
;;;102    {
;;;103      /* USER CODE BEGIN PendSV_IRQn 0 */
;;;104    
;;;105      /* USER CODE END PendSV_IRQn 0 */
;;;106      /* USER CODE BEGIN PendSV_IRQn 1 */
;;;107    
;;;108      /* USER CODE END PendSV_IRQn 1 */
;;;109    }
;;;110    
;;;111    /**
;;;112    * @brief This function handles System tick timer.
;;;113    */
;;;114    void SysTick_Handler(void)
;;;115    {
;;;116      /* USER CODE BEGIN SysTick_IRQn 0 */
;;;117    
;;;118      /* USER CODE END SysTick_IRQn 0 */
;;;119      
;;;120      /* USER CODE BEGIN SysTick_IRQn 1 */
;;;121    
;;;122    /*
;;;123    #if  defined ( _SIMU )
;;;124    
;;;125    //simulate spindle
;;;126    	if(++tacho_cnt == 1800 ) {
;;;127    		tacho_debug = 1;
;;;128    		tacho_cnt = 0;
;;;129    		TIM4_IRQHandler();
;;;130    	}
;;;131    	if(++TIM4->CNT > TIM4->ARR) {
;;;132    		TIM4->CNT = 0; // overflow emulation
;;;133    		encoder = true;
;;;134    		TIM4_IRQHandler();
;;;135    	}
;;;136    #endif
;;;137    */
;;;138    //      if(auto_mode_delay > 0)
;;;139    //              auto_mode_delay--;
;;;140    	for(int a = 0; a<BT_TOTAL;a++){
        0x0800199c:    2000        .       MOVS     r0,#0
;;; .\../Src/stm32f1xx_it.c (140)
        0x0800199e:    e00e        ..      B        0x80019be ; SysTick_Handler + 34
        0x080019a0:    4908        .I      LDR      r1,[pc,#32] ; [0x80019c4] = 0x20000a14
        0x080019a2:    eb011140    ..@.    ADD      r1,r1,r0,LSL #5
        0x080019a6:    6909        .i      LDR      r1,[r1,#0x10]
        0x080019a8:    b141        A.      CBZ      r1,0x80019bc ; SysTick_Handler + 32
        0x080019aa:    4906        .I      LDR      r1,[pc,#24] ; [0x80019c4] = 0x20000a14
        0x080019ac:    eb011140    ..@.    ADD      r1,r1,r0,LSL #5
        0x080019b0:    6909        .i      LDR      r1,[r1,#0x10]
        0x080019b2:    1c49        I.      ADDS     r1,r1,#1
        0x080019b4:    4a03        .J      LDR      r2,[pc,#12] ; [0x80019c4] = 0x20000a14
        0x080019b6:    eb021240    ..@.    ADD      r2,r2,r0,LSL #5
        0x080019ba:    6111        .a      STR      r1,[r2,#0x10]
        0x080019bc:    1c40        @.      ADDS     r0,r0,#1
        0x080019be:    2801        .(      CMP      r0,#1
        0x080019c0:    dbee        ..      BLT      0x80019a0 ; SysTick_Handler + 4
;;;141    		if( bt[a].buttons_mstick > 0 )
;;;142    			bt[a].buttons_mstick++;
;;;143    	}
;;;144      /* USER CODE END SysTick_IRQn 1 */
;;;145    }
        0x080019c2:    4770        pG      BX       lr
    $d
        0x080019c4:    20000a14    ...     DCD    536873492
    $t
    i.SystemClock_Config
    SystemClock_Config
;;; .\../Src/main.c
;;;530    {
        0x080019c8:    b570        p.      PUSH     {r4-r6,lr}
;;;531    
;;;532      LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
        0x080019ca:    2002        .       MOVS     r0,#2
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_system.h
;;;488      MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
        0x080019cc:    494a        JI      LDR      r1,[pc,#296] ; [0x8001af8] = 0x40022000
        0x080019ce:    6809        .h      LDR      r1,[r1,#0]
        0x080019d0:    f0210107    !...    BIC      r1,r1,#7
        0x080019d4:    4301        .C      ORRS     r1,r1,r0
        0x080019d6:    4a48        HJ      LDR      r2,[pc,#288] ; [0x8001af8] = 0x40022000
        0x080019d8:    6011        .`      STR      r1,[r2,#0]
;;;489    }
        0x080019da:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;534       if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2)
        0x080019dc:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_system.h
;;;501      return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
        0x080019de:    4610        .F      MOV      r0,r2
        0x080019e0:    6800        .h      LDR      r0,[r0,#0]
        0x080019e2:    f0000007    ....    AND      r0,r0,#7
        0x080019e6:    2802        .(      CMP      r0,#2
        0x080019e8:    d004        ..      BEQ      0x80019f4 ; SystemClock_Config + 44
;;; .\../Src/main.c
;;;536        Error_Handler();  
        0x080019ea:    f44f7106    O..q    MOV      r1,#0x218
        0x080019ee:    a043        C.      ADR      r0,{pc}+0x10e ; 0x8001afc
        0x080019f0:    f000f952    ..R.    BL       _Error_Handler ; 0x8001c98
;;;537      }
;;;538      LL_RCC_HSE_Enable();
        0x080019f4:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;792      SET_BIT(RCC->CR, RCC_CR_HSEON);
        0x080019f6:    4845        EH      LDR      r0,[pc,#276] ; [0x8001b0c] = 0x40021000
        0x080019f8:    6800        .h      LDR      r0,[r0,#0]
        0x080019fa:    f4403080    @..0    ORR      r0,r0,#0x10000
        0x080019fe:    4943        CI      LDR      r1,[pc,#268] ; [0x8001b0c] = 0x40021000
        0x08001a00:    6008        .`      STR      r0,[r1,#0]
;;;793    }
        0x08001a02:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;541      while(LL_RCC_HSE_IsReady() != 1)
        0x08001a04:    bf00        ..      NOP      
        0x08001a06:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;812      return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
        0x08001a08:    4840        @H      LDR      r0,[pc,#256] ; [0x8001b0c] = 0x40021000
        0x08001a0a:    6800        .h      LDR      r0,[r0,#0]
        0x08001a0c:    f3c04040    ..@@    UBFX     r0,r0,#17,#1
        0x08001a10:    2800        .(      CMP      r0,#0
        0x08001a12:    d0f8        ..      BEQ      0x8001a06 ; SystemClock_Config + 62
;;; .\../Src/main.c
;;;545      LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
        0x08001a14:    f44f3080    O..0    MOV      r0,#0x10000
        0x08001a18:    f44f11e0    O...    MOV      r1,#0x1c0000
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;1495     MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
        0x08001a1c:    4a3b        ;J      LDR      r2,[pc,#236] ; [0x8001b0c] = 0x40021000
        0x08001a1e:    6852        Rh      LDR      r2,[r2,#4]
        0x08001a20:    f422127c    ".|.    BIC      r2,r2,#0x3f0000
        0x08001a24:    f4003340    ..@3    AND      r3,r0,#0x30000
        0x08001a28:    430b        .C      ORRS     r3,r3,r1
        0x08001a2a:    431a        .C      ORRS     r2,r2,r3
        0x08001a2c:    4b37        7K      LDR      r3,[pc,#220] ; [0x8001b0c] = 0x40021000
        0x08001a2e:    605a        Z`      STR      r2,[r3,#4]
;;;1496                (Source & (RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE)) | PLLMul);
;;;1497   #if defined(RCC_CFGR2_PREDIV1)
;;;1498   #if defined(RCC_CFGR2_PREDIV1SRC)
;;;1499     MODIFY_REG(RCC->CFGR2, (RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC),
;;;1500                (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
;;;1501   #else
;;;1502     MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
;;;1503   #endif /*RCC_CFGR2_PREDIV1SRC*/
;;;1504   #endif /*RCC_CFGR2_PREDIV1*/
;;;1505   }
        0x08001a30:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;547      LL_RCC_PLL_Enable();
        0x08001a32:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;1405     SET_BIT(RCC->CR, RCC_CR_PLLON);
        0x08001a34:    4618        .F      MOV      r0,r3
        0x08001a36:    6800        .h      LDR      r0,[r0,#0]
        0x08001a38:    f0407080    @..p    ORR      r0,r0,#0x1000000
        0x08001a3c:    4619        .F      MOV      r1,r3
        0x08001a3e:    6008        .`      STR      r0,[r1,#0]
;;;1406   }
        0x08001a40:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;550      while(LL_RCC_PLL_IsReady() != 1)
        0x08001a42:    bf00        ..      NOP      
        0x08001a44:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;1426     return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
        0x08001a46:    4831        1H      LDR      r0,[pc,#196] ; [0x8001b0c] = 0x40021000
        0x08001a48:    6800        .h      LDR      r0,[r0,#0]
        0x08001a4a:    f3c06040    ..@`    UBFX     r0,r0,#25,#1
        0x08001a4e:    2800        .(      CMP      r0,#0
        0x08001a50:    d0f8        ..      BEQ      0x8001a44 ; SystemClock_Config + 124
;;; .\../Src/main.c
;;;554      LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
        0x08001a52:    2000        .       MOVS     r0,#0
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;1065     MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
        0x08001a54:    492d        -I      LDR      r1,[pc,#180] ; [0x8001b0c] = 0x40021000
        0x08001a56:    6849        Ih      LDR      r1,[r1,#4]
        0x08001a58:    f02101f0    !...    BIC      r1,r1,#0xf0
        0x08001a5c:    4301        .C      ORRS     r1,r1,r0
        0x08001a5e:    4a2b        +J      LDR      r2,[pc,#172] ; [0x8001b0c] = 0x40021000
        0x08001a60:    6051        Q`      STR      r1,[r2,#4]
;;;1066   }
        0x08001a62:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;556      LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
        0x08001a64:    1510        ..      ASRS     r0,r2,#20
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;1081     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
        0x08001a66:    4611        .F      MOV      r1,r2
        0x08001a68:    6849        Ih      LDR      r1,[r1,#4]
        0x08001a6a:    f42161e0    !..a    BIC      r1,r1,#0x700
        0x08001a6e:    4301        .C      ORRS     r1,r1,r0
        0x08001a70:    6051        Q`      STR      r1,[r2,#4]
;;;1082   }
        0x08001a72:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;558      LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
        0x08001a74:    2000        .       MOVS     r0,#0
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;1097     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
        0x08001a76:    4611        .F      MOV      r1,r2
        0x08001a78:    6849        Ih      LDR      r1,[r1,#4]
        0x08001a7a:    f4215160    !.`Q    BIC      r1,r1,#0x3800
        0x08001a7e:    4301        .C      ORRS     r1,r1,r0
        0x08001a80:    6051        Q`      STR      r1,[r2,#4]
;;;1098   }
        0x08001a82:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;560      LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
        0x08001a84:    2002        .       MOVS     r0,#2
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;1032     MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
        0x08001a86:    4611        .F      MOV      r1,r2
        0x08001a88:    6849        Ih      LDR      r1,[r1,#4]
        0x08001a8a:    f0210103    !...    BIC      r1,r1,#3
        0x08001a8e:    4301        .C      ORRS     r1,r1,r0
        0x08001a90:    6051        Q`      STR      r1,[r2,#4]
;;;1033   }
        0x08001a92:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;563      while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
        0x08001a94:    bf00        ..      NOP      
        0x08001a96:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;1045     return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
        0x08001a98:    481c        .H      LDR      r0,[pc,#112] ; [0x8001b0c] = 0x40021000
        0x08001a9a:    6840        @h      LDR      r0,[r0,#4]
        0x08001a9c:    f000000c    ....    AND      r0,r0,#0xc
        0x08001aa0:    2808        .(      CMP      r0,#8
        0x08001aa2:    d1f8        ..      BNE      0x8001a96 ; SystemClock_Config + 206
;;; .\../Src/main.c
;;;567      LL_Init1msTick(72000000);
        0x08001aa4:    481a        .H      LDR      r0,[pc,#104] ; [0x8001b10] = 0x44aa200
        0x08001aa6:    f7feff0b    ....    BL       LL_Init1msTick ; 0x80008c0
;;;568    
;;;569      LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
        0x08001aaa:    2004        .       MOVS     r0,#4
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_cortex.h
;;;262      if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
        0x08001aac:    2804        .(      CMP      r0,#4
        0x08001aae:    d108        ..      BNE      0x8001ac2 ; SystemClock_Config + 250
;;;263      {
;;;264        SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
        0x08001ab0:    f04f21e0    O..!    MOV      r1,#0xe000e000
        0x08001ab4:    6909        .i      LDR      r1,[r1,#0x10]
        0x08001ab6:    f0410104    A...    ORR      r1,r1,#4
        0x08001aba:    f04f22e0    O.."    MOV      r2,#0xe000e000
        0x08001abe:    6111        .a      STR      r1,[r2,#0x10]
        0x08001ac0:    e007        ..      B        0x8001ad2 ; SystemClock_Config + 266
;;;265      }
;;;266      else
;;;267      {
;;;268        CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
        0x08001ac2:    f04f21e0    O..!    MOV      r1,#0xe000e000
        0x08001ac6:    6909        .i      LDR      r1,[r1,#0x10]
        0x08001ac8:    f0210104    !...    BIC      r1,r1,#4
        0x08001acc:    f04f22e0    O.."    MOV      r2,#0xe000e000
        0x08001ad0:    6111        .a      STR      r1,[r2,#0x10]
;;;269      }
;;;270    }
        0x08001ad2:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;571      LL_SetSystemCoreClock(72000000);
        0x08001ad4:    480e        .H      LDR      r0,[pc,#56] ; [0x8001b10] = 0x44aa200
        0x08001ad6:    f7feff13    ....    BL       LL_SetSystemCoreClock ; 0x8000900
;;;572    
;;;573      /* SysTick_IRQn interrupt configuration */
;;;574      NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
        0x08001ada:    f7fffc5d    ..].    BL       NVIC_GetPriorityGrouping ; 0x8001398
        0x08001ade:    4605        .F      MOV      r5,r0
        0x08001ae0:    2200        ."      MOVS     r2,#0
        0x08001ae2:    4611        .F      MOV      r1,r2
        0x08001ae4:    f7fffc37    ..7.    BL       NVIC_EncodePriority ; 0x8001356
        0x08001ae8:    4604        .F      MOV      r4,r0
        0x08001aea:    4621        !F      MOV      r1,r4
        0x08001aec:    f04f30ff    O..0    MOV      r0,#0xffffffff
        0x08001af0:    f7fffc5a    ..Z.    BL       NVIC_SetPriority ; 0x80013a8
;;;575    }
        0x08001af4:    bd70        p.      POP      {r4-r6,pc}
    $d
        0x08001af6:    0000        ..      DCW    0
        0x08001af8:    40022000    . .@    DCD    1073881088
        0x08001afc:    532f2e2e    ../S    DCD    1395600942
        0x08001b00:    6d2f6372    rc/m    DCD    1831822194
        0x08001b04:    2e6e6961    ain.    DCD    778987873
        0x08001b08:    00000063    c...    DCD    99
        0x08001b0c:    40021000    ...@    DCD    1073876992
        0x08001b10:    044aa200    ..J.    DCD    72000000
    $t
    i.SystemInit
    SystemInit
;;; .\..//Src/system_stm32f1xx.c
;;;179      RCC->CR |= (uint32_t)0x00000001;
        0x08001b14:    4811        .H      LDR      r0,[pc,#68] ; [0x8001b5c] = 0x40021000
        0x08001b16:    6800        .h      LDR      r0,[r0,#0]
        0x08001b18:    f0400001    @...    ORR      r0,r0,#1
        0x08001b1c:    490f        .I      LDR      r1,[pc,#60] ; [0x8001b5c] = 0x40021000
        0x08001b1e:    6008        .`      STR      r0,[r1,#0]
;;;180    
;;;181      /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
;;;182    #if !defined(STM32F105xC) && !defined(STM32F107xC)
;;;183      RCC->CFGR &= (uint32_t)0xF8FF0000;
        0x08001b20:    4608        .F      MOV      r0,r1
        0x08001b22:    6840        @h      LDR      r0,[r0,#4]
        0x08001b24:    490e        .I      LDR      r1,[pc,#56] ; [0x8001b60] = 0xf8ff0000
        0x08001b26:    4008        .@      ANDS     r0,r0,r1
        0x08001b28:    490c        .I      LDR      r1,[pc,#48] ; [0x8001b5c] = 0x40021000
        0x08001b2a:    6048        H`      STR      r0,[r1,#4]
;;;184    #else
;;;185      RCC->CFGR &= (uint32_t)0xF0FF0000;
;;;186    #endif /* STM32F105xC */   
;;;187      
;;;188      /* Reset HSEON, CSSON and PLLON bits */
;;;189      RCC->CR &= (uint32_t)0xFEF6FFFF;
        0x08001b2c:    4608        .F      MOV      r0,r1
        0x08001b2e:    6800        .h      LDR      r0,[r0,#0]
        0x08001b30:    490c        .I      LDR      r1,[pc,#48] ; [0x8001b64] = 0xfef6ffff
        0x08001b32:    4008        .@      ANDS     r0,r0,r1
        0x08001b34:    4909        .I      LDR      r1,[pc,#36] ; [0x8001b5c] = 0x40021000
        0x08001b36:    6008        .`      STR      r0,[r1,#0]
;;;190    
;;;191      /* Reset HSEBYP bit */
;;;192      RCC->CR &= (uint32_t)0xFFFBFFFF;
        0x08001b38:    4608        .F      MOV      r0,r1
        0x08001b3a:    6800        .h      LDR      r0,[r0,#0]
        0x08001b3c:    f4202080     ..     BIC      r0,r0,#0x40000
        0x08001b40:    6008        .`      STR      r0,[r1,#0]
;;;193    
;;;194      /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
;;;195      RCC->CFGR &= (uint32_t)0xFF80FFFF;
        0x08001b42:    4608        .F      MOV      r0,r1
        0x08001b44:    6840        @h      LDR      r0,[r0,#4]
        0x08001b46:    f42000fe     ...    BIC      r0,r0,#0x7f0000
        0x08001b4a:    6048        H`      STR      r0,[r1,#4]
;;;196    
;;;197    #if defined(STM32F105xC) || defined(STM32F107xC)
;;;198      /* Reset PLL2ON and PLL3ON bits */
;;;199      RCC->CR &= (uint32_t)0xEBFFFFFF;
;;;200    
;;;201      /* Disable all interrupts and clear pending bits  */
;;;202      RCC->CIR = 0x00FF0000;
;;;203    
;;;204      /* Reset CFGR2 register */
;;;205      RCC->CFGR2 = 0x00000000;
;;;206    #elif defined(STM32F100xB) || defined(STM32F100xE)
;;;207      /* Disable all interrupts and clear pending bits  */
;;;208      RCC->CIR = 0x009F0000;
;;;209    
;;;210      /* Reset CFGR2 register */
;;;211      RCC->CFGR2 = 0x00000000;      
;;;212    #else
;;;213      /* Disable all interrupts and clear pending bits  */
;;;214      RCC->CIR = 0x009F0000;
        0x08001b4c:    f44f001f    O...    MOV      r0,#0x9f0000
        0x08001b50:    6088        .`      STR      r0,[r1,#8]
;;;215    #endif /* STM32F105xC */
;;;216        
;;;217    #if defined(STM32F100xE) || defined(STM32F101xE) || defined(STM32F101xG) || defined(STM32F103xE) || defined(STM32F103xG)
;;;218      #ifdef DATA_IN_ExtSRAM
;;;219        SystemInit_ExtMemCtl(); 
;;;220      #endif /* DATA_IN_ExtSRAM */
;;;221    #endif 
;;;222    
;;;223    #ifdef VECT_TAB_SRAM
;;;224      SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
;;;225    #else
;;;226      SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
        0x08001b52:    03c8        ..      LSLS     r0,r1,#15
        0x08001b54:    4904        .I      LDR      r1,[pc,#16] ; [0x8001b68] = 0xe000ed08
        0x08001b56:    6008        .`      STR      r0,[r1,#0]
;;;227    #endif 
;;;228    }
        0x08001b58:    4770        pG      BX       lr
    $d
        0x08001b5a:    0000        ..      DCW    0
        0x08001b5c:    40021000    ...@    DCD    1073876992
        0x08001b60:    f8ff0000    ....    DCD    4177461248
        0x08001b64:    fef6ffff    ....    DCD    4277600255
        0x08001b68:    e000ed08    ....    DCD    3758157064
    $t
    i.TIM1_UP_IRQHandler
    TIM1_UP_IRQHandler
;;; .\../Src/stm32f1xx_it.c
;;;182    {
        0x08001b6c:    b510        ..      PUSH     {r4,lr}
;;;183      /* USER CODE BEGIN TIM1_UP_IRQn 0 */
;;;184    
;;;185      /* USER CODE END TIM1_UP_IRQn 0 */
;;;186      /* USER CODE BEGIN TIM1_UP_IRQn 1 */
;;;187      if(LL_TIM_IsActiveFlag_UPDATE(TIM1) == 1)
        0x08001b6e:    4806        .H      LDR      r0,[pc,#24] ; [0x8001b88] = 0x40012c00
        0x08001b70:    f7fff822    ..".    BL       LL_TIM_IsActiveFlag_UPDATE ; 0x8000bb8
        0x08001b74:    2801        .(      CMP      r0,#1
        0x08001b76:    d105        ..      BNE      0x8001b84 ; TIM1_UP_IRQHandler + 24
;;;188      {
;;;189        /* Clear the update interrupt flag*/
;;;190        LL_TIM_ClearFlag_UPDATE(TIM1);
        0x08001b78:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;2929     WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
        0x08001b7a:    1ec0        ..      SUBS     r0,r0,#3
        0x08001b7c:    4902        .I      LDR      r1,[pc,#8] ; [0x8001b88] = 0x40012c00
        0x08001b7e:    6108        .a      STR      r0,[r1,#0x10]
;;;2930   }
        0x08001b80:    bf00        ..      NOP      
        0x08001b82:    bf00        ..      NOP      
;;; .\../Src/stm32f1xx_it.c
;;;194    }
        0x08001b84:    bd10        ..      POP      {r4,pc}
    $d
        0x08001b86:    0000        ..      DCW    0
        0x08001b88:    40012c00    .,.@    DCD    1073818624
    $t
    i.TIM2_IRQHandler
    TIM2_IRQHandler
;;;195    
;;;196    /**
;;;197    * @brief This function handles TIM2 global interrupt.
;;;198    */
;;;199    void TIM2_IRQHandler(void)
;;;200    {
        0x08001b8c:    b510        ..      PUSH     {r4,lr}
;;;201      /* USER CODE BEGIN TIM2_IRQn 0 */
;;;202    // prescaler=((((speed=72000000)/((period=20000)/(1/hz=1)))+0,5)-1)
;;;203    //	if ( async_z == 1) {
;;;204    	if ( state.async_z == 1) {
        0x08001b8e:    480f        .H      LDR      r0,[pc,#60] ; [0x8001bcc] = 0x20000134
        0x08001b90:    6840        @h      LDR      r0,[r0,#4]
        0x08001b92:    2801        .(      CMP      r0,#1
        0x08001b94:    d10c        ..      BNE      0x8001bb0 ; TIM2_IRQHandler + 36
;;;205    //		state.f_encoder = encoder;
;;;206    //		state.f_tacho = t4sr[TIM_SR_CC3IF_Pos];
;;;207    //		LED_GPIO_Port->BSRR = LED_Pin;   // led off
;;;208    //		LED_GPIO_Port->BRR = LED_Pin;
;;;209    //    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
;;;210    //    LL_GPIO_TogglePin( LED_GPIO_Port, LED_Pin);
;;;211    
;;;212    		state.function(&state);
        0x08001b96:    480d        .H      LDR      r0,[pc,#52] ; [0x8001bcc] = 0x20000134
        0x08001b98:    6801        .h      LDR      r1,[r0,#0]
        0x08001b9a:    4788        .G      BLX      r1
;;;213    
;;;214    		TIM2->ARR = state.z_period;
        0x08001b9c:    480b        .H      LDR      r0,[pc,#44] ; [0x8001bcc] = 0x20000134
        0x08001b9e:    7b00        .{      LDRB     r0,[r0,#0xc]
        0x08001ba0:    f04f4180    O..A    MOV      r1,#0x40000000
        0x08001ba4:    62c8        .b      STR      r0,[r1,#0x2c]
;;;215    		TIM2->EGR |= TIM_EGR_UG;
        0x08001ba6:    4608        .F      MOV      r0,r1
        0x08001ba8:    6940        @i      LDR      r0,[r0,#0x14]
        0x08001baa:    f0400001    @...    ORR      r0,r0,#1
        0x08001bae:    6148        Ha      STR      r0,[r1,#0x14]
;;;216    
;;;217    //		text_buffer[tbc++] = TIM2->ARR;
;;;218    	}
;;;219    
;;;220      /* USER CODE END TIM2_IRQn 0 */
;;;221      /* USER CODE BEGIN TIM2_IRQn 1 */
;;;222      /* Check whether update interrupt is pending */
;;;223      if(LL_TIM_IsActiveFlag_UPDATE(TIM2) == 1)
        0x08001bb0:    f04f4080    O..@    MOV      r0,#0x40000000
        0x08001bb4:    f7fff800    ....    BL       LL_TIM_IsActiveFlag_UPDATE ; 0x8000bb8
        0x08001bb8:    2801        .(      CMP      r0,#1
        0x08001bba:    d106        ..      BNE      0x8001bca ; TIM2_IRQHandler + 62
;;;224      {
;;;225        /* Clear the update interrupt flag*/
;;;226        LL_TIM_ClearFlag_UPDATE(TIM2);
        0x08001bbc:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;2929     WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
        0x08001bbe:    1ec0        ..      SUBS     r0,r0,#3
        0x08001bc0:    f04f4180    O..A    MOV      r1,#0x40000000
        0x08001bc4:    6108        .a      STR      r0,[r1,#0x10]
;;;2930   }
        0x08001bc6:    bf00        ..      NOP      
        0x08001bc8:    bf00        ..      NOP      
;;; .\../Src/stm32f1xx_it.c
;;;229    }
        0x08001bca:    bd10        ..      POP      {r4,pc}
    $d
        0x08001bcc:    20000134    4..     DCD    536871220
    $t
    i.TIM4_IRQHandler
    TIM4_IRQHandler
;;;230    
;;;231    /**
;;;232    * @brief This function handles TIM4 global interrupt.
;;;233    */
;;;234    void TIM4_IRQHandler(void)
;;;235    {
        0x08001bd0:    b510        ..      PUSH     {r4,lr}
;;;236      /* USER CODE BEGIN TIM4_IRQn 0 */
;;;237    //	_Bool dir = t4cr1[TIM_CR1_DIR_Pos];
;;;238    //	if(t4sr[TIM_SR_CC3IF_Pos]){
;;;239    //		do_fsm_wait_tacho(&state);
;;;240    //	}
;;;241    	if (state.sync == true) {
        0x08001bd2:    4812        .H      LDR      r0,[pc,#72] ; [0x8001c1c] = 0x20000134
        0x08001bd4:    7c00        .|      LDRB     r0,[r0,#0x10]
        0x08001bd6:    2801        .(      CMP      r0,#1
        0x08001bd8:    d11b        ..      BNE      0x8001c12 ; TIM4_IRQHandler + 66
;;;242    		state.spindle_dir = t4cr1[TIM_CR1_DIR_Pos];
        0x08001bda:    4811        .H      LDR      r0,[pc,#68] ; [0x8001c20] = 0x42010000
        0x08001bdc:    6900        .i      LDR      r0,[r0,#0x10]
        0x08001bde:    b108        ..      CBZ      r0,0x8001be4 ; TIM4_IRQHandler + 20
        0x08001be0:    2001        .       MOVS     r0,#1
        0x08001be2:    e000        ..      B        0x8001be6 ; TIM4_IRQHandler + 22
        0x08001be4:    2000        .       MOVS     r0,#0
        0x08001be6:    490d        .I      LDR      r1,[pc,#52] ; [0x8001c1c] = 0x20000134
        0x08001be8:    73c8        .s      STRB     r0,[r1,#0xf]
;;;243    		state.f_encoder = encoder;
        0x08001bea:    480e        .H      LDR      r0,[pc,#56] ; [0x8001c24] = 0x42010200
        0x08001bec:    6800        .h      LDR      r0,[r0,#0]
        0x08001bee:    b108        ..      CBZ      r0,0x8001bf4 ; TIM4_IRQHandler + 36
        0x08001bf0:    2001        .       MOVS     r0,#1
        0x08001bf2:    e000        ..      B        0x8001bf6 ; TIM4_IRQHandler + 38
        0x08001bf4:    2000        .       MOVS     r0,#0
        0x08001bf6:    4909        .I      LDR      r1,[pc,#36] ; [0x8001c1c] = 0x20000134
        0x08001bf8:    7348        Hs      STRB     r0,[r1,#0xd]
;;;244    		state.f_tacho = t4sr[TIM_SR_CC3IF_Pos];
        0x08001bfa:    480a        .H      LDR      r0,[pc,#40] ; [0x8001c24] = 0x42010200
        0x08001bfc:    300c        .0      ADDS     r0,r0,#0xc
        0x08001bfe:    6800        .h      LDR      r0,[r0,#0]
        0x08001c00:    b108        ..      CBZ      r0,0x8001c06 ; TIM4_IRQHandler + 54
        0x08001c02:    2001        .       MOVS     r0,#1
        0x08001c04:    e000        ..      B        0x8001c08 ; TIM4_IRQHandler + 56
        0x08001c06:    2000        .       MOVS     r0,#0
        0x08001c08:    4904        .I      LDR      r1,[pc,#16] ; [0x8001c1c] = 0x20000134
        0x08001c0a:    7388        .s      STRB     r0,[r1,#0xe]
;;;245    		state.function(&state);
        0x08001c0c:    4608        .F      MOV      r0,r1
        0x08001c0e:    6801        .h      LDR      r1,[r0,#0]
        0x08001c10:    4788        .G      BLX      r1
;;;246    	}
;;;247    //	TIM4->SR &= ~TIM_SR_UIF; //Сбрасываем бит вызова прерывания. 
;;;248    
;;;249      /* USER CODE END TIM4_IRQn 0 */
;;;250      /* USER CODE BEGIN TIM4_IRQn 1 */
;;;251      /* Check whether update interrupt is pending */
;;;252    //	if(LL_TIM_IsActiveFlag_CC2OVR(TIM4) == 1){
;;;253    //		TIM4->SR = 0;
;;;254    //	}
;;;255    	TIM4->SR = 0;
        0x08001c12:    2000        .       MOVS     r0,#0
        0x08001c14:    4904        .I      LDR      r1,[pc,#16] ; [0x8001c28] = 0x40000810
        0x08001c16:    6008        .`      STR      r0,[r1,#0]
;;;256    /*
;;;257    	if(LL_TIM_IsActiveFlag_CC2(TIM4) == 1)
;;;258        LL_TIM_ClearFlag_CC2(TIM4);
;;;259    	if(LL_TIM_IsActiveFlag_CC3(TIM4) == 1)
;;;260        LL_TIM_ClearFlag_CC3(TIM4);
;;;261    	if(LL_TIM_IsActiveFlag_UPDATE(TIM4) == 1)
;;;262      {
;;;263        LL_TIM_ClearFlag_UPDATE(TIM4); //Clear the update interrupt flag
;;;264      }
;;;265    */
;;;266      /* USER CODE END TIM4_IRQn 1 */
;;;267    }
        0x08001c18:    bd10        ..      POP      {r4,pc}
    $d
        0x08001c1a:    0000        ..      DCW    0
        0x08001c1c:    20000134    4..     DCD    536871220
        0x08001c20:    42010000    ...B    DCD    1107361792
        0x08001c24:    42010200    ...B    DCD    1107362304
        0x08001c28:    40000810    ...@    DCD    1073743888
    $t
    i.Transfer_Complete_Callback
    Transfer_Complete_Callback
;;; .\..\Src\i2c_interface.c
;;;321    {
        0x08001c2c:    b510        ..      PUSH     {r4,lr}
;;;322      /* Generate Stop condition */
;;;323    	while(!LL_I2C_IsActiveFlag_BTF(I2C2))
        0x08001c2e:    bf00        ..      NOP      
        0x08001c30:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;1160     return (READ_BIT(I2Cx->SR1, I2C_SR1_BTF) == (I2C_SR1_BTF));
        0x08001c32:    480f        .H      LDR      r0,[pc,#60] ; [0x8001c70] = 0x40005800
        0x08001c34:    6940        @i      LDR      r0,[r0,#0x14]
        0x08001c36:    f3c00080    ....    UBFX     r0,r0,#2,#1
        0x08001c3a:    2800        .(      CMP      r0,#0
        0x08001c3c:    d0f8        ..      BEQ      0x8001c30 ; Transfer_Complete_Callback + 4
;;; .\..\Src\i2c_interface.c
;;;326      LL_I2C_GenerateStopCondition(I2C2);
        0x08001c3e:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;1596     SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
        0x08001c40:    480b        .H      LDR      r0,[pc,#44] ; [0x8001c70] = 0x40005800
        0x08001c42:    6800        .h      LDR      r0,[r0,#0]
        0x08001c44:    f4407000    @..p    ORR      r0,r0,#0x200
        0x08001c48:    4909        .I      LDR      r1,[pc,#36] ; [0x8001c70] = 0x40005800
        0x08001c4a:    6008        .`      STR      r0,[r1,#0]
;;;1597   }
        0x08001c4c:    bf00        ..      NOP      
;;; .\..\Src\i2c_interface.c
;;;327      LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_4);
        0x08001c4e:    4809        .H      LDR      r0,[pc,#36] ; [0x8001c74] = 0x40020000
        0x08001c50:    2104        .!      MOVS     r1,#4
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h
;;;491      CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
        0x08001c52:    1e4a        J.      SUBS     r2,r1,#1
        0x08001c54:    4b08        .K      LDR      r3,[pc,#32] ; [0x8001c78] = 0x8003b10
        0x08001c56:    5c9a        .\      LDRB     r2,[r3,r2]
        0x08001c58:    5882        .X      LDR      r2,[r0,r2]
        0x08001c5a:    f0220301    "...    BIC      r3,r2,#1
        0x08001c5e:    1e4a        J.      SUBS     r2,r1,#1
        0x08001c60:    4c05        .L      LDR      r4,[pc,#20] ; [0x8001c78] = 0x8003b10
        0x08001c62:    5ca2        .\      LDRB     r2,[r4,r2]
        0x08001c64:    5083        .P      STR      r3,[r0,r2]
;;;492    }
        0x08001c66:    bf00        ..      NOP      
;;; .\..\Src\i2c_interface.c
;;;329      ubTransferComplete = 1;
        0x08001c68:    2001        .       MOVS     r0,#1
        0x08001c6a:    4904        .I      LDR      r1,[pc,#16] ; [0x8001c7c] = 0x20000027
        0x08001c6c:    7008        .p      STRB     r0,[r1,#0]
;;;330    }
        0x08001c6e:    bd10        ..      POP      {r4,pc}
    $d
        0x08001c70:    40005800    .X.@    DCD    1073764352
        0x08001c74:    40020000    ...@    DCD    1073872896
        0x08001c78:    08003b10    .;..    DCD    134232848
        0x08001c7c:    20000027    '..     DCD    536870951
    $t
    i.Transfer_Error_Callback
    Transfer_Error_Callback
;;;331    
;;;332    /**
;;;333      * @brief  DMA transfer error callback
;;;334      * @note   This function is executed when the transfer error interrupt
;;;335      *         is generated during DMA transfer
;;;336      * @retval None
;;;337      */
;;;338    void Transfer_Error_Callback()
;;;339    {
;;;340      /* Disable DMA1_Channel4_IRQn */
;;;341      NVIC_DisableIRQ(DMA1_Channel4_IRQn);
        0x08001c80:    200e        .       MOVS     r0,#0xe
;;; ../Drivers/CMSIS/Include/core_cm3.h
;;;1465     NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
        0x08001c82:    2101        .!      MOVS     r1,#1
        0x08001c84:    4081        .@      LSLS     r1,r1,r0
        0x08001c86:    4a03        .J      LDR      r2,[pc,#12] ; [0x8001c94] = 0xe000e180
        0x08001c88:    0943        C.      LSRS     r3,r0,#5
        0x08001c8a:    f8421023    B.#.    STR      r1,[r2,r3,LSL #2]
;;;1466   }
        0x08001c8e:    bf00        ..      NOP      
;;; .\..\Src\i2c_interface.c
;;;343      while(1){};
        0x08001c90:    bf00        ..      NOP      
;;; .\..\Src\i2c_interface.c (343)
        0x08001c92:    e7fe        ..      B        0x8001c92 ; Transfer_Error_Callback + 18
    $d
        0x08001c94:    e000e180    ....    DCD    3758154112
    $t
    i._Error_Handler
    _Error_Handler
;;; .\../Src/main.c
;;;975    	while (1) {
        0x08001c98:    bf00        ..      NOP      
;;; .\../Src/main.c (975)
        0x08001c9a:    e7fe        ..      B        0x8001c9a ; _Error_Handler + 2
    i.__scatterload_copy
    __scatterload_copy
        0x08001c9c:    e002        ..      B        0x8001ca4 ; __scatterload_copy + 8
        0x08001c9e:    c808        ..      LDM      r0!,{r3}
        0x08001ca0:    1f12        ..      SUBS     r2,r2,#4
        0x08001ca2:    c108        ..      STM      r1!,{r3}
        0x08001ca4:    2a00        .*      CMP      r2,#0
        0x08001ca6:    d1fa        ..      BNE      0x8001c9e ; __scatterload_copy + 2
        0x08001ca8:    4770        pG      BX       lr
    i.__scatterload_null
    __scatterload_null
        0x08001caa:    4770        pG      BX       lr
    i.__scatterload_zeroinit
    __scatterload_zeroinit
        0x08001cac:    2000        .       MOVS     r0,#0
        0x08001cae:    e001        ..      B        0x8001cb4 ; __scatterload_zeroinit + 8
        0x08001cb0:    c101        ..      STM      r1!,{r0}
        0x08001cb2:    1f12        ..      SUBS     r2,r2,#4
        0x08001cb4:    2a00        .*      CMP      r2,#0
        0x08001cb6:    d1fb        ..      BNE      0x8001cb0 ; __scatterload_zeroinit + 4
        0x08001cb8:    4770        pG      BX       lr
        0x08001cba:    0000        ..      MOVS     r0,r0
    i.do_fsm_main_cut_back
    do_fsm_main_cut_back
;;; .\..\Src\fsm.c
;;;473    	MOTOR_Z_SetPulse();
        0x08001cbc:    2101        .!      MOVS     r1,#1
        0x08001cbe:    4a07        .J      LDR      r2,[pc,#28] ; [0x8001cdc] = 0x42008000
        0x08001cc0:    6011        .`      STR      r1,[r2,#0]
;;;474    	if( --z_axis.current_pos > z_axis.ramp_step ) {
        0x08001cc2:    4907        .I      LDR      r1,[pc,#28] ; [0x8001ce0] = 0x20000a38
        0x08001cc4:    6809        .h      LDR      r1,[r1,#0]
        0x08001cc6:    1e49        I.      SUBS     r1,r1,#1
        0x08001cc8:    4a05        .J      LDR      r2,[pc,#20] ; [0x8001ce0] = 0x20000a38
        0x08001cca:    6011        .`      STR      r1,[r2,#0]
        0x08001ccc:    f8922028    ..(     LDRB     r2,[r2,#0x28]
        0x08001cd0:    4291        .B      CMP      r1,r2
        0x08001cd2:    d801        ..      BHI      0x8001cd8 ; do_fsm_main_cut_back + 28
;;;475    	} else {
;;;476    		s->function = do_fsm_main_cut_back_ramp_down;
        0x08001cd4:    4903        .I      LDR      r1,[pc,#12] ; [0x8001ce4] = 0x8001d5d
        0x08001cd6:    6001        .`      STR      r1,[r0,#0]
;;;477    	}
;;;478    }
        0x08001cd8:    4770        pG      BX       lr
    $d
        0x08001cda:    0000        ..      DCW    0
        0x08001cdc:    42008000    ...B    DCD    1107329024
        0x08001ce0:    20000a38    8..     DCD    536873528
        0x08001ce4:    08001d5d    ]...    DCD    134225245
    $t
    i.do_fsm_main_cut_back_prolong
    do_fsm_main_cut_back_prolong
;;;479    
;;;480    
;;;481    
;;;482    void do_fsm_main_cut_back_ramp_down(state_t* s)   // reverse movement: ramp down: deccel part + stop
;;;483    {
;;;484    	if (z_axis.current_pos > 0) {
;;;485    		MOTOR_Z_SetPulse();
;;;486    		--z_axis.current_pos;
;;;487    	}
;;;488    	if(z_axis_ramp_down()) {
;;;489    		z_axis_at_move_end(s);
;;;490    	}
;;;491    }
;;;492    
;;;493    
;;;494    
;;;495    
;;;496    
;;;497    
;;;498    
;;;499    
;;;500    void do_fsm_main_cut_back_prolong(state_t* s)   // reverse movement: main part with prolong activated. todo split it with 46 mode?
;;;501    {
        0x08001ce8:    b530        0.      PUSH     {r4,r5,lr}
        0x08001cea:    4603        .F      MOV      r3,r0
;;;502    	MOTOR_Z_SetPulse();
        0x08001cec:    2001        .       MOVS     r0,#1
        0x08001cee:    4919        .I      LDR      r1,[pc,#100] ; [0x8001d54] = 0x42008000
        0x08001cf0:    6008        .`      STR      r0,[r1,#0]
;;;503    	--z_axis.current_pos;
        0x08001cf2:    4819        .H      LDR      r0,[pc,#100] ; [0x8001d58] = 0x20000a38
        0x08001cf4:    6800        .h      LDR      r0,[r0,#0]
        0x08001cf6:    1e40        @.      SUBS     r0,r0,#1
        0x08001cf8:    4917        .I      LDR      r1,[pc,#92] ; [0x8001d58] = 0x20000a38
        0x08001cfa:    6008        .`      STR      r0,[r1,#0]
;;;504    	if(z_axis.current_pos == z_axis.ramp_step) { // we reach end of main path and have long_pressed key, so just add additional thread full turn to shift initial start point
        0x08001cfc:    4608        .F      MOV      r0,r1
        0x08001cfe:    6800        .h      LDR      r0,[r0,#0]
        0x08001d00:    f8911028    ..(.    LDRB     r1,[r1,#0x28]
        0x08001d04:    4288        .B      CMP      r0,r1
        0x08001d06:    d124        $.      BNE      0x8001d52 ; do_fsm_main_cut_back_prolong + 106
;;;505    		z_axis.prolong_fract += z_axis.prolong_addSteps; // fract part from prev step
        0x08001d08:    4913        .I      LDR      r1,[pc,#76] ; [0x8001d58] = 0x20000a38
        0x08001d0a:    e9d15108    ...Q    LDRD     r5,r1,[r1,#0x20]
        0x08001d0e:    4c12        .L      LDR      r4,[pc,#72] ; [0x8001d58] = 0x20000a38
        0x08001d10:    e9d42406    ...$    LDRD     r2,r4,[r4,#0x18]
        0x08001d14:    18aa        ..      ADDS     r2,r5,r2
        0x08001d16:    4161        aA      ADCS     r1,r1,r4
        0x08001d18:    4c0f        .L      LDR      r4,[pc,#60] ; [0x8001d58] = 0x20000a38
        0x08001d1a:    e9c42108    ...!    STRD     r2,r1,[r4,#0x20]
;;;506    		uint32_t prolong_fixpart = z_axis.prolong_fract >> 24;
        0x08001d1e:    4621        !F      MOV      r1,r4
        0x08001d20:    e9d12108    ...!    LDRD     r2,r1,[r1,#0x20]
        0x08001d24:    020c        ..      LSLS     r4,r1,#8
        0x08001d26:    ea446012    D..`    ORR      r0,r4,r2,LSR #24
;;;507    		z_axis.current_pos += prolong_fixpart; // add fixed part
        0x08001d2a:    490b        .I      LDR      r1,[pc,#44] ; [0x8001d58] = 0x20000a38
        0x08001d2c:    6809        .h      LDR      r1,[r1,#0]
        0x08001d2e:    4401        .D      ADD      r1,r1,r0
        0x08001d30:    4a09        .J      LDR      r2,[pc,#36] ; [0x8001d58] = 0x20000a38
        0x08001d32:    6011        .`      STR      r1,[r2,#0]
;;;508    		z_axis.end_pos += prolong_fixpart;
        0x08001d34:    4611        .F      MOV      r1,r2
        0x08001d36:    6849        Ih      LDR      r1,[r1,#4]
        0x08001d38:    4401        .D      ADD      r1,r1,r0
        0x08001d3a:    6051        Q`      STR      r1,[r2,#4]
;;;509    		z_axis.prolong_fract &= FIXEDPT_FMASK; // leave fract part to accumulate with next dividing cycle
        0x08001d3c:    4611        .F      MOV      r1,r2
        0x08001d3e:    e9d12108    ...!    LDRD     r2,r1,[r1,#0x20]
        0x08001d42:    f06f447f    o..D    MVN      r4,#0xff000000
        0x08001d46:    4022        "@      ANDS     r2,r2,r4
        0x08001d48:    2100        .!      MOVS     r1,#0
        0x08001d4a:    4c03        .L      LDR      r4,[pc,#12] ; [0x8001d58] = 0x20000a38
        0x08001d4c:    e9c42108    ...!    STRD     r2,r1,[r4,#0x20]
;;;510    		// when long_press end, get back to 46 mode to proceed
;;;511    	}
        0x08001d50:    bf00        ..      NOP      
;;;512    }
        0x08001d52:    bd30        0.      POP      {r4,r5,pc}
    $d
        0x08001d54:    42008000    ...B    DCD    1107329024
        0x08001d58:    20000a38    8..     DCD    536873528
    $t
    i.do_fsm_main_cut_back_ramp_down
    do_fsm_main_cut_back_ramp_down
;;; .\..\Src\fsm.c (483)
        0x08001d5c:    b500        ..      PUSH     {lr}
        0x08001d5e:    4603        .F      MOV      r3,r0
;;;484    	if (z_axis.current_pos > 0) {
        0x08001d60:    4808        .H      LDR      r0,[pc,#32] ; [0x8001d84] = 0x20000a38
        0x08001d62:    6800        .h      LDR      r0,[r0,#0]
        0x08001d64:    b138        8.      CBZ      r0,0x8001d76 ; do_fsm_main_cut_back_ramp_down + 26
;;;485    		MOTOR_Z_SetPulse();
        0x08001d66:    2001        .       MOVS     r0,#1
        0x08001d68:    4907        .I      LDR      r1,[pc,#28] ; [0x8001d88] = 0x42008000
        0x08001d6a:    6008        .`      STR      r0,[r1,#0]
;;;486    		--z_axis.current_pos;
        0x08001d6c:    4805        .H      LDR      r0,[pc,#20] ; [0x8001d84] = 0x20000a38
        0x08001d6e:    6800        .h      LDR      r0,[r0,#0]
        0x08001d70:    1e40        @.      SUBS     r0,r0,#1
        0x08001d72:    4904        .I      LDR      r1,[pc,#16] ; [0x8001d84] = 0x20000a38
        0x08001d74:    6008        .`      STR      r0,[r1,#0]
;;;487    	}
;;;488    	if(z_axis_ramp_down()) {
        0x08001d76:    f000fd8b    ....    BL       z_axis_ramp_down ; 0x8002890
        0x08001d7a:    b110        ..      CBZ      r0,0x8001d82 ; do_fsm_main_cut_back_ramp_down + 38
;;;489    		z_axis_at_move_end(s);
        0x08001d7c:    4618        .F      MOV      r0,r3
        0x08001d7e:    f000fd5d    ..].    BL       z_axis_at_move_end ; 0x800283c
;;;490    	}
;;;491    }
        0x08001d82:    bd00        ..      POP      {pc}
    $d
        0x08001d84:    20000a38    8..     DCD    536873528
        0x08001d88:    42008000    ...B    DCD    1107329024
    $t
    i.do_fsm_menu
    do_fsm_menu
;;; .\..\Src\fsm.c (228)
        0x08001d8c:    b570        p.      PUSH     {r4-r6,lr}
        0x08001d8e:    4604        .F      MOV      r4,r0
;;;229    	uint8_t level = Thread_Info[Menu_Step].level;
        0x08001d90:    486f        oH      LDR      r0,[pc,#444] ; [0x8001f50] = 0x20000170
        0x08001d92:    4970        pI      LDR      r1,[pc,#448] ; [0x8001f54] = 0x20000590
        0x08001d94:    7809        .x      LDRB     r1,[r1,#0]
        0x08001d96:    eb001041    ..A.    ADD      r0,r0,r1,LSL #5
        0x08001d9a:    7c45        E|      LDRB     r5,[r0,#0x11]
;;;230    //	buttons_flag_set = long_press_start_Msk;
;;;231    	switch(buttons_flag_set) {
        0x08001d9c:    486e        nH      LDR      r0,[pc,#440] ; [0x8001f58] = 0x20004000
        0x08001d9e:    6800        .h      LDR      r0,[r0,#0]
        0x08001da0:    2808        .(      CMP      r0,#8
        0x08001da2:    d061        a.      BEQ      0x8001e68 ; do_fsm_menu + 220
        0x08001da4:    dc06        ..      BGT      0x8001db4 ; do_fsm_menu + 40
        0x08001da6:    2801        .(      CMP      r0,#1
        0x08001da8:    d069        i.      BEQ      0x8001e7e ; do_fsm_menu + 242
        0x08001daa:    2802        .(      CMP      r0,#2
        0x08001dac:    d07e        ~.      BEQ      0x8001eac ; do_fsm_menu + 288
        0x08001dae:    2804        .(      CMP      r0,#4
        0x08001db0:    d110        ..      BNE      0x8001dd4 ; do_fsm_menu + 72
        0x08001db2:    e01a        ..      B        0x8001dea ; do_fsm_menu + 94
        0x08001db4:    2811        .(      CMP      r0,#0x11
        0x08001db6:    d061        a.      BEQ      0x8001e7c ; do_fsm_menu + 240
        0x08001db8:    2840        @(      CMP      r0,#0x40
        0x08001dba:    d00c        ..      BEQ      0x8001dd6 ; do_fsm_menu + 74
        0x08001dbc:    f5b06f80    ...o    CMP      r0,#0x400
        0x08001dc0:    d1f6        ..      BNE      0x8001db0 ; do_fsm_menu + 36
;;;232    	case single_click_Msk3: {
;;;233    		feed_direction = feed_direction == feed_direction_left ? feed_direction_right : feed_direction_left;
        0x08001dc2:    4866        fH      LDR      r0,[pc,#408] ; [0x8001f5c] = 0x2000015d
        0x08001dc4:    7800        .x      LDRB     r0,[r0,#0]
        0x08001dc6:    f0800001    ....    EOR      r0,r0,#1
        0x08001dca:    4964        dI      LDR      r1,[pc,#400] ; [0x8001f5c] = 0x2000015d
        0x08001dcc:    7008        .p      STRB     r0,[r1,#0]
;;;234    		menu_changed = 1;
        0x08001dce:    2001        .       MOVS     r0,#1
        0x08001dd0:    4963        cI      LDR      r1,[pc,#396] ; [0x8001f60] = 0x20000160
        0x08001dd2:    6008        .`      STR      r0,[r1,#0]
;;;235    		break;
        0x08001dd4:    e0ba        ..      B        0x8001f4c ; do_fsm_menu + 448
;;;236    	}
;;;237    	case single_click_Msk2: {
;;;238    		feed_direction = feed_direction == feed_direction_left ? feed_direction_right : feed_direction_left;
        0x08001dd6:    4861        aH      LDR      r0,[pc,#388] ; [0x8001f5c] = 0x2000015d
        0x08001dd8:    7800        .x      LDRB     r0,[r0,#0]
        0x08001dda:    f0800001    ....    EOR      r0,r0,#1
        0x08001dde:    495f        _I      LDR      r1,[pc,#380] ; [0x8001f5c] = 0x2000015d
        0x08001de0:    7008        .p      STRB     r0,[r1,#0]
;;;239    		menu_changed = 1;
        0x08001de2:    2001        .       MOVS     r0,#1
        0x08001de4:    495e        ^I      LDR      r1,[pc,#376] ; [0x8001f60] = 0x20000160
        0x08001de6:    6008        .`      STR      r0,[r1,#0]
;;;240    		break;
        0x08001de8:    e0b0        ..      B        0x8001f4c ; do_fsm_menu + 448
;;;241    	}
;;;242    	case single_click_Msk: {
;;;243    		if(z_axis.end_pos != 0) {
        0x08001dea:    485e        ^H      LDR      r0,[pc,#376] ; [0x8001f64] = 0x20000a38
        0x08001dec:    6840        @h      LDR      r0,[r0,#4]
        0x08001dee:    b150        P.      CBZ      r0,0x8001e06 ; do_fsm_menu + 122
;;;244    			// first pass of thread cut was complete, so just use single click
;;;245    			//	to switch between modes to process all other cuts
;;;246    			MOTOR_Z_Enable(); // time to wakeup motor from sleep is quite high(1.7ms), so enable it as soon as possible
        0x08001df0:    f2402002    @..     MOV      r0,#0x202
        0x08001df4:    495c        \I      LDR      r1,[pc,#368] ; [0x8001f68] = 0x40010c10
        0x08001df6:    6008        .`      STR      r0,[r1,#0]
;;;247    			LL_mDelay(17);
        0x08001df8:    2011        .       MOVS     r0,#0x11
        0x08001dfa:    f7feff92    ....    BL       LL_mDelay ; 0x8000d22
;;;248    //			for(unsigned int i=0; i<(72*1700/16); i++); // wait 1700us delay to wakeup motor driver
;;;249    //			s->function = z_axis.current_pos > 0 ? do_fsm_sclick_event : do_fsm_main_cut_wait_tacho;
;;;250    			
;;;251    			do_fsm_move_start(s);
        0x08001dfe:    4620         F      MOV      r0,r4
        0x08001e00:    f000f94a    ..J.    BL       do_fsm_move_start ; 0x8002098
        0x08001e04:    e02f        /.      B        0x8001e66 ; do_fsm_menu + 218
;;;252    //			s->function = do_fsm_move_start;
;;;253    //			LL_TIM_EnableCounter(TIM2);			
;;;254    //			LL_TIM_GenerateEvent_UPDATE(TIM2);
;;;255    		} else { // controller in initial state, scroll menu
;;;256    			s->function = do_fsm_menu_lps;
        0x08001e06:    4859        YH      LDR      r0,[pc,#356] ; [0x8001f6c] = 0x8001f89
        0x08001e08:    6020         `      STR      r0,[r4,#0]
;;;257    			for (int a = Menu_Step+1; a<Menu_size; a++) {
        0x08001e0a:    4952        RI      LDR      r1,[pc,#328] ; [0x8001f54] = 0x20000590
        0x08001e0c:    7809        .x      LDRB     r1,[r1,#0]
        0x08001e0e:    1c48        H.      ADDS     r0,r1,#1
        0x08001e10:    e00c        ..      B        0x8001e2c ; do_fsm_menu + 160
;;;258    				if(Thread_Info[a].level == level) {
        0x08001e12:    494f        OI      LDR      r1,[pc,#316] ; [0x8001f50] = 0x20000170
        0x08001e14:    eb011140    ..@.    ADD      r1,r1,r0,LSL #5
        0x08001e18:    7c49        I|      LDRB     r1,[r1,#0x11]
        0x08001e1a:    42a9        .B      CMP      r1,r5
        0x08001e1c:    d105        ..      BNE      0x8001e2a ; do_fsm_menu + 158
;;;259    					Menu_Step = a;
        0x08001e1e:    4a4d        MJ      LDR      r2,[pc,#308] ; [0x8001f54] = 0x20000590
        0x08001e20:    7010        .p      STRB     r0,[r2,#0]
;;;260    					menu_changed = 1;
        0x08001e22:    2101        .!      MOVS     r1,#1
        0x08001e24:    4a4e        NJ      LDR      r2,[pc,#312] ; [0x8001f60] = 0x20000160
        0x08001e26:    6011        .`      STR      r1,[r2,#0]
;;;261    					break;
        0x08001e28:    e004        ..      B        0x8001e34 ; do_fsm_menu + 168
        0x08001e2a:    1c40        @.      ADDS     r0,r0,#1
        0x08001e2c:    4950        PI      LDR      r1,[pc,#320] ; [0x8001f70] = 0x8003b6a
        0x08001e2e:    7809        .x      LDRB     r1,[r1,#0]
        0x08001e30:    4288        .B      CMP      r0,r1
        0x08001e32:    dbee        ..      BLT      0x8001e12 ; do_fsm_menu + 134
        0x08001e34:    bf00        ..      NOP      
;;;262    				}
;;;263    			}
;;;264    			if(menu_changed != 1) {
        0x08001e36:    484a        JH      LDR      r0,[pc,#296] ; [0x8001f60] = 0x20000160
        0x08001e38:    6800        .h      LDR      r0,[r0,#0]
        0x08001e3a:    2801        .(      CMP      r0,#1
        0x08001e3c:    d013        ..      BEQ      0x8001e66 ; do_fsm_menu + 218
;;;265    				for (int a = 0; a<Menu_Step; a++) {
        0x08001e3e:    2000        .       MOVS     r0,#0
        0x08001e40:    e00c        ..      B        0x8001e5c ; do_fsm_menu + 208
;;;266    					if(Thread_Info[a].level == level) {
        0x08001e42:    4943        CI      LDR      r1,[pc,#268] ; [0x8001f50] = 0x20000170
        0x08001e44:    eb011140    ..@.    ADD      r1,r1,r0,LSL #5
        0x08001e48:    7c49        I|      LDRB     r1,[r1,#0x11]
        0x08001e4a:    42a9        .B      CMP      r1,r5
        0x08001e4c:    d105        ..      BNE      0x8001e5a ; do_fsm_menu + 206
;;;267    						Menu_Step = a;
        0x08001e4e:    4a41        AJ      LDR      r2,[pc,#260] ; [0x8001f54] = 0x20000590
        0x08001e50:    7010        .p      STRB     r0,[r2,#0]
;;;268    						menu_changed = 1;
        0x08001e52:    2101        .!      MOVS     r1,#1
        0x08001e54:    4a42        BJ      LDR      r2,[pc,#264] ; [0x8001f60] = 0x20000160
        0x08001e56:    6011        .`      STR      r1,[r2,#0]
;;;269    						break;
        0x08001e58:    e004        ..      B        0x8001e64 ; do_fsm_menu + 216
        0x08001e5a:    1c40        @.      ADDS     r0,r0,#1
        0x08001e5c:    493d        =I      LDR      r1,[pc,#244] ; [0x8001f54] = 0x20000590
        0x08001e5e:    7809        .x      LDRB     r1,[r1,#0]
        0x08001e60:    4288        .B      CMP      r0,r1
        0x08001e62:    dbee        ..      BLT      0x8001e42 ; do_fsm_menu + 182
        0x08001e64:    bf00        ..      NOP      
;;;270    					}
;;;271    				}
;;;272    			}
;;;273    		}
;;;274    		break;
        0x08001e66:    e071        q.      B        0x8001f4c ; do_fsm_menu + 448
;;;275    	}
;;;276    	case double_click_Msk: {
;;;277    		feed_direction = feed_direction == feed_direction_left ? feed_direction_right : feed_direction_left;
        0x08001e68:    483c        <H      LDR      r0,[pc,#240] ; [0x8001f5c] = 0x2000015d
        0x08001e6a:    7800        .x      LDRB     r0,[r0,#0]
        0x08001e6c:    f0800001    ....    EOR      r0,r0,#1
        0x08001e70:    493a        :I      LDR      r1,[pc,#232] ; [0x8001f5c] = 0x2000015d
        0x08001e72:    7008        .p      STRB     r0,[r1,#0]
;;;278    		menu_changed = 1;
        0x08001e74:    2001        .       MOVS     r0,#1
        0x08001e76:    493a        :I      LDR      r1,[pc,#232] ; [0x8001f60] = 0x20000160
        0x08001e78:    6008        .`      STR      r0,[r1,#0]
;;;279    		break;
        0x08001e7a:    e067        g.      B        0x8001f4c ; do_fsm_menu + 448
;;;280    	}
;;;281    	case (long_press_start_Msk | long_press_start_Msk2): { // two buttons long pressed same time
;;;282    		// todo check if it work
;;;283    		break;
        0x08001e7c:    e066        f.      B        0x8001f4c ; do_fsm_menu + 448
;;;284    	}
;;;285    	case long_press_start_Msk: {
;;;286    		if(s->function == do_fsm_menu_lps){
        0x08001e7e:    493b        ;I      LDR      r1,[pc,#236] ; [0x8001f6c] = 0x8001f89
        0x08001e80:    6820         h      LDR      r0,[r4,#0]
        0x08001e82:    4288        .B      CMP      r0,r1
        0x08001e84:    d158        X.      BNE      0x8001f38 ; do_fsm_menu + 428
;;;287    			if(Thread_Info[Menu_Step].Q824 != 0) { // long press detected, start new thread from current position
        0x08001e86:    4832        2H      LDR      r0,[pc,#200] ; [0x8001f50] = 0x20000170
        0x08001e88:    4932        2I      LDR      r1,[pc,#200] ; [0x8001f54] = 0x20000590
        0x08001e8a:    7809        .x      LDRB     r1,[r1,#0]
        0x08001e8c:    eb001041    ..A.    ADD      r0,r0,r1,LSL #5
        0x08001e90:    6800        .h      LDR      r0,[r0,#0]
        0x08001e92:    b3b0        ..      CBZ      r0,0x8001f02 ; do_fsm_menu + 374
;;;288    				//mode 20:
;;;289    //				disable_encoder_ticks(); //reset interrupt for encoder ticks, only tacho
;;;290    //				LL_TIM_DisableIT_UPDATE(TIM4);
;;;291    //				LL_TIM_GenerateEvent_UPDATE(TIM4); 
;;;292    //				TIM4->SR = 0;
;;;293    
;;;294    				MOTOR_Z_Enable(); // time to wakeup motor from sleep is quite high(1.7ms), so enable it as soon as possible
        0x08001e94:    f2402002    @..     MOV      r0,#0x202
        0x08001e98:    4933        3I      LDR      r1,[pc,#204] ; [0x8001f68] = 0x40010c10
        0x08001e9a:    6008        .`      STR      r0,[r1,#0]
;;;295    				s->main_feed_direction = feed_direction; // save main feed direction, where cut is on
        0x08001e9c:    482f        /H      LDR      r0,[pc,#188] ; [0x8001f5c] = 0x2000015d
        0x08001e9e:    7800        .x      LDRB     r0,[r0,#0]
        0x08001ea0:    7460        `t      STRB     r0,[r4,#0x11]
;;;296    				s->sync = true;
        0x08001ea2:    2001        .       MOVS     r0,#1
        0x08001ea4:    7420         t      STRB     r0,[r4,#0x10]
;;;297    				if( feed_direction == feed_direction_right )
        0x08001ea6:    482d        -H      LDR      r0,[pc,#180] ; [0x8001f5c] = 0x2000015d
        0x08001ea8:    7800        .x      LDRB     r0,[r0,#0]
        0x08001eaa:    e000        ..      B        0x8001eae ; do_fsm_menu + 290
        0x08001eac:    e04b        K.      B        0x8001f46 ; do_fsm_menu + 442
        0x08001eae:    2801        .(      CMP      r0,#1
        0x08001eb0:    d104        ..      BNE      0x8001ebc ; do_fsm_menu + 304
;;;298    					MOTOR_Z_Forward();
        0x08001eb2:    f2480080    H...    MOV      r0,#0x8080
        0x08001eb6:    492f        /I      LDR      r1,[pc,#188] ; [0x8001f74] = 0x40010810
        0x08001eb8:    6008        .`      STR      r0,[r1,#0]
        0x08001eba:    e004        ..      B        0x8001ec6 ; do_fsm_menu + 314
;;;299    				else
;;;300    					MOTOR_Z_Reverse();
        0x08001ebc:    f2480080    H...    MOV      r0,#0x8080
        0x08001ec0:    492c        ,I      LDR      r1,[pc,#176] ; [0x8001f74] = 0x40010810
        0x08001ec2:    1d09        ..      ADDS     r1,r1,#4
        0x08001ec4:    6008        .`      STR      r0,[r1,#0]
;;;301    				
;;;302    //				for(unsigned int i=0; i<(72*1700/16); i++); // wait 1700us delay to wakeup motor driver todo dumb method
;;;303    				LL_mDelay(17);
        0x08001ec6:    2011        .       MOVS     r0,#0x11
        0x08001ec8:    f7feff2b    ..+.    BL       LL_mDelay ; 0x8000d22
;;;304    
;;;305    				z_axis.Q824set = Thread_Info[Menu_Step].Q824;
        0x08001ecc:    4820         H      LDR      r0,[pc,#128] ; [0x8001f50] = 0x20000170
        0x08001ece:    4921        !I      LDR      r1,[pc,#132] ; [0x8001f54] = 0x20000590
        0x08001ed0:    7809        .x      LDRB     r1,[r1,#0]
        0x08001ed2:    eb001041    ..A.    ADD      r0,r0,r1,LSL #5
        0x08001ed6:    6800        .h      LDR      r0,[r0,#0]
        0x08001ed8:    4922        "I      LDR      r1,[pc,#136] ; [0x8001f64] = 0x20000a38
        0x08001eda:    60c8        .`      STR      r0,[r1,#0xc]
;;;306    				z_axis.end_pos = z_axis.current_pos = 0;
        0x08001edc:    2000        .       MOVS     r0,#0
        0x08001ede:    6008        .`      STR      r0,[r1,#0]
        0x08001ee0:    6048        H`      STR      r0,[r1,#4]
;;;307    
;;;308    				const uint64_t upl = (uint64_t)3600 << 48; //calculate some constants for prolong mode
        0x08001ee2:    bf00        ..      NOP      
;;;309    				z_axis.prolong_addSteps = upl / (fixedptud)z_axis.Q824set;
        0x08001ee4:    4608        .F      MOV      r0,r1
        0x08001ee6:    68c6        .h      LDR      r6,[r0,#0xc]
        0x08001ee8:    4632        2F      MOV      r2,r6
        0x08001eea:    2300        .#      MOVS     r3,#0
        0x08001eec:    4618        .F      MOV      r0,r3
        0x08001eee:    f04f6161    O.aa    MOV      r1,#0xe100000
        0x08001ef2:    f7fef917    ....    BL       __aeabi_uldivmod ; 0x8000124
        0x08001ef6:    4a1b        .J      LDR      r2,[pc,#108] ; [0x8001f64] = 0x20000a38
        0x08001ef8:    e9c20106    ....    STRD     r0,r1,[r2,#0x18]
;;;310    
;;;311    				s->function = do_fsm_move_start;//do_fsm_wait_tacho; // go straight to 24 to wait tacho
        0x08001efc:    481e        .H      LDR      r0,[pc,#120] ; [0x8001f78] = 0x8002099
        0x08001efe:    6020         `      STR      r0,[r4,#0]
;;;312    //do_fsm_move_start
;;;313    			} else { // goto submenu
        0x08001f00:    e020         .      B        0x8001f44 ; do_fsm_menu + 440
        0x08001f02:    e7ff        ..      B        0x8001f04 ; do_fsm_menu + 376
;;;314    				for (int a = 0; a<Menu_size; a++) {
        0x08001f04:    2000        .       MOVS     r0,#0
        0x08001f06:    e012        ..      B        0x8001f2e ; do_fsm_menu + 418
;;;315    					if(Thread_Info[a].level == Thread_Info[Menu_Step].submenu) {
        0x08001f08:    4911        .I      LDR      r1,[pc,#68] ; [0x8001f50] = 0x20000170
        0x08001f0a:    eb011140    ..@.    ADD      r1,r1,r0,LSL #5
        0x08001f0e:    7c49        I|      LDRB     r1,[r1,#0x11]
        0x08001f10:    4a0f        .J      LDR      r2,[pc,#60] ; [0x8001f50] = 0x20000170
        0x08001f12:    4b10        .K      LDR      r3,[pc,#64] ; [0x8001f54] = 0x20000590
        0x08001f14:    781b        .x      LDRB     r3,[r3,#0]
        0x08001f16:    eb021243    ..C.    ADD      r2,r2,r3,LSL #5
        0x08001f1a:    7912        .y      LDRB     r2,[r2,#4]
        0x08001f1c:    4291        .B      CMP      r1,r2
        0x08001f1e:    d105        ..      BNE      0x8001f2c ; do_fsm_menu + 416
;;;316    						Menu_Step = a;
        0x08001f20:    4a0c        .J      LDR      r2,[pc,#48] ; [0x8001f54] = 0x20000590
        0x08001f22:    7010        .p      STRB     r0,[r2,#0]
;;;317    						menu_changed = 1;
        0x08001f24:    2101        .!      MOVS     r1,#1
        0x08001f26:    4a0e        .J      LDR      r2,[pc,#56] ; [0x8001f60] = 0x20000160
        0x08001f28:    6011        .`      STR      r1,[r2,#0]
;;;318    						break;
        0x08001f2a:    e004        ..      B        0x8001f36 ; do_fsm_menu + 426
        0x08001f2c:    1c40        @.      ADDS     r0,r0,#1
        0x08001f2e:    4910        .I      LDR      r1,[pc,#64] ; [0x8001f70] = 0x8003b6a
        0x08001f30:    7809        .x      LDRB     r1,[r1,#0]
        0x08001f32:    4288        .B      CMP      r0,r1
        0x08001f34:    dbe8        ..      BLT      0x8001f08 ; do_fsm_menu + 380
        0x08001f36:    e005        ..      B        0x8001f44 ; do_fsm_menu + 440
;;;319    					}
;;;320    				}
;;;321    			}
;;;322    		} else if(s->function == do_fsm_main_cut_back){
        0x08001f38:    4910        .I      LDR      r1,[pc,#64] ; [0x8001f7c] = 0x8001cbd
        0x08001f3a:    6820         h      LDR      r0,[r4,#0]
        0x08001f3c:    4288        .B      CMP      r0,r1
        0x08001f3e:    d101        ..      BNE      0x8001f44 ; do_fsm_menu + 440
;;;323    			s->function = do_fsm_main_cut_back_prolong; // go to 48 mode to add threads until long_press end
        0x08001f40:    480f        .H      LDR      r0,[pc,#60] ; [0x8001f80] = 0x8001ce9
        0x08001f42:    6020         `      STR      r0,[r4,#0]
;;;324    		}
;;;325    		break;
        0x08001f44:    e002        ..      B        0x8001f4c ; do_fsm_menu + 448
;;;326    	}
;;;327    	case long_press_end_Msk: {
;;;328    		s->function = do_long_press_end_callback;
        0x08001f46:    480f        .H      LDR      r0,[pc,#60] ; [0x8001f84] = 0x8002269
        0x08001f48:    6020         `      STR      r0,[r4,#0]
;;;329    		break;
        0x08001f4a:    bf00        ..      NOP      
        0x08001f4c:    bf00        ..      NOP      
;;;330    /*
;;;331    		if(s->function == do_fsm_first_cut_main_part){
;;;332    			s->function = do_fsm_first_cut_lpe;
;;;333    			break;
;;;334    		}
;;;335    		if(s->function == do_fsm_main_cut_back_prolong){ // end of prolonged mode
;;;336    			s->function = do_fsm_main_cut_back;
;;;337    			break;
;;;338    		}
;;;339    */
;;;340    		/*
;;;341    		switch(z_axis.mode) {
;;;342    		case fsm_first_cut_main_part: {
;;;343    //																					if(auto_mode == true){
;;;344    //																									auto_mode_delay = auto_mode_delay_ms; //engage countdown timer to auto generate click event
;;;345    //																					}
;;;346    //																					Q824count = 0;
;;;347    			s->function = do_fsm_first_cut_lpe;
;;;348    			break;
;;;349    		}
;;;350    		case fsm_main_cut_back_prolong: { // end of prolonged mode
;;;351    			s->function = do_fsm_main_cut_back;
;;;352    			break;
;;;353    		}
;;;354    		}
;;;355    		*/
;;;356    		break;
;;;357    	}
;;;358    	}
;;;359    }
        0x08001f4e:    bd70        p.      POP      {r4-r6,pc}
    $d
        0x08001f50:    20000170    p..     DCD    536871280
        0x08001f54:    20000590    ...     DCD    536872336
        0x08001f58:    20004000    .@.     DCD    536887296
        0x08001f5c:    2000015d    ]..     DCD    536871261
        0x08001f60:    20000160    `..     DCD    536871264
        0x08001f64:    20000a38    8..     DCD    536873528
        0x08001f68:    40010c10    ...@    DCD    1073810448
        0x08001f6c:    08001f89    ....    DCD    134225801
        0x08001f70:    08003b6a    j;..    DCD    134232938
        0x08001f74:    40010810    ...@    DCD    1073809424
        0x08001f78:    08002099    . ..    DCD    134226073
        0x08001f7c:    08001cbd    ....    DCD    134225085
        0x08001f80:    08001ce9    ....    DCD    134225129
        0x08001f84:    08002269    i"..    DCD    134226537
    $t
    i.do_fsm_menu_lps
    do_fsm_menu_lps
;;;360    
;;;361    void do_fsm_menu_lps(state_t* s)
;;;362    {
;;;363    }
        0x08001f88:    4770        pG      BX       lr
        0x08001f8a:    0000        ..      MOVS     r0,r0
    i.do_fsm_move
    do_fsm_move
;;;364    
;;;365    
;;;366    
;;;367    void do_fsm_first_cut_lps(state_t* s)  // not used?
;;;368    {
;;;369    	
;;;370    	disable_encoder_ticks(); //reset interrupt for encoder ticks, only tacho
;;;371    	MOTOR_Z_Enable();
;;;372    	if(feed_direction)
;;;373    		MOTOR_Z_Forward();
;;;374    	else
;;;375    		MOTOR_Z_Reverse();
;;;376    	s->function = do_fsm_wait_tacho; //intermediate state to wait tacho pulse.
;;;377    }
;;;378    
;;;379    
;;;380    
;;;381    
;;;382    
;;;383    
;;;384    void do_fsm_first_cut_ramp_up(state_t* s)          // direct movement: first pass, thread recording: ramp up: accel by ramp map
;;;385    {
;;;386    	MOTOR_Z_SetPulse();
;;;387    	z_axis.current_pos++;
;;;388    	if(z_axis_ramp_up()) {
;;;389    		s->function = do_fsm_first_cut_main_part;
;;;390    		LED_GPIO_Port->BSRR = LED_Pin; //led off
;;;391    	}
;;;392    }
;;;393    
;;;394    
;;;395    void do_fsm_first_cut_main_part(state_t* s)          // direct movement: first pass, thread recording: main part
;;;396    {
;;;397    	MOTOR_Z_SetPulse();
;;;398    	z_axis.current_pos++;
;;;399    	z_axis_move();
;;;400    }
;;;401    
;;;402    
;;;403    void do_fsm_first_cut_lpe(state_t* s)          // direct movement: first pass, thread recording: post-main part
;;;404    {
;;;405    	// для 1/2 микрошага нужно что бы общее количество шагов в цикле резьбы было кратно 2,(для 1/4 кратно 4 и тп).
;;;406    	// это нужно для того что бы в конце шаговый мотор остановился на одном из двухсот устойчивых шагов,
;;;407    	// не перескакивая на соседние шаги при потере питания.
;;;408    	// поэтому проверяем общее количество на четность(0й бит), если нечетное число делаем еще один шаг,
;;;409    	// иначе начинаем замедляться
;;;410    	MOTOR_Z_SetPulse();
;;;411    	z_axis.current_pos++;
;;;412    	uint32_t all_count = z_axis.ramp_step + z_axis.current_pos - 1;
;;;413    	uint32_t masked_count = all_count & ~(step_divider - 1);
;;;414    	if(masked_count != all_count) {
;;;415    		z_axis_move();
;;;416    	} else {
;;;417    		if(z_axis_ramp_down()) {
;;;418    			z_axis.end_pos = z_axis.current_pos;
;;;419    			z_axis_at_move_end(s);
;;;420    		} else {
;;;421    			s->function = do_fsm_first_cut_ramp_down;
;;;422    		}
;;;423    	}
;;;424    }
;;;425    
;;;426    
;;;427    
;;;428    
;;;429    
;;;430    
;;;431    void do_fsm_first_cut_ramp_down(state_t* s)          // direct movement: ramp down: deccel part + stop
;;;432    {
;;;433    	MOTOR_Z_SetPulse();
;;;434    	z_axis.current_pos++;
;;;435    	if(z_axis_ramp_down()) {
;;;436    		z_axis.end_pos = z_axis.current_pos;
;;;437    		z_axis_at_move_end(s);
;;;438    	}
;;;439    }
;;;440    
;;;441    
;;;442    
;;;443    void do_fsm_sclick_event(state_t* s)   // reverse movement: set direction for motor
;;;444    {
;;;445    	if(feed_direction)
;;;446    		MOTOR_Z_Forward();
;;;447    	else
;;;448    		MOTOR_Z_Reverse();
;;;449    	enable_encoder_ticks(); // enable thread specific interrupt controlled by Q824set
;;;450    	s->function = do_fsm_main_cut_back_ramp_up;
;;;451    }
;;;452    
;;;453    
;;;454    
;;;455    
;;;456    
;;;457    void do_fsm_main_cut_back_ramp_up(state_t* s)          // reverse movement: ramp up: accel part
;;;458    {
;;;459    	MOTOR_Z_SetPulse();
;;;460    	--z_axis.current_pos;
;;;461    	if(z_axis_ramp_up())
;;;462    		s->function = do_fsm_main_cut_back;
;;;463    }
;;;464    
;;;465    
;;;466    
;;;467    
;;;468    
;;;469    
;;;470    
;;;471    void do_fsm_main_cut_back(state_t* s)          // reverse movement: main part
;;;472    {
;;;473    	MOTOR_Z_SetPulse();
;;;474    	if( --z_axis.current_pos > z_axis.ramp_step ) {
;;;475    	} else {
;;;476    		s->function = do_fsm_main_cut_back_ramp_down;
;;;477    	}
;;;478    }
;;;479    
;;;480    
;;;481    
;;;482    void do_fsm_main_cut_back_ramp_down(state_t* s)   // reverse movement: ramp down: deccel part + stop
;;;483    {
;;;484    	if (z_axis.current_pos > 0) {
;;;485    		MOTOR_Z_SetPulse();
;;;486    		--z_axis.current_pos;
;;;487    	}
;;;488    	if(z_axis_ramp_down()) {
;;;489    		z_axis_at_move_end(s);
;;;490    	}
;;;491    }
;;;492    
;;;493    
;;;494    
;;;495    
;;;496    
;;;497    
;;;498    
;;;499    
;;;500    void do_fsm_main_cut_back_prolong(state_t* s)   // reverse movement: main part with prolong activated. todo split it with 46 mode?
;;;501    {
;;;502    	MOTOR_Z_SetPulse();
;;;503    	--z_axis.current_pos;
;;;504    	if(z_axis.current_pos == z_axis.ramp_step) { // we reach end of main path and have long_pressed key, so just add additional thread full turn to shift initial start point
;;;505    		z_axis.prolong_fract += z_axis.prolong_addSteps; // fract part from prev step
;;;506    		uint32_t prolong_fixpart = z_axis.prolong_fract >> 24;
;;;507    		z_axis.current_pos += prolong_fixpart; // add fixed part
;;;508    		z_axis.end_pos += prolong_fixpart;
;;;509    		z_axis.prolong_fract &= FIXEDPT_FMASK; // leave fract part to accumulate with next dividing cycle
;;;510    		// when long_press end, get back to 46 mode to proceed
;;;511    	}
;;;512    }
;;;513    
;;;514    void do_fsm_main_cut_wait_tacho(state_t* s)   // direct movement: set direction for motor
;;;515    {
;;;516    	if(feed_direction)
;;;517    		MOTOR_Z_Forward();
;;;518    	else
;;;519    		MOTOR_Z_Reverse();
;;;520    	s->function = do_fsm_main_cut_ramp_up; // intermediate state to wait tacho pulse
;;;521    	disable_encoder_ticks(); // reset interrupt for encoder ticks, only tacho
;;;522    }
;;;523    
;;;524    void do_fsm_main_cut(state_t* s)   // direct movement: ramp up: accel by ramp map
;;;525    {
;;;526    	MOTOR_Z_SetPulse();
;;;527    	z_axis.current_pos++;
;;;528    	if(z_axis_ramp_up()) {
;;;529    		LED_GPIO_Port->BSRR = LED_Pin;   // led off
;;;530    		s->function = do_fsm_main_cut_infeed;
;;;531    	}
;;;532    }
;;;533    
;;;534    
;;;535    void do_fsm_main_cut_infeed(state_t* s)   // direct movement: main part
;;;536    {
;;;537    	MOTOR_Z_SetPulse();
;;;538    	z_axis.current_pos++;
;;;539    	if( z_axis.current_pos < ( z_axis.end_pos - z_axis.ramp_step ) ) {
;;;540    		z_axis_move();
;;;541    	} else {
;;;542    		s->function = do_fsm_first_cut_ramp_down;
;;;543    	}
;;;544    }
;;;545    
;;;546    
;;;547    void do_fsm_wait_sclick(state_t* s)
;;;548    {
;;;549    	MOTOR_Z_Disable(); //disable motor
;;;550    }
;;;551    
;;;552    void do_fsm_main_cut_ramp_up(state_t* s)
;;;553    {
;;;554    	s->function = do_fsm_main_cut;
;;;555    	//reinit counter
;;;556    //                          TIM4->ARR = fixedpt_toint(Q824set) - 1;
;;;557    	LED_GPIO_Port->BRR = LED_Pin; //led on
;;;558    
;;;559    	if(infeed_step < infeed_steps) {
;;;560    		TIM4->ARR = infeed_map[infeed_step++] + 1; // start stepper motor with shifted position by infeed map
;;;561    	} else {
;;;562    		TIM4->ARR = 1;  // start stepper motor ramp up procedure immediately after tacho event
;;;563    	}
;;;564    	TIM4->EGR |= TIM_EGR_UG;
;;;565    
;;;566    	TIM4->CNT = 0;
;;;567    	enable_encoder_ticks(); // enable thread specific interrupt controlled by Q824set
;;;568    }
;;;569    
;;;570    
;;;571    
;;;572    //---------------------------------------------------------------------------------------------
;;;573    void do_fsm_move_start(state_t* s){
;;;574    	if(s->f_tacho || s->main_feed_direction != feed_direction ) { // if tacho event or we going to start back feed to initial position with async clock
;;;575    		LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_DISABLED);
;;;576    		if(s->main_feed_direction == feed_direction) {
;;;577    			s->function = do_fsm_ramp_up;
;;;578    			s->sync = true;
;;;579    			s->async_z = 0;
;;;580    			s->syncbase = TIM4; 									// sync with spindle
;;;581    
;;;582    			LL_TIM_SetTriggerInput(TIM3, LL_TIM_TS_ITR3); 				//trigger by spindle encoder timer TIM4(sync mode)
;;;583    			enable_encoder_ticks(); 									// enable thread specific interrupt controlled by Q824set
;;;584    		} else {
;;;585    			s->function = do_fsm_ramp_up_async;
;;;586    			s->async_z = 1;
;;;587    			s->syncbase = TIM2; 									// sync with internal clock source(virtual spindle, "async" to main spindle)
;;;588    
;;;589    			LL_TIM_SetTriggerInput(TIM3, LL_TIM_TS_ITR1); 				//trigger by TIM2(async mode)
;;;590    			LL_TIM_EnableCounter(TIM2); /* Enable counter */
;;;591    		}
;;;592    
;;;593    		MOTOR_Z_AllowPulse();
;;;594    		LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_TRIGGER);
;;;595    		s->syncbase->ARR = 1; 					// start stepper motor ramp up procedure immediately after tacho event
;;;596    		LL_TIM_GenerateEvent_UPDATE(s->syncbase); /* Force update generation */
;;;597    	}	
;;;598    }
;;;599    
;;;600    void do_fsm_ramp_up(state_t* s)
;;;601    {
;;;602    //	MOTOR_Z_SetPulse();
;;;603    	z_axis.current_pos++;
;;;604    	if(z_axis_ramp_up2(s)) {
;;;605    		s->function = do_fsm_move;
;;;606    	}
;;;607    }
;;;608    
;;;609    void do_fsm_move(state_t* s)
;;;610    {
        0x08001f8c:    b510        ..      PUSH     {r4,lr}
        0x08001f8e:    4604        .F      MOV      r4,r0
;;;611    //	MOTOR_Z_SetPulse();
;;;612    //	z_axis.current_pos++;
;;;613    //	if(s->spindle_dir)	z_axis.current_pos++;
;;;614    //	else z_axis.current_pos--;
;;;615    	if( ++z_axis.current_pos <= ( z_axis.end_pos - z_axis.ramp_step ) ) { // when end_pos is zero, end_pos-ramp_step= 4294967296 - ramp_step, so it will be much more lager then current_pos
        0x08001f90:    4811        .H      LDR      r0,[pc,#68] ; [0x8001fd8] = 0x20000a38
        0x08001f92:    6840        @h      LDR      r0,[r0,#4]
        0x08001f94:    4910        .I      LDR      r1,[pc,#64] ; [0x8001fd8] = 0x20000a38
        0x08001f96:    f8911028    ..(.    LDRB     r1,[r1,#0x28]
        0x08001f9a:    1a41        A.      SUBS     r1,r0,r1
        0x08001f9c:    480e        .H      LDR      r0,[pc,#56] ; [0x8001fd8] = 0x20000a38
        0x08001f9e:    6800        .h      LDR      r0,[r0,#0]
        0x08001fa0:    1c40        @.      ADDS     r0,r0,#1
        0x08001fa2:    4a0d        .J      LDR      r2,[pc,#52] ; [0x8001fd8] = 0x20000a38
        0x08001fa4:    6010        .`      STR      r0,[r2,#0]
        0x08001fa6:    4281        .B      CMP      r1,r0
        0x08001fa8:    d303        ..      BCC      0x8001fb2 ; do_fsm_move + 38
;;;616    		z_axis_move2(s);
        0x08001faa:    4620         F      MOV      r0,r4
        0x08001fac:    f000fc5e    ..^.    BL       z_axis_move2 ; 0x800286c
        0x08001fb0:    e011        ..      B        0x8001fd6 ; do_fsm_move + 74
;;;617    	} else {
;;;618    		if(z_axis_ramp_down2(s)) {
        0x08001fb2:    4620         F      MOV      r0,r4
        0x08001fb4:    f000fc98    ....    BL       z_axis_ramp_down2 ; 0x80028e8
        0x08001fb8:    b158        X.      CBZ      r0,0x8001fd2 ; do_fsm_move + 70
;;;619    			if(z_axis.end_pos != z_axis.current_pos) {
        0x08001fba:    4807        .H      LDR      r0,[pc,#28] ; [0x8001fd8] = 0x20000a38
        0x08001fbc:    6840        @h      LDR      r0,[r0,#4]
        0x08001fbe:    4906        .I      LDR      r1,[pc,#24] ; [0x8001fd8] = 0x20000a38
        0x08001fc0:    6809        .h      LDR      r1,[r1,#0]
        0x08001fc2:    4288        .B      CMP      r0,r1
        0x08001fc4:    d003        ..      BEQ      0x8001fce ; do_fsm_move + 66
;;;620    				z_axis.end_pos = z_axis.current_pos;
        0x08001fc6:    4804        .H      LDR      r0,[pc,#16] ; [0x8001fd8] = 0x20000a38
        0x08001fc8:    6800        .h      LDR      r0,[r0,#0]
        0x08001fca:    4903        .I      LDR      r1,[pc,#12] ; [0x8001fd8] = 0x20000a38
        0x08001fcc:    6048        H`      STR      r0,[r1,#4]
;;;621    			}
;;;622    			s->function = do_fsm_move_end;
        0x08001fce:    4803        .H      LDR      r0,[pc,#12] ; [0x8001fdc] = 0x8002021
        0x08001fd0:    6020         `      STR      r0,[r4,#0]
;;;623    		}
;;;624    		s->function = do_fsm_ramp_down;
        0x08001fd2:    4803        .H      LDR      r0,[pc,#12] ; [0x8001fe0] = 0x8002145
        0x08001fd4:    6020         `      STR      r0,[r4,#0]
;;;625    	}
;;;626    }
        0x08001fd6:    bd10        ..      POP      {r4,pc}
    $d
        0x08001fd8:    20000a38    8..     DCD    536873528
        0x08001fdc:    08002021    ! ..    DCD    134225953
        0x08001fe0:    08002145    E!..    DCD    134226245
    $t
    i.do_fsm_move_async
    do_fsm_move_async
;;;627    
;;;628    void do_long_press_end_callback(state_t* s)          // direct movement: first pass, thread recording: long press release callback
;;;629    {
;;;630    	// для 1/2 микрошага нужно что бы общее количество шагов в цикле резьбы было кратно 2,(для 1/4 кратно 4 и тп).
;;;631    	// это нужно для того что бы в конце шаговый мотор остановился на одном из двухсот устойчивых шагов,
;;;632    	// не перескакивая на соседние шаги при потере питания.
;;;633    	z_axis.end_pos = ( z_axis.ramp_step + z_axis.current_pos ) | (step_divider - 1);
;;;634    	s->function = do_fsm_move;
;;;635    	do_fsm_move(s);
;;;636    }
;;;637    
;;;638    
;;;639    void do_fsm_ramp_down(state_t* s)
;;;640    {
;;;641    //	MOTOR_Z_SetPulse();
;;;642    	if(s->spindle_dir)	z_axis.current_pos++;
;;;643    	else z_axis.current_pos--;
;;;644    	if(z_axis_ramp_down2(s)) {
;;;645    		if(z_axis.end_pos != z_axis.current_pos) {
;;;646    			z_axis.end_pos = z_axis.current_pos;
;;;647    		}
;;;648    		s->function = do_fsm_move_end;
;;;649    	}
;;;650    }
;;;651    
;;;652    void do_fsm_move_end(state_t* s){
;;;653    	s->async_z = 0;
;;;654      LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_DISABLED);
;;;655    //	MOTOR_Z_BlockPulse();
;;;656    	if (s->sync) {
;;;657    		disable_encoder_ticks(); 										//reset interrupt for encoder ticks, only tacho todo async mode not compatible now
;;;658    	} else {
;;;659    		LL_TIM_DisableCounter(TIM2); // pause async timer
;;;660    //		LL_TIM_DisableIT_UPDATE(TIM2);
;;;661    	}
;;;662    	s->syncbase = 0; // reset syncbase to stop calling it from timer interrupt
;;;663    
;;;664      MOTOR_Z_Disable(); 									//disable motor later on next tacho event (or after some ticks count?) to completely process last step
;;;665    //	feed_direction = feed_direction == feed_direction_left ? feed_direction_right : feed_direction_left;
;;;666    	feed_direction = !feed_direction; 					//change feed direction
;;;667    	menu_changed = 1; 													//update menu
;;;668    	s->function = do_fsm_wait_sclick;
;;;669    
;;;670    	z_axis.current_pos = 0;
;;;671    }
;;;672    
;;;673    
;;;674    _Bool z_axis_ramp_up2(state_t* s)
;;;675    {
;;;676    	const fixedptu  set_with_fract = ramp[z_axis.ramp_step];
;;;677    	if(z_axis.Q824set > set_with_fract || z_axis.ramp_step == ramp_map) { 	// reach desired speed or end of ramp map
;;;678    		s->syncbase->ARR = fixedpt_toint(z_axis.Q824set) - 1; 			// update register ARR
;;;679    //		s->syncbase->EGR |= TIM_EGR_UG;
;;;680    		z_axis.fract_part = fixedpt_fracpart(z_axis.Q824set); 								// save fract part for future use on next step
;;;681    //		z_axis.end_minus_ramp_delta =
;;;682    		return true;
;;;683    	} else {
;;;684    		z_axis.ramp_step++;
;;;685    		s->syncbase->ARR = fixedpt_toint(set_with_fract) - 1; 			// update register ARR
;;;686    //		s->syncbase->EGR |= TIM_EGR_UG;
;;;687    //		z_axis.fract_part = fixedpt_fracpart( set_with_fract ); 						// save fract part for future use on next step
;;;688    	}
;;;689    	return false;
;;;690    }
;;;691    
;;;692    _Bool z_axis_ramp_down2(state_t* s)
;;;693    {
;;;694    	if (z_axis.ramp_step == 0)
;;;695    		return true;
;;;696    	const fixedptu set_with_fract = ramp[--z_axis.ramp_step];
;;;697    	s->syncbase->ARR = fixedpt_toint(set_with_fract) - 1; // update register ARR
;;;698    //	s->syncbase->EGR |= TIM_EGR_UG;
;;;699    //	z_axis.fract_part = fixedpt_fracpart( set_with_fract ); // save fract part for future use on next step
;;;700    	if(z_axis.ramp_step == 0)
;;;701    		return true;
;;;702    	return false;
;;;703    }
;;;704    
;;;705    void z_axis_move2(state_t* s)
;;;706    {
;;;707    	const fixedptu set_with_fract = fixedpt_add(z_axis.Q824set, z_axis.fract_part); // calculate new step delay with fract from previous step
;;;708    	s->syncbase->ARR = fixedpt_toint(set_with_fract) - 1; // update register ARR
;;;709    //	s->syncbase->CNT = 0;
;;;710    //	s->syncbase->EGR |= TIM_EGR_UG;
;;;711    	z_axis.fract_part = fixedpt_fracpart( set_with_fract ); // save fract part for future use on next step
;;;712    }
;;;713    
;;;714    
;;;715    
;;;716    
;;;717    
;;;718    //------------------------------------ ASYNC block -----------------------------------
;;;719    //------------------------------------ ASYNC block -----------------------------------
;;;720    //------------------------------------ ASYNC block -----------------------------------
;;;721    void do_fsm_ramp_up_async(state_t* s)
;;;722    {
;;;723    	MOTOR_Z_SetPulse();
;;;724    	z_axis.current_pos++;
;;;725    
;;;726    	const uint8_t z_arr = ramp2[z_axis.ramp_step];
;;;727    	if(z_arr < slew_speed_period) { 	// reach desired speed
;;;728    		s->z_period = slew_speed_period;
;;;729    		s->function = do_fsm_move_async;
;;;730    	} else {
;;;731    		z_axis.ramp_step++;
;;;732    		s->z_period = z_arr;
;;;733    	}
;;;734    }
;;;735    
;;;736    void do_fsm_move_async(state_t* s)
;;;737    {
;;;738    	MOTOR_Z_SetPulse();
        0x08001fe4:    2101        .!      MOVS     r1,#1
        0x08001fe6:    4a0b        .J      LDR      r2,[pc,#44] ; [0x8002014] = 0x42008000
        0x08001fe8:    6011        .`      STR      r1,[r2,#0]
;;;739    	z_axis.current_pos++;
        0x08001fea:    490b        .I      LDR      r1,[pc,#44] ; [0x8002018] = 0x20000a38
        0x08001fec:    6809        .h      LDR      r1,[r1,#0]
        0x08001fee:    1c49        I.      ADDS     r1,r1,#1
        0x08001ff0:    4a09        .J      LDR      r2,[pc,#36] ; [0x8002018] = 0x20000a38
        0x08001ff2:    6011        .`      STR      r1,[r2,#0]
;;;740    
;;;741    	// todo precalculate delta: z_axis.end_pos - z_axis.ramp_step
;;;742    	if( z_axis.current_pos < ( z_axis.end_pos - z_axis.ramp_step ) ) { // when end_pos is zero, end_pos-ramp_step= 4294967296 - ramp_step, so it will be much more lager then current_pos
        0x08001ff4:    4611        .F      MOV      r1,r2
        0x08001ff6:    6849        Ih      LDR      r1,[r1,#4]
        0x08001ff8:    f8922028    ..(     LDRB     r2,[r2,#0x28]
        0x08001ffc:    1a89        ..      SUBS     r1,r1,r2
        0x08001ffe:    4a06        .J      LDR      r2,[pc,#24] ; [0x8002018] = 0x20000a38
        0x08002000:    6812        .h      LDR      r2,[r2,#0]
        0x08002002:    4291        .B      CMP      r1,r2
        0x08002004:    d902        ..      BLS      0x800200c ; do_fsm_move_async + 40
;;;743    		s->z_period = slew_speed_period;
        0x08002006:    2132        2!      MOVS     r1,#0x32
        0x08002008:    7301        .s      STRB     r1,[r0,#0xc]
        0x0800200a:    e001        ..      B        0x8002010 ; do_fsm_move_async + 44
;;;744    	} else {
;;;745    		s->function = do_fsm_ramp_down_async;
        0x0800200c:    4903        .I      LDR      r1,[pc,#12] ; [0x800201c] = 0x800218d
        0x0800200e:    6001        .`      STR      r1,[r0,#0]
;;;746    	}
;;;747    }
        0x08002010:    4770        pG      BX       lr
    $d
        0x08002012:    0000        ..      DCW    0
        0x08002014:    42008000    ...B    DCD    1107329024
        0x08002018:    20000a38    8..     DCD    536873528
        0x0800201c:    0800218d    .!..    DCD    134226317
    $t
    i.do_fsm_move_end
    do_fsm_move_end
;;; .\..\Src\fsm.c (652)
        0x08002020:    b510        ..      PUSH     {r4,lr}
        0x08002022:    4604        .F      MOV      r4,r0
;;;653    	s->async_z = 0;
        0x08002024:    2000        .       MOVS     r0,#0
        0x08002026:    6060        ``      STR      r0,[r4,#4]
;;;654      LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_DISABLED);
        0x08002028:    2100        .!      MOVS     r1,#0
        0x0800202a:    4814        .H      LDR      r0,[pc,#80] ; [0x800207c] = 0x40000400
        0x0800202c:    f7fefe61    ..a.    BL       LL_TIM_SetSlaveMode ; 0x8000cf2
;;;655    //	MOTOR_Z_BlockPulse();
;;;656    	if (s->sync) {
        0x08002030:    7c20         |      LDRB     r0,[r4,#0x10]
        0x08002032:    b118        ..      CBZ      r0,0x800203c ; do_fsm_move_end + 28
;;;657    		disable_encoder_ticks(); 										//reset interrupt for encoder ticks, only tacho todo async mode not compatible now
        0x08002034:    2000        .       MOVS     r0,#0
        0x08002036:    4912        .I      LDR      r1,[pc,#72] ; [0x8002080] = 0x42010180
        0x08002038:    6008        .`      STR      r0,[r1,#0]
        0x0800203a:    e00a        ..      B        0x8002052 ; do_fsm_move_end + 50
;;;658    	} else {
;;;659    		LL_TIM_DisableCounter(TIM2); // pause async timer
        0x0800203c:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;1038     CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
        0x0800203e:    f04f4080    O..@    MOV      r0,#0x40000000
        0x08002042:    6800        .h      LDR      r0,[r0,#0]
        0x08002044:    f0200001     ...    BIC      r0,r0,#1
        0x08002048:    f04f4180    O..A    MOV      r1,#0x40000000
        0x0800204c:    6008        .`      STR      r0,[r1,#0]
;;;1039   }
        0x0800204e:    bf00        ..      NOP      
        0x08002050:    bf00        ..      NOP      
;;; .\..\Src\fsm.c
;;;662    	s->syncbase = 0; // reset syncbase to stop calling it from timer interrupt
        0x08002052:    2000        .       MOVS     r0,#0
        0x08002054:    6160        `a      STR      r0,[r4,#0x14]
;;;663    
;;;664      MOTOR_Z_Disable(); 									//disable motor later on next tacho event (or after some ticks count?) to completely process last step
        0x08002056:    f2402002    @..     MOV      r0,#0x202
        0x0800205a:    490a        .I      LDR      r1,[pc,#40] ; [0x8002084] = 0x40010c14
        0x0800205c:    6008        .`      STR      r0,[r1,#0]
;;;665    //	feed_direction = feed_direction == feed_direction_left ? feed_direction_right : feed_direction_left;
;;;666    	feed_direction = !feed_direction; 					//change feed direction
        0x0800205e:    480a        .H      LDR      r0,[pc,#40] ; [0x8002088] = 0x2000015d
        0x08002060:    7800        .x      LDRB     r0,[r0,#0]
        0x08002062:    f0800001    ....    EOR      r0,r0,#1
        0x08002066:    4908        .I      LDR      r1,[pc,#32] ; [0x8002088] = 0x2000015d
        0x08002068:    7008        .p      STRB     r0,[r1,#0]
;;;667    	menu_changed = 1; 													//update menu
        0x0800206a:    2001        .       MOVS     r0,#1
        0x0800206c:    4907        .I      LDR      r1,[pc,#28] ; [0x800208c] = 0x20000160
        0x0800206e:    6008        .`      STR      r0,[r1,#0]
;;;668    	s->function = do_fsm_wait_sclick;
        0x08002070:    4807        .H      LDR      r0,[pc,#28] ; [0x8002090] = 0x8002259
        0x08002072:    6020         `      STR      r0,[r4,#0]
;;;669    
;;;670    	z_axis.current_pos = 0;
        0x08002074:    2000        .       MOVS     r0,#0
        0x08002076:    4907        .I      LDR      r1,[pc,#28] ; [0x8002094] = 0x20000a38
        0x08002078:    6008        .`      STR      r0,[r1,#0]
;;;671    }
        0x0800207a:    bd10        ..      POP      {r4,pc}
    $d
        0x0800207c:    40000400    ...@    DCD    1073742848
        0x08002080:    42010180    ...B    DCD    1107362176
        0x08002084:    40010c14    ...@    DCD    1073810452
        0x08002088:    2000015d    ]..     DCD    536871261
        0x0800208c:    20000160    `..     DCD    536871264
        0x08002090:    08002259    Y"..    DCD    134226521
        0x08002094:    20000a38    8..     DCD    536873528
    $t
    i.do_fsm_move_start
    do_fsm_move_start
;;; .\..\Src\fsm.c (573)
        0x08002098:    b510        ..      PUSH     {r4,lr}
        0x0800209a:    4604        .F      MOV      r4,r0
;;;574    	if(s->f_tacho || s->main_feed_direction != feed_direction ) { // if tacho event or we going to start back feed to initial position with async clock
        0x0800209c:    7ba0        .{      LDRB     r0,[r4,#0xe]
        0x0800209e:    b920         .      CBNZ     r0,0x80020aa ; do_fsm_move_start + 18
        0x080020a0:    7c60        `|      LDRB     r0,[r4,#0x11]
        0x080020a2:    4922        "I      LDR      r1,[pc,#136] ; [0x800212c] = 0x2000015d
        0x080020a4:    7809        .x      LDRB     r1,[r1,#0]
        0x080020a6:    4288        .B      CMP      r0,r1
        0x080020a8:    d03f        ?.      BEQ      0x800212a ; do_fsm_move_start + 146
;;;575    		LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_DISABLED);
        0x080020aa:    2100        .!      MOVS     r1,#0
        0x080020ac:    4820         H      LDR      r0,[pc,#128] ; [0x8002130] = 0x40000400
        0x080020ae:    f7fefe20    .. .    BL       LL_TIM_SetSlaveMode ; 0x8000cf2
;;;576    		if(s->main_feed_direction == feed_direction) {
        0x080020b2:    7c60        `|      LDRB     r0,[r4,#0x11]
        0x080020b4:    491d        .I      LDR      r1,[pc,#116] ; [0x800212c] = 0x2000015d
        0x080020b6:    7809        .x      LDRB     r1,[r1,#0]
        0x080020b8:    4288        .B      CMP      r0,r1
        0x080020ba:    d10f        ..      BNE      0x80020dc ; do_fsm_move_start + 68
;;;577    			s->function = do_fsm_ramp_up;
        0x080020bc:    481d        .H      LDR      r0,[pc,#116] ; [0x8002134] = 0x80021e9
        0x080020be:    6020         `      STR      r0,[r4,#0]
;;;578    			s->sync = true;
        0x080020c0:    2001        .       MOVS     r0,#1
        0x080020c2:    7420         t      STRB     r0,[r4,#0x10]
;;;579    			s->async_z = 0;
        0x080020c4:    2000        .       MOVS     r0,#0
        0x080020c6:    6060        ``      STR      r0,[r4,#4]
;;;580    			s->syncbase = TIM4; 									// sync with spindle
        0x080020c8:    481b        .H      LDR      r0,[pc,#108] ; [0x8002138] = 0x40000800
        0x080020ca:    6160        `a      STR      r0,[r4,#0x14]
;;;581    
;;;582    			LL_TIM_SetTriggerInput(TIM3, LL_TIM_TS_ITR3); 				//trigger by spindle encoder timer TIM4(sync mode)
        0x080020cc:    2130        0!      MOVS     r1,#0x30
        0x080020ce:    4818        .H      LDR      r0,[pc,#96] ; [0x8002130] = 0x40000400
        0x080020d0:    f7fefe1b    ....    BL       LL_TIM_SetTriggerInput ; 0x8000d0a
;;;583    			enable_encoder_ticks(); 									// enable thread specific interrupt controlled by Q824set
        0x080020d4:    2001        .       MOVS     r0,#1
        0x080020d6:    4919        .I      LDR      r1,[pc,#100] ; [0x800213c] = 0x42010180
        0x080020d8:    6008        .`      STR      r0,[r1,#0]
        0x080020da:    e014        ..      B        0x8002106 ; do_fsm_move_start + 110
;;;584    		} else {
;;;585    			s->function = do_fsm_ramp_up_async;
        0x080020dc:    4818        .H      LDR      r0,[pc,#96] ; [0x8002140] = 0x800220d
        0x080020de:    6020         `      STR      r0,[r4,#0]
;;;586    			s->async_z = 1;
        0x080020e0:    2001        .       MOVS     r0,#1
        0x080020e2:    6060        ``      STR      r0,[r4,#4]
;;;587    			s->syncbase = TIM2; 									// sync with internal clock source(virtual spindle, "async" to main spindle)
        0x080020e4:    0780        ..      LSLS     r0,r0,#30
        0x080020e6:    6160        `a      STR      r0,[r4,#0x14]
;;;588    
;;;589    			LL_TIM_SetTriggerInput(TIM3, LL_TIM_TS_ITR1); 				//trigger by TIM2(async mode)
        0x080020e8:    2110        .!      MOVS     r1,#0x10
        0x080020ea:    4811        .H      LDR      r0,[pc,#68] ; [0x8002130] = 0x40000400
        0x080020ec:    f7fefe0d    ....    BL       LL_TIM_SetTriggerInput ; 0x8000d0a
;;;590    			LL_TIM_EnableCounter(TIM2); /* Enable counter */
        0x080020f0:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;1027     SET_BIT(TIMx->CR1, TIM_CR1_CEN);
        0x080020f2:    f04f4080    O..@    MOV      r0,#0x40000000
        0x080020f6:    6800        .h      LDR      r0,[r0,#0]
        0x080020f8:    f0400001    @...    ORR      r0,r0,#1
        0x080020fc:    f04f4180    O..A    MOV      r1,#0x40000000
        0x08002100:    6008        .`      STR      r0,[r1,#0]
;;;1028   }
        0x08002102:    bf00        ..      NOP      
        0x08002104:    bf00        ..      NOP      
;;; .\..\Src\fsm.c
;;;593    		MOTOR_Z_AllowPulse();
        0x08002106:    2001        .       MOVS     r0,#1
        0x08002108:    4909        .I      LDR      r1,[pc,#36] ; [0x8002130] = 0x40000400
        0x0800210a:    313c        <1      ADDS     r1,r1,#0x3c
        0x0800210c:    6008        .`      STR      r0,[r1,#0]
;;;594    		LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_TRIGGER);
        0x0800210e:    2106        .!      MOVS     r1,#6
        0x08002110:    4807        .H      LDR      r0,[pc,#28] ; [0x8002130] = 0x40000400
        0x08002112:    f7fefdee    ....    BL       LL_TIM_SetSlaveMode ; 0x8000cf2
;;;595    		s->syncbase->ARR = 1; 					// start stepper motor ramp up procedure immediately after tacho event
        0x08002116:    2001        .       MOVS     r0,#1
        0x08002118:    6961        ai      LDR      r1,[r4,#0x14]
        0x0800211a:    62c8        .b      STR      r0,[r1,#0x2c]
;;;596    		LL_TIM_GenerateEvent_UPDATE(s->syncbase); /* Force update generation */
        0x0800211c:    6960        `i      LDR      r0,[r4,#0x14]
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;3709     SET_BIT(TIMx->EGR, TIM_EGR_UG);
        0x0800211e:    6941        Ai      LDR      r1,[r0,#0x14]
        0x08002120:    f0410101    A...    ORR      r1,r1,#1
        0x08002124:    6141        Aa      STR      r1,[r0,#0x14]
;;;3710   }
        0x08002126:    bf00        ..      NOP      
        0x08002128:    bf00        ..      NOP      
;;; .\..\Src\fsm.c
;;;598    }
        0x0800212a:    bd10        ..      POP      {r4,pc}
    $d
        0x0800212c:    2000015d    ]..     DCD    536871261
        0x08002130:    40000400    ...@    DCD    1073742848
        0x08002134:    080021e9    .!..    DCD    134226409
        0x08002138:    40000800    ...@    DCD    1073743872
        0x0800213c:    42010180    ...B    DCD    1107362176
        0x08002140:    0800220d    ."..    DCD    134226445
    $t
    i.do_fsm_ramp_down
    do_fsm_ramp_down
;;;599    
;;;600    void do_fsm_ramp_up(state_t* s)
;;;601    {
;;;602    //	MOTOR_Z_SetPulse();
;;;603    	z_axis.current_pos++;
;;;604    	if(z_axis_ramp_up2(s)) {
;;;605    		s->function = do_fsm_move;
;;;606    	}
;;;607    }
;;;608    
;;;609    void do_fsm_move(state_t* s)
;;;610    {
;;;611    //	MOTOR_Z_SetPulse();
;;;612    //	z_axis.current_pos++;
;;;613    //	if(s->spindle_dir)	z_axis.current_pos++;
;;;614    //	else z_axis.current_pos--;
;;;615    	if( ++z_axis.current_pos <= ( z_axis.end_pos - z_axis.ramp_step ) ) { // when end_pos is zero, end_pos-ramp_step= 4294967296 - ramp_step, so it will be much more lager then current_pos
;;;616    		z_axis_move2(s);
;;;617    	} else {
;;;618    		if(z_axis_ramp_down2(s)) {
;;;619    			if(z_axis.end_pos != z_axis.current_pos) {
;;;620    				z_axis.end_pos = z_axis.current_pos;
;;;621    			}
;;;622    			s->function = do_fsm_move_end;
;;;623    		}
;;;624    		s->function = do_fsm_ramp_down;
;;;625    	}
;;;626    }
;;;627    
;;;628    void do_long_press_end_callback(state_t* s)          // direct movement: first pass, thread recording: long press release callback
;;;629    {
;;;630    	// для 1/2 микрошага нужно что бы общее количество шагов в цикле резьбы было кратно 2,(для 1/4 кратно 4 и тп).
;;;631    	// это нужно для того что бы в конце шаговый мотор остановился на одном из двухсот устойчивых шагов,
;;;632    	// не перескакивая на соседние шаги при потере питания.
;;;633    	z_axis.end_pos = ( z_axis.ramp_step + z_axis.current_pos ) | (step_divider - 1);
;;;634    	s->function = do_fsm_move;
;;;635    	do_fsm_move(s);
;;;636    }
;;;637    
;;;638    
;;;639    void do_fsm_ramp_down(state_t* s)
;;;640    {
        0x08002144:    b510        ..      PUSH     {r4,lr}
        0x08002146:    4604        .F      MOV      r4,r0
;;;641    //	MOTOR_Z_SetPulse();
;;;642    	if(s->spindle_dir)	z_axis.current_pos++;
        0x08002148:    7be0        .{      LDRB     r0,[r4,#0xf]
        0x0800214a:    b128        (.      CBZ      r0,0x8002158 ; do_fsm_ramp_down + 20
        0x0800214c:    480d        .H      LDR      r0,[pc,#52] ; [0x8002184] = 0x20000a38
        0x0800214e:    6800        .h      LDR      r0,[r0,#0]
        0x08002150:    1c40        @.      ADDS     r0,r0,#1
        0x08002152:    490c        .I      LDR      r1,[pc,#48] ; [0x8002184] = 0x20000a38
        0x08002154:    6008        .`      STR      r0,[r1,#0]
        0x08002156:    e004        ..      B        0x8002162 ; do_fsm_ramp_down + 30
;;;643    	else z_axis.current_pos--;
        0x08002158:    480a        .H      LDR      r0,[pc,#40] ; [0x8002184] = 0x20000a38
        0x0800215a:    6800        .h      LDR      r0,[r0,#0]
        0x0800215c:    1e40        @.      SUBS     r0,r0,#1
        0x0800215e:    4909        .I      LDR      r1,[pc,#36] ; [0x8002184] = 0x20000a38
        0x08002160:    6008        .`      STR      r0,[r1,#0]
;;;644    	if(z_axis_ramp_down2(s)) {
        0x08002162:    4620         F      MOV      r0,r4
        0x08002164:    f000fbc0    ....    BL       z_axis_ramp_down2 ; 0x80028e8
        0x08002168:    b158        X.      CBZ      r0,0x8002182 ; do_fsm_ramp_down + 62
;;;645    		if(z_axis.end_pos != z_axis.current_pos) {
        0x0800216a:    4806        .H      LDR      r0,[pc,#24] ; [0x8002184] = 0x20000a38
        0x0800216c:    6840        @h      LDR      r0,[r0,#4]
        0x0800216e:    4905        .I      LDR      r1,[pc,#20] ; [0x8002184] = 0x20000a38
        0x08002170:    6809        .h      LDR      r1,[r1,#0]
        0x08002172:    4288        .B      CMP      r0,r1
        0x08002174:    d003        ..      BEQ      0x800217e ; do_fsm_ramp_down + 58
;;;646    			z_axis.end_pos = z_axis.current_pos;
        0x08002176:    4803        .H      LDR      r0,[pc,#12] ; [0x8002184] = 0x20000a38
        0x08002178:    6800        .h      LDR      r0,[r0,#0]
        0x0800217a:    4902        .I      LDR      r1,[pc,#8] ; [0x8002184] = 0x20000a38
        0x0800217c:    6048        H`      STR      r0,[r1,#4]
;;;647    		}
;;;648    		s->function = do_fsm_move_end;
        0x0800217e:    4802        .H      LDR      r0,[pc,#8] ; [0x8002188] = 0x8002021
        0x08002180:    6020         `      STR      r0,[r4,#0]
;;;649    	}
;;;650    }
        0x08002182:    bd10        ..      POP      {r4,pc}
    $d
        0x08002184:    20000a38    8..     DCD    536873528
        0x08002188:    08002021    ! ..    DCD    134225953
    $t
    i.do_fsm_ramp_down_async
    do_fsm_ramp_down_async
;;;651    
;;;652    void do_fsm_move_end(state_t* s){
;;;653    	s->async_z = 0;
;;;654      LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_DISABLED);
;;;655    //	MOTOR_Z_BlockPulse();
;;;656    	if (s->sync) {
;;;657    		disable_encoder_ticks(); 										//reset interrupt for encoder ticks, only tacho todo async mode not compatible now
;;;658    	} else {
;;;659    		LL_TIM_DisableCounter(TIM2); // pause async timer
;;;660    //		LL_TIM_DisableIT_UPDATE(TIM2);
;;;661    	}
;;;662    	s->syncbase = 0; // reset syncbase to stop calling it from timer interrupt
;;;663    
;;;664      MOTOR_Z_Disable(); 									//disable motor later on next tacho event (or after some ticks count?) to completely process last step
;;;665    //	feed_direction = feed_direction == feed_direction_left ? feed_direction_right : feed_direction_left;
;;;666    	feed_direction = !feed_direction; 					//change feed direction
;;;667    	menu_changed = 1; 													//update menu
;;;668    	s->function = do_fsm_wait_sclick;
;;;669    
;;;670    	z_axis.current_pos = 0;
;;;671    }
;;;672    
;;;673    
;;;674    _Bool z_axis_ramp_up2(state_t* s)
;;;675    {
;;;676    	const fixedptu  set_with_fract = ramp[z_axis.ramp_step];
;;;677    	if(z_axis.Q824set > set_with_fract || z_axis.ramp_step == ramp_map) { 	// reach desired speed or end of ramp map
;;;678    		s->syncbase->ARR = fixedpt_toint(z_axis.Q824set) - 1; 			// update register ARR
;;;679    //		s->syncbase->EGR |= TIM_EGR_UG;
;;;680    		z_axis.fract_part = fixedpt_fracpart(z_axis.Q824set); 								// save fract part for future use on next step
;;;681    //		z_axis.end_minus_ramp_delta =
;;;682    		return true;
;;;683    	} else {
;;;684    		z_axis.ramp_step++;
;;;685    		s->syncbase->ARR = fixedpt_toint(set_with_fract) - 1; 			// update register ARR
;;;686    //		s->syncbase->EGR |= TIM_EGR_UG;
;;;687    //		z_axis.fract_part = fixedpt_fracpart( set_with_fract ); 						// save fract part for future use on next step
;;;688    	}
;;;689    	return false;
;;;690    }
;;;691    
;;;692    _Bool z_axis_ramp_down2(state_t* s)
;;;693    {
;;;694    	if (z_axis.ramp_step == 0)
;;;695    		return true;
;;;696    	const fixedptu set_with_fract = ramp[--z_axis.ramp_step];
;;;697    	s->syncbase->ARR = fixedpt_toint(set_with_fract) - 1; // update register ARR
;;;698    //	s->syncbase->EGR |= TIM_EGR_UG;
;;;699    //	z_axis.fract_part = fixedpt_fracpart( set_with_fract ); // save fract part for future use on next step
;;;700    	if(z_axis.ramp_step == 0)
;;;701    		return true;
;;;702    	return false;
;;;703    }
;;;704    
;;;705    void z_axis_move2(state_t* s)
;;;706    {
;;;707    	const fixedptu set_with_fract = fixedpt_add(z_axis.Q824set, z_axis.fract_part); // calculate new step delay with fract from previous step
;;;708    	s->syncbase->ARR = fixedpt_toint(set_with_fract) - 1; // update register ARR
;;;709    //	s->syncbase->CNT = 0;
;;;710    //	s->syncbase->EGR |= TIM_EGR_UG;
;;;711    	z_axis.fract_part = fixedpt_fracpart( set_with_fract ); // save fract part for future use on next step
;;;712    }
;;;713    
;;;714    
;;;715    
;;;716    
;;;717    
;;;718    //------------------------------------ ASYNC block -----------------------------------
;;;719    //------------------------------------ ASYNC block -----------------------------------
;;;720    //------------------------------------ ASYNC block -----------------------------------
;;;721    void do_fsm_ramp_up_async(state_t* s)
;;;722    {
;;;723    	MOTOR_Z_SetPulse();
;;;724    	z_axis.current_pos++;
;;;725    
;;;726    	const uint8_t z_arr = ramp2[z_axis.ramp_step];
;;;727    	if(z_arr < slew_speed_period) { 	// reach desired speed
;;;728    		s->z_period = slew_speed_period;
;;;729    		s->function = do_fsm_move_async;
;;;730    	} else {
;;;731    		z_axis.ramp_step++;
;;;732    		s->z_period = z_arr;
;;;733    	}
;;;734    }
;;;735    
;;;736    void do_fsm_move_async(state_t* s)
;;;737    {
;;;738    	MOTOR_Z_SetPulse();
;;;739    	z_axis.current_pos++;
;;;740    
;;;741    	// todo precalculate delta: z_axis.end_pos - z_axis.ramp_step
;;;742    	if( z_axis.current_pos < ( z_axis.end_pos - z_axis.ramp_step ) ) { // when end_pos is zero, end_pos-ramp_step= 4294967296 - ramp_step, so it will be much more lager then current_pos
;;;743    		s->z_period = slew_speed_period;
;;;744    	} else {
;;;745    		s->function = do_fsm_ramp_down_async;
;;;746    	}
;;;747    }
;;;748    
;;;749    void do_fsm_ramp_down_async(state_t* s)
;;;750    {
;;;751    	MOTOR_Z_SetPulse();
        0x0800218c:    2101        .!      MOVS     r1,#1
        0x0800218e:    4a12        .J      LDR      r2,[pc,#72] ; [0x80021d8] = 0x42008000
        0x08002190:    6011        .`      STR      r1,[r2,#0]
;;;752    	z_axis.current_pos++;
        0x08002192:    4912        .I      LDR      r1,[pc,#72] ; [0x80021dc] = 0x20000a38
        0x08002194:    6809        .h      LDR      r1,[r1,#0]
        0x08002196:    1c49        I.      ADDS     r1,r1,#1
        0x08002198:    4a10        .J      LDR      r2,[pc,#64] ; [0x80021dc] = 0x20000a38
        0x0800219a:    6011        .`      STR      r1,[r2,#0]
;;;753    
;;;754    	if (--z_axis.ramp_step != 0) {
        0x0800219c:    4611        .F      MOV      r1,r2
        0x0800219e:    f8911028    ..(.    LDRB     r1,[r1,#0x28]
        0x080021a2:    1e49        I.      SUBS     r1,r1,#1
        0x080021a4:    b2c9        ..      UXTB     r1,r1
        0x080021a6:    f8821028    ..(.    STRB     r1,[r2,#0x28]
        0x080021aa:    b129        ).      CBZ      r1,0x80021b8 ; do_fsm_ramp_down_async + 44
;;;755    		const uint8_t z_arr = ramp2[z_axis.ramp_step];
        0x080021ac:    f8922028    ..(     LDRB     r2,[r2,#0x28]
        0x080021b0:    4b0b        .K      LDR      r3,[pc,#44] ; [0x80021e0] = 0x20000028
        0x080021b2:    5c99        .\      LDRB     r1,[r3,r2]
;;;756    		s->z_period = z_arr;
        0x080021b4:    7301        .s      STRB     r1,[r0,#0xc]
;;;757    	} else {
        0x080021b6:    e00d        ..      B        0x80021d4 ; do_fsm_ramp_down_async + 72
;;;758    // for last step there is no need to wail long, motor can be start to desabled after 145 processor ticks, so with prescaler =145 and more ARR = 1 is enought
;;;759    		s->z_period = 1; 
        0x080021b8:    2101        .!      MOVS     r1,#1
        0x080021ba:    7301        .s      STRB     r1,[r0,#0xc]
;;;760    		if(z_axis.end_pos != z_axis.current_pos) {
        0x080021bc:    4907        .I      LDR      r1,[pc,#28] ; [0x80021dc] = 0x20000a38
        0x080021be:    6849        Ih      LDR      r1,[r1,#4]
        0x080021c0:    4a06        .J      LDR      r2,[pc,#24] ; [0x80021dc] = 0x20000a38
        0x080021c2:    6812        .h      LDR      r2,[r2,#0]
        0x080021c4:    4291        .B      CMP      r1,r2
        0x080021c6:    d003        ..      BEQ      0x80021d0 ; do_fsm_ramp_down_async + 68
;;;761    			z_axis.end_pos = z_axis.current_pos;
        0x080021c8:    4904        .I      LDR      r1,[pc,#16] ; [0x80021dc] = 0x20000a38
        0x080021ca:    6809        .h      LDR      r1,[r1,#0]
        0x080021cc:    4a03        .J      LDR      r2,[pc,#12] ; [0x80021dc] = 0x20000a38
        0x080021ce:    6051        Q`      STR      r1,[r2,#4]
;;;762    		}
;;;763    		s->function = do_fsm_move_end;
        0x080021d0:    4904        .I      LDR      r1,[pc,#16] ; [0x80021e4] = 0x8002021
        0x080021d2:    6001        .`      STR      r1,[r0,#0]
;;;764    	}
;;;765    }
        0x080021d4:    4770        pG      BX       lr
    $d
        0x080021d6:    0000        ..      DCW    0
        0x080021d8:    42008000    ...B    DCD    1107329024
        0x080021dc:    20000a38    8..     DCD    536873528
        0x080021e0:    20000028    (..     DCD    536870952
        0x080021e4:    08002021    ! ..    DCD    134225953
    $t
    i.do_fsm_ramp_up
    do_fsm_ramp_up
;;; .\..\Src\fsm.c (601)
        0x080021e8:    b510        ..      PUSH     {r4,lr}
        0x080021ea:    4604        .F      MOV      r4,r0
;;;602    //	MOTOR_Z_SetPulse();
;;;603    	z_axis.current_pos++;
        0x080021ec:    4805        .H      LDR      r0,[pc,#20] ; [0x8002204] = 0x20000a38
        0x080021ee:    6800        .h      LDR      r0,[r0,#0]
        0x080021f0:    1c40        @.      ADDS     r0,r0,#1
        0x080021f2:    4904        .I      LDR      r1,[pc,#16] ; [0x8002204] = 0x20000a38
        0x080021f4:    6008        .`      STR      r0,[r1,#0]
;;;604    	if(z_axis_ramp_up2(s)) {
        0x080021f6:    4620         F      MOV      r0,r4
        0x080021f8:    f000fb9a    ....    BL       z_axis_ramp_up2 ; 0x8002930
        0x080021fc:    b108        ..      CBZ      r0,0x8002202 ; do_fsm_ramp_up + 26
;;;605    		s->function = do_fsm_move;
        0x080021fe:    4802        .H      LDR      r0,[pc,#8] ; [0x8002208] = 0x8001f8d
        0x08002200:    6020         `      STR      r0,[r4,#0]
;;;606    	}
;;;607    }
        0x08002202:    bd10        ..      POP      {r4,pc}
    $d
        0x08002204:    20000a38    8..     DCD    536873528
        0x08002208:    08001f8d    ....    DCD    134225805
    $t
    i.do_fsm_ramp_up_async
    do_fsm_ramp_up_async
;;;608    
;;;609    void do_fsm_move(state_t* s)
;;;610    {
;;;611    //	MOTOR_Z_SetPulse();
;;;612    //	z_axis.current_pos++;
;;;613    //	if(s->spindle_dir)	z_axis.current_pos++;
;;;614    //	else z_axis.current_pos--;
;;;615    	if( ++z_axis.current_pos <= ( z_axis.end_pos - z_axis.ramp_step ) ) { // when end_pos is zero, end_pos-ramp_step= 4294967296 - ramp_step, so it will be much more lager then current_pos
;;;616    		z_axis_move2(s);
;;;617    	} else {
;;;618    		if(z_axis_ramp_down2(s)) {
;;;619    			if(z_axis.end_pos != z_axis.current_pos) {
;;;620    				z_axis.end_pos = z_axis.current_pos;
;;;621    			}
;;;622    			s->function = do_fsm_move_end;
;;;623    		}
;;;624    		s->function = do_fsm_ramp_down;
;;;625    	}
;;;626    }
;;;627    
;;;628    void do_long_press_end_callback(state_t* s)          // direct movement: first pass, thread recording: long press release callback
;;;629    {
;;;630    	// для 1/2 микрошага нужно что бы общее количество шагов в цикле резьбы было кратно 2,(для 1/4 кратно 4 и тп).
;;;631    	// это нужно для того что бы в конце шаговый мотор остановился на одном из двухсот устойчивых шагов,
;;;632    	// не перескакивая на соседние шаги при потере питания.
;;;633    	z_axis.end_pos = ( z_axis.ramp_step + z_axis.current_pos ) | (step_divider - 1);
;;;634    	s->function = do_fsm_move;
;;;635    	do_fsm_move(s);
;;;636    }
;;;637    
;;;638    
;;;639    void do_fsm_ramp_down(state_t* s)
;;;640    {
;;;641    //	MOTOR_Z_SetPulse();
;;;642    	if(s->spindle_dir)	z_axis.current_pos++;
;;;643    	else z_axis.current_pos--;
;;;644    	if(z_axis_ramp_down2(s)) {
;;;645    		if(z_axis.end_pos != z_axis.current_pos) {
;;;646    			z_axis.end_pos = z_axis.current_pos;
;;;647    		}
;;;648    		s->function = do_fsm_move_end;
;;;649    	}
;;;650    }
;;;651    
;;;652    void do_fsm_move_end(state_t* s){
;;;653    	s->async_z = 0;
;;;654      LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_DISABLED);
;;;655    //	MOTOR_Z_BlockPulse();
;;;656    	if (s->sync) {
;;;657    		disable_encoder_ticks(); 										//reset interrupt for encoder ticks, only tacho todo async mode not compatible now
;;;658    	} else {
;;;659    		LL_TIM_DisableCounter(TIM2); // pause async timer
;;;660    //		LL_TIM_DisableIT_UPDATE(TIM2);
;;;661    	}
;;;662    	s->syncbase = 0; // reset syncbase to stop calling it from timer interrupt
;;;663    
;;;664      MOTOR_Z_Disable(); 									//disable motor later on next tacho event (or after some ticks count?) to completely process last step
;;;665    //	feed_direction = feed_direction == feed_direction_left ? feed_direction_right : feed_direction_left;
;;;666    	feed_direction = !feed_direction; 					//change feed direction
;;;667    	menu_changed = 1; 													//update menu
;;;668    	s->function = do_fsm_wait_sclick;
;;;669    
;;;670    	z_axis.current_pos = 0;
;;;671    }
;;;672    
;;;673    
;;;674    _Bool z_axis_ramp_up2(state_t* s)
;;;675    {
;;;676    	const fixedptu  set_with_fract = ramp[z_axis.ramp_step];
;;;677    	if(z_axis.Q824set > set_with_fract || z_axis.ramp_step == ramp_map) { 	// reach desired speed or end of ramp map
;;;678    		s->syncbase->ARR = fixedpt_toint(z_axis.Q824set) - 1; 			// update register ARR
;;;679    //		s->syncbase->EGR |= TIM_EGR_UG;
;;;680    		z_axis.fract_part = fixedpt_fracpart(z_axis.Q824set); 								// save fract part for future use on next step
;;;681    //		z_axis.end_minus_ramp_delta =
;;;682    		return true;
;;;683    	} else {
;;;684    		z_axis.ramp_step++;
;;;685    		s->syncbase->ARR = fixedpt_toint(set_with_fract) - 1; 			// update register ARR
;;;686    //		s->syncbase->EGR |= TIM_EGR_UG;
;;;687    //		z_axis.fract_part = fixedpt_fracpart( set_with_fract ); 						// save fract part for future use on next step
;;;688    	}
;;;689    	return false;
;;;690    }
;;;691    
;;;692    _Bool z_axis_ramp_down2(state_t* s)
;;;693    {
;;;694    	if (z_axis.ramp_step == 0)
;;;695    		return true;
;;;696    	const fixedptu set_with_fract = ramp[--z_axis.ramp_step];
;;;697    	s->syncbase->ARR = fixedpt_toint(set_with_fract) - 1; // update register ARR
;;;698    //	s->syncbase->EGR |= TIM_EGR_UG;
;;;699    //	z_axis.fract_part = fixedpt_fracpart( set_with_fract ); // save fract part for future use on next step
;;;700    	if(z_axis.ramp_step == 0)
;;;701    		return true;
;;;702    	return false;
;;;703    }
;;;704    
;;;705    void z_axis_move2(state_t* s)
;;;706    {
;;;707    	const fixedptu set_with_fract = fixedpt_add(z_axis.Q824set, z_axis.fract_part); // calculate new step delay with fract from previous step
;;;708    	s->syncbase->ARR = fixedpt_toint(set_with_fract) - 1; // update register ARR
;;;709    //	s->syncbase->CNT = 0;
;;;710    //	s->syncbase->EGR |= TIM_EGR_UG;
;;;711    	z_axis.fract_part = fixedpt_fracpart( set_with_fract ); // save fract part for future use on next step
;;;712    }
;;;713    
;;;714    
;;;715    
;;;716    
;;;717    
;;;718    //------------------------------------ ASYNC block -----------------------------------
;;;719    //------------------------------------ ASYNC block -----------------------------------
;;;720    //------------------------------------ ASYNC block -----------------------------------
;;;721    void do_fsm_ramp_up_async(state_t* s)
;;;722    {
;;;723    	MOTOR_Z_SetPulse();
        0x0800220c:    2201        ."      MOVS     r2,#1
        0x0800220e:    4b0e        .K      LDR      r3,[pc,#56] ; [0x8002248] = 0x42008000
        0x08002210:    601a        .`      STR      r2,[r3,#0]
;;;724    	z_axis.current_pos++;
        0x08002212:    4a0e        .J      LDR      r2,[pc,#56] ; [0x800224c] = 0x20000a38
        0x08002214:    6812        .h      LDR      r2,[r2,#0]
        0x08002216:    1c52        R.      ADDS     r2,r2,#1
        0x08002218:    4b0c        .K      LDR      r3,[pc,#48] ; [0x800224c] = 0x20000a38
        0x0800221a:    601a        .`      STR      r2,[r3,#0]
;;;725    
;;;726    	const uint8_t z_arr = ramp2[z_axis.ramp_step];
        0x0800221c:    461a        .F      MOV      r2,r3
        0x0800221e:    f8922028    ..(     LDRB     r2,[r2,#0x28]
        0x08002222:    4b0b        .K      LDR      r3,[pc,#44] ; [0x8002250] = 0x20000028
        0x08002224:    5c99        .\      LDRB     r1,[r3,r2]
;;;727    	if(z_arr < slew_speed_period) { 	// reach desired speed
        0x08002226:    2932        2)      CMP      r1,#0x32
        0x08002228:    da04        ..      BGE      0x8002234 ; do_fsm_ramp_up_async + 40
;;;728    		s->z_period = slew_speed_period;
        0x0800222a:    2232        2"      MOVS     r2,#0x32
        0x0800222c:    7302        .s      STRB     r2,[r0,#0xc]
;;;729    		s->function = do_fsm_move_async;
        0x0800222e:    4a09        .J      LDR      r2,[pc,#36] ; [0x8002254] = 0x8001fe5
        0x08002230:    6002        .`      STR      r2,[r0,#0]
        0x08002232:    e007        ..      B        0x8002244 ; do_fsm_ramp_up_async + 56
;;;730    	} else {
;;;731    		z_axis.ramp_step++;
        0x08002234:    4a05        .J      LDR      r2,[pc,#20] ; [0x800224c] = 0x20000a38
        0x08002236:    f8922028    ..(     LDRB     r2,[r2,#0x28]
        0x0800223a:    1c52        R.      ADDS     r2,r2,#1
        0x0800223c:    4b03        .K      LDR      r3,[pc,#12] ; [0x800224c] = 0x20000a38
        0x0800223e:    f8832028    ..(     STRB     r2,[r3,#0x28]
;;;732    		s->z_period = z_arr;
        0x08002242:    7301        .s      STRB     r1,[r0,#0xc]
;;;733    	}
;;;734    }
        0x08002244:    4770        pG      BX       lr
    $d
        0x08002246:    0000        ..      DCW    0
        0x08002248:    42008000    ...B    DCD    1107329024
        0x0800224c:    20000a38    8..     DCD    536873528
        0x08002250:    20000028    (..     DCD    536870952
        0x08002254:    08001fe5    ....    DCD    134225893
    $t
    i.do_fsm_wait_sclick
    do_fsm_wait_sclick
;;; .\..\Src\fsm.c (549)
        0x08002258:    f2402102    @..!    MOV      r1,#0x202
        0x0800225c:    4a01        .J      LDR      r2,[pc,#4] ; [0x8002264] = 0x40010c14
        0x0800225e:    6011        .`      STR      r1,[r2,#0]
;;;550    }
        0x08002260:    4770        pG      BX       lr
    $d
        0x08002262:    0000        ..      DCW    0
        0x08002264:    40010c14    ...@    DCD    1073810452
    $t
    i.do_long_press_end_callback
    do_long_press_end_callback
;;;551    
;;;552    void do_fsm_main_cut_ramp_up(state_t* s)
;;;553    {
;;;554    	s->function = do_fsm_main_cut;
;;;555    	//reinit counter
;;;556    //                          TIM4->ARR = fixedpt_toint(Q824set) - 1;
;;;557    	LED_GPIO_Port->BRR = LED_Pin; //led on
;;;558    
;;;559    	if(infeed_step < infeed_steps) {
;;;560    		TIM4->ARR = infeed_map[infeed_step++] + 1; // start stepper motor with shifted position by infeed map
;;;561    	} else {
;;;562    		TIM4->ARR = 1;  // start stepper motor ramp up procedure immediately after tacho event
;;;563    	}
;;;564    	TIM4->EGR |= TIM_EGR_UG;
;;;565    
;;;566    	TIM4->CNT = 0;
;;;567    	enable_encoder_ticks(); // enable thread specific interrupt controlled by Q824set
;;;568    }
;;;569    
;;;570    
;;;571    
;;;572    //---------------------------------------------------------------------------------------------
;;;573    void do_fsm_move_start(state_t* s){
;;;574    	if(s->f_tacho || s->main_feed_direction != feed_direction ) { // if tacho event or we going to start back feed to initial position with async clock
;;;575    		LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_DISABLED);
;;;576    		if(s->main_feed_direction == feed_direction) {
;;;577    			s->function = do_fsm_ramp_up;
;;;578    			s->sync = true;
;;;579    			s->async_z = 0;
;;;580    			s->syncbase = TIM4; 									// sync with spindle
;;;581    
;;;582    			LL_TIM_SetTriggerInput(TIM3, LL_TIM_TS_ITR3); 				//trigger by spindle encoder timer TIM4(sync mode)
;;;583    			enable_encoder_ticks(); 									// enable thread specific interrupt controlled by Q824set
;;;584    		} else {
;;;585    			s->function = do_fsm_ramp_up_async;
;;;586    			s->async_z = 1;
;;;587    			s->syncbase = TIM2; 									// sync with internal clock source(virtual spindle, "async" to main spindle)
;;;588    
;;;589    			LL_TIM_SetTriggerInput(TIM3, LL_TIM_TS_ITR1); 				//trigger by TIM2(async mode)
;;;590    			LL_TIM_EnableCounter(TIM2); /* Enable counter */
;;;591    		}
;;;592    
;;;593    		MOTOR_Z_AllowPulse();
;;;594    		LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_TRIGGER);
;;;595    		s->syncbase->ARR = 1; 					// start stepper motor ramp up procedure immediately after tacho event
;;;596    		LL_TIM_GenerateEvent_UPDATE(s->syncbase); /* Force update generation */
;;;597    	}	
;;;598    }
;;;599    
;;;600    void do_fsm_ramp_up(state_t* s)
;;;601    {
;;;602    //	MOTOR_Z_SetPulse();
;;;603    	z_axis.current_pos++;
;;;604    	if(z_axis_ramp_up2(s)) {
;;;605    		s->function = do_fsm_move;
;;;606    	}
;;;607    }
;;;608    
;;;609    void do_fsm_move(state_t* s)
;;;610    {
;;;611    //	MOTOR_Z_SetPulse();
;;;612    //	z_axis.current_pos++;
;;;613    //	if(s->spindle_dir)	z_axis.current_pos++;
;;;614    //	else z_axis.current_pos--;
;;;615    	if( ++z_axis.current_pos <= ( z_axis.end_pos - z_axis.ramp_step ) ) { // when end_pos is zero, end_pos-ramp_step= 4294967296 - ramp_step, so it will be much more lager then current_pos
;;;616    		z_axis_move2(s);
;;;617    	} else {
;;;618    		if(z_axis_ramp_down2(s)) {
;;;619    			if(z_axis.end_pos != z_axis.current_pos) {
;;;620    				z_axis.end_pos = z_axis.current_pos;
;;;621    			}
;;;622    			s->function = do_fsm_move_end;
;;;623    		}
;;;624    		s->function = do_fsm_ramp_down;
;;;625    	}
;;;626    }
;;;627    
;;;628    void do_long_press_end_callback(state_t* s)          // direct movement: first pass, thread recording: long press release callback
;;;629    {
        0x08002268:    b510        ..      PUSH     {r4,lr}
        0x0800226a:    4604        .F      MOV      r4,r0
;;;630    	// для 1/2 микрошага нужно что бы общее количество шагов в цикле резьбы было кратно 2,(для 1/4 кратно 4 и тп).
;;;631    	// это нужно для того что бы в конце шаговый мотор остановился на одном из двухсот устойчивых шагов,
;;;632    	// не перескакивая на соседние шаги при потере питания.
;;;633    	z_axis.end_pos = ( z_axis.ramp_step + z_axis.current_pos ) | (step_divider - 1);
        0x0800226c:    4807        .H      LDR      r0,[pc,#28] ; [0x800228c] = 0x20000a38
        0x0800226e:    f8900028    ..(.    LDRB     r0,[r0,#0x28]
        0x08002272:    4906        .I      LDR      r1,[pc,#24] ; [0x800228c] = 0x20000a38
        0x08002274:    6809        .h      LDR      r1,[r1,#0]
        0x08002276:    4408        .D      ADD      r0,r0,r1
        0x08002278:    f0400001    @...    ORR      r0,r0,#1
        0x0800227c:    4903        .I      LDR      r1,[pc,#12] ; [0x800228c] = 0x20000a38
        0x0800227e:    6048        H`      STR      r0,[r1,#4]
;;;634    	s->function = do_fsm_move;
        0x08002280:    4803        .H      LDR      r0,[pc,#12] ; [0x8002290] = 0x8001f8d
        0x08002282:    6020         `      STR      r0,[r4,#0]
;;;635    	do_fsm_move(s);
        0x08002284:    4620         F      MOV      r0,r4
        0x08002286:    f7fffe81    ....    BL       do_fsm_move ; 0x8001f8c
;;;636    }
        0x0800228a:    bd10        ..      POP      {r4,pc}
    $d
        0x0800228c:    20000a38    8..     DCD    536873528
        0x08002290:    08001f8d    ....    DCD    134225805
    $t
    i.init_buttons
    init_buttons
;;; .\..\Src\buttons.c
;;;11     void init_buttons(void){
        0x08002294:    b510        ..      PUSH     {r4,lr}
;;;12     
;;;13     	bt[0].clk_mode = 10;
        0x08002296:    200a        .       MOVS     r0,#0xa
        0x08002298:    4906        .I      LDR      r1,[pc,#24] ; [0x80022b4] = 0x20000a14
        0x0800229a:    61c8        .a      STR      r0,[r1,#0x1c]
;;;14     	bt[0].GPIOx = BUTTON_1_GPIO_Port;
        0x0800229c:    4806        .H      LDR      r0,[pc,#24] ; [0x80022b8] = 0x40010800
        0x0800229e:    6008        .`      STR      r0,[r1,#0]
;;;15     	bt[0].button_pin = BUTTON_1_Pin;
        0x080022a0:    4806        .H      LDR      r0,[pc,#24] ; [0x80022bc] = 0x4010001
        0x080022a2:    6048        H`      STR      r0,[r1,#4]
;;;16     	bt[0].buttons = bt[0].buttons_mask = LL_GPIO_IsInputPinSet(bt[0].GPIOx,BUTTON_1_Pin); //bt[0].GPIOx->IDR & bt[0].button_pin;
        0x080022a4:    6808        .h      LDR      r0,[r1,#0]
        0x080022a6:    4905        .I      LDR      r1,[pc,#20] ; [0x80022bc] = 0x4010001
        0x080022a8:    f7fef9d5    ....    BL       LL_GPIO_IsInputPinSet ; 0x8000656
        0x080022ac:    4901        .I      LDR      r1,[pc,#4] ; [0x80022b4] = 0x20000a14
        0x080022ae:    6188        .a      STR      r0,[r1,#0x18]
        0x080022b0:    60c8        .`      STR      r0,[r1,#0xc]
;;;17     	return;
;;;18     	bt[1] = bt[0];
;;;19     	bt[1].clk_mode = 10;
;;;20     	bt[1].GPIOx = BUTTON_2_GPIO_Port;
;;;21     	bt[1].button_pin = BUTTON_2_Pin;
;;;22     	bt[1].buttons = bt[1].buttons_mask = bt[1].GPIOx->IDR & bt[1].button_pin;
;;;23     
;;;24     	if(device_ready == 1){
;;;25     //		read_sample_i2c(&i2c_device_logging.sample[i2c_device_logging.index]);		
;;;26     		reqest_sample_i2c_dma();
;;;27     //		while(ubTransferComplete == 0){
;;;28     //		}
;;;29     	}
;;;30     	bt[2].clk_mode = 10;
;;;31     	bt[2].button_pin = 0x02; // button_c code
;;;32     	bt[2].buttons = bt[2].buttons_mask = dma_data[5]&bt[2].button_pin; // = bt[1].GPIOx->IDR & bt[1].button_pin;
;;;33     	
;;;34     	bt[3].clk_mode = 10;
;;;35     	bt[3].button_pin = 0x01; // button_c code
;;;36     	bt[3].buttons = bt[3].buttons_mask = dma_data[5]&bt[3].button_pin; // = bt[1].GPIOx->IDR & bt[1].button_pin;
;;;37     
;;;38     }
        0x080022b2:    bd10        ..      POP      {r4,pc}
    $d
        0x080022b4:    20000a14    ...     DCD    536873492
        0x080022b8:    40010800    ...@    DCD    1073809408
        0x080022bc:    04010001    ....    DCD    67174401
    $t
    i.init_screen
    init_screen
;;; .\..\Src\screen.c
;;;10     void init_screen(I2C_TypeDef *hi2c){
        0x080022c0:    b510        ..      PUSH     {r4,lr}
        0x080022c2:    4604        .F      MOV      r4,r0
;;;11     	SSD1306_Init(hi2c);
        0x080022c4:    4620         F      MOV      r0,r4
        0x080022c6:    f7fffa09    ....    BL       SSD1306_Init ; 0x80016dc
;;;12     }
        0x080022ca:    bd10        ..      POP      {r4,pc}
    i.main
    main
;;; .\../Src/main.c
;;;340    	rs = 11;
        0x080022cc:    200b        .       MOVS     r0,#0xb
        0x080022ce:    4949        II      LDR      r1,[pc,#292] ; [0x80023f4] = 0x2000016c
        0x080022d0:    6008        .`      STR      r0,[r1,#0]
;;;341    //	z_axis.end_pos = 50;
;;;342    //	z_axis.Q824set = Thread_Info[Menu_Step].Q824;
;;;343    
;;;344    //	state.main_feed_direction = 1;
;;;345    
;;;346    	//	do_fsm_move_start(&state);
;;;347    	//	do_fsm_wait_tacho(&state);
;;;348    	
;;;349    //	TIM4_IRQHandler();
;;;350      /* USER CODE END 1 */
;;;351    
;;;352      /* MCU Configuration----------------------------------------------------------*/
;;;353    
;;;354      /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
;;;355      LL_Init();
        0x080022d2:    f7fefa6f    ..o.    BL       LL_Init ; 0x80007b4
;;;356    
;;;357      /* USER CODE BEGIN Init */
;;;358      /* USER CODE END Init */
;;;359    
;;;360      /* Configure the system clock */
;;;361      SystemClock_Config();
        0x080022d6:    f7fffb77    ..w.    BL       SystemClock_Config ; 0x80019c8
;;;362    
;;;363      /* USER CODE BEGIN SysInit */
;;;364    	LL_SYSTICK_EnableIT();
        0x080022da:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_cortex.h
;;;291      SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
        0x080022dc:    f04f20e0    O..     MOV      r0,#0xe000e000
        0x080022e0:    6900        .i      LDR      r0,[r0,#0x10]
        0x080022e2:    f0400002    @...    ORR      r0,r0,#2
        0x080022e6:    f04f21e0    O..!    MOV      r1,#0xe000e000
        0x080022ea:    6108        .a      STR      r0,[r1,#0x10]
;;;292    }
        0x080022ec:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;368      MX_GPIO_Init();
        0x080022ee:    f7fefd4d    ..M.    BL       MX_GPIO_Init ; 0x8000d8c
;;;369      MX_DMA_Init();
        0x080022f2:    f7fefd2b    ..+.    BL       MX_DMA_Init ; 0x8000d4c
;;;370      MX_I2C2_Init();
        0x080022f6:    f7fefdbf    ....    BL       MX_I2C2_Init ; 0x8000e78
;;;371      MX_TIM1_Init();
        0x080022fa:    f7fefe81    ....    BL       MX_TIM1_Init ; 0x8001000
;;;372      MX_TIM2_Init();
        0x080022fe:    f7fefedd    ....    BL       MX_TIM2_Init ; 0x80010bc
;;;373      MX_TIM3_Init();
        0x08002302:    f7feff29    ..).    BL       MX_TIM3_Init ; 0x8001158
;;;374      MX_TIM4_Init();
        0x08002306:    f7feff91    ....    BL       MX_TIM4_Init ; 0x800122c
;;;375      /* USER CODE BEGIN 2 */
;;;376    
;;;377    // инициализация дисплея
;;;378    #ifndef _SIMU
;;;379    	Activate_I2C_Master();
        0x0800230a:    f7fdffab    ....    BL       Activate_I2C_Master ; 0x8000264
;;;380    	init_screen(I2C2);
        0x0800230e:    483a        :H      LDR      r0,[pc,#232] ; [0x80023f8] = 0x40005800
        0x08002310:    f7ffffd6    ....    BL       init_screen ; 0x80022c0
;;;381    //	update_screen();
;;;382    //	i2c_device_init(I2C2);
;;;383    #endif
;;;384    	LL_mDelay(250);
        0x08002314:    20fa        .       MOVS     r0,#0xfa
        0x08002316:    f7fefd04    ....    BL       LL_mDelay ; 0x8000d22
;;;385    	init_buttons();
        0x0800231a:    f7ffffbb    ....    BL       init_buttons ; 0x8002294
;;;386      /* USER CODE END 2 */
;;;387    
;;;388      /* Infinite loop */
;;;389      /* USER CODE BEGIN WHILE */
;;;390    
;;;391    
;;;392    ///// from STM examples:
;;;393    //  /**************************/
;;;394    //  /* Start pulse generation */
;;;395    //  /**************************/
;;;396    //  /* Enable channel 1 */
;;;397    //  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH3);
;;;398    //  
;;;399    //  /* Enable TIM3 outputs */
;;;400    //  LL_TIM_EnableAllOutputs(TIM3);
;;;401    //  
;;;402    //  /* Enable auto-reload register preload */
;;;403    //  LL_TIM_EnableARRPreload(TIM3);
;;;404    
;;;405    //  /* Force update generation */
;;;406    //  LL_TIM_GenerateEvent_UPDATE(TIM3);  
;;;407    
;;;408    
;;;409      LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_DISABLED);
        0x0800231e:    2100        .!      MOVS     r1,#0
        0x08002320:    4836        6H      LDR      r0,[pc,#216] ; [0x80023fc] = 0x40000400
        0x08002322:    f7fefcec    ....    BL       LL_TIM_SetSlaveMode ; 0x8000cfe
;;;410    
;;;411    //  LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_DISABLED);
;;;412    //  LL_TIM_SetTriggerInput(TIM3, LL_TIM_TS_ITR1); 				//trigger by TIM2(async mode)
;;;413    //  LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_TRIGGER);
;;;414    
;;;415    //  LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_DISABLED);
;;;416    //  LL_TIM_SetTriggerInput(TIM3, LL_TIM_TS_ITR3); 				//trigger by spindle encoder timer TIM4(sync mode)
;;;417    //  LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_TRIGGER);
;;;418    
;;;419    
;;;420    	MOTOR_Z_BlockPulse(); // LL_TIM_OC_SetCompareCH3(TIM3, 0);
        0x08002326:    2000        .       MOVS     r0,#0
        0x08002328:    4934        4I      LDR      r1,[pc,#208] ; [0x80023fc] = 0x40000400
        0x0800232a:    313c        <1      ADDS     r1,r1,#0x3c
        0x0800232c:    6008        .`      STR      r0,[r1,#0]
;;;421      LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH3);
        0x0800232e:    1589        ..      ASRS     r1,r1,#22
        0x08002330:    4832        2H      LDR      r0,[pc,#200] ; [0x80023fc] = 0x40000400
        0x08002332:    f7fefb14    ....    BL       LL_TIM_CC_EnableChannel ; 0x800095e
;;;422    	
;;;423    	LL_TIM_EnableAllOutputs(TIM3);
        0x08002336:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;2818     SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
        0x08002338:    4830        0H      LDR      r0,[pc,#192] ; [0x80023fc] = 0x40000400
        0x0800233a:    6c40        @l      LDR      r0,[r0,#0x44]
        0x0800233c:    f4404000    @..@    ORR      r0,r0,#0x8000
        0x08002340:    492e        .I      LDR      r1,[pc,#184] ; [0x80023fc] = 0x40000400
        0x08002342:    6448        Hd      STR      r0,[r1,#0x44]
;;;2819   }
        0x08002344:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;427    	LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH3);	// configure TACHO events on channel 3
        0x08002346:    1589        ..      ASRS     r1,r1,#22
        0x08002348:    482d        -H      LDR      r0,[pc,#180] ; [0x8002400] = 0x40000800
        0x0800234a:    f7fefb08    ....    BL       LL_TIM_CC_EnableChannel ; 0x800095e
;;;428      LL_TIM_EnableCounter(TIM4); 												//Enable timer 4
        0x0800234e:    482c        ,H      LDR      r0,[pc,#176] ; [0x8002400] = 0x40000800
        0x08002350:    f7fefb13    ....    BL       LL_TIM_EnableCounter ; 0x800097a
;;;429      LL_TIM_EnableIT_CC3(TIM4);													// enable interrupts for TACHO events from encoder
        0x08002354:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;3299     SET_BIT(TIMx->DIER, TIM_DIER_CC3IE);
        0x08002356:    482a        *H      LDR      r0,[pc,#168] ; [0x8002400] = 0x40000800
        0x08002358:    68c0        .h      LDR      r0,[r0,#0xc]
        0x0800235a:    f0400008    @...    ORR      r0,r0,#8
        0x0800235e:    4928        (I      LDR      r1,[pc,#160] ; [0x8002400] = 0x40000800
        0x08002360:    60c8        .`      STR      r0,[r1,#0xc]
;;;3300   }
        0x08002362:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;431    	TIM4->SR = 0; 																			// reset interrup flags
        0x08002364:    2000        .       MOVS     r0,#0
        0x08002366:    4926        &I      LDR      r1,[pc,#152] ; [0x8002400] = 0x40000800
        0x08002368:    3110        .1      ADDS     r1,r1,#0x10
        0x0800236a:    6008        .`      STR      r0,[r1,#0]
;;;432    
;;;433    	LL_TIM_EnableIT_UPDATE(TIM1);
        0x0800236c:    4825        %H      LDR      r0,[pc,#148] ; [0x8002404] = 0x40012c00
        0x0800236e:    f7fefb09    ....    BL       LL_TIM_EnableIT_UPDATE ; 0x8000984
;;;434    	LL_TIM_EnableIT_UPDATE(TIM2);
        0x08002372:    f04f4080    O..@    MOV      r0,#0x40000000
        0x08002376:    f7fefb05    ....    BL       LL_TIM_EnableIT_UPDATE ; 0x8000984
;;;435    	LL_TIM_EnableCounter(TIM2);
        0x0800237a:    f04f4080    O..@    MOV      r0,#0x40000000
        0x0800237e:    f7fefafc    ....    BL       LL_TIM_EnableCounter ; 0x800097a
;;;436    	
;;;437    //	do_fsm_move_start(&state);
;;;438    
;;;439    	
;;;440      /* Enable counter */
;;;441    //  LL_TIM_EnableCounter(TIM2);
;;;442      /* Force update generation */
;;;443    //  LL_TIM_GenerateEvent_UPDATE(TIM2);
;;;444    
;;;445    // init buttons
;;;446    	do_fsm_menu(&state);
        0x08002382:    4821        !H      LDR      r0,[pc,#132] ; [0x8002408] = 0x20000134
        0x08002384:    f7fffd02    ....    BL       do_fsm_menu ; 0x8001d8c
;;;447    	LED_GPIO_Port->BSRR = LED_Pin; // led off
        0x08002388:    4820         H      LDR      r0,[pc,#128] ; [0x800240c] = 0x4200020
        0x0800238a:    4921        !I      LDR      r1,[pc,#132] ; [0x8002410] = 0x40011000
        0x0800238c:    6108        .a      STR      r0,[r1,#0x10]
;;;448    	while (1) {
        0x0800238e:    e02f        /.      B        0x80023f0 ; main + 292
;;;449      /* USER CODE END WHILE */
;;;450    
;;;451      /* USER CODE BEGIN 3 */
;;;452    #ifndef _SIMU		
;;;453    //		reqest_sample_i2c_dma(); // init reqest to joystick by DMA, when process_button complete i2c done its job
;;;454    #endif		
;;;455    //		read_sample_i2c(&i2c_device_logging.sample[i2c_device_logging.index]);
;;;456    		process_button();
        0x08002390:    f000f846    ..F.    BL       process_button ; 0x8002420
;;;457    //		process_joystick();
;;;458    //		read_sample_i2c(&i2c_device_logging.sample[i2c_device_logging.index]);
;;;459    
;;;460    
;;;461    //		uint8_t level = Thread_Info[Menu_Step].level;
;;;462    
;;;463    //		if(auto_mode == true) {
;;;464    //			if ( auto_mode_delay == 0 ) {
;;;465    //				buttons_flag_set = single_click_Msk; //
;;;466    //			}
;;;467    //		}
;;;468    
;;;469    		if(buttons_flag_set) {
        0x08002394:    481f        .H      LDR      r0,[pc,#124] ; [0x8002414] = 0x20004000
        0x08002396:    6800        .h      LDR      r0,[r0,#0]
        0x08002398:    b128        (.      CBZ      r0,0x80023a6 ; main + 218
;;;470    			do_fsm_menu(&state);
        0x0800239a:    481b        .H      LDR      r0,[pc,#108] ; [0x8002408] = 0x20000134
        0x0800239c:    f7fffcf6    ....    BL       do_fsm_menu ; 0x8001d8c
;;;471    			buttons_flag_set = 0; // reset button flags
        0x080023a0:    2000        .       MOVS     r0,#0
        0x080023a2:    491c        .I      LDR      r1,[pc,#112] ; [0x8002414] = 0x20004000
        0x080023a4:    6008        .`      STR      r0,[r1,#0]
;;;472    		}
;;;473    
;;;474    		if(z_axis.ramp_step != rs) {
        0x080023a6:    481c        .H      LDR      r0,[pc,#112] ; [0x8002418] = 0x20000a38
        0x080023a8:    f8900028    ..(.    LDRB     r0,[r0,#0x28]
        0x080023ac:    4911        .I      LDR      r1,[pc,#68] ; [0x80023f4] = 0x2000016c
        0x080023ae:    6809        .h      LDR      r1,[r1,#0]
        0x080023b0:    4288        .B      CMP      r0,r1
        0x080023b2:    d007        ..      BEQ      0x80023c4 ; main + 248
;;;475    			rs = z_axis.ramp_step;
        0x080023b4:    4818        .H      LDR      r0,[pc,#96] ; [0x8002418] = 0x20000a38
        0x080023b6:    f8900028    ..(.    LDRB     r0,[r0,#0x28]
        0x080023ba:    490e        .I      LDR      r1,[pc,#56] ; [0x80023f4] = 0x2000016c
        0x080023bc:    6008        .`      STR      r0,[r1,#0]
;;;476    			menu_changed = 1;
        0x080023be:    2001        .       MOVS     r0,#1
        0x080023c0:    4916        .I      LDR      r1,[pc,#88] ; [0x800241c] = 0x20000160
        0x080023c2:    6008        .`      STR      r0,[r1,#0]
;;;477    		}
;;;478    
;;;479    		if(z_axis.current_pos != rs) {
        0x080023c4:    4814        .H      LDR      r0,[pc,#80] ; [0x8002418] = 0x20000a38
        0x080023c6:    6800        .h      LDR      r0,[r0,#0]
        0x080023c8:    490a        .I      LDR      r1,[pc,#40] ; [0x80023f4] = 0x2000016c
        0x080023ca:    6809        .h      LDR      r1,[r1,#0]
        0x080023cc:    4288        .B      CMP      r0,r1
        0x080023ce:    d006        ..      BEQ      0x80023de ; main + 274
;;;480    			rs = z_axis.current_pos;
        0x080023d0:    4811        .H      LDR      r0,[pc,#68] ; [0x8002418] = 0x20000a38
        0x080023d2:    6800        .h      LDR      r0,[r0,#0]
        0x080023d4:    4907        .I      LDR      r1,[pc,#28] ; [0x80023f4] = 0x2000016c
        0x080023d6:    6008        .`      STR      r0,[r1,#0]
;;;481    			menu_changed = 1;
        0x080023d8:    2001        .       MOVS     r0,#1
        0x080023da:    4910        .I      LDR      r1,[pc,#64] ; [0x800241c] = 0x20000160
        0x080023dc:    6008        .`      STR      r0,[r1,#0]
;;;482    		}
;;;483    
;;;484    // update display info
;;;485    		if(menu_changed == 1){ // haltodo && hi2c2.hdmatx->State == HAL_DMA_STATE_READY) {
        0x080023de:    480f        .H      LDR      r0,[pc,#60] ; [0x800241c] = 0x20000160
        0x080023e0:    6800        .h      LDR      r0,[r0,#0]
        0x080023e2:    2801        .(      CMP      r0,#1
        0x080023e4:    d104        ..      BNE      0x80023f0 ; main + 292
;;;486    			menu_changed = 0;
        0x080023e6:    2000        .       MOVS     r0,#0
        0x080023e8:    490c        .I      LDR      r1,[pc,#48] ; [0x800241c] = 0x20000160
        0x080023ea:    6008        .`      STR      r0,[r1,#0]
;;;487    			update_screen();
        0x080023ec:    f000f958    ..X.    BL       update_screen ; 0x80026a0
        0x080023f0:    e7ce        ..      B        0x8002390 ; main + 196
    $d
        0x080023f2:    0000        ..      DCW    0
        0x080023f4:    2000016c    l..     DCD    536871276
        0x080023f8:    40005800    .X.@    DCD    1073764352
        0x080023fc:    40000400    ...@    DCD    1073742848
        0x08002400:    40000800    ...@    DCD    1073743872
        0x08002404:    40012c00    .,.@    DCD    1073818624
        0x08002408:    20000134    4..     DCD    536871220
        0x0800240c:    04200020     . .    DCD    69206048
        0x08002410:    40011000    ...@    DCD    1073811456
        0x08002414:    20004000    .@.     DCD    536887296
        0x08002418:    20000a38    8..     DCD    536873528
        0x0800241c:    20000160    `..     DCD    536871264
    $t
    i.process_button
    process_button
;;; .\..\Src\buttons.c
;;;57     {
        0x08002420:    b570        p.      PUSH     {r4-r6,lr}
;;;58     	for(int a =0; a<BT_TOTAL;a++){
        0x08002422:    2400        .$      MOVS     r4,#0
        0x08002424:    e114        ..      B        0x8002650 ; process_button + 560
;;;59     	/*
;;;60     	click Nondeterministic finite automaton(NFA):
;;;61     	10. ждем сигнала с кнопки
;;;62     	20. кнопка нажата, считаем тики. если тиков > 1000 это лонг пресс, идем в 30
;;;63     	30. сигнал long_press_start, идем в 40
;;;64     	40. ждем отпуска кнопки, далее в 50
;;;65     	50. кнопку отпустили, если тиков меньше 200 идем в 70, иначе в 60
;;;66     	60. если тиков < 1000 генерим сигнал CLICK, если тиков больше генерим сигнал long_press_end, идем в 10
;;;67     	70. тиков меньше 200, это может быть дабл-клик, ждем еще 100, если ничего идем в 60, если клик идем в 80
;;;68     	80. ждем отпуска кнопки, далее в 90
;;;69     	90. кнопку отпустили, генерим DOUBLE_CLICK, идем в 10
;;;70     	*/
;;;71      
;;;72     //	#if defined ( _SIMU )
;;;73     //		uint32_t tmp_buttons = bt[a].GPIOx->IDR & bt[a].button_pin;
;;;74     //	#else
;;;75     		uint32_t tmp_buttons;
;;;76     		if(bt[a].GPIOx != 0)
        0x08002426:    488d        .H      LDR      r0,[pc,#564] ; [0x800265c] = 0x20000a14
        0x08002428:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x0800242c:    6800        .h      LDR      r0,[r0,#0]
        0x0800242e:    b158        X.      CBZ      r0,0x8002448 ; process_button + 40
;;;77     			tmp_buttons = LL_GPIO_IsInputPinSet(bt[a].GPIOx,bt[a].button_pin);
        0x08002430:    4a8a        .J      LDR      r2,[pc,#552] ; [0x800265c] = 0x20000a14
        0x08002432:    eb021244    ..D.    ADD      r2,r2,r4,LSL #5
        0x08002436:    6851        Qh      LDR      r1,[r2,#4]
        0x08002438:    4a88        .J      LDR      r2,[pc,#544] ; [0x800265c] = 0x20000a14
        0x0800243a:    eb021244    ..D.    ADD      r2,r2,r4,LSL #5
        0x0800243e:    6810        .h      LDR      r0,[r2,#0]
        0x08002440:    f7fef909    ....    BL       LL_GPIO_IsInputPinSet ; 0x8000656
        0x08002444:    4605        .F      MOV      r5,r0
        0x08002446:    e007        ..      B        0x8002458 ; process_button + 56
;;;78     //			tmp_buttons = bt[a].GPIOx->IDR & bt[a].button_pin; //BUTTON_1_GPIO_Port->IDR & bt[a].button_pin;
;;;79     		else{
;;;80     			
;;;81     //			if(ubTransferComplete == 0)
;;;82     //				continue;
;;;83     			//	dma_delay = 0;
;;;84     //	while(hi2c2->hdmarx->State != HAL_DMA_STATE_READY){
;;;85     //		dma_delay++;
;;;86     //		HAL_Delay(1);
;;;87     //	}
;;;88     //	dma_delay2 = dma_delay;
;;;89     
;;;90     			tmp_buttons = dma_data[5] & bt[a].button_pin;
        0x08002448:    4885        .H      LDR      r0,[pc,#532] ; [0x8002660] = 0x20000021
        0x0800244a:    7940        @y      LDRB     r0,[r0,#5]
        0x0800244c:    4983        .I      LDR      r1,[pc,#524] ; [0x800265c] = 0x20000a14
        0x0800244e:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x08002452:    6849        Ih      LDR      r1,[r1,#4]
        0x08002454:    ea000501    ....    AND      r5,r0,r1
;;;91     		}
;;;92     //	#endif
;;;93     
;;;94     //		if(z_axis.current_pos < 20)
;;;95     //			tmp_buttons = 0;
;;;96     		
;;;97     		if( tmp_buttons != bt[a].buttons ) { // start debounce
        0x08002458:    4880        .H      LDR      r0,[pc,#512] ; [0x800265c] = 0x20000a14
        0x0800245a:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x0800245e:    68c0        .h      LDR      r0,[r0,#0xc]
        0x08002460:    42a8        .B      CMP      r0,r5
        0x08002462:    d009        ..      BEQ      0x8002478 ; process_button + 88
;;;98     			bt[a].buttons = tmp_buttons;
        0x08002464:    487d        }H      LDR      r0,[pc,#500] ; [0x800265c] = 0x20000a14
        0x08002466:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x0800246a:    60c5        .`      STR      r5,[r0,#0xc]
;;;99     			// reset debounce counter and start count every one ms
;;;100    			bt[a].buttons_mstick = 1;
        0x0800246c:    2001        .       MOVS     r0,#1
        0x0800246e:    497b        {I      LDR      r1,[pc,#492] ; [0x800265c] = 0x20000a14
        0x08002470:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x08002474:    6108        .a      STR      r0,[r1,#0x10]
        0x08002476:    bd70        p.      POP      {r4-r6,pc}
;;;101    			return;
;;;102    		}
;;;103    
;;;104    		if( bt[a].buttons_mstick > DEBOUNCE_MS ) {
        0x08002478:    4878        xH      LDR      r0,[pc,#480] ; [0x800265c] = 0x20000a14
        0x0800247a:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x0800247e:    6900        .i      LDR      r0,[r0,#0x10]
        0x08002480:    2814        .(      CMP      r0,#0x14
        0x08002482:    d96f        o.      BLS      0x8002564 ; process_button + 324
;;;105    			switch(bt[a].clk_mode) {
        0x08002484:    4875        uH      LDR      r0,[pc,#468] ; [0x800265c] = 0x20000a14
        0x08002486:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x0800248a:    69c0        .i      LDR      r0,[r0,#0x1c]
        0x0800248c:    2832        2(      CMP      r0,#0x32
        0x0800248e:    d061        a.      BEQ      0x8002554 ; process_button + 308
        0x08002490:    dc08        ..      BGT      0x80024a4 ; process_button + 132
        0x08002492:    280a        .(      CMP      r0,#0xa
        0x08002494:    d00f        ..      BEQ      0x80024b6 ; process_button + 150
        0x08002496:    2814        .(      CMP      r0,#0x14
        0x08002498:    d019        ..      BEQ      0x80024ce ; process_button + 174
        0x0800249a:    281e        .(      CMP      r0,#0x1e
        0x0800249c:    d038        8.      BEQ      0x8002510 ; process_button + 240
        0x0800249e:    2828        ((      CMP      r0,#0x28
        0x080024a0:    d114        ..      BNE      0x80024cc ; process_button + 172
        0x080024a2:    e042        B.      B        0x800252a ; process_button + 266
        0x080024a4:    283c        <(      CMP      r0,#0x3c
        0x080024a6:    d064        d.      BEQ      0x8002572 ; process_button + 338
        0x080024a8:    2846        F(      CMP      r0,#0x46
        0x080024aa:    d071        q.      BEQ      0x8002590 ; process_button + 368
        0x080024ac:    2850        P(      CMP      r0,#0x50
        0x080024ae:    d070        p.      BEQ      0x8002592 ; process_button + 370
        0x080024b0:    285a        Z(      CMP      r0,#0x5a
        0x080024b2:    d1f5        ..      BNE      0x80024a0 ; process_button + 128
        0x080024b4:    e0b8        ..      B        0x8002628 ; process_button + 520
;;;106    			case 10: {
;;;107    				if ( tmp_buttons & bt[a].button_pin ) {   // released
        0x080024b6:    4869        iH      LDR      r0,[pc,#420] ; [0x800265c] = 0x20000a14
        0x080024b8:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x080024bc:    6840        @h      LDR      r0,[r0,#4]
        0x080024be:    4028        (@      ANDS     r0,r0,r5
        0x080024c0:    b920         .      CBNZ     r0,0x80024cc ; process_button + 172
;;;108    				} else { // pressed
;;;109    //					buttons_mstick = 1;
;;;110    					bt[a].clk_mode = 20;
        0x080024c2:    2014        .       MOVS     r0,#0x14
        0x080024c4:    4965        eI      LDR      r1,[pc,#404] ; [0x800265c] = 0x20000a14
        0x080024c6:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x080024ca:    61c8        .a      STR      r0,[r1,#0x1c]
;;;111    				}
;;;112    				break;
        0x080024cc:    e0be        ..      B        0x800264c ; process_button + 556
;;;113    			}
;;;114    			case 20: {
;;;115    				if ( tmp_buttons & bt[a].button_pin ) { // released
        0x080024ce:    4863        cH      LDR      r0,[pc,#396] ; [0x800265c] = 0x20000a14
        0x080024d0:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x080024d4:    6840        @h      LDR      r0,[r0,#4]
        0x080024d6:    4028        (@      ANDS     r0,r0,r5
        0x080024d8:    b128        (.      CBZ      r0,0x80024e6 ; process_button + 198
;;;116    					bt[a].clk_mode = 50;
        0x080024da:    2032        2       MOVS     r0,#0x32
        0x080024dc:    495f        _I      LDR      r1,[pc,#380] ; [0x800265c] = 0x20000a14
        0x080024de:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x080024e2:    61c8        .a      STR      r0,[r1,#0x1c]
        0x080024e4:    e007        ..      B        0x80024f6 ; process_button + 214
;;;117    				} else {
;;;118    					bt[a].downTime = bt[a].buttons_mstick;
        0x080024e6:    485d        ]H      LDR      r0,[pc,#372] ; [0x800265c] = 0x20000a14
        0x080024e8:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x080024ec:    6900        .i      LDR      r0,[r0,#0x10]
        0x080024ee:    495b        [I      LDR      r1,[pc,#364] ; [0x800265c] = 0x20000a14
        0x080024f0:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x080024f4:    6088        .`      STR      r0,[r1,#8]
;;;119    				}
;;;120    				if (bt[a].downTime > HOLDTIME_MS ) { // long press detected
        0x080024f6:    4859        YH      LDR      r0,[pc,#356] ; [0x800265c] = 0x20000a14
        0x080024f8:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x080024fc:    6880        .h      LDR      r0,[r0,#8]
        0x080024fe:    f5b07ffa    ....    CMP      r0,#0x1f4
        0x08002502:    d904        ..      BLS      0x800250e ; process_button + 238
;;;121    					bt[a].clk_mode = 30;
        0x08002504:    201e        .       MOVS     r0,#0x1e
        0x08002506:    4955        UI      LDR      r1,[pc,#340] ; [0x800265c] = 0x20000a14
        0x08002508:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x0800250c:    61c8        .a      STR      r0,[r1,#0x1c]
;;;122    				}
;;;123    				break;
        0x0800250e:    e09d        ..      B        0x800264c ; process_button + 556
;;;124    			}
;;;125    			case 30: { // long_press_start event
;;;126    				buttons_flag_setbb[(a<<2)+long_press_start_Pos]  = 1; //long_press_start = 1;
        0x08002510:    2001        .       MOVS     r0,#1
        0x08002512:    2100        .!      MOVS     r1,#0
        0x08002514:    eb010184    ....    ADD      r1,r1,r4,LSL #2
        0x08002518:    4a52        RJ      LDR      r2,[pc,#328] ; [0x8002664] = 0x22080000
        0x0800251a:    f8420021    B.!.    STR      r0,[r2,r1,LSL #2]
;;;127    				bt[a].clk_mode = 40;
        0x0800251e:    2028        (       MOVS     r0,#0x28
        0x08002520:    494e        NI      LDR      r1,[pc,#312] ; [0x800265c] = 0x20000a14
        0x08002522:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x08002526:    61c8        .a      STR      r0,[r1,#0x1c]
;;;128    				break;
        0x08002528:    e090        ..      B        0x800264c ; process_button + 556
;;;129    			}
;;;130    			case 40: {
;;;131    				if ( tmp_buttons & bt[a].button_pin ) { //released
        0x0800252a:    484c        LH      LDR      r0,[pc,#304] ; [0x800265c] = 0x20000a14
        0x0800252c:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x08002530:    6840        @h      LDR      r0,[r0,#4]
        0x08002532:    4028        (@      ANDS     r0,r0,r5
        0x08002534:    b128        (.      CBZ      r0,0x8002542 ; process_button + 290
;;;132    					bt[a].clk_mode = 50;
        0x08002536:    2032        2       MOVS     r0,#0x32
        0x08002538:    4948        HI      LDR      r1,[pc,#288] ; [0x800265c] = 0x20000a14
        0x0800253a:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x0800253e:    61c8        .a      STR      r0,[r1,#0x1c]
        0x08002540:    e007        ..      B        0x8002552 ; process_button + 306
;;;133    				} else {
;;;134    					bt[a].downTime = bt[a].buttons_mstick;
        0x08002542:    4846        FH      LDR      r0,[pc,#280] ; [0x800265c] = 0x20000a14
        0x08002544:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x08002548:    6900        .i      LDR      r0,[r0,#0x10]
        0x0800254a:    4944        DI      LDR      r1,[pc,#272] ; [0x800265c] = 0x20000a14
        0x0800254c:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x08002550:    6088        .`      STR      r0,[r1,#8]
;;;135    				}
;;;136    				break;
        0x08002552:    e07b        {.      B        0x800264c ; process_button + 556
;;;137    			}
;;;138    			case 50: {
;;;139    				bt[a].clk_mode = bt[a].downTime < CLICKTIME_MS ? 70 : 60;
        0x08002554:    4841        AH      LDR      r0,[pc,#260] ; [0x800265c] = 0x20000a14
        0x08002556:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x0800255a:    6880        .h      LDR      r0,[r0,#8]
        0x0800255c:    28fa        .(      CMP      r0,#0xfa
        0x0800255e:    d202        ..      BCS      0x8002566 ; process_button + 326
        0x08002560:    2046        F       MOVS     r0,#0x46
        0x08002562:    e001        ..      B        0x8002568 ; process_button + 328
        0x08002564:    e073        s.      B        0x800264e ; process_button + 558
        0x08002566:    203c        <       MOVS     r0,#0x3c
        0x08002568:    493c        <I      LDR      r1,[pc,#240] ; [0x800265c] = 0x20000a14
        0x0800256a:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x0800256e:    61c8        .a      STR      r0,[r1,#0x1c]
;;;140    				break;
        0x08002570:    e06c        l.      B        0x800264c ; process_button + 556
;;;141    			}
;;;142    			case 60: {//60 if tick count < 1000 generate CLICK event, else generate long_press_end event, go to 10 state
;;;143    				if(bt[a].downTime < HOLDTIME_MS) { //single CLICK event
        0x08002572:    483a        :H      LDR      r0,[pc,#232] ; [0x800265c] = 0x20000a14
        0x08002574:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x08002578:    6880        .h      LDR      r0,[r0,#8]
        0x0800257a:    f5b07ffa    ....    CMP      r0,#0x1f4
        0x0800257e:    d209        ..      BCS      0x8002594 ; process_button + 372
;;;144    					buttons_flag_setbb[(a<<2)+single_click_Pos]  = 1; //single_click = 1;
        0x08002580:    2001        .       MOVS     r0,#1
        0x08002582:    2102        .!      MOVS     r1,#2
        0x08002584:    eb010184    ....    ADD      r1,r1,r4,LSL #2
        0x08002588:    4a36        6J      LDR      r2,[pc,#216] ; [0x8002664] = 0x22080000
        0x0800258a:    f8420021    B.!.    STR      r0,[r2,r1,LSL #2]
        0x0800258e:    e007        ..      B        0x80025a0 ; process_button + 384
        0x08002590:    e015        ..      B        0x80025be ; process_button + 414
        0x08002592:    e034        4.      B        0x80025fe ; process_button + 478
;;;145    				} else { //  long_press_end event
;;;146    					buttons_flag_setbb[(a<<2)+long_press_end_Pos]  = 1; //long_press_end = 1;
        0x08002594:    2001        .       MOVS     r0,#1
        0x08002596:    eb000184    ....    ADD      r1,r0,r4,LSL #2
        0x0800259a:    4a32        2J      LDR      r2,[pc,#200] ; [0x8002664] = 0x22080000
        0x0800259c:    f8420021    B.!.    STR      r0,[r2,r1,LSL #2]
;;;147    				}
;;;148    				bt[a].downTime = bt[a].buttons_mstick = 0;
        0x080025a0:    2000        .       MOVS     r0,#0
        0x080025a2:    492e        .I      LDR      r1,[pc,#184] ; [0x800265c] = 0x20000a14
        0x080025a4:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x080025a8:    6108        .a      STR      r0,[r1,#0x10]
        0x080025aa:    492c        ,I      LDR      r1,[pc,#176] ; [0x800265c] = 0x20000a14
        0x080025ac:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x080025b0:    6088        .`      STR      r0,[r1,#8]
;;;149    				bt[a].clk_mode = 10;
        0x080025b2:    200a        .       MOVS     r0,#0xa
        0x080025b4:    4929        )I      LDR      r1,[pc,#164] ; [0x800265c] = 0x20000a14
        0x080025b6:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x080025ba:    61c8        .a      STR      r0,[r1,#0x1c]
;;;150    				break;
        0x080025bc:    e046        F.      B        0x800264c ; process_button + 556
;;;151    			}
;;;152    			case 70: { //70. тиков меньше 200, это может быть дабл-клик, ждем нажатия еще 100, если ничего идем в 60, если клик идем в 80
;;;153    				if ( tmp_buttons & bt[a].button_pin ) {
        0x080025be:    4827        'H      LDR      r0,[pc,#156] ; [0x800265c] = 0x20000a14
        0x080025c0:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x080025c4:    6840        @h      LDR      r0,[r0,#4]
        0x080025c6:    4028        (@      ANDS     r0,r0,r5
        0x080025c8:    b198        ..      CBZ      r0,0x80025f2 ; process_button + 466
;;;154    					bt[a].downTime = bt[a].buttons_mstick;
        0x080025ca:    4824        $H      LDR      r0,[pc,#144] ; [0x800265c] = 0x20000a14
        0x080025cc:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x080025d0:    6900        .i      LDR      r0,[r0,#0x10]
        0x080025d2:    4922        "I      LDR      r1,[pc,#136] ; [0x800265c] = 0x20000a14
        0x080025d4:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x080025d8:    6088        .`      STR      r0,[r1,#8]
;;;155    					if( bt[a].downTime > DOUBLECLICK_GAP_MS ) {
        0x080025da:    4820         H      LDR      r0,[pc,#128] ; [0x800265c] = 0x20000a14
        0x080025dc:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x080025e0:    6880        .h      LDR      r0,[r0,#8]
        0x080025e2:    2896        .(      CMP      r0,#0x96
        0x080025e4:    d90a        ..      BLS      0x80025fc ; process_button + 476
;;;156    						bt[a].clk_mode = 60;
        0x080025e6:    203c        <       MOVS     r0,#0x3c
        0x080025e8:    491c        .I      LDR      r1,[pc,#112] ; [0x800265c] = 0x20000a14
        0x080025ea:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x080025ee:    61c8        .a      STR      r0,[r1,#0x1c]
        0x080025f0:    e004        ..      B        0x80025fc ; process_button + 476
;;;157    					}
;;;158    				} else {
;;;159    					bt[a].clk_mode = 80;
        0x080025f2:    2050        P       MOVS     r0,#0x50
        0x080025f4:    4919        .I      LDR      r1,[pc,#100] ; [0x800265c] = 0x20000a14
        0x080025f6:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x080025fa:    61c8        .a      STR      r0,[r1,#0x1c]
;;;160    				}
;;;161    				break;
        0x080025fc:    e026        &.      B        0x800264c ; process_button + 556
;;;162    			}
;;;163    			case 80: {
;;;164    				if ( tmp_buttons & bt[a].button_pin ) { // released
        0x080025fe:    4817        .H      LDR      r0,[pc,#92] ; [0x800265c] = 0x20000a14
        0x08002600:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x08002604:    6840        @h      LDR      r0,[r0,#4]
        0x08002606:    4028        (@      ANDS     r0,r0,r5
        0x08002608:    b128        (.      CBZ      r0,0x8002616 ; process_button + 502
;;;165    					bt[a].clk_mode = 90;
        0x0800260a:    205a        Z       MOVS     r0,#0x5a
        0x0800260c:    4913        .I      LDR      r1,[pc,#76] ; [0x800265c] = 0x20000a14
        0x0800260e:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x08002612:    61c8        .a      STR      r0,[r1,#0x1c]
        0x08002614:    e007        ..      B        0x8002626 ; process_button + 518
;;;166    				} else {
;;;167    					bt[a].downTime = bt[a].buttons_mstick;
        0x08002616:    4811        .H      LDR      r0,[pc,#68] ; [0x800265c] = 0x20000a14
        0x08002618:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x0800261c:    6900        .i      LDR      r0,[r0,#0x10]
        0x0800261e:    490f        .I      LDR      r1,[pc,#60] ; [0x800265c] = 0x20000a14
        0x08002620:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x08002624:    6088        .`      STR      r0,[r1,#8]
;;;168    				}
;;;169    				break;
        0x08002626:    e011        ..      B        0x800264c ; process_button + 556
;;;170    			}
;;;171    			case 90: { // сигнал DOUBLE_CLICK
;;;172    				buttons_flag_setbb[(a<<2)+double_click_Pos]  = 1; //double_click = 1;
        0x08002628:    2001        .       MOVS     r0,#1
        0x0800262a:    2103        .!      MOVS     r1,#3
        0x0800262c:    eb010184    ....    ADD      r1,r1,r4,LSL #2
        0x08002630:    4a0c        .J      LDR      r2,[pc,#48] ; [0x8002664] = 0x22080000
        0x08002632:    f8420021    B.!.    STR      r0,[r2,r1,LSL #2]
;;;173    				bt[a].clk_mode = 10;
        0x08002636:    200a        .       MOVS     r0,#0xa
        0x08002638:    4908        .I      LDR      r1,[pc,#32] ; [0x800265c] = 0x20000a14
        0x0800263a:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x0800263e:    61c8        .a      STR      r0,[r1,#0x1c]
;;;174    				bt[a].buttons_mstick = 0;
        0x08002640:    2000        .       MOVS     r0,#0
        0x08002642:    4906        .I      LDR      r1,[pc,#24] ; [0x800265c] = 0x20000a14
        0x08002644:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x08002648:    6108        .a      STR      r0,[r1,#0x10]
;;;175    				break;
        0x0800264a:    bf00        ..      NOP      
        0x0800264c:    bf00        ..      NOP      
        0x0800264e:    1c64        d.      ADDS     r4,r4,#1
        0x08002650:    2c01        .,      CMP      r4,#1
        0x08002652:    f6ffaee8    ....    BLT      0x8002426 ; process_button + 6
;;;176    			}
;;;177    			}
;;;178    		}
;;;179    	}
;;;180    //	ubTransferComplete = 0;
;;;181    }
        0x08002656:    bf00        ..      NOP      
        0x08002658:    e70d        ..      B        0x8002476 ; process_button + 86
    $d
        0x0800265a:    0000        ..      DCW    0
        0x0800265c:    20000a14    ...     DCD    536873492
        0x08002660:    20000021    !..     DCD    536870945
        0x08002664:    22080000    ..."    DCD    570949632
    $t
    i.ssd1306_I2C_Init
    ssd1306_I2C_Init
;;; .\..\Src\ssd1306.c
;;;246    	uint32_t p = 250000;
        0x08002668:    4802        .H      LDR      r0,[pc,#8] ; [0x8002674] = 0x3d090
;;;247    	while(p>0)
        0x0800266a:    e000        ..      B        0x800266e ; ssd1306_I2C_Init + 6
        0x0800266c:    1e40        @.      SUBS     r0,r0,#1
        0x0800266e:    2800        .(      CMP      r0,#0
        0x08002670:    d1fc        ..      BNE      0x800266c ; ssd1306_I2C_Init + 4
;;;248    		p--;
;;;249    	//HAL_I2C_DeInit(hi2c_screen);
;;;250    	//p = 250000;
;;;251    	//while(p>0)
;;;252    	//	p--;
;;;253    	//MX_I2C1_Init();
;;;254    }
        0x08002672:    4770        pG      BX       lr
    $d
        0x08002674:    0003d090    ....    DCD    250000
    $t
    i.ssd1306_I2C_Write
    ssd1306_I2C_Write
;;;255    /*
;;;256    void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
;;;257    	uint8_t dt[count + 1];
;;;258    	dt[0] = reg;
;;;259    	uint8_t i;
;;;260    	for(i = 1; i <= count; i++)
;;;261    		dt[i] = data[i-1];
;;;262    //	Handle_I2C_Master(hi2c_screen, address, dt, count, 10);
;;;263    	// haltodo HAL_I2C_Master_Transmit(hi2c_screen, address, dt, count, 10);
;;;264    }
;;;265    
;;;266    
;;;267    void ssd1306_I2C_WriteMulti_DMA(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {	
;;;268    	//haltodo HAL_I2C_Master_Transmit(hi2c_screen, address, &reg, 1, 100);
;;;269    	//haltodo HAL_I2C_Master_Transmit_DMA(hi2c_screen, address, data, count);
;;;270    }
;;;271    */
;;;272    
;;;273    void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
        0x08002678:    b57c        |.      PUSH     {r2-r6,lr}
        0x0800267a:    4604        .F      MOV      r4,r0
        0x0800267c:    460e        .F      MOV      r6,r1
        0x0800267e:    4615        .F      MOV      r5,r2
;;;274    	uint8_t dt[2] = {reg, data};
        0x08002680:    f88d6004    ...`    STRB     r6,[sp,#4]
        0x08002684:    f88d5005    ...P    STRB     r5,[sp,#5]
;;;275    //	dt[0] = reg;
;;;276    //	dt[1] = data;
;;;277    	Handle_I2C_MasterDMA_IT(hi2c_screen, address, dt, 2, 10);
        0x08002688:    200a        .       MOVS     r0,#0xa
        0x0800268a:    2302        .#      MOVS     r3,#2
        0x0800268c:    aa01        ..      ADD      r2,sp,#4
        0x0800268e:    4621        !F      MOV      r1,r4
        0x08002690:    9000        ..      STR      r0,[sp,#0]
        0x08002692:    4802        .H      LDR      r0,[pc,#8] ; [0x800269c] = 0x20000004
        0x08002694:    6800        .h      LDR      r0,[r0,#0]
        0x08002696:    f7fdfe1b    ....    BL       Handle_I2C_MasterDMA_IT ; 0x80002d0
;;;278    //	HAL_I2C_Master_Transmit(hi2c_screen, address, dt, 2, 10);
;;;279    }
        0x0800269a:    bd7c        |.      POP      {r2-r6,pc}
    $d
        0x0800269c:    20000004    ...     DCD    536870916
    $t
    i.update_screen
    update_screen
;;; .\..\Src\screen.c
;;;28     void update_screen(void){
        0x080026a0:    b53e        >.      PUSH     {r1-r5,lr}
;;;29     	if(ubTransferComplete == 0) {
        0x080026a2:    484a        JH      LDR      r0,[pc,#296] ; [0x80027cc] = 0x20000027
        0x080026a4:    7800        .x      LDRB     r0,[r0,#0]
        0x080026a6:    b900        ..      CBNZ     r0,0x80026aa ; update_screen + 10
        0x080026a8:    bd3e        >.      POP      {r1-r5,pc}
;;;30     		return;
;;;31     	}
;;;32     	SSD1306_Fill(SSD1306_COLOR_BLACK);
        0x080026aa:    2000        .       MOVS     r0,#0
        0x080026ac:    f7fff800    ....    BL       SSD1306_Fill ; 0x80016b0
;;;33     // first line
;;;34     	SSD1306_GotoXY(0, 16*0);
        0x080026b0:    2100        .!      MOVS     r1,#0
        0x080026b2:    4608        .F      MOV      r0,r1
        0x080026b4:    f7fff80c    ....    BL       SSD1306_GotoXY ; 0x80016d0
;;;35     	feed_direction == feed_direction_left ? SSD1306_Putc2big(left_arrow, &consolas_18ptFontInfo) : SSD1306_Putc2big(right_arrow, &consolas_18ptFontInfo);
        0x080026b8:    4845        EH      LDR      r0,[pc,#276] ; [0x80027d0] = 0x2000015d
        0x080026ba:    7800        .x      LDRB     r0,[r0,#0]
        0x080026bc:    b920         .      CBNZ     r0,0x80026c8 ; update_screen + 40
        0x080026be:    4945        EI      LDR      r1,[pc,#276] ; [0x80027d4] = 0x80037a8
        0x080026c0:    2001        .       MOVS     r0,#1
        0x080026c2:    f7fff8b3    ....    BL       SSD1306_Putc2big ; 0x800182c
        0x080026c6:    e003        ..      B        0x80026d0 ; update_screen + 48
        0x080026c8:    4942        BI      LDR      r1,[pc,#264] ; [0x80027d4] = 0x80037a8
        0x080026ca:    2002        .       MOVS     r0,#2
        0x080026cc:    f7fff8ae    ....    BL       SSD1306_Putc2big ; 0x800182c
;;;36     	SSD1306_Puts2(Thread_Info[Menu_Step].Unit, &microsoftSansSerif_12ptFontInfo, SSD1306_COLOR_WHITE);
        0x080026d0:    4941        AI      LDR      r1,[pc,#260] ; [0x80027d8] = 0x20000170
        0x080026d2:    4a42        BJ      LDR      r2,[pc,#264] ; [0x80027dc] = 0x20000590
        0x080026d4:    7812        .x      LDRB     r2,[r2,#0]
        0x080026d6:    eb011142    ..B.    ADD      r1,r1,r2,LSL #5
        0x080026da:    f101000b    ....    ADD      r0,r1,#0xb
        0x080026de:    2201        ."      MOVS     r2,#1
        0x080026e0:    493f        ?I      LDR      r1,[pc,#252] ; [0x80027e0] = 0x8002ea4
        0x080026e2:    f7fff933    ..3.    BL       SSD1306_Puts2 ; 0x800194c
;;;37     	SSD1306_Puts2(Thread_Info[Menu_Step].infeed_inch, &microsoftSansSerif_12ptFontInfo, SSD1306_COLOR_WHITE); // infeed recommendation
        0x080026e6:    493c        <I      LDR      r1,[pc,#240] ; [0x80027d8] = 0x20000170
        0x080026e8:    4a3c        <J      LDR      r2,[pc,#240] ; [0x80027dc] = 0x20000590
        0x080026ea:    7812        .x      LDRB     r2,[r2,#0]
        0x080026ec:    eb011142    ..B.    ADD      r1,r1,r2,LSL #5
        0x080026f0:    f1010018    ....    ADD      r0,r1,#0x18
        0x080026f4:    2201        ."      MOVS     r2,#1
        0x080026f6:    493a        :I      LDR      r1,[pc,#232] ; [0x80027e0] = 0x8002ea4
        0x080026f8:    f7fff928    ..(.    BL       SSD1306_Puts2 ; 0x800194c
;;;38     
;;;39     	char text_buffer[11];
;;;40     
;;;41     	SSD1306_GotoXY(SSD1306_WIDTH - 16, 0);
        0x080026fc:    2100        .!      MOVS     r1,#0
        0x080026fe:    2070        p       MOVS     r0,#0x70
        0x08002700:    f7feffe6    ....    BL       SSD1306_GotoXY ; 0x80016d0
;;;42     //	SSD1306_Puts2(utoa_builtin_div_1(z_axis.mode, text_buffer), &microsoftSansSerif_12ptFontInfo, SSD1306_COLOR_WHITE); // DKA mode
;;;43     
;;;44     	SSD1306_GotoXY(SSD1306_WIDTH - 60, 16);
        0x08002704:    2110        .!      MOVS     r1,#0x10
        0x08002706:    2044        D       MOVS     r0,#0x44
        0x08002708:    f7feffe2    ....    BL       SSD1306_GotoXY ; 0x80016d0
;;;45     	SSD1306_Puts2(utoa_builtin_div_1(z_axis.current_pos, text_buffer), &microsoftSansSerif_12ptFontInfo, SSD1306_COLOR_WHITE); // DKA mode
        0x0800270c:    4935        5I      LDR      r1,[pc,#212] ; [0x80027e4] = 0x20000a38
        0x0800270e:    6808        .h      LDR      r0,[r1,#0]
        0x08002710:    4669        iF      MOV      r1,sp
        0x08002712:    f000f87b    ..{.    BL       utoa_builtin_div_1 ; 0x800280c
        0x08002716:    4604        .F      MOV      r4,r0
        0x08002718:    2201        ."      MOVS     r2,#1
        0x0800271a:    4931        1I      LDR      r1,[pc,#196] ; [0x80027e0] = 0x8002ea4
        0x0800271c:    f7fff916    ....    BL       SSD1306_Puts2 ; 0x800194c
;;;46     
;;;47     //	SSD1306_GotoXY(SSD1306_WIDTH - 60, 32);
;;;48     //	SSD1306_Puts2(utoa_builtin_div_1(z_axis.ramp_step, text_buffer), &microsoftSansSerif_12ptFontInfo, SSD1306_COLOR_WHITE); // DKA mode
;;;49     	if(i2c_device_logging.sample[i2c_device_logging.index].button_c > 0){
        0x08002720:    4831        1H      LDR      r0,[pc,#196] ; [0x80027e8] = 0x2000099a
        0x08002722:    7800        .x      LDRB     r0,[r0,#0]
        0x08002724:    eb000140    ..@.    ADD      r1,r0,r0,LSL #1
        0x08002728:    482f        /H      LDR      r0,[pc,#188] ; [0x80027e8] = 0x2000099a
        0x0800272a:    1c80        ..      ADDS     r0,r0,#2
        0x0800272c:    eb000081    ....    ADD      r0,r0,r1,LSL #2
        0x08002730:    7a80        .z      LDRB     r0,[r0,#0xa]
        0x08002732:    2800        .(      CMP      r0,#0
        0x08002734:    dd14        ..      BLE      0x8002760 ; update_screen + 192
;;;50     		SSD1306_GotoXY(SSD1306_WIDTH - 60, 32);
        0x08002736:    2120         !      MOVS     r1,#0x20
        0x08002738:    2044        D       MOVS     r0,#0x44
        0x0800273a:    f7feffc9    ....    BL       SSD1306_GotoXY ; 0x80016d0
;;;51     		SSD1306_Puts2(utoa_builtin_div_1(i2c_device_logging.sample[i2c_device_logging.index].button_c, text_buffer), &microsoftSansSerif_12ptFontInfo, SSD1306_COLOR_WHITE); // DKA mode
        0x0800273e:    492a        *I      LDR      r1,[pc,#168] ; [0x80027e8] = 0x2000099a
        0x08002740:    7809        .x      LDRB     r1,[r1,#0]
        0x08002742:    eb010241    ..A.    ADD      r2,r1,r1,LSL #1
        0x08002746:    4928        (I      LDR      r1,[pc,#160] ; [0x80027e8] = 0x2000099a
        0x08002748:    1c89        ..      ADDS     r1,r1,#2
        0x0800274a:    eb010182    ....    ADD      r1,r1,r2,LSL #2
        0x0800274e:    7a88        .z      LDRB     r0,[r1,#0xa]
        0x08002750:    4669        iF      MOV      r1,sp
        0x08002752:    f000f85b    ..[.    BL       utoa_builtin_div_1 ; 0x800280c
        0x08002756:    4604        .F      MOV      r4,r0
        0x08002758:    2201        ."      MOVS     r2,#1
        0x0800275a:    4921        !I      LDR      r1,[pc,#132] ; [0x80027e0] = 0x8002ea4
        0x0800275c:    f7fff8f6    ....    BL       SSD1306_Puts2 ; 0x800194c
;;;52     	}
;;;53     
;;;54     // second line
;;;55     
;;;56     	SSD1306_GotoXY(0, 16*1); //Устанавливаем курсор в позицию 0;16. Сначала по горизонтали, потом вертикали.
        0x08002760:    2110        .!      MOVS     r1,#0x10
        0x08002762:    2000        .       MOVS     r0,#0
        0x08002764:    f7feffb4    ....    BL       SSD1306_GotoXY ; 0x80016d0
;;;57     	SSD1306_Puts2(Thread_Info[Menu_Step].Text, &microsoftSansSerif_20ptFontInfo, SSD1306_COLOR_WHITE);
        0x08002768:    491b        .I      LDR      r1,[pc,#108] ; [0x80027d8] = 0x20000170
        0x0800276a:    4a1c        .J      LDR      r2,[pc,#112] ; [0x80027dc] = 0x20000590
        0x0800276c:    7812        .x      LDRB     r2,[r2,#0]
        0x0800276e:    eb011142    ..B.    ADD      r1,r1,r2,LSL #5
        0x08002772:    1d48        H.      ADDS     r0,r1,#5
        0x08002774:    2201        ."      MOVS     r2,#1
        0x08002776:    491d        .I      LDR      r1,[pc,#116] ; [0x80027ec] = 0x8003a48
        0x08002778:    f7fff8e8    ....    BL       SSD1306_Puts2 ; 0x800194c
;;;58     	//			SSD1306_GotoXY(50, 16*1);
;;;59     	//			SSD1306_Puts2(Thread_Info[Menu_Step].infeed_mm, &microsoftSansSerif_12ptFontInfo, SSD1306_COLOR_WHITE);
;;;60     	//			SSD1306_GotoXY(50, 16*2);
;;;61     	//			SSD1306_Puts2(Thread_Info[Menu_Step].infeed_inch, &microsoftSansSerif_12ptFontInfo, SSD1306_COLOR_WHITE);
;;;62     
;;;63     	SSD1306_GotoXY(0, 16*3);
        0x0800277c:    2130        0!      MOVS     r1,#0x30
        0x0800277e:    2000        .       MOVS     r0,#0
        0x08002780:    f7feffa6    ....    BL       SSD1306_GotoXY ; 0x80016d0
;;;64     	switch(Thread_Info[Menu_Step].infeed_strategy) {
        0x08002784:    4814        .H      LDR      r0,[pc,#80] ; [0x80027d8] = 0x20000170
        0x08002786:    4915        .I      LDR      r1,[pc,#84] ; [0x80027dc] = 0x20000590
        0x08002788:    7809        .x      LDRB     r1,[r1,#0]
        0x0800278a:    eb001041    ..A.    ADD      r0,r0,r1,LSL #5
        0x0800278e:    7f80        ..      LDRB     r0,[r0,#0x1e]
        0x08002790:    b120         .      CBZ      r0,0x800279c ; update_screen + 252
        0x08002792:    2801        .(      CMP      r0,#1
        0x08002794:    d008        ..      BEQ      0x80027a8 ; update_screen + 264
        0x08002796:    2802        .(      CMP      r0,#2
        0x08002798:    d112        ..      BNE      0x80027c0 ; update_screen + 288
        0x0800279a:    e00b        ..      B        0x80027b4 ; update_screen + 276
;;;65     	case 0:
;;;66     		SSD1306_Puts2("radial", &microsoftSansSerif_12ptFontInfo, SSD1306_COLOR_WHITE);
        0x0800279c:    2201        ."      MOVS     r2,#1
        0x0800279e:    4910        .I      LDR      r1,[pc,#64] ; [0x80027e0] = 0x8002ea4
        0x080027a0:    a013        ..      ADR      r0,{pc}+0x50 ; 0x80027f0
        0x080027a2:    f7fff8d3    ....    BL       SSD1306_Puts2 ; 0x800194c
;;;67     		break;
        0x080027a6:    e00b        ..      B        0x80027c0 ; update_screen + 288
;;;68     	case 1:
;;;69     		SSD1306_Puts2("flank", &microsoftSansSerif_12ptFontInfo, SSD1306_COLOR_WHITE);
        0x080027a8:    2201        ."      MOVS     r2,#1
        0x080027aa:    490d        .I      LDR      r1,[pc,#52] ; [0x80027e0] = 0x8002ea4
        0x080027ac:    a012        ..      ADR      r0,{pc}+0x4c ; 0x80027f8
        0x080027ae:    f7fff8cd    ....    BL       SSD1306_Puts2 ; 0x800194c
;;;70     		break;
        0x080027b2:    e005        ..      B        0x80027c0 ; update_screen + 288
;;;71     	case 2:
;;;72     		SSD1306_Puts2("incremental", &microsoftSansSerif_12ptFontInfo, SSD1306_COLOR_WHITE);
        0x080027b4:    2201        ."      MOVS     r2,#1
        0x080027b6:    490a        .I      LDR      r1,[pc,#40] ; [0x80027e0] = 0x8002ea4
        0x080027b8:    a011        ..      ADR      r0,{pc}+0x48 ; 0x8002800
        0x080027ba:    f7fff8c7    ....    BL       SSD1306_Puts2 ; 0x800194c
;;;73     		break;
        0x080027be:    bf00        ..      NOP      
        0x080027c0:    bf00        ..      NOP      
;;;74     	}
;;;75     
;;;76     
;;;77     /*
;;;78     	if(auto_mode == true) {
;;;79     		SSD1306_GotoXY(SSD1306_WIDTH - 32, 0);
;;;80     		SSD1306_Putc2big('A', &microsoftSansSerif_12ptFontInfo);
;;;81     //  SSD1306_Putc2big(auto_symbol, &consolas_18ptFontInfo);
;;;82     	}
;;;83     */
;;;84     //#if !defined ( _SIMU )
;;;85     	SSD1306_UpdateScreen();
        0x080027c2:    f7fff8dd    ....    BL       SSD1306_UpdateScreen ; 0x8001980
;;;86     //	return 0;
;;;87     //#endif
;;;88     }
        0x080027c6:    bf00        ..      NOP      
        0x080027c8:    e76e        n.      B        0x80026a8 ; update_screen + 8
    $d
        0x080027ca:    0000        ..      DCW    0
        0x080027cc:    20000027    '..     DCD    536870951
        0x080027d0:    2000015d    ]..     DCD    536871261
        0x080027d4:    080037a8    .7..    DCD    134231976
        0x080027d8:    20000170    p..     DCD    536871280
        0x080027dc:    20000590    ...     DCD    536872336
        0x080027e0:    08002ea4    ....    DCD    134229668
        0x080027e4:    20000a38    8..     DCD    536873528
        0x080027e8:    2000099a    ...     DCD    536873370
        0x080027ec:    08003a48    H:..    DCD    134232648
        0x080027f0:    69646172    radi    DCD    1768186226
        0x080027f4:    00006c61    al..    DCD    27745
        0x080027f8:    6e616c66    flan    DCD    1851878502
        0x080027fc:    0000006b    k...    DCD    107
        0x08002800:    72636e69    incr    DCD    1919118953
        0x08002804:    6e656d65    emen    DCD    1852140901
        0x08002808:    006c6174    tal.    DCD    7102836
    $t
    i.utoa_builtin_div_1
    utoa_builtin_div_1
;;; .\..\Src\screen.c (16)
        0x0800280c:    4602        .F      MOV      r2,r0
;;;17     	buffer += 11;
        0x0800280e:    310b        .1      ADDS     r1,r1,#0xb
;;;18     // 11 байт достаточно для десятичного представления 32-х байтного числа и завершающего нуля
;;;19     	*--buffer = 0;
        0x08002810:    2300        .#      MOVS     r3,#0
        0x08002812:    1e48        H.      SUBS     r0,r1,#1
        0x08002814:    4601        .F      MOV      r1,r0
        0x08002816:    7003        .p      STRB     r3,[r0,#0]
;;;20     	do {
        0x08002818:    bf00        ..      NOP      
;;;21     		*--buffer = value % 10 + '0';
        0x0800281a:    200a        .       MOVS     r0,#0xa
        0x0800281c:    fbb2f3f0    ....    UDIV     r3,r2,r0
        0x08002820:    fb002013    ...     MLS      r0,r0,r3,r2
        0x08002824:    3030        00      ADDS     r0,r0,#0x30
        0x08002826:    1e4b        K.      SUBS     r3,r1,#1
        0x08002828:    4619        .F      MOV      r1,r3
        0x0800282a:    7018        .p      STRB     r0,[r3,#0]
;;;22     		value /= 10;
        0x0800282c:    200a        .       MOVS     r0,#0xa
        0x0800282e:    fbb2f2f0    ....    UDIV     r2,r2,r0
;;;23     	} while (value != 0);
        0x08002832:    2a00        .*      CMP      r2,#0
        0x08002834:    d1f1        ..      BNE      0x800281a ; utoa_builtin_div_1 + 14
;;;24     	return buffer;
        0x08002836:    4608        .F      MOV      r0,r1
;;;25     }
        0x08002838:    4770        pG      BX       lr
        0x0800283a:    0000        ..      MOVS     r0,r0
    i.z_axis_at_move_end
    z_axis_at_move_end
;;; .\..\Src\fsm.c
;;;202    	disable_encoder_ticks(); //reset interrupt for encoder ticks, only tacho
        0x0800283c:    2100        .!      MOVS     r1,#0
        0x0800283e:    4a07        .J      LDR      r2,[pc,#28] ; [0x800285c] = 0x42010180
        0x08002840:    6011        .`      STR      r1,[r2,#0]
;;;203    	//      MOTOR_Z_Disable(); //disable motor later on next tacho event (or after some ticks count?) to completely process last step
;;;204    //	if(auto_mode == true)    auto_mode_delay = auto_mode_delay_ms; // reengage auto mode
;;;205    	feed_direction = !feed_direction; //change feed direction
        0x08002842:    4907        .I      LDR      r1,[pc,#28] ; [0x8002860] = 0x2000015d
        0x08002844:    7809        .x      LDRB     r1,[r1,#0]
        0x08002846:    f0810101    ....    EOR      r1,r1,#1
        0x0800284a:    4a05        .J      LDR      r2,[pc,#20] ; [0x8002860] = 0x2000015d
        0x0800284c:    7011        .p      STRB     r1,[r2,#0]
;;;206    	menu_changed = 1; //update menu
        0x0800284e:    2101        .!      MOVS     r1,#1
        0x08002850:    4a04        .J      LDR      r2,[pc,#16] ; [0x8002864] = 0x20000160
        0x08002852:    6011        .`      STR      r1,[r2,#0]
;;;207    	s->function = do_fsm_wait_sclick;
        0x08002854:    4904        .I      LDR      r1,[pc,#16] ; [0x8002868] = 0x8002259
        0x08002856:    6001        .`      STR      r1,[r0,#0]
;;;208    //	z_axis.mode = fsm_wait_sclick; // dummy mode
;;;209    }
        0x08002858:    4770        pG      BX       lr
    $d
        0x0800285a:    0000        ..      DCW    0
        0x0800285c:    42010180    ...B    DCD    1107362176
        0x08002860:    2000015d    ]..     DCD    536871261
        0x08002864:    20000160    `..     DCD    536871264
        0x08002868:    08002259    Y"..    DCD    134226521
    $t
    i.z_axis_move2
    z_axis_move2
;;;210    
;;;211    
;;;212    
;;;213    
;;;214    void do_fsm_wait_tacho(state_t* s)
;;;215    {
;;;216    	if(s->f_tacho) { // if tacho event
;;;217    		s->function = do_fsm_first_cut_ramp_up;
;;;218    //		infeed_step = 0; todo
;;;219    		LED_GPIO_Port->BRR = LED_Pin; //led on
;;;220    		TIM4->ARR = 1; // start stepper motor ramp up procedure immediately after tacho event
;;;221    		TIM4->EGR |= TIM_EGR_UG;
;;;222    		TIM4->CNT = 0;
;;;223    		enable_encoder_ticks(); // enable thread specific interrupt controlled by Q824set
;;;224    	}
;;;225    }
;;;226    
;;;227    void do_fsm_menu(state_t* s)
;;;228    {
;;;229    	uint8_t level = Thread_Info[Menu_Step].level;
;;;230    //	buttons_flag_set = long_press_start_Msk;
;;;231    	switch(buttons_flag_set) {
;;;232    	case single_click_Msk3: {
;;;233    		feed_direction = feed_direction == feed_direction_left ? feed_direction_right : feed_direction_left;
;;;234    		menu_changed = 1;
;;;235    		break;
;;;236    	}
;;;237    	case single_click_Msk2: {
;;;238    		feed_direction = feed_direction == feed_direction_left ? feed_direction_right : feed_direction_left;
;;;239    		menu_changed = 1;
;;;240    		break;
;;;241    	}
;;;242    	case single_click_Msk: {
;;;243    		if(z_axis.end_pos != 0) {
;;;244    			// first pass of thread cut was complete, so just use single click
;;;245    			//	to switch between modes to process all other cuts
;;;246    			MOTOR_Z_Enable(); // time to wakeup motor from sleep is quite high(1.7ms), so enable it as soon as possible
;;;247    			LL_mDelay(17);
;;;248    //			for(unsigned int i=0; i<(72*1700/16); i++); // wait 1700us delay to wakeup motor driver
;;;249    //			s->function = z_axis.current_pos > 0 ? do_fsm_sclick_event : do_fsm_main_cut_wait_tacho;
;;;250    			
;;;251    			do_fsm_move_start(s);
;;;252    //			s->function = do_fsm_move_start;
;;;253    //			LL_TIM_EnableCounter(TIM2);			
;;;254    //			LL_TIM_GenerateEvent_UPDATE(TIM2);
;;;255    		} else { // controller in initial state, scroll menu
;;;256    			s->function = do_fsm_menu_lps;
;;;257    			for (int a = Menu_Step+1; a<Menu_size; a++) {
;;;258    				if(Thread_Info[a].level == level) {
;;;259    					Menu_Step = a;
;;;260    					menu_changed = 1;
;;;261    					break;
;;;262    				}
;;;263    			}
;;;264    			if(menu_changed != 1) {
;;;265    				for (int a = 0; a<Menu_Step; a++) {
;;;266    					if(Thread_Info[a].level == level) {
;;;267    						Menu_Step = a;
;;;268    						menu_changed = 1;
;;;269    						break;
;;;270    					}
;;;271    				}
;;;272    			}
;;;273    		}
;;;274    		break;
;;;275    	}
;;;276    	case double_click_Msk: {
;;;277    		feed_direction = feed_direction == feed_direction_left ? feed_direction_right : feed_direction_left;
;;;278    		menu_changed = 1;
;;;279    		break;
;;;280    	}
;;;281    	case (long_press_start_Msk | long_press_start_Msk2): { // two buttons long pressed same time
;;;282    		// todo check if it work
;;;283    		break;
;;;284    	}
;;;285    	case long_press_start_Msk: {
;;;286    		if(s->function == do_fsm_menu_lps){
;;;287    			if(Thread_Info[Menu_Step].Q824 != 0) { // long press detected, start new thread from current position
;;;288    				//mode 20:
;;;289    //				disable_encoder_ticks(); //reset interrupt for encoder ticks, only tacho
;;;290    //				LL_TIM_DisableIT_UPDATE(TIM4);
;;;291    //				LL_TIM_GenerateEvent_UPDATE(TIM4); 
;;;292    //				TIM4->SR = 0;
;;;293    
;;;294    				MOTOR_Z_Enable(); // time to wakeup motor from sleep is quite high(1.7ms), so enable it as soon as possible
;;;295    				s->main_feed_direction = feed_direction; // save main feed direction, where cut is on
;;;296    				s->sync = true;
;;;297    				if( feed_direction == feed_direction_right )
;;;298    					MOTOR_Z_Forward();
;;;299    				else
;;;300    					MOTOR_Z_Reverse();
;;;301    				
;;;302    //				for(unsigned int i=0; i<(72*1700/16); i++); // wait 1700us delay to wakeup motor driver todo dumb method
;;;303    				LL_mDelay(17);
;;;304    
;;;305    				z_axis.Q824set = Thread_Info[Menu_Step].Q824;
;;;306    				z_axis.end_pos = z_axis.current_pos = 0;
;;;307    
;;;308    				const uint64_t upl = (uint64_t)3600 << 48; //calculate some constants for prolong mode
;;;309    				z_axis.prolong_addSteps = upl / (fixedptud)z_axis.Q824set;
;;;310    
;;;311    				s->function = do_fsm_move_start;//do_fsm_wait_tacho; // go straight to 24 to wait tacho
;;;312    //do_fsm_move_start
;;;313    			} else { // goto submenu
;;;314    				for (int a = 0; a<Menu_size; a++) {
;;;315    					if(Thread_Info[a].level == Thread_Info[Menu_Step].submenu) {
;;;316    						Menu_Step = a;
;;;317    						menu_changed = 1;
;;;318    						break;
;;;319    					}
;;;320    				}
;;;321    			}
;;;322    		} else if(s->function == do_fsm_main_cut_back){
;;;323    			s->function = do_fsm_main_cut_back_prolong; // go to 48 mode to add threads until long_press end
;;;324    		}
;;;325    		break;
;;;326    	}
;;;327    	case long_press_end_Msk: {
;;;328    		s->function = do_long_press_end_callback;
;;;329    		break;
;;;330    /*
;;;331    		if(s->function == do_fsm_first_cut_main_part){
;;;332    			s->function = do_fsm_first_cut_lpe;
;;;333    			break;
;;;334    		}
;;;335    		if(s->function == do_fsm_main_cut_back_prolong){ // end of prolonged mode
;;;336    			s->function = do_fsm_main_cut_back;
;;;337    			break;
;;;338    		}
;;;339    */
;;;340    		/*
;;;341    		switch(z_axis.mode) {
;;;342    		case fsm_first_cut_main_part: {
;;;343    //																					if(auto_mode == true){
;;;344    //																									auto_mode_delay = auto_mode_delay_ms; //engage countdown timer to auto generate click event
;;;345    //																					}
;;;346    //																					Q824count = 0;
;;;347    			s->function = do_fsm_first_cut_lpe;
;;;348    			break;
;;;349    		}
;;;350    		case fsm_main_cut_back_prolong: { // end of prolonged mode
;;;351    			s->function = do_fsm_main_cut_back;
;;;352    			break;
;;;353    		}
;;;354    		}
;;;355    		*/
;;;356    		break;
;;;357    	}
;;;358    	}
;;;359    }
;;;360    
;;;361    void do_fsm_menu_lps(state_t* s)
;;;362    {
;;;363    }
;;;364    
;;;365    
;;;366    
;;;367    void do_fsm_first_cut_lps(state_t* s)  // not used?
;;;368    {
;;;369    	
;;;370    	disable_encoder_ticks(); //reset interrupt for encoder ticks, only tacho
;;;371    	MOTOR_Z_Enable();
;;;372    	if(feed_direction)
;;;373    		MOTOR_Z_Forward();
;;;374    	else
;;;375    		MOTOR_Z_Reverse();
;;;376    	s->function = do_fsm_wait_tacho; //intermediate state to wait tacho pulse.
;;;377    }
;;;378    
;;;379    
;;;380    
;;;381    
;;;382    
;;;383    
;;;384    void do_fsm_first_cut_ramp_up(state_t* s)          // direct movement: first pass, thread recording: ramp up: accel by ramp map
;;;385    {
;;;386    	MOTOR_Z_SetPulse();
;;;387    	z_axis.current_pos++;
;;;388    	if(z_axis_ramp_up()) {
;;;389    		s->function = do_fsm_first_cut_main_part;
;;;390    		LED_GPIO_Port->BSRR = LED_Pin; //led off
;;;391    	}
;;;392    }
;;;393    
;;;394    
;;;395    void do_fsm_first_cut_main_part(state_t* s)          // direct movement: first pass, thread recording: main part
;;;396    {
;;;397    	MOTOR_Z_SetPulse();
;;;398    	z_axis.current_pos++;
;;;399    	z_axis_move();
;;;400    }
;;;401    
;;;402    
;;;403    void do_fsm_first_cut_lpe(state_t* s)          // direct movement: first pass, thread recording: post-main part
;;;404    {
;;;405    	// для 1/2 микрошага нужно что бы общее количество шагов в цикле резьбы было кратно 2,(для 1/4 кратно 4 и тп).
;;;406    	// это нужно для того что бы в конце шаговый мотор остановился на одном из двухсот устойчивых шагов,
;;;407    	// не перескакивая на соседние шаги при потере питания.
;;;408    	// поэтому проверяем общее количество на четность(0й бит), если нечетное число делаем еще один шаг,
;;;409    	// иначе начинаем замедляться
;;;410    	MOTOR_Z_SetPulse();
;;;411    	z_axis.current_pos++;
;;;412    	uint32_t all_count = z_axis.ramp_step + z_axis.current_pos - 1;
;;;413    	uint32_t masked_count = all_count & ~(step_divider - 1);
;;;414    	if(masked_count != all_count) {
;;;415    		z_axis_move();
;;;416    	} else {
;;;417    		if(z_axis_ramp_down()) {
;;;418    			z_axis.end_pos = z_axis.current_pos;
;;;419    			z_axis_at_move_end(s);
;;;420    		} else {
;;;421    			s->function = do_fsm_first_cut_ramp_down;
;;;422    		}
;;;423    	}
;;;424    }
;;;425    
;;;426    
;;;427    
;;;428    
;;;429    
;;;430    
;;;431    void do_fsm_first_cut_ramp_down(state_t* s)          // direct movement: ramp down: deccel part + stop
;;;432    {
;;;433    	MOTOR_Z_SetPulse();
;;;434    	z_axis.current_pos++;
;;;435    	if(z_axis_ramp_down()) {
;;;436    		z_axis.end_pos = z_axis.current_pos;
;;;437    		z_axis_at_move_end(s);
;;;438    	}
;;;439    }
;;;440    
;;;441    
;;;442    
;;;443    void do_fsm_sclick_event(state_t* s)   // reverse movement: set direction for motor
;;;444    {
;;;445    	if(feed_direction)
;;;446    		MOTOR_Z_Forward();
;;;447    	else
;;;448    		MOTOR_Z_Reverse();
;;;449    	enable_encoder_ticks(); // enable thread specific interrupt controlled by Q824set
;;;450    	s->function = do_fsm_main_cut_back_ramp_up;
;;;451    }
;;;452    
;;;453    
;;;454    
;;;455    
;;;456    
;;;457    void do_fsm_main_cut_back_ramp_up(state_t* s)          // reverse movement: ramp up: accel part
;;;458    {
;;;459    	MOTOR_Z_SetPulse();
;;;460    	--z_axis.current_pos;
;;;461    	if(z_axis_ramp_up())
;;;462    		s->function = do_fsm_main_cut_back;
;;;463    }
;;;464    
;;;465    
;;;466    
;;;467    
;;;468    
;;;469    
;;;470    
;;;471    void do_fsm_main_cut_back(state_t* s)          // reverse movement: main part
;;;472    {
;;;473    	MOTOR_Z_SetPulse();
;;;474    	if( --z_axis.current_pos > z_axis.ramp_step ) {
;;;475    	} else {
;;;476    		s->function = do_fsm_main_cut_back_ramp_down;
;;;477    	}
;;;478    }
;;;479    
;;;480    
;;;481    
;;;482    void do_fsm_main_cut_back_ramp_down(state_t* s)   // reverse movement: ramp down: deccel part + stop
;;;483    {
;;;484    	if (z_axis.current_pos > 0) {
;;;485    		MOTOR_Z_SetPulse();
;;;486    		--z_axis.current_pos;
;;;487    	}
;;;488    	if(z_axis_ramp_down()) {
;;;489    		z_axis_at_move_end(s);
;;;490    	}
;;;491    }
;;;492    
;;;493    
;;;494    
;;;495    
;;;496    
;;;497    
;;;498    
;;;499    
;;;500    void do_fsm_main_cut_back_prolong(state_t* s)   // reverse movement: main part with prolong activated. todo split it with 46 mode?
;;;501    {
;;;502    	MOTOR_Z_SetPulse();
;;;503    	--z_axis.current_pos;
;;;504    	if(z_axis.current_pos == z_axis.ramp_step) { // we reach end of main path and have long_pressed key, so just add additional thread full turn to shift initial start point
;;;505    		z_axis.prolong_fract += z_axis.prolong_addSteps; // fract part from prev step
;;;506    		uint32_t prolong_fixpart = z_axis.prolong_fract >> 24;
;;;507    		z_axis.current_pos += prolong_fixpart; // add fixed part
;;;508    		z_axis.end_pos += prolong_fixpart;
;;;509    		z_axis.prolong_fract &= FIXEDPT_FMASK; // leave fract part to accumulate with next dividing cycle
;;;510    		// when long_press end, get back to 46 mode to proceed
;;;511    	}
;;;512    }
;;;513    
;;;514    void do_fsm_main_cut_wait_tacho(state_t* s)   // direct movement: set direction for motor
;;;515    {
;;;516    	if(feed_direction)
;;;517    		MOTOR_Z_Forward();
;;;518    	else
;;;519    		MOTOR_Z_Reverse();
;;;520    	s->function = do_fsm_main_cut_ramp_up; // intermediate state to wait tacho pulse
;;;521    	disable_encoder_ticks(); // reset interrupt for encoder ticks, only tacho
;;;522    }
;;;523    
;;;524    void do_fsm_main_cut(state_t* s)   // direct movement: ramp up: accel by ramp map
;;;525    {
;;;526    	MOTOR_Z_SetPulse();
;;;527    	z_axis.current_pos++;
;;;528    	if(z_axis_ramp_up()) {
;;;529    		LED_GPIO_Port->BSRR = LED_Pin;   // led off
;;;530    		s->function = do_fsm_main_cut_infeed;
;;;531    	}
;;;532    }
;;;533    
;;;534    
;;;535    void do_fsm_main_cut_infeed(state_t* s)   // direct movement: main part
;;;536    {
;;;537    	MOTOR_Z_SetPulse();
;;;538    	z_axis.current_pos++;
;;;539    	if( z_axis.current_pos < ( z_axis.end_pos - z_axis.ramp_step ) ) {
;;;540    		z_axis_move();
;;;541    	} else {
;;;542    		s->function = do_fsm_first_cut_ramp_down;
;;;543    	}
;;;544    }
;;;545    
;;;546    
;;;547    void do_fsm_wait_sclick(state_t* s)
;;;548    {
;;;549    	MOTOR_Z_Disable(); //disable motor
;;;550    }
;;;551    
;;;552    void do_fsm_main_cut_ramp_up(state_t* s)
;;;553    {
;;;554    	s->function = do_fsm_main_cut;
;;;555    	//reinit counter
;;;556    //                          TIM4->ARR = fixedpt_toint(Q824set) - 1;
;;;557    	LED_GPIO_Port->BRR = LED_Pin; //led on
;;;558    
;;;559    	if(infeed_step < infeed_steps) {
;;;560    		TIM4->ARR = infeed_map[infeed_step++] + 1; // start stepper motor with shifted position by infeed map
;;;561    	} else {
;;;562    		TIM4->ARR = 1;  // start stepper motor ramp up procedure immediately after tacho event
;;;563    	}
;;;564    	TIM4->EGR |= TIM_EGR_UG;
;;;565    
;;;566    	TIM4->CNT = 0;
;;;567    	enable_encoder_ticks(); // enable thread specific interrupt controlled by Q824set
;;;568    }
;;;569    
;;;570    
;;;571    
;;;572    //---------------------------------------------------------------------------------------------
;;;573    void do_fsm_move_start(state_t* s){
;;;574    	if(s->f_tacho || s->main_feed_direction != feed_direction ) { // if tacho event or we going to start back feed to initial position with async clock
;;;575    		LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_DISABLED);
;;;576    		if(s->main_feed_direction == feed_direction) {
;;;577    			s->function = do_fsm_ramp_up;
;;;578    			s->sync = true;
;;;579    			s->async_z = 0;
;;;580    			s->syncbase = TIM4; 									// sync with spindle
;;;581    
;;;582    			LL_TIM_SetTriggerInput(TIM3, LL_TIM_TS_ITR3); 				//trigger by spindle encoder timer TIM4(sync mode)
;;;583    			enable_encoder_ticks(); 									// enable thread specific interrupt controlled by Q824set
;;;584    		} else {
;;;585    			s->function = do_fsm_ramp_up_async;
;;;586    			s->async_z = 1;
;;;587    			s->syncbase = TIM2; 									// sync with internal clock source(virtual spindle, "async" to main spindle)
;;;588    
;;;589    			LL_TIM_SetTriggerInput(TIM3, LL_TIM_TS_ITR1); 				//trigger by TIM2(async mode)
;;;590    			LL_TIM_EnableCounter(TIM2); /* Enable counter */
;;;591    		}
;;;592    
;;;593    		MOTOR_Z_AllowPulse();
;;;594    		LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_TRIGGER);
;;;595    		s->syncbase->ARR = 1; 					// start stepper motor ramp up procedure immediately after tacho event
;;;596    		LL_TIM_GenerateEvent_UPDATE(s->syncbase); /* Force update generation */
;;;597    	}	
;;;598    }
;;;599    
;;;600    void do_fsm_ramp_up(state_t* s)
;;;601    {
;;;602    //	MOTOR_Z_SetPulse();
;;;603    	z_axis.current_pos++;
;;;604    	if(z_axis_ramp_up2(s)) {
;;;605    		s->function = do_fsm_move;
;;;606    	}
;;;607    }
;;;608    
;;;609    void do_fsm_move(state_t* s)
;;;610    {
;;;611    //	MOTOR_Z_SetPulse();
;;;612    //	z_axis.current_pos++;
;;;613    //	if(s->spindle_dir)	z_axis.current_pos++;
;;;614    //	else z_axis.current_pos--;
;;;615    	if( ++z_axis.current_pos <= ( z_axis.end_pos - z_axis.ramp_step ) ) { // when end_pos is zero, end_pos-ramp_step= 4294967296 - ramp_step, so it will be much more lager then current_pos
;;;616    		z_axis_move2(s);
;;;617    	} else {
;;;618    		if(z_axis_ramp_down2(s)) {
;;;619    			if(z_axis.end_pos != z_axis.current_pos) {
;;;620    				z_axis.end_pos = z_axis.current_pos;
;;;621    			}
;;;622    			s->function = do_fsm_move_end;
;;;623    		}
;;;624    		s->function = do_fsm_ramp_down;
;;;625    	}
;;;626    }
;;;627    
;;;628    void do_long_press_end_callback(state_t* s)          // direct movement: first pass, thread recording: long press release callback
;;;629    {
;;;630    	// для 1/2 микрошага нужно что бы общее количество шагов в цикле резьбы было кратно 2,(для 1/4 кратно 4 и тп).
;;;631    	// это нужно для того что бы в конце шаговый мотор остановился на одном из двухсот устойчивых шагов,
;;;632    	// не перескакивая на соседние шаги при потере питания.
;;;633    	z_axis.end_pos = ( z_axis.ramp_step + z_axis.current_pos ) | (step_divider - 1);
;;;634    	s->function = do_fsm_move;
;;;635    	do_fsm_move(s);
;;;636    }
;;;637    
;;;638    
;;;639    void do_fsm_ramp_down(state_t* s)
;;;640    {
;;;641    //	MOTOR_Z_SetPulse();
;;;642    	if(s->spindle_dir)	z_axis.current_pos++;
;;;643    	else z_axis.current_pos--;
;;;644    	if(z_axis_ramp_down2(s)) {
;;;645    		if(z_axis.end_pos != z_axis.current_pos) {
;;;646    			z_axis.end_pos = z_axis.current_pos;
;;;647    		}
;;;648    		s->function = do_fsm_move_end;
;;;649    	}
;;;650    }
;;;651    
;;;652    void do_fsm_move_end(state_t* s){
;;;653    	s->async_z = 0;
;;;654      LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_DISABLED);
;;;655    //	MOTOR_Z_BlockPulse();
;;;656    	if (s->sync) {
;;;657    		disable_encoder_ticks(); 										//reset interrupt for encoder ticks, only tacho todo async mode not compatible now
;;;658    	} else {
;;;659    		LL_TIM_DisableCounter(TIM2); // pause async timer
;;;660    //		LL_TIM_DisableIT_UPDATE(TIM2);
;;;661    	}
;;;662    	s->syncbase = 0; // reset syncbase to stop calling it from timer interrupt
;;;663    
;;;664      MOTOR_Z_Disable(); 									//disable motor later on next tacho event (or after some ticks count?) to completely process last step
;;;665    //	feed_direction = feed_direction == feed_direction_left ? feed_direction_right : feed_direction_left;
;;;666    	feed_direction = !feed_direction; 					//change feed direction
;;;667    	menu_changed = 1; 													//update menu
;;;668    	s->function = do_fsm_wait_sclick;
;;;669    
;;;670    	z_axis.current_pos = 0;
;;;671    }
;;;672    
;;;673    
;;;674    _Bool z_axis_ramp_up2(state_t* s)
;;;675    {
;;;676    	const fixedptu  set_with_fract = ramp[z_axis.ramp_step];
;;;677    	if(z_axis.Q824set > set_with_fract || z_axis.ramp_step == ramp_map) { 	// reach desired speed or end of ramp map
;;;678    		s->syncbase->ARR = fixedpt_toint(z_axis.Q824set) - 1; 			// update register ARR
;;;679    //		s->syncbase->EGR |= TIM_EGR_UG;
;;;680    		z_axis.fract_part = fixedpt_fracpart(z_axis.Q824set); 								// save fract part for future use on next step
;;;681    //		z_axis.end_minus_ramp_delta =
;;;682    		return true;
;;;683    	} else {
;;;684    		z_axis.ramp_step++;
;;;685    		s->syncbase->ARR = fixedpt_toint(set_with_fract) - 1; 			// update register ARR
;;;686    //		s->syncbase->EGR |= TIM_EGR_UG;
;;;687    //		z_axis.fract_part = fixedpt_fracpart( set_with_fract ); 						// save fract part for future use on next step
;;;688    	}
;;;689    	return false;
;;;690    }
;;;691    
;;;692    _Bool z_axis_ramp_down2(state_t* s)
;;;693    {
;;;694    	if (z_axis.ramp_step == 0)
;;;695    		return true;
;;;696    	const fixedptu set_with_fract = ramp[--z_axis.ramp_step];
;;;697    	s->syncbase->ARR = fixedpt_toint(set_with_fract) - 1; // update register ARR
;;;698    //	s->syncbase->EGR |= TIM_EGR_UG;
;;;699    //	z_axis.fract_part = fixedpt_fracpart( set_with_fract ); // save fract part for future use on next step
;;;700    	if(z_axis.ramp_step == 0)
;;;701    		return true;
;;;702    	return false;
;;;703    }
;;;704    
;;;705    void z_axis_move2(state_t* s)
;;;706    {
        0x0800286c:    4601        .F      MOV      r1,r0
;;;707    	const fixedptu set_with_fract = fixedpt_add(z_axis.Q824set, z_axis.fract_part); // calculate new step delay with fract from previous step
        0x0800286e:    4a07        .J      LDR      r2,[pc,#28] ; [0x800288c] = 0x20000a38
        0x08002870:    68d2        .h      LDR      r2,[r2,#0xc]
        0x08002872:    4b06        .K      LDR      r3,[pc,#24] ; [0x800288c] = 0x20000a38
        0x08002874:    691b        .i      LDR      r3,[r3,#0x10]
        0x08002876:    18d0        ..      ADDS     r0,r2,r3
;;;708    	s->syncbase->ARR = fixedpt_toint(set_with_fract) - 1; // update register ARR
        0x08002878:    2201        ."      MOVS     r2,#1
        0x0800287a:    ebc26210    ...b    RSB      r2,r2,r0,LSR #24
        0x0800287e:    694b        Ki      LDR      r3,[r1,#0x14]
        0x08002880:    62da        .b      STR      r2,[r3,#0x2c]
;;;709    //	s->syncbase->CNT = 0;
;;;710    //	s->syncbase->EGR |= TIM_EGR_UG;
;;;711    	z_axis.fract_part = fixedpt_fracpart( set_with_fract ); // save fract part for future use on next step
        0x08002882:    f020427f     ..B    BIC      r2,r0,#0xff000000
        0x08002886:    4b01        .K      LDR      r3,[pc,#4] ; [0x800288c] = 0x20000a38
        0x08002888:    611a        .a      STR      r2,[r3,#0x10]
;;;712    }
        0x0800288a:    4770        pG      BX       lr
    $d
        0x0800288c:    20000a38    8..     DCD    536873528
    $t
    i.z_axis_ramp_down
    z_axis_ramp_down
;;; .\..\Src\fsm.c (180)
        0x08002890:    4812        .H      LDR      r0,[pc,#72] ; [0x80028dc] = 0x20000a38
        0x08002892:    f8900028    ..(.    LDRB     r0,[r0,#0x28]
        0x08002896:    b908        ..      CBNZ     r0,0x800289c ; z_axis_ramp_down + 12
;;;181    		return true;
        0x08002898:    2001        .       MOVS     r0,#1
        0x0800289a:    4770        pG      BX       lr
;;;182    	const fixedptu set_with_fract = ramp[--z_axis.ramp_step];
        0x0800289c:    480f        .H      LDR      r0,[pc,#60] ; [0x80028dc] = 0x20000a38
        0x0800289e:    f8900028    ..(.    LDRB     r0,[r0,#0x28]
        0x080028a2:    1e40        @.      SUBS     r0,r0,#1
        0x080028a4:    b2c0        ..      UXTB     r0,r0
        0x080028a6:    4a0d        .J      LDR      r2,[pc,#52] ; [0x80028dc] = 0x20000a38
        0x080028a8:    f8820028    ..(.    STRB     r0,[r2,#0x28]
        0x080028ac:    4a0c        .J      LDR      r2,[pc,#48] ; [0x80028e0] = 0x2000004c
        0x080028ae:    f8521020    R. .    LDR      r1,[r2,r0,LSL #2]
;;;183    	TIM4->ARR = fixedpt_toint(set_with_fract) - 1; // update register ARR
        0x080028b2:    2001        .       MOVS     r0,#1
        0x080028b4:    ebc06011    ...`    RSB      r0,r0,r1,LSR #24
        0x080028b8:    4a0a        .J      LDR      r2,[pc,#40] ; [0x80028e4] = 0x4000082c
        0x080028ba:    6010        .`      STR      r0,[r2,#0]
;;;184    	TIM4->EGR |= TIM_EGR_UG;
        0x080028bc:    4809        .H      LDR      r0,[pc,#36] ; [0x80028e4] = 0x4000082c
        0x080028be:    3818        .8      SUBS     r0,r0,#0x18
        0x080028c0:    6800        .h      LDR      r0,[r0,#0]
        0x080028c2:    f0400001    @...    ORR      r0,r0,#1
        0x080028c6:    4a07        .J      LDR      r2,[pc,#28] ; [0x80028e4] = 0x4000082c
        0x080028c8:    3a18        .:      SUBS     r2,r2,#0x18
        0x080028ca:    6010        .`      STR      r0,[r2,#0]
;;;185    //	z_axis.fract_part = fixedpt_fracpart( set_with_fract ); // save fract part for future use on next step
;;;186    	if(z_axis.ramp_step == 0)
        0x080028cc:    4803        .H      LDR      r0,[pc,#12] ; [0x80028dc] = 0x20000a38
        0x080028ce:    f8900028    ..(.    LDRB     r0,[r0,#0x28]
        0x080028d2:    b908        ..      CBNZ     r0,0x80028d8 ; z_axis_ramp_down + 72
;;;187    		return true;
        0x080028d4:    2001        .       MOVS     r0,#1
        0x080028d6:    e7e0        ..      B        0x800289a ; z_axis_ramp_down + 10
;;;188    	return false;
        0x080028d8:    2000        .       MOVS     r0,#0
        0x080028da:    e7de        ..      B        0x800289a ; z_axis_ramp_down + 10
    $d
        0x080028dc:    20000a38    8..     DCD    536873528
        0x080028e0:    2000004c    L..     DCD    536870988
        0x080028e4:    4000082c    ,..@    DCD    1073743916
    $t
    i.z_axis_ramp_down2
    z_axis_ramp_down2
;;;189    }
;;;190    
;;;191    void z_axis_move(void)
;;;192    {
;;;193    	const fixedptu set_with_fract = fixedpt_add(z_axis.Q824set, z_axis.fract_part); // calculate new step delay with fract from previous step
;;;194    	TIM4->ARR = fixedpt_toint(set_with_fract) - 1; // update register ARR
;;;195    	TIM4->EGR |= TIM_EGR_UG;
;;;196    	z_axis.fract_part = fixedpt_fracpart( set_with_fract ); // save fract part for future use on next step
;;;197    }
;;;198    
;;;199    
;;;200    void z_axis_at_move_end(state_t* s)
;;;201    {
;;;202    	disable_encoder_ticks(); //reset interrupt for encoder ticks, only tacho
;;;203    	//      MOTOR_Z_Disable(); //disable motor later on next tacho event (or after some ticks count?) to completely process last step
;;;204    //	if(auto_mode == true)    auto_mode_delay = auto_mode_delay_ms; // reengage auto mode
;;;205    	feed_direction = !feed_direction; //change feed direction
;;;206    	menu_changed = 1; //update menu
;;;207    	s->function = do_fsm_wait_sclick;
;;;208    //	z_axis.mode = fsm_wait_sclick; // dummy mode
;;;209    }
;;;210    
;;;211    
;;;212    
;;;213    
;;;214    void do_fsm_wait_tacho(state_t* s)
;;;215    {
;;;216    	if(s->f_tacho) { // if tacho event
;;;217    		s->function = do_fsm_first_cut_ramp_up;
;;;218    //		infeed_step = 0; todo
;;;219    		LED_GPIO_Port->BRR = LED_Pin; //led on
;;;220    		TIM4->ARR = 1; // start stepper motor ramp up procedure immediately after tacho event
;;;221    		TIM4->EGR |= TIM_EGR_UG;
;;;222    		TIM4->CNT = 0;
;;;223    		enable_encoder_ticks(); // enable thread specific interrupt controlled by Q824set
;;;224    	}
;;;225    }
;;;226    
;;;227    void do_fsm_menu(state_t* s)
;;;228    {
;;;229    	uint8_t level = Thread_Info[Menu_Step].level;
;;;230    //	buttons_flag_set = long_press_start_Msk;
;;;231    	switch(buttons_flag_set) {
;;;232    	case single_click_Msk3: {
;;;233    		feed_direction = feed_direction == feed_direction_left ? feed_direction_right : feed_direction_left;
;;;234    		menu_changed = 1;
;;;235    		break;
;;;236    	}
;;;237    	case single_click_Msk2: {
;;;238    		feed_direction = feed_direction == feed_direction_left ? feed_direction_right : feed_direction_left;
;;;239    		menu_changed = 1;
;;;240    		break;
;;;241    	}
;;;242    	case single_click_Msk: {
;;;243    		if(z_axis.end_pos != 0) {
;;;244    			// first pass of thread cut was complete, so just use single click
;;;245    			//	to switch between modes to process all other cuts
;;;246    			MOTOR_Z_Enable(); // time to wakeup motor from sleep is quite high(1.7ms), so enable it as soon as possible
;;;247    			LL_mDelay(17);
;;;248    //			for(unsigned int i=0; i<(72*1700/16); i++); // wait 1700us delay to wakeup motor driver
;;;249    //			s->function = z_axis.current_pos > 0 ? do_fsm_sclick_event : do_fsm_main_cut_wait_tacho;
;;;250    			
;;;251    			do_fsm_move_start(s);
;;;252    //			s->function = do_fsm_move_start;
;;;253    //			LL_TIM_EnableCounter(TIM2);			
;;;254    //			LL_TIM_GenerateEvent_UPDATE(TIM2);
;;;255    		} else { // controller in initial state, scroll menu
;;;256    			s->function = do_fsm_menu_lps;
;;;257    			for (int a = Menu_Step+1; a<Menu_size; a++) {
;;;258    				if(Thread_Info[a].level == level) {
;;;259    					Menu_Step = a;
;;;260    					menu_changed = 1;
;;;261    					break;
;;;262    				}
;;;263    			}
;;;264    			if(menu_changed != 1) {
;;;265    				for (int a = 0; a<Menu_Step; a++) {
;;;266    					if(Thread_Info[a].level == level) {
;;;267    						Menu_Step = a;
;;;268    						menu_changed = 1;
;;;269    						break;
;;;270    					}
;;;271    				}
;;;272    			}
;;;273    		}
;;;274    		break;
;;;275    	}
;;;276    	case double_click_Msk: {
;;;277    		feed_direction = feed_direction == feed_direction_left ? feed_direction_right : feed_direction_left;
;;;278    		menu_changed = 1;
;;;279    		break;
;;;280    	}
;;;281    	case (long_press_start_Msk | long_press_start_Msk2): { // two buttons long pressed same time
;;;282    		// todo check if it work
;;;283    		break;
;;;284    	}
;;;285    	case long_press_start_Msk: {
;;;286    		if(s->function == do_fsm_menu_lps){
;;;287    			if(Thread_Info[Menu_Step].Q824 != 0) { // long press detected, start new thread from current position
;;;288    				//mode 20:
;;;289    //				disable_encoder_ticks(); //reset interrupt for encoder ticks, only tacho
;;;290    //				LL_TIM_DisableIT_UPDATE(TIM4);
;;;291    //				LL_TIM_GenerateEvent_UPDATE(TIM4); 
;;;292    //				TIM4->SR = 0;
;;;293    
;;;294    				MOTOR_Z_Enable(); // time to wakeup motor from sleep is quite high(1.7ms), so enable it as soon as possible
;;;295    				s->main_feed_direction = feed_direction; // save main feed direction, where cut is on
;;;296    				s->sync = true;
;;;297    				if( feed_direction == feed_direction_right )
;;;298    					MOTOR_Z_Forward();
;;;299    				else
;;;300    					MOTOR_Z_Reverse();
;;;301    				
;;;302    //				for(unsigned int i=0; i<(72*1700/16); i++); // wait 1700us delay to wakeup motor driver todo dumb method
;;;303    				LL_mDelay(17);
;;;304    
;;;305    				z_axis.Q824set = Thread_Info[Menu_Step].Q824;
;;;306    				z_axis.end_pos = z_axis.current_pos = 0;
;;;307    
;;;308    				const uint64_t upl = (uint64_t)3600 << 48; //calculate some constants for prolong mode
;;;309    				z_axis.prolong_addSteps = upl / (fixedptud)z_axis.Q824set;
;;;310    
;;;311    				s->function = do_fsm_move_start;//do_fsm_wait_tacho; // go straight to 24 to wait tacho
;;;312    //do_fsm_move_start
;;;313    			} else { // goto submenu
;;;314    				for (int a = 0; a<Menu_size; a++) {
;;;315    					if(Thread_Info[a].level == Thread_Info[Menu_Step].submenu) {
;;;316    						Menu_Step = a;
;;;317    						menu_changed = 1;
;;;318    						break;
;;;319    					}
;;;320    				}
;;;321    			}
;;;322    		} else if(s->function == do_fsm_main_cut_back){
;;;323    			s->function = do_fsm_main_cut_back_prolong; // go to 48 mode to add threads until long_press end
;;;324    		}
;;;325    		break;
;;;326    	}
;;;327    	case long_press_end_Msk: {
;;;328    		s->function = do_long_press_end_callback;
;;;329    		break;
;;;330    /*
;;;331    		if(s->function == do_fsm_first_cut_main_part){
;;;332    			s->function = do_fsm_first_cut_lpe;
;;;333    			break;
;;;334    		}
;;;335    		if(s->function == do_fsm_main_cut_back_prolong){ // end of prolonged mode
;;;336    			s->function = do_fsm_main_cut_back;
;;;337    			break;
;;;338    		}
;;;339    */
;;;340    		/*
;;;341    		switch(z_axis.mode) {
;;;342    		case fsm_first_cut_main_part: {
;;;343    //																					if(auto_mode == true){
;;;344    //																									auto_mode_delay = auto_mode_delay_ms; //engage countdown timer to auto generate click event
;;;345    //																					}
;;;346    //																					Q824count = 0;
;;;347    			s->function = do_fsm_first_cut_lpe;
;;;348    			break;
;;;349    		}
;;;350    		case fsm_main_cut_back_prolong: { // end of prolonged mode
;;;351    			s->function = do_fsm_main_cut_back;
;;;352    			break;
;;;353    		}
;;;354    		}
;;;355    		*/
;;;356    		break;
;;;357    	}
;;;358    	}
;;;359    }
;;;360    
;;;361    void do_fsm_menu_lps(state_t* s)
;;;362    {
;;;363    }
;;;364    
;;;365    
;;;366    
;;;367    void do_fsm_first_cut_lps(state_t* s)  // not used?
;;;368    {
;;;369    	
;;;370    	disable_encoder_ticks(); //reset interrupt for encoder ticks, only tacho
;;;371    	MOTOR_Z_Enable();
;;;372    	if(feed_direction)
;;;373    		MOTOR_Z_Forward();
;;;374    	else
;;;375    		MOTOR_Z_Reverse();
;;;376    	s->function = do_fsm_wait_tacho; //intermediate state to wait tacho pulse.
;;;377    }
;;;378    
;;;379    
;;;380    
;;;381    
;;;382    
;;;383    
;;;384    void do_fsm_first_cut_ramp_up(state_t* s)          // direct movement: first pass, thread recording: ramp up: accel by ramp map
;;;385    {
;;;386    	MOTOR_Z_SetPulse();
;;;387    	z_axis.current_pos++;
;;;388    	if(z_axis_ramp_up()) {
;;;389    		s->function = do_fsm_first_cut_main_part;
;;;390    		LED_GPIO_Port->BSRR = LED_Pin; //led off
;;;391    	}
;;;392    }
;;;393    
;;;394    
;;;395    void do_fsm_first_cut_main_part(state_t* s)          // direct movement: first pass, thread recording: main part
;;;396    {
;;;397    	MOTOR_Z_SetPulse();
;;;398    	z_axis.current_pos++;
;;;399    	z_axis_move();
;;;400    }
;;;401    
;;;402    
;;;403    void do_fsm_first_cut_lpe(state_t* s)          // direct movement: first pass, thread recording: post-main part
;;;404    {
;;;405    	// для 1/2 микрошага нужно что бы общее количество шагов в цикле резьбы было кратно 2,(для 1/4 кратно 4 и тп).
;;;406    	// это нужно для того что бы в конце шаговый мотор остановился на одном из двухсот устойчивых шагов,
;;;407    	// не перескакивая на соседние шаги при потере питания.
;;;408    	// поэтому проверяем общее количество на четность(0й бит), если нечетное число делаем еще один шаг,
;;;409    	// иначе начинаем замедляться
;;;410    	MOTOR_Z_SetPulse();
;;;411    	z_axis.current_pos++;
;;;412    	uint32_t all_count = z_axis.ramp_step + z_axis.current_pos - 1;
;;;413    	uint32_t masked_count = all_count & ~(step_divider - 1);
;;;414    	if(masked_count != all_count) {
;;;415    		z_axis_move();
;;;416    	} else {
;;;417    		if(z_axis_ramp_down()) {
;;;418    			z_axis.end_pos = z_axis.current_pos;
;;;419    			z_axis_at_move_end(s);
;;;420    		} else {
;;;421    			s->function = do_fsm_first_cut_ramp_down;
;;;422    		}
;;;423    	}
;;;424    }
;;;425    
;;;426    
;;;427    
;;;428    
;;;429    
;;;430    
;;;431    void do_fsm_first_cut_ramp_down(state_t* s)          // direct movement: ramp down: deccel part + stop
;;;432    {
;;;433    	MOTOR_Z_SetPulse();
;;;434    	z_axis.current_pos++;
;;;435    	if(z_axis_ramp_down()) {
;;;436    		z_axis.end_pos = z_axis.current_pos;
;;;437    		z_axis_at_move_end(s);
;;;438    	}
;;;439    }
;;;440    
;;;441    
;;;442    
;;;443    void do_fsm_sclick_event(state_t* s)   // reverse movement: set direction for motor
;;;444    {
;;;445    	if(feed_direction)
;;;446    		MOTOR_Z_Forward();
;;;447    	else
;;;448    		MOTOR_Z_Reverse();
;;;449    	enable_encoder_ticks(); // enable thread specific interrupt controlled by Q824set
;;;450    	s->function = do_fsm_main_cut_back_ramp_up;
;;;451    }
;;;452    
;;;453    
;;;454    
;;;455    
;;;456    
;;;457    void do_fsm_main_cut_back_ramp_up(state_t* s)          // reverse movement: ramp up: accel part
;;;458    {
;;;459    	MOTOR_Z_SetPulse();
;;;460    	--z_axis.current_pos;
;;;461    	if(z_axis_ramp_up())
;;;462    		s->function = do_fsm_main_cut_back;
;;;463    }
;;;464    
;;;465    
;;;466    
;;;467    
;;;468    
;;;469    
;;;470    
;;;471    void do_fsm_main_cut_back(state_t* s)          // reverse movement: main part
;;;472    {
;;;473    	MOTOR_Z_SetPulse();
;;;474    	if( --z_axis.current_pos > z_axis.ramp_step ) {
;;;475    	} else {
;;;476    		s->function = do_fsm_main_cut_back_ramp_down;
;;;477    	}
;;;478    }
;;;479    
;;;480    
;;;481    
;;;482    void do_fsm_main_cut_back_ramp_down(state_t* s)   // reverse movement: ramp down: deccel part + stop
;;;483    {
;;;484    	if (z_axis.current_pos > 0) {
;;;485    		MOTOR_Z_SetPulse();
;;;486    		--z_axis.current_pos;
;;;487    	}
;;;488    	if(z_axis_ramp_down()) {
;;;489    		z_axis_at_move_end(s);
;;;490    	}
;;;491    }
;;;492    
;;;493    
;;;494    
;;;495    
;;;496    
;;;497    
;;;498    
;;;499    
;;;500    void do_fsm_main_cut_back_prolong(state_t* s)   // reverse movement: main part with prolong activated. todo split it with 46 mode?
;;;501    {
;;;502    	MOTOR_Z_SetPulse();
;;;503    	--z_axis.current_pos;
;;;504    	if(z_axis.current_pos == z_axis.ramp_step) { // we reach end of main path and have long_pressed key, so just add additional thread full turn to shift initial start point
;;;505    		z_axis.prolong_fract += z_axis.prolong_addSteps; // fract part from prev step
;;;506    		uint32_t prolong_fixpart = z_axis.prolong_fract >> 24;
;;;507    		z_axis.current_pos += prolong_fixpart; // add fixed part
;;;508    		z_axis.end_pos += prolong_fixpart;
;;;509    		z_axis.prolong_fract &= FIXEDPT_FMASK; // leave fract part to accumulate with next dividing cycle
;;;510    		// when long_press end, get back to 46 mode to proceed
;;;511    	}
;;;512    }
;;;513    
;;;514    void do_fsm_main_cut_wait_tacho(state_t* s)   // direct movement: set direction for motor
;;;515    {
;;;516    	if(feed_direction)
;;;517    		MOTOR_Z_Forward();
;;;518    	else
;;;519    		MOTOR_Z_Reverse();
;;;520    	s->function = do_fsm_main_cut_ramp_up; // intermediate state to wait tacho pulse
;;;521    	disable_encoder_ticks(); // reset interrupt for encoder ticks, only tacho
;;;522    }
;;;523    
;;;524    void do_fsm_main_cut(state_t* s)   // direct movement: ramp up: accel by ramp map
;;;525    {
;;;526    	MOTOR_Z_SetPulse();
;;;527    	z_axis.current_pos++;
;;;528    	if(z_axis_ramp_up()) {
;;;529    		LED_GPIO_Port->BSRR = LED_Pin;   // led off
;;;530    		s->function = do_fsm_main_cut_infeed;
;;;531    	}
;;;532    }
;;;533    
;;;534    
;;;535    void do_fsm_main_cut_infeed(state_t* s)   // direct movement: main part
;;;536    {
;;;537    	MOTOR_Z_SetPulse();
;;;538    	z_axis.current_pos++;
;;;539    	if( z_axis.current_pos < ( z_axis.end_pos - z_axis.ramp_step ) ) {
;;;540    		z_axis_move();
;;;541    	} else {
;;;542    		s->function = do_fsm_first_cut_ramp_down;
;;;543    	}
;;;544    }
;;;545    
;;;546    
;;;547    void do_fsm_wait_sclick(state_t* s)
;;;548    {
;;;549    	MOTOR_Z_Disable(); //disable motor
;;;550    }
;;;551    
;;;552    void do_fsm_main_cut_ramp_up(state_t* s)
;;;553    {
;;;554    	s->function = do_fsm_main_cut;
;;;555    	//reinit counter
;;;556    //                          TIM4->ARR = fixedpt_toint(Q824set) - 1;
;;;557    	LED_GPIO_Port->BRR = LED_Pin; //led on
;;;558    
;;;559    	if(infeed_step < infeed_steps) {
;;;560    		TIM4->ARR = infeed_map[infeed_step++] + 1; // start stepper motor with shifted position by infeed map
;;;561    	} else {
;;;562    		TIM4->ARR = 1;  // start stepper motor ramp up procedure immediately after tacho event
;;;563    	}
;;;564    	TIM4->EGR |= TIM_EGR_UG;
;;;565    
;;;566    	TIM4->CNT = 0;
;;;567    	enable_encoder_ticks(); // enable thread specific interrupt controlled by Q824set
;;;568    }
;;;569    
;;;570    
;;;571    
;;;572    //---------------------------------------------------------------------------------------------
;;;573    void do_fsm_move_start(state_t* s){
;;;574    	if(s->f_tacho || s->main_feed_direction != feed_direction ) { // if tacho event or we going to start back feed to initial position with async clock
;;;575    		LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_DISABLED);
;;;576    		if(s->main_feed_direction == feed_direction) {
;;;577    			s->function = do_fsm_ramp_up;
;;;578    			s->sync = true;
;;;579    			s->async_z = 0;
;;;580    			s->syncbase = TIM4; 									// sync with spindle
;;;581    
;;;582    			LL_TIM_SetTriggerInput(TIM3, LL_TIM_TS_ITR3); 				//trigger by spindle encoder timer TIM4(sync mode)
;;;583    			enable_encoder_ticks(); 									// enable thread specific interrupt controlled by Q824set
;;;584    		} else {
;;;585    			s->function = do_fsm_ramp_up_async;
;;;586    			s->async_z = 1;
;;;587    			s->syncbase = TIM2; 									// sync with internal clock source(virtual spindle, "async" to main spindle)
;;;588    
;;;589    			LL_TIM_SetTriggerInput(TIM3, LL_TIM_TS_ITR1); 				//trigger by TIM2(async mode)
;;;590    			LL_TIM_EnableCounter(TIM2); /* Enable counter */
;;;591    		}
;;;592    
;;;593    		MOTOR_Z_AllowPulse();
;;;594    		LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_TRIGGER);
;;;595    		s->syncbase->ARR = 1; 					// start stepper motor ramp up procedure immediately after tacho event
;;;596    		LL_TIM_GenerateEvent_UPDATE(s->syncbase); /* Force update generation */
;;;597    	}	
;;;598    }
;;;599    
;;;600    void do_fsm_ramp_up(state_t* s)
;;;601    {
;;;602    //	MOTOR_Z_SetPulse();
;;;603    	z_axis.current_pos++;
;;;604    	if(z_axis_ramp_up2(s)) {
;;;605    		s->function = do_fsm_move;
;;;606    	}
;;;607    }
;;;608    
;;;609    void do_fsm_move(state_t* s)
;;;610    {
;;;611    //	MOTOR_Z_SetPulse();
;;;612    //	z_axis.current_pos++;
;;;613    //	if(s->spindle_dir)	z_axis.current_pos++;
;;;614    //	else z_axis.current_pos--;
;;;615    	if( ++z_axis.current_pos <= ( z_axis.end_pos - z_axis.ramp_step ) ) { // when end_pos is zero, end_pos-ramp_step= 4294967296 - ramp_step, so it will be much more lager then current_pos
;;;616    		z_axis_move2(s);
;;;617    	} else {
;;;618    		if(z_axis_ramp_down2(s)) {
;;;619    			if(z_axis.end_pos != z_axis.current_pos) {
;;;620    				z_axis.end_pos = z_axis.current_pos;
;;;621    			}
;;;622    			s->function = do_fsm_move_end;
;;;623    		}
;;;624    		s->function = do_fsm_ramp_down;
;;;625    	}
;;;626    }
;;;627    
;;;628    void do_long_press_end_callback(state_t* s)          // direct movement: first pass, thread recording: long press release callback
;;;629    {
;;;630    	// для 1/2 микрошага нужно что бы общее количество шагов в цикле резьбы было кратно 2,(для 1/4 кратно 4 и тп).
;;;631    	// это нужно для того что бы в конце шаговый мотор остановился на одном из двухсот устойчивых шагов,
;;;632    	// не перескакивая на соседние шаги при потере питания.
;;;633    	z_axis.end_pos = ( z_axis.ramp_step + z_axis.current_pos ) | (step_divider - 1);
;;;634    	s->function = do_fsm_move;
;;;635    	do_fsm_move(s);
;;;636    }
;;;637    
;;;638    
;;;639    void do_fsm_ramp_down(state_t* s)
;;;640    {
;;;641    //	MOTOR_Z_SetPulse();
;;;642    	if(s->spindle_dir)	z_axis.current_pos++;
;;;643    	else z_axis.current_pos--;
;;;644    	if(z_axis_ramp_down2(s)) {
;;;645    		if(z_axis.end_pos != z_axis.current_pos) {
;;;646    			z_axis.end_pos = z_axis.current_pos;
;;;647    		}
;;;648    		s->function = do_fsm_move_end;
;;;649    	}
;;;650    }
;;;651    
;;;652    void do_fsm_move_end(state_t* s){
;;;653    	s->async_z = 0;
;;;654      LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_DISABLED);
;;;655    //	MOTOR_Z_BlockPulse();
;;;656    	if (s->sync) {
;;;657    		disable_encoder_ticks(); 										//reset interrupt for encoder ticks, only tacho todo async mode not compatible now
;;;658    	} else {
;;;659    		LL_TIM_DisableCounter(TIM2); // pause async timer
;;;660    //		LL_TIM_DisableIT_UPDATE(TIM2);
;;;661    	}
;;;662    	s->syncbase = 0; // reset syncbase to stop calling it from timer interrupt
;;;663    
;;;664      MOTOR_Z_Disable(); 									//disable motor later on next tacho event (or after some ticks count?) to completely process last step
;;;665    //	feed_direction = feed_direction == feed_direction_left ? feed_direction_right : feed_direction_left;
;;;666    	feed_direction = !feed_direction; 					//change feed direction
;;;667    	menu_changed = 1; 													//update menu
;;;668    	s->function = do_fsm_wait_sclick;
;;;669    
;;;670    	z_axis.current_pos = 0;
;;;671    }
;;;672    
;;;673    
;;;674    _Bool z_axis_ramp_up2(state_t* s)
;;;675    {
;;;676    	const fixedptu  set_with_fract = ramp[z_axis.ramp_step];
;;;677    	if(z_axis.Q824set > set_with_fract || z_axis.ramp_step == ramp_map) { 	// reach desired speed or end of ramp map
;;;678    		s->syncbase->ARR = fixedpt_toint(z_axis.Q824set) - 1; 			// update register ARR
;;;679    //		s->syncbase->EGR |= TIM_EGR_UG;
;;;680    		z_axis.fract_part = fixedpt_fracpart(z_axis.Q824set); 								// save fract part for future use on next step
;;;681    //		z_axis.end_minus_ramp_delta =
;;;682    		return true;
;;;683    	} else {
;;;684    		z_axis.ramp_step++;
;;;685    		s->syncbase->ARR = fixedpt_toint(set_with_fract) - 1; 			// update register ARR
;;;686    //		s->syncbase->EGR |= TIM_EGR_UG;
;;;687    //		z_axis.fract_part = fixedpt_fracpart( set_with_fract ); 						// save fract part for future use on next step
;;;688    	}
;;;689    	return false;
;;;690    }
;;;691    
;;;692    _Bool z_axis_ramp_down2(state_t* s)
;;;693    {
        0x080028e8:    4601        .F      MOV      r1,r0
;;;694    	if (z_axis.ramp_step == 0)
        0x080028ea:    480f        .H      LDR      r0,[pc,#60] ; [0x8002928] = 0x20000a38
        0x080028ec:    f8900028    ..(.    LDRB     r0,[r0,#0x28]
        0x080028f0:    b908        ..      CBNZ     r0,0x80028f6 ; z_axis_ramp_down2 + 14
;;;695    		return true;
        0x080028f2:    2001        .       MOVS     r0,#1
        0x080028f4:    4770        pG      BX       lr
;;;696    	const fixedptu set_with_fract = ramp[--z_axis.ramp_step];
        0x080028f6:    480c        .H      LDR      r0,[pc,#48] ; [0x8002928] = 0x20000a38
        0x080028f8:    f8900028    ..(.    LDRB     r0,[r0,#0x28]
        0x080028fc:    1e40        @.      SUBS     r0,r0,#1
        0x080028fe:    b2c0        ..      UXTB     r0,r0
        0x08002900:    4b09        .K      LDR      r3,[pc,#36] ; [0x8002928] = 0x20000a38
        0x08002902:    f8830028    ..(.    STRB     r0,[r3,#0x28]
        0x08002906:    4b09        .K      LDR      r3,[pc,#36] ; [0x800292c] = 0x2000004c
        0x08002908:    f8532020    S.      LDR      r2,[r3,r0,LSL #2]
;;;697    	s->syncbase->ARR = fixedpt_toint(set_with_fract) - 1; // update register ARR
        0x0800290c:    2001        .       MOVS     r0,#1
        0x0800290e:    ebc06012    ...`    RSB      r0,r0,r2,LSR #24
        0x08002912:    694b        Ki      LDR      r3,[r1,#0x14]
        0x08002914:    62d8        .b      STR      r0,[r3,#0x2c]
;;;698    //	s->syncbase->EGR |= TIM_EGR_UG;
;;;699    //	z_axis.fract_part = fixedpt_fracpart( set_with_fract ); // save fract part for future use on next step
;;;700    	if(z_axis.ramp_step == 0)
        0x08002916:    4804        .H      LDR      r0,[pc,#16] ; [0x8002928] = 0x20000a38
        0x08002918:    f8900028    ..(.    LDRB     r0,[r0,#0x28]
        0x0800291c:    b908        ..      CBNZ     r0,0x8002922 ; z_axis_ramp_down2 + 58
;;;701    		return true;
        0x0800291e:    2001        .       MOVS     r0,#1
        0x08002920:    e7e8        ..      B        0x80028f4 ; z_axis_ramp_down2 + 12
;;;702    	return false;
        0x08002922:    2000        .       MOVS     r0,#0
        0x08002924:    e7e6        ..      B        0x80028f4 ; z_axis_ramp_down2 + 12
    $d
        0x08002926:    0000        ..      DCW    0
        0x08002928:    20000a38    8..     DCD    536873528
        0x0800292c:    2000004c    L..     DCD    536870988
    $t
    i.z_axis_ramp_up2
    z_axis_ramp_up2
;;; .\..\Src\fsm.c (675)
        0x08002930:    4601        .F      MOV      r1,r0
;;;676    	const fixedptu  set_with_fract = ramp[z_axis.ramp_step];
        0x08002932:    4816        .H      LDR      r0,[pc,#88] ; [0x800298c] = 0x20000a38
        0x08002934:    f8900028    ..(.    LDRB     r0,[r0,#0x28]
        0x08002938:    4b15        .K      LDR      r3,[pc,#84] ; [0x8002990] = 0x2000004c
        0x0800293a:    f8532020    S.      LDR      r2,[r3,r0,LSL #2]
;;;677    	if(z_axis.Q824set > set_with_fract || z_axis.ramp_step == ramp_map) { 	// reach desired speed or end of ramp map
        0x0800293e:    4813        .H      LDR      r0,[pc,#76] ; [0x800298c] = 0x20000a38
        0x08002940:    68c0        .h      LDR      r0,[r0,#0xc]
        0x08002942:    4290        .B      CMP      r0,r2
        0x08002944:    d804        ..      BHI      0x8002950 ; z_axis_ramp_up2 + 32
        0x08002946:    4811        .H      LDR      r0,[pc,#68] ; [0x800298c] = 0x20000a38
        0x08002948:    f8900028    ..(.    LDRB     r0,[r0,#0x28]
        0x0800294c:    2805        .(      CMP      r0,#5
        0x0800294e:    d10e        ..      BNE      0x800296e ; z_axis_ramp_up2 + 62
;;;678    		s->syncbase->ARR = fixedpt_toint(z_axis.Q824set) - 1; 			// update register ARR
        0x08002950:    480e        .H      LDR      r0,[pc,#56] ; [0x800298c] = 0x20000a38
        0x08002952:    68c0        .h      LDR      r0,[r0,#0xc]
        0x08002954:    2301        .#      MOVS     r3,#1
        0x08002956:    ebc36010    ...`    RSB      r0,r3,r0,LSR #24
        0x0800295a:    694b        Ki      LDR      r3,[r1,#0x14]
        0x0800295c:    62d8        .b      STR      r0,[r3,#0x2c]
;;;679    //		s->syncbase->EGR |= TIM_EGR_UG;
;;;680    		z_axis.fract_part = fixedpt_fracpart(z_axis.Q824set); 								// save fract part for future use on next step
        0x0800295e:    480b        .H      LDR      r0,[pc,#44] ; [0x800298c] = 0x20000a38
        0x08002960:    68c0        .h      LDR      r0,[r0,#0xc]
        0x08002962:    f020407f     ..@    BIC      r0,r0,#0xff000000
        0x08002966:    4b09        .K      LDR      r3,[pc,#36] ; [0x800298c] = 0x20000a38
        0x08002968:    6118        .a      STR      r0,[r3,#0x10]
;;;681    //		z_axis.end_minus_ramp_delta =
;;;682    		return true;
        0x0800296a:    2001        .       MOVS     r0,#1
        0x0800296c:    4770        pG      BX       lr
;;;683    	} else {
;;;684    		z_axis.ramp_step++;
        0x0800296e:    4807        .H      LDR      r0,[pc,#28] ; [0x800298c] = 0x20000a38
        0x08002970:    f8900028    ..(.    LDRB     r0,[r0,#0x28]
        0x08002974:    1c40        @.      ADDS     r0,r0,#1
        0x08002976:    4b05        .K      LDR      r3,[pc,#20] ; [0x800298c] = 0x20000a38
        0x08002978:    f8830028    ..(.    STRB     r0,[r3,#0x28]
;;;685    		s->syncbase->ARR = fixedpt_toint(set_with_fract) - 1; 			// update register ARR
        0x0800297c:    2001        .       MOVS     r0,#1
        0x0800297e:    ebc06012    ...`    RSB      r0,r0,r2,LSR #24
        0x08002982:    694b        Ki      LDR      r3,[r1,#0x14]
        0x08002984:    62d8        .b      STR      r0,[r3,#0x2c]
;;;686    //		s->syncbase->EGR |= TIM_EGR_UG;
;;;687    //		z_axis.fract_part = fixedpt_fracpart( set_with_fract ); 						// save fract part for future use on next step
;;;688    	}
;;;689    	return false;
        0x08002986:    2000        .       MOVS     r0,#0
        0x08002988:    e7f0        ..      B        0x800296c ; z_axis_ramp_up2 + 60
    $d
        0x0800298a:    0000        ..      DCW    0
        0x0800298c:    20000a38    8..     DCD    536873528
        0x08002990:    2000004c    L..     DCD    536870988
    $d.realdata
    .constdata
    AHBPrescTable
        0x08002994:    00000000    ....    DCD    0
        0x08002998:    00000000    ....    DCD    0
        0x0800299c:    04030201    ....    DCD    67305985
        0x080029a0:    09080706    ....    DCD    151521030
    APBPrescTable
        0x080029a4:    00000000    ....    DCD    0
        0x080029a8:    04030201    ....    DCD    67305985
    .constdata
    CHANNEL_OFFSET_TAB
        0x080029ac:    44301c08    ..0D    DCD    1144003592
        0x080029b0:    6c58        Xl      DCW    27736
        0x080029b2:    80          .       DCB    128
    OFFSET_TAB_CCMRx
        0x080029b3:    00          .       DCB    0
        0x080029b4:    04000000    ....    DCD    67108864
        0x080029b8:    0404        ..      DCW    1028
    SHIFT_TAB_OCxx
        0x080029ba:    0000        ..      DCW    0
        0x080029bc:    00000008    ....    DCD    8
        0x080029c0:    08          .       DCB    8
    SHIFT_TAB_ICxx
        0x080029c1:    000008      ...     DCB    0,0,8
        0x080029c4:    08000000    ....    DCD    134217728
    SHIFT_TAB_CCxP
        0x080029c8:    06040200    ....    DCD    100925952
        0x080029cc:    0a08        ..      DCW    2568
        0x080029ce:    0c          .       DCB    12
    SHIFT_TAB_OISx
        0x080029cf:    00          .       DCB    0
        0x080029d0:    04030201    ....    DCD    67305985
        0x080029d4:    0605        ..      DCW    1541
    microsoftSansSerif_12ptBitmaps
        0x080029d6:    0800        ..      DCW    2048
        0x080029d8:    010106f8    ....    DCD    16844536
        0x080029dc:    01f80601    ....    DCD    33031681
        0x080029e0:    08080806    ....    DCD    134744070
        0x080029e4:    02020106    ....    DCD    33685766
        0x080029e8:    0f0000ff    ....    DCD    251658495
        0x080029ec:    81010204    ....    DCD    2164326916
        0x080029f0:    0c1c2241    A"..    DCD    203170369
        0x080029f4:    0808090a    ....    DCD    134744330
        0x080029f8:    02040808    ....    DCD    33818632
        0x080029fc:    52212101    .!!R    DCD    1377902849
        0x08002a00:    0804028c    ....    DCD    134480524
        0x08002a04:    03040808    ....    DCD    50595848
        0x08002a08:    08304080    .@0.    DCD    137379968
        0x08002a0c:    0100ff06    ....    DCD    16842502
        0x08002a10:    01010101    ....    DCD    16843009
        0x08002a14:    213f010f    ..?!    DCD    557777167
        0x08002a18:    21111111    ...!    DCD    554766609
        0x08002a1c:    080402c1    ....    DCD    134480577
        0x08002a20:    03040808    ....    DCD    50595848
        0x08002a24:    111122fc    ."..    DCD    286335740
        0x08002a28:    03c42211    ."..    DCD    63185425
        0x08002a2c:    08080804    ....    DCD    134744068
        0x08002a30:    01010304    ....    DCD    16843524
        0x08002a34:    39c10101    ...9    DCD    968950017
        0x08002a38:    00000007    ....    DCD    7
        0x08002a3c:    0000010e    ....    DCD    270
        0x08002a40:    2121528c    .R!!    DCD    555831948
        0x08002a44:    038c5221    !R..    DCD    59527713
        0x08002a48:    08080804    ....    DCD    134744068
        0x08002a4c:    423c0304    ..<B    DCD    1111229188
        0x08002a50:    42818181    ...B    DCD    1115783553
        0x08002a54:    080402fc    ....    DCD    134480636
        0x08002a58:    03040808    ....    DCD    50595848
        0x08002a5c:    b0c00000    ....    DCD    2965372928
        0x08002a60:    b08c838c    ....    DCD    2961998732
        0x08002a64:    0c0000c0    ....    DCD    201326784
        0x08002a68:    00000003    ....    DCD    3
        0x08002a6c:    00000000    ....    DCD    0
        0x08002a70:    21ff0c03    ...!    DCD    570362883
        0x08002a74:    21212121    !!!!    DCD    555819297
        0x08002a78:    080f8c52    R...    DCD    135236690
        0x08002a7c:    08080808    ....    DCD    134744072
        0x08002a80:    06f80304    ....    DCD    116916996
        0x08002a84:    01010102    ....    DCD    16843010
        0x08002a88:    08060201    ....    DCD    134611457
        0x08002a8c:    08040601    ....    DCD    134481409
        0x08002a90:    04080808    ....    DCD    67635208
        0x08002a94:    01ff0106    ....    DCD    33489158
        0x08002a98:    01010101    ....    DCD    16843009
        0x08002a9c:    0ff80602    ....    DCD    267912706
        0x08002aa0:    08080808    ....    DCD    134744072
        0x08002aa4:    01060408    ....    DCD    17171464
        0x08002aa8:    212121ff    .!!!    DCD    555819519
        0x08002aac:    01212121    !!!.    DCD    18948385
        0x08002ab0:    0808080f    ....    DCD    134744079
        0x08002ab4:    08080808    ....    DCD    134744072
        0x08002ab8:    212121ff    .!!!    DCD    555819519
        0x08002abc:    01212121    !!!.    DCD    18948385
        0x08002ac0:    0000000f    ....    DCD    15
        0x08002ac4:    00000000    ....    DCD    0
        0x08002ac8:    010206f8    ....    DCD    16910072
        0x08002acc:    42410101    ..AB    DCD    1111556353
        0x08002ad0:    0601c846    F...    DCD    100780102
        0x08002ad4:    08080804    ....    DCD    134744068
        0x08002ad8:    0f060408    ....    DCD    252052488
        0x08002adc:    202020ff    .       DCD    538976511
        0x08002ae0:    ff202020       .    DCD    4280295456
        0x08002ae4:    0000000f    ....    DCD    15
        0x08002ae8:    0f000000    ....    DCD    251658240
        0x08002aec:    00000fff    ....    DCD    4095
        0x08002af0:    ff000000    ....    DCD    4278190080
        0x08002af4:    08080807    ....    DCD    134744071
        0x08002af8:    20ff0708    ...     DCD    553584392
        0x08002afc:    02048850    P...    DCD    33851472
        0x08002b00:    000f0001    ....    DCD    983041
        0x08002b04:    02010000    ....    DCD    33619968
        0x08002b08:    00ff0804    ....    DCD    16713732
        0x08002b0c:    00000000    ....    DCD    0
        0x08002b10:    08080f00    ....    DCD    134745856
        0x08002b14:    08080808    ....    DCD    134744072
        0x08002b18:    c0300cff    ..0.    DCD    3224374527
        0x08002b1c:    0c30c000    ..0.    DCD    204521472
        0x08002b20:    00000fff    ....    DCD    4095
        0x08002b24:    00000300    ....    DCD    768
        0x08002b28:    06ff0f00    ....    DCD    117378816
        0x08002b2c:    00806018    .`..    DCD    8413208
        0x08002b30:    00000fff    ....    DCD    4095
        0x08002b34:    0f060100    ....    DCD    252051712
        0x08002b38:    010206f8    ....    DCD    16910072
        0x08002b3c:    02010101    ....    DCD    33620225
        0x08002b40:    0601f806    ....    DCD    100792326
        0x08002b44:    08080804    ....    DCD    134744068
        0x08002b48:    01060408    ....    DCD    17171464
        0x08002b4c:    414141ff    .AAA    DCD    1094795775
        0x08002b50:    1c224141    AA".    DCD    472006977
        0x08002b54:    0000000f    ....    DCD    15
        0x08002b58:    00000000    ....    DCD    0
        0x08002b5c:    010206f8    ....    DCD    16910072
        0x08002b60:    02010101    ....    DCD    33620225
        0x08002b64:    0601f806    ....    DCD    100792326
        0x08002b68:    09080804    ....    DCD    151521284
        0x08002b6c:    110e040a    ....    DCD    286131210
        0x08002b70:    414141ff    .AAA    DCD    1094795775
        0x08002b74:    1ca24141    AA..    DCD    480395585
        0x08002b78:    00000f00    ....    DCD    3840
        0x08002b7c:    00000000    ....    DCD    0
        0x08002b80:    120c0807    ....    DCD    302778375
        0x08002b84:    21212121    !!!!    DCD    555819297
        0x08002b88:    02844221    !B..    DCD    42222113
        0x08002b8c:    08080804    ....    DCD    134744068
        0x08002b90:    03040808    ....    DCD    50595848
        0x08002b94:    01010101    ....    DCD    16843009
        0x08002b98:    010101ff    ....    DCD    16843263
        0x08002b9c:    00000001    ....    DCD    1
        0x08002ba0:    00000f00    ....    DCD    3840
        0x08002ba4:    00ff0000    ....    DCD    16711680
        0x08002ba8:    00000000    ....    DCD    0
        0x08002bac:    0403ff00    ....    DCD    67370752
        0x08002bb0:    08080808    ....    DCD    134744072
        0x08002bb4:    0c030304    ....    DCD    201523972
        0x08002bb8:    0000c030    0...    DCD    49200
        0x08002bbc:    0c30c000    ..0.    DCD    204521472
        0x08002bc0:    00000003    ....    DCD    3
        0x08002bc4:    030c0300    ....    DCD    51118848
        0x08002bc8:    00000000    ....    DCD    0
        0x08002bcc:    80601c03    ..`.    DCD    2153782275
        0x08002bd0:    0e708000    ..p.    DCD    242253824
        0x08002bd4:    80008070    p...    DCD    2147516528
        0x08002bd8:    00031c60    `...    DCD    203872
        0x08002bdc:    0e010000    ....    DCD    234946560
        0x08002be0:    00000001    ....    DCD    1
        0x08002be4:    00010e01    ....    DCD    69121
        0x08002be8:    02010000    ....    DCD    33619968
        0x08002bec:    60900804    ...`    DCD    1620051972
        0x08002bf0:    02040890    ....    DCD    33818768
        0x08002bf4:    02040801    ....    DCD    33818625
        0x08002bf8:    00000001    ....    DCD    1
        0x08002bfc:    08040201    ....    DCD    134480385
        0x08002c00:    08040201    ....    DCD    134480385
        0x08002c04:    0810e010    ....    DCD    135323664
        0x08002c08:    00010204    ....    DCD    66052
        0x08002c0c:    00000000    ....    DCD    0
        0x08002c10:    0000000f    ....    DCD    15
        0x08002c14:    01010000    ....    DCD    16842752
        0x08002c18:    19214181    .A!.    DCD    421609857
        0x08002c1c:    0a0c0305    ....    DCD    168559365
        0x08002c20:    08080809    ....    DCD    134744073
        0x08002c24:    88100808    ....    DCD    2282752008
        0x08002c28:    88888888    ....    DCD    2290649224
        0x08002c2c:    080700f0    ....    DCD    134676720
        0x08002c30:    08080808    ....    DCD    134744072
        0x08002c34:    10ff0807    ....    DCD    285149191
        0x08002c38:    10080808    ....    DCD    268961800
        0x08002c3c:    08040fe0    ....    DCD    134483936
        0x08002c40:    03040808    ....    DCD    50595848
        0x08002c44:    080810e0    ....    DCD    134746336
        0x08002c48:    03201008    .. .    DCD    52432904
        0x08002c4c:    08080804    ....    DCD    134744068
        0x08002c50:    10e00204    ....    DCD    283116036
        0x08002c54:    10080808    ....    DCD    268961800
        0x08002c58:    080403ff    ....    DCD    134480895
        0x08002c5c:    0f040808    ....    DCD    251922440
        0x08002c60:    888890e0    ....    DCD    2290651360
        0x08002c64:    03e09088    ....    DCD    65048712
        0x08002c68:    08080804    ....    DCD    134744068
        0x08002c6c:    08080204    ....    DCD    134742532
        0x08002c70:    000909fe    ....    DCD    592382
        0x08002c74:    00000f00    ....    DCD    3840
        0x08002c78:    080810e0    ....    DCD    134746336
        0x08002c7c:    03f81008    ....    DCD    66588680
        0x08002c80:    88888884    ....    DCD    2290649220
        0x08002c84:    10ff3f44    D?..    DCD    285163332
        0x08002c88:    10080808    ....    DCD    268961800
        0x08002c8c:    00000fe0    ....    DCD    4064
        0x08002c90:    0f000000    ....    DCD    251658240
        0x08002c94:    f9000ff9    ....    DCD    4177530873
        0x08002c98:    80ff7f80    ....    DCD    2164227968
        0x08002c9c:    081020c0    . ..    DCD    135274688
        0x08002ca0:    00000f00    ....    DCD    3840
        0x08002ca4:    08040201    ....    DCD    134480385
        0x08002ca8:    10f80fff    ....    DCD    284692479
        0x08002cac:    e0100808    ....    DCD    3759147016
        0x08002cb0:    10080810    ....    DCD    268961808
        0x08002cb4:    00000fe0    ....    DCD    4064
        0x08002cb8:    000f0000    ....    DCD    983040
        0x08002cbc:    0f000000    ....    DCD    251658240
        0x08002cc0:    080810f8    ....    DCD    134746360
        0x08002cc4:    0fe01008    ....    DCD    266342408
        0x08002cc8:    00000000    ....    DCD    0
        0x08002ccc:    10e00f00    ....    DCD    283119360
        0x08002cd0:    10080808    ....    DCD    268961800
        0x08002cd4:    080403e0    ....    DCD    134480864
        0x08002cd8:    03040808    ....    DCD    50595848
        0x08002cdc:    080810f8    ....    DCD    134746360
        0x08002ce0:    ffe01008    ....    DCD    4292874248
        0x08002ce4:    08080804    ....    DCD    134744068
        0x08002ce8:    10e00304    ....    DCD    283116292
        0x08002cec:    10080808    ....    DCD    268961800
        0x08002cf0:    080403f8    ....    DCD    134480888
        0x08002cf4:    ff040808    ....    DCD    4278454280
        0x08002cf8:    080810f8    ....    DCD    134746360
        0x08002cfc:    0000000f    ....    DCD    15
        0x08002d00:    88888870    p...    DCD    2290649200
        0x08002d04:    08041088    ....    DCD    134484104
        0x08002d08:    07080808    ....    DCD    117966856
        0x08002d0c:    08ff0808    ....    DCD    150931464
        0x08002d10:    07000008    ....    DCD    117440520
        0x08002d14:    00f80008    ....    DCD    16252936
        0x08002d18:    00000000    ....    DCD    0
        0x08002d1c:    080403f8    ....    DCD    134480888
        0x08002d20:    0f040808    ....    DCD    251922440
        0x08002d24:    00806018    .`..    DCD    8413208
        0x08002d28:    00186080    .`..    DCD    1597568
        0x08002d2c:    010e0100    ....    DCD    17694976
        0x08002d30:    c0380000    ..8.    DCD    3224895488
        0x08002d34:    38c00000    ...8    DCD    952107008
        0x08002d38:    c00000c0    ....    DCD    3221225664
        0x08002d3c:    0e010038    8...    DCD    234946616
        0x08002d40:    00000003    ....    DCD    3
        0x08002d44:    00010e03    ....    DCD    69123
        0x08002d48:    80403008    .0@.    DCD    2151690248
        0x08002d4c:    08083040    @0..    DCD    134754368
        0x08002d50:    01000106    ....    DCD    16777478
        0x08002d54:    60180806    ...`    DCD    1612187654
        0x08002d58:    60800080    ...`    DCD    1619001472
        0x08002d5c:    71808018    ...q    DCD    1904246808
        0x08002d60:    0000010e    ....    DCD    270
        0x08002d64:    48880808    ...H    DCD    1216874504
        0x08002d68:    0a0c1828    (...    DCD    168564776
        0x08002d6c:    08080809    ....    DCD    134744073
    microsoftSansSerif_12ptDescriptors
        0x08002d70:    00001001    ....    DCD    4097
        0x08002d74:    00000000    ....    DCD    0
        0x08002d78:    00021007    ....    DCD    135175
        0x08002d7c:    00101003    ....    DCD    1052675
        0x08002d80:    00161007    ....    DCD    1445895
        0x08002d84:    00241007    ..$.    DCD    2363399
        0x08002d88:    00321007    ..2.    DCD    3280903
        0x08002d8c:    00401007    ..@.    DCD    4198407
        0x08002d90:    004e1007    ..N.    DCD    5115911
        0x08002d94:    005c1007    ..\.    DCD    6033415
        0x08002d98:    006a1007    ..j.    DCD    6950919
        0x08002d9c:    00781007    ..x.    DCD    7868423
        0x08002da0:    00000000    ....    DCD    0
        0x08002da4:    00000000    ....    DCD    0
        0x08002da8:    00000000    ....    DCD    0
        0x08002dac:    00000000    ....    DCD    0
        0x08002db0:    00000000    ....    DCD    0
        0x08002db4:    00000000    ....    DCD    0
        0x08002db8:    00000000    ....    DCD    0
        0x08002dbc:    0086100b    ....    DCD    8785931
        0x08002dc0:    009c1008    ....    DCD    10227720
        0x08002dc4:    00ac100a    ....    DCD    11276298
        0x08002dc8:    00c01009    ....    DCD    12587017
        0x08002dcc:    00d21008    ....    DCD    13766664
        0x08002dd0:    00e21008    ....    DCD    14815240
        0x08002dd4:    00f2100a    ....    DCD    15863818
        0x08002dd8:    01061008    ....    DCD    17174536
        0x08002ddc:    01161001    ....    DCD    18223105
        0x08002de0:    01181006    ....    DCD    18354182
        0x08002de4:    01241008    ..$.    DCD    19140616
        0x08002de8:    01341007    ..4.    DCD    20189191
        0x08002dec:    01421009    ..B.    DCD    21106697
        0x08002df0:    01541007    ..T.    DCD    22286343
        0x08002df4:    0162100a    ..b.    DCD    23203850
        0x08002df8:    01761008    ..v.    DCD    24514568
        0x08002dfc:    0186100a    ....    DCD    25563146
        0x08002e00:    019a1009    ....    DCD    26873865
        0x08002e04:    01ac1009    ....    DCD    28053513
        0x08002e08:    01be1009    ....    DCD    29233161
        0x08002e0c:    01d01008    ....    DCD    30412808
        0x08002e10:    01e0100b    ....    DCD    31461387
        0x08002e14:    01f6100f    ....    DCD    32903183
        0x08002e18:    0214100b    ....    DCD    34869259
        0x08002e1c:    022a100b    ..*.    DCD    36311051
        0x08002e20:    02401008    ..@.    DCD    37752840
        0x08002e24:    00000000    ....    DCD    0
        0x08002e28:    00000000    ....    DCD    0
        0x08002e2c:    00000000    ....    DCD    0
        0x08002e30:    00000000    ....    DCD    0
        0x08002e34:    00000000    ....    DCD    0
        0x08002e38:    00000000    ....    DCD    0
        0x08002e3c:    02501008    ..P.    DCD    38801416
        0x08002e40:    02601007    ..`.    DCD    39849991
        0x08002e44:    026e1007    ..n.    DCD    40767495
        0x08002e48:    027c1007    ..|.    DCD    41684999
        0x08002e4c:    028a1007    ....    DCD    42602503
        0x08002e50:    02981005    ....    DCD    43520005
        0x08002e54:    02a21007    ....    DCD    44175367
        0x08002e58:    02b01007    ....    DCD    45092871
        0x08002e5c:    02be1001    ....    DCD    46010369
        0x08002e60:    02c01002    ....    DCD    46141442
        0x08002e64:    02c41007    ....    DCD    46403591
        0x08002e68:    02d21001    ....    DCD    47321089
        0x08002e6c:    02d4100b    ....    DCD    47452171
        0x08002e70:    02ea1007    ....    DCD    48893959
        0x08002e74:    02f81007    ....    DCD    49811463
        0x08002e78:    03061007    ....    DCD    50728967
        0x08002e7c:    03141007    ....    DCD    51646471
        0x08002e80:    03221004    ..".    DCD    52563972
        0x08002e84:    032a1006    ..*.    DCD    53088262
        0x08002e88:    03361005    ..6.    DCD    53874693
        0x08002e8c:    03401007    ..@.    DCD    54530055
        0x08002e90:    034e1007    ..N.    DCD    55447559
        0x08002e94:    035c100b    ..\.    DCD    56365067
        0x08002e98:    03721007    ..r.    DCD    57806855
        0x08002e9c:    03801007    ....    DCD    58724359
        0x08002ea0:    038e1006    ....    DCD    59641862
    microsoftSansSerif_12ptFontInfo
        0x08002ea4:    027a2e02    ..z.    DCD    41561602
        0x08002ea8:    08002d70    p-..    DCD    134229360
        0x08002eac:    080029d6    .)..    DCD    134228438
    microsoftSansSerif_46ptBitmaps
        0x08002eb0:    00000000    ....    DCD    0
        0x08002eb4:    00000000    ....    DCD    0
        0x08002eb8:    00000000    ....    DCD    0
        0x08002ebc:    00000000    ....    DCD    0
        0x08002ec0:    00000000    ....    DCD    0
        0x08002ec4:    00000000    ....    DCD    0
        0x08002ec8:    80808080    ....    DCD    2155905152
        0x08002ecc:    1f1f8080    ....    DCD    522158208
        0x08002ed0:    1f1f1f1f    ....    DCD    522133279
        0x08002ed4:    c0000000    ....    DCD    3221225472
        0x08002ed8:    fcfcf8f0    ....    DCD    4244437232
        0x08002edc:    1f3f7efe    .~?.    DCD    524254974
        0x08002ee0:    1f1f1f1f    ....    DCD    522133279
        0x08002ee4:    fe7e3f1f    .?~.    DCD    4269686559
        0x08002ee8:    f0f8fcfc    ....    DCD    4042849532
        0x08002eec:    000000c0    ....    DCD    192
        0x08002ef0:    fffffc80    ....    DCD    4294966400
        0x08002ef4:    037fffff    ....    DCD    58720255
        0x08002ef8:    00000000    ....    DCD    0
        0x08002efc:    00000000    ....    DCD    0
        0x08002f00:    00000000    ....    DCD    0
        0x08002f04:    ffff7f03    ....    DCD    4294934275
        0x08002f08:    80fcffff    ....    DCD    2164064255
        0x08002f0c:    ffffffff    ....    DCD    4294967295
        0x08002f10:    0000ffff    ....    DCD    65535
        0x08002f14:    00000000    ....    DCD    0
        0x08002f18:    00000000    ....    DCD    0
        0x08002f1c:    00000000    ....    DCD    0
        0x08002f20:    ffff0000    ....    DCD    4294901760
        0x08002f24:    ffffffff    ....    DCD    4294967295
        0x08002f28:    ffffff7f    ....    DCD    4294967167
        0x08002f2c:    0080ffff    ....    DCD    8454143
        0x08002f30:    00000000    ....    DCD    0
        0x08002f34:    00000000    ....    DCD    0
        0x08002f38:    00000000    ....    DCD    0
        0x08002f3c:    ffff0000    ....    DCD    4294901760
        0x08002f40:    7fffffff    ....    DCD    2147483647
        0x08002f44:    ff3f0f00    ..?.    DCD    4282322688
        0x08002f48:    f0ffffff    ....    DCD    4043309055
        0x08002f4c:    000080c0    ....    DCD    32960
        0x08002f50:    00000000    ....    DCD    0
        0x08002f54:    c0800000    ....    DCD    3229614080
        0x08002f58:    fffffff0    ....    DCD    4294967280
        0x08002f5c:    000f3fff    .?..    DCD    999423
        0x08002f60:    00000000    ....    DCD    0
        0x08002f64:    0f0f0703    ....    DCD    252643075
        0x08002f68:    3e3f1f1f    ..?>    DCD    1044324127
        0x08002f6c:    3e3e3e3e    >>>>    DCD    1044266558
        0x08002f70:    1f1f3f3e    >?..    DCD    522141502
        0x08002f74:    03070f0f    ....    DCD    50794255
        0x08002f78:    00000000    ....    DCD    0
        0x08002f7c:    00000000    ....    DCD    0
        0x08002f80:    c0808080    ....    DCD    3229646976
        0x08002f84:    fff8f0e0    ....    DCD    4294504672
        0x08002f88:    ffffffff    ....    DCD    4294967295
        0x08002f8c:    1f1f1f1f    ....    DCD    522133279
        0x08002f90:    0f0f0f1f    ....    DCD    252645151
        0x08002f94:    ffff070f    ....    DCD    4294903567
        0x08002f98:    ffffffff    ....    DCD    4294967295
        0x08002f9c:    00000000    ....    DCD    0
        0x08002fa0:    00000000    ....    DCD    0
        0x08002fa4:    ffff0000    ....    DCD    4294901760
        0x08002fa8:    ffffffff    ....    DCD    4294967295
        0x08002fac:    00000000    ....    DCD    0
        0x08002fb0:    00000000    ....    DCD    0
        0x08002fb4:    ffff0000    ....    DCD    4294901760
        0x08002fb8:    ffffffff    ....    DCD    4294967295
        0x08002fbc:    00000000    ....    DCD    0
        0x08002fc0:    00000000    ....    DCD    0
        0x08002fc4:    ffff0000    ....    DCD    4294901760
        0x08002fc8:    ffffffff    ....    DCD    4294967295
        0x08002fcc:    00000000    ....    DCD    0
        0x08002fd0:    00000000    ....    DCD    0
        0x08002fd4:    1f1f0000    ....    DCD    522125312
        0x08002fd8:    1f1f1f1f    ....    DCD    522133279
        0x08002fdc:    c0800000    ....    DCD    3229614080
        0x08002fe0:    fcf8f8f0    ....    DCD    4244175088
        0x08002fe4:    3f3e7efe    .~>?    DCD    1061060350
        0x08002fe8:    1f1f1f1f    ....    DCD    522133279
        0x08002fec:    3f3f1f1f    ..??    DCD    1061101343
        0x08002ff0:    fcfefe7e    ~...    DCD    4244569726
        0x08002ff4:    c0e0f0f8    ....    DCD    3235967224
        0x08002ff8:    1f1c0000    ....    DCD    521928704
        0x08002ffc:    1f1f1f1f    ....    DCD    522133279
        0x08003000:    00000003    ....    DCD    3
        0x08003004:    00000000    ....    DCD    0
        0x08003008:    00000000    ....    DCD    0
        0x0800300c:    03000000    ....    DCD    50331648
        0x08003010:    ffffffff    ....    DCD    4294967295
        0x08003014:    0000feff    ....    DCD    65279
        0x08003018:    00000000    ....    DCD    0
        0x0800301c:    00000000    ....    DCD    0
        0x08003020:    00000000    ....    DCD    0
        0x08003024:    80000000    ....    DCD    2147483648
        0x08003028:    f8f0e0c0    ....    DCD    4176535744
        0x0800302c:    3f7fffff    ...?    DCD    1065353215
        0x08003030:    0001071f    ....    DCD    67359
        0x08003034:    00000000    ....    DCD    0
        0x08003038:    80000000    ....    DCD    2147483648
        0x0800303c:    f0f0e0c0    ....    DCD    4042318016
        0x08003040:    7ffefcf8    ....    DCD    2147417336
        0x08003044:    070f1f3f    ?...    DCD    118431551
        0x08003048:    00000103    ....    DCD    259
        0x0800304c:    00000000    ....    DCD    0
        0x08003050:    f0e08000    ....    DCD    4041244672
        0x08003054:    fffefcf8    ....    DCD    4294900984
        0x08003058:    070f1f7f    ....    DCD    118431615
        0x0800305c:    00010303    ....    DCD    66307
        0x08003060:    00000000    ....    DCD    0
        0x08003064:    00000000    ....    DCD    0
        0x08003068:    00000000    ....    DCD    0
        0x0800306c:    1f1f1e00    ....    DCD    522132992
        0x08003070:    1f1f1f1f    ....    DCD    522133279
        0x08003074:    1f1f1f1f    ....    DCD    522133279
        0x08003078:    1f1f1f1f    ....    DCD    522133279
        0x0800307c:    1f1f1f1f    ....    DCD    522133279
        0x08003080:    1f1f1f1f    ....    DCD    522133279
        0x08003084:    1f1f1f1f    ....    DCD    522133279
        0x08003088:    00001f1f    ....    DCD    7967
        0x0800308c:    fcf8f0c0    ....    DCD    4244172992
        0x08003090:    3e7efefc    ..~>    DCD    1048510204
        0x08003094:    1f1f1f3f    ?...    DCD    522133311
        0x08003098:    3f1f1f1f    ...?    DCD    1059004191
        0x0800309c:    fcfcfe7e    ~...    DCD    4244438654
        0x080030a0:    00c0f0f8    ....    DCD    12644600
        0x080030a4:    07000000    ....    DCD    117440512
        0x080030a8:    07070707    ....    DCD    117901063
        0x080030ac:    00000107    ....    DCD    263
        0x080030b0:    00000000    ....    DCD    0
        0x080030b4:    00000000    ....    DCD    0
        0x080030b8:    ffff8100    ....    DCD    4294934784
        0x080030bc:    7fffffff    ....    DCD    2147483647
        0x080030c0:    00000000    ....    DCD    0
        0x080030c4:    00000000    ....    DCD    0
        0x080030c8:    00000000    ....    DCD    0
        0x080030cc:    f8f8f800    ....    DCD    4177065984
        0x080030d0:    fcfcf8f8    ....    DCD    4244437240
        0x080030d4:    effffffe    ....    DCD    4026531838
        0x080030d8:    008183c7    ....    DCD    8487879
        0x080030dc:    00000000    ....    DCD    0
        0x080030e0:    00000000    ....    DCD    0
        0x080030e4:    00000000    ....    DCD    0
        0x080030e8:    00000000    ....    DCD    0
        0x080030ec:    01000000    ....    DCD    16777216
        0x080030f0:    1f070301    ....    DCD    520553217
        0x080030f4:    ffffffff    ....    DCD    4294967295
        0x080030f8:    fc1cf0fc    ....    DCD    4229755132
        0x080030fc:    fcfcfcfc    ....    DCD    4244438268
        0x08003100:    0080c0e0    ....    DCD    8437984
        0x08003104:    00000000    ....    DCD    0
        0x08003108:    00000000    ....    DCD    0
        0x0800310c:    f0c08000    ....    DCD    4039147520
        0x08003110:    ffffffff    ....    DCD    4294967295
        0x08003114:    00000f7f    ....    DCD    3967
        0x08003118:    0f070301    ....    DCD    252117761
        0x0800311c:    1f1f1f0f    ....    DCD    522133263
        0x08003120:    3e3e3e3f    ?>>>    DCD    1044266559
        0x08003124:    3f3e3e3e    >>>?    DCD    1061043774
        0x08003128:    0f1f1f1f    ....    DCD    253697823
        0x0800312c:    00030707    ....    DCD    198407
        0x08003130:    00000000    ....    DCD    0
        0x08003134:    00000000    ....    DCD    0
        0x08003138:    00000000    ....    DCD    0
        0x0800313c:    00000000    ....    DCD    0
        0x08003140:    f8f0c080    ....    DCD    4176527488
        0x08003144:    fffffffe    ....    DCD    4294967294
        0x08003148:    0000ffff    ....    DCD    65535
        0x0800314c:    00000000    ....    DCD    0
        0x08003150:    00000000    ....    DCD    0
        0x08003154:    00000000    ....    DCD    0
        0x08003158:    f0e08000    ....    DCD    4041244672
        0x0800315c:    1f3ffefc    ..?.    DCD    524287740
        0x08003160:    ffff0307    ....    DCD    4294902535
        0x08003164:    ffffffff    ....    DCD    4294967295
        0x08003168:    00000000    ....    DCD    0
        0x0800316c:    00000000    ....    DCD    0
        0x08003170:    e0c00000    ....    DCD    3770679296
        0x08003174:    3f7ffcf8    ...?    DCD    1065352440
        0x08003178:    0001070f    ....    DCD    67343
        0x0800317c:    00000000    ....    DCD    0
        0x08003180:    ffffffff    ....    DCD    4294967295
        0x08003184:    0000ffff    ....    DCD    65535
        0x08003188:    00000000    ....    DCD    0
        0x0800318c:    fffef8f0    ....    DCD    4294899952
        0x08003190:    e1e3efff    ....    DCD    3789811711
        0x08003194:    e0e0e0e0    ....    DCD    3772834016
        0x08003198:    e0e0e0e0    ....    DCD    3772834016
        0x0800319c:    ffffe0e0    ....    DCD    4294959328
        0x080031a0:    ffffffff    ....    DCD    4294967295
        0x080031a4:    e0e0e0e0    ....    DCD    3772834016
        0x080031a8:    0303e0e0    ....    DCD    50585824
        0x080031ac:    03030303    ....    DCD    50529027
        0x080031b0:    03030303    ....    DCD    50529027
        0x080031b4:    03030303    ....    DCD    50529027
        0x080031b8:    03030303    ....    DCD    50529027
        0x080031bc:    ffffffff    ....    DCD    4294967295
        0x080031c0:    0303ffff    ....    DCD    50593791
        0x080031c4:    03030303    ....    DCD    50529027
        0x080031c8:    00000000    ....    DCD    0
        0x080031cc:    00000000    ....    DCD    0
        0x080031d0:    00000000    ....    DCD    0
        0x080031d4:    00000000    ....    DCD    0
        0x080031d8:    1f1f0000    ....    DCD    522125312
        0x080031dc:    1f1f1f1f    ....    DCD    522133279
        0x080031e0:    00000000    ....    DCD    0
        0x080031e4:    00000000    ....    DCD    0
        0x080031e8:    fefe8000    ....    DCD    4278091776
        0x080031ec:    3e7efefe    ..~>    DCD    1048510206
        0x080031f0:    3e3e3e3e    >>>>    DCD    1044266558
        0x080031f4:    3e3e3e3e    >>>>    DCD    1044266558
        0x080031f8:    3e3e3e3e    >>>>    DCD    1044266558
        0x080031fc:    3e3e3e3e    >>>>    DCD    1044266558
        0x08003200:    00000000    ....    DCD    0
        0x08003204:    ffffff00    ....    DCD    4294967040
        0x08003208:    0000ffff    ....    DCD    65535
        0x0800320c:    00000000    ....    DCD    0
        0x08003210:    00000000    ....    DCD    0
        0x08003214:    00000000    ....    DCD    0
        0x08003218:    00000000    ....    DCD    0
        0x0800321c:    00000000    ....    DCD    0
        0x08003220:    fffffffc    ....    DCD    4294967292
        0x08003224:    3e3c7bff    .{<>    DCD    1044151295
        0x08003228:    1f1f1e1e    ....    DCD    522133022
        0x0800322c:    3f1f1f1f    ...?    DCD    1059004191
        0x08003230:    fcfe7e7f    .~..    DCD    4244536959
        0x08003234:    e0f0f8fc    ....    DCD    3773888764
        0x08003238:    00000080    ....    DCD    128
        0x0800323c:    00000000    ....    DCD    0
        0x08003240:    00000000    ....    DCD    0
        0x08003244:    00000000    ....    DCD    0
        0x08003248:    00000000    ....    DCD    0
        0x0800324c:    07010000    ....    DCD    117506048
        0x08003250:    ffffffff    ....    DCD    4294967295
        0x08003254:    7c1cfcff    ...|    DCD    2082274559
        0x08003258:    fcfcfcfc    ....    DCD    4244438268
        0x0800325c:    0080c0f0    ....    DCD    8438000
        0x08003260:    00000000    ....    DCD    0
        0x08003264:    00000000    ....    DCD    0
        0x08003268:    fce0c080    ....    DCD    4242587776
        0x0800326c:    ffffffff    ....    DCD    4294967295
        0x08003270:    0000073f    ?...    DCD    1855
        0x08003274:    0f070301    ....    DCD    252117761
        0x08003278:    3f1f1f0f    ...?    DCD    1059004175
        0x0800327c:    3e3e3e3f    ?>>>    DCD    1044266559
        0x08003280:    3f3f3e3e    >>??    DCD    1061109310
        0x08003284:    0f0f1f1f    ....    DCD    252649247
        0x08003288:    00010307    ....    DCD    66311
        0x0800328c:    00000000    ....    DCD    0
        0x08003290:    f0e08000    ....    DCD    4041244672
        0x08003294:    fefefcf8    ....    DCD    4278123768
        0x08003298:    1f1f3f7e    ~?..    DCD    522141566
        0x0800329c:    1f1f1f1f    ....    DCD    522133279
        0x080032a0:    fcfe7e3f    ?~..    DCD    4244536895
        0x080032a4:    c0f0f8fc    ....    DCD    3237017852
        0x080032a8:    f8000000    ....    DCD    4160749568
        0x080032ac:    fffffffe    ....    DCD    4294967294
        0x080032b0:    00030fff    ....    DCD    200703
        0x080032b4:    00000000    ....    DCD    0
        0x080032b8:    00000000    ....    DCD    0
        0x080032bc:    07010000    ....    DCD    117506048
        0x080032c0:    07070707    ....    DCD    117901063
        0x080032c4:    ffff0006    ....    DCD    4294901766
        0x080032c8:    ffffffff    ....    DCD    4294967295
        0x080032cc:    7c78f8f0    ..x|    DCD    2088302832
        0x080032d0:    1f1f3e3e    >>..    DCD    522141246
        0x080032d4:    3f1f1f1f    ...?    DCD    1059004191
        0x080032d8:    fcfe7e3f    ?~..    DCD    4244536895
        0x080032dc:    c0f0f8fc    ....    DCD    3237017852
        0x080032e0:    ff7f0080    ....    DCD    4286513280
        0x080032e4:    ffffffff    ....    DCD    4294967295
        0x080032e8:    00000081    ....    DCD    129
        0x080032ec:    00000000    ....    DCD    0
        0x080032f0:    00000000    ....    DCD    0
        0x080032f4:    07010000    ....    DCD    117506048
        0x080032f8:    ffffffff    ....    DCD    4294967295
        0x080032fc:    0f00fcff    ....    DCD    251723007
        0x08003300:    ffffff3f    ?...    DCD    4294967103
        0x08003304:    80e0f8ff    ....    DCD    2162227455
        0x08003308:    00000000    ....    DCD    0
        0x0800330c:    00000000    ....    DCD    0
        0x08003310:    f8e08000    ....    DCD    4175462400
        0x08003314:    ffffffff    ....    DCD    4294967295
        0x08003318:    0000073f    ?...    DCD    1855
        0x0800331c:    03010000    ....    DCD    50397184
        0x08003320:    1f1f0f07    ....    DCD    522129159
        0x08003324:    3e3e3f1f    .?>>    DCD    1044266783
        0x08003328:    3f3e3e3e    >>>?    DCD    1061043774
        0x0800332c:    0f1f1f1f    ....    DCD    253697823
        0x08003330:    00010307    ....    DCD    66311
        0x08003334:    3e3e0000    ..>>    DCD    1044250624
        0x08003338:    3e3e3e3e    >>>>    DCD    1044266558
        0x0800333c:    3e3e3e3e    >>>>    DCD    1044266558
        0x08003340:    3e3e3e3e    >>>>    DCD    1044266558
        0x08003344:    3e3e3e3e    >>>>    DCD    1044266558
        0x08003348:    3e3e3e3e    >>>>    DCD    1044266558
        0x0800334c:    fefefefe    ....    DCD    4278124286
        0x08003350:    00003efe    .>..    DCD    16126
        0x08003354:    00000000    ....    DCD    0
        0x08003358:    00000000    ....    DCD    0
        0x0800335c:    00000000    ....    DCD    0
        0x08003360:    00000000    ....    DCD    0
        0x08003364:    fffcf080    ....    DCD    4294766720
        0x08003368:    071fffff    ....    DCD    119537663
        0x0800336c:    00000000    ....    DCD    0
        0x08003370:    00000000    ....    DCD    0
        0x08003374:    00000000    ....    DCD    0
        0x08003378:    00000000    ....    DCD    0
        0x0800337c:    fef0c000    ....    DCD    4277190656
        0x08003380:    0f7fffff    ....    DCD    260046847
        0x08003384:    00000003    ....    DCD    3
        0x08003388:    00000000    ....    DCD    0
        0x0800338c:    00000000    ....    DCD    0
        0x08003390:    00000000    ....    DCD    0
        0x08003394:    f8e00000    ....    DCD    4175429632
        0x08003398:    3ffffffe    ...?    DCD    1073741822
        0x0800339c:    0000010f    ....    DCD    271
        0x080033a0:    00000000    ....    DCD    0
        0x080033a4:    00000000    ....    DCD    0
        0x080033a8:    00000000    ....    DCD    0
        0x080033ac:    e0800000    ....    DCD    3766484992
        0x080033b0:    fffffffc    ....    DCD    4294967292
        0x080033b4:    0001071f    ....    DCD    67359
        0x080033b8:    00000000    ....    DCD    0
        0x080033bc:    00000000    ....    DCD    0
        0x080033c0:    00000000    ....    DCD    0
        0x080033c4:    00000000    ....    DCD    0
        0x080033c8:    1f1f1e10    ....    DCD    522133008
        0x080033cc:    00031f1f    ....    DCD    204575
        0x080033d0:    00000000    ....    DCD    0
        0x080033d4:    00000000    ....    DCD    0
        0x080033d8:    00000000    ....    DCD    0
        0x080033dc:    00000000    ....    DCD    0
        0x080033e0:    f8f0e000    ....    DCD    4176535552
        0x080033e4:    7efefcfc    ...~    DCD    2130640124
        0x080033e8:    1f1f1f3f    ?...    DCD    522133311
        0x080033ec:    3f1f1f1f    ...?    DCD    1059004191
        0x080033f0:    fcfcfe7e    ~...    DCD    4244438654
        0x080033f4:    00e0f0f8    ....    DCD    14741752
        0x080033f8:    00000000    ....    DCD    0
        0x080033fc:    ffffff7f    ....    DCD    4294967167
        0x08003400:    00c1ffff    ....    DCD    12713983
        0x08003404:    00000000    ....    DCD    0
        0x08003408:    00000000    ....    DCD    0
        0x0800340c:    ffffc100    ....    DCD    4294951168
        0x08003410:    7fffffff    ....    DCD    2147483647
        0x08003414:    00000000    ....    DCD    0
        0x08003418:    0f070100    ....    DCD    252117248
        0x0800341c:    ffbfbf1f    ....    DCD    4290756383
        0x08003420:    f0f8fcfe    ....    DCD    4042849534
        0x08003424:    fefcf8f0    ....    DCD    4277991664
        0x08003428:    1fbfbfff    ....    DCD    532660223
        0x0800342c:    0001070f    ....    DCD    67343
        0x08003430:    f0800000    ....    DCD    4034920448
        0x08003434:    fffefcf8    ....    DCD    4294900984
        0x08003438:    0f0f1f7f    ....    DCD    252649343
        0x0800343c:    01030307    ....    DCD    16974599
        0x08003440:    07030301    ....    DCD    117637889
        0x08003444:    7f1f0f07    ....    DCD    2132741895
        0x08003448:    f8fcfeff    ....    DCD    4177329919
        0x0800344c:    ff1f80f0    ....    DCD    4280254704
        0x08003450:    ffffffff    ....    DCD    4294967295
        0x08003454:    0080c0f0    ....    DCD    8438000
        0x08003458:    00000000    ....    DCD    0
        0x0800345c:    00000000    ....    DCD    0
        0x08003460:    f0c08000    ....    DCD    4039147520
        0x08003464:    ffffffff    ....    DCD    4294967295
        0x08003468:    00001fff    ....    DCD    8191
        0x0800346c:    0f070301    ....    DCD    252117761
        0x08003470:    1f1f1f0f    ....    DCD    522133263
        0x08003474:    3e3e3e3f    ?>>>    DCD    1044266559
        0x08003478:    3f3e3e3e    >>>?    DCD    1061043774
        0x0800347c:    0f1f1f1f    ....    DCD    253697823
        0x08003480:    0103070f    ....    DCD    16975631
        0x08003484:    00000000    ....    DCD    0
        0x08003488:    f8f0e0c0    ....    DCD    4176535744
        0x0800348c:    3e7efefc    ..~>    DCD    1048510204
        0x08003490:    1f1f1f3f    ?...    DCD    522133311
        0x08003494:    3e3f1f1f    ..?>    DCD    1044324127
        0x08003498:    f8fcfe7e    ~...    DCD    4177329790
        0x0800349c:    00c0e0f0    ....    DCD    12640496
        0x080034a0:    fff80000    ....    DCD    4294443008
        0x080034a4:    ffffffff    ....    DCD    4294967295
        0x080034a8:    00000107    ....    DCD    263
        0x080034ac:    00000000    ....    DCD    0
        0x080034b0:    00000000    ....    DCD    0
        0x080034b4:    7f070100    ....    DCD    2131165440
        0x080034b8:    ffffffff    ....    DCD    4294967295
        0x080034bc:    7f0f80fc    ....    DCD    2131722492
        0x080034c0:    ffffffff    ....    DCD    4294967295
        0x080034c4:    0080e0f8    ....    DCD    8446200
        0x080034c8:    00000000    ....    DCD    0
        0x080034cc:    00000000    ....    DCD    0
        0x080034d0:    e0c08080    ....    DCD    3770712192
        0x080034d4:    ffffffff    ....    DCD    4294967295
        0x080034d8:    0000ffff    ....    DCD    65535
        0x080034dc:    0f070300    ....    DCD    252117760
        0x080034e0:    3f1f1f0f    ...?    DCD    1059004175
        0x080034e4:    3e3e3e3f    ?>>>    DCD    1044266559
        0x080034e8:    1f1f3e3e    >>..    DCD    522141246
        0x080034ec:    e307070f    ....    DCD    3808888591
        0x080034f0:    ffffffff    ....    DCD    4294967295
        0x080034f4:    38003fff    .?.8    DCD    939540479
        0x080034f8:    f8f8f8f8    ....    DCD    4177066232
        0x080034fc:    0080e0f8    ....    DCD    8446200
        0x08003500:    00000000    ....    DCD    0
        0x08003504:    80000000    ....    DCD    2147483648
        0x08003508:    fffcf0c0    ....    DCD    4294766784
        0x0800350c:    1f7fffff    ....    DCD    528482303
        0x08003510:    00000007    ....    DCD    7
        0x08003514:    0f070300    ....    DCD    252117760
        0x08003518:    3f1f1f0f    ...?    DCD    1059004175
        0x0800351c:    3e3e3e3e    >>>>    DCD    1044266558
        0x08003520:    1f3f3e3e    >>?.    DCD    524238398
        0x08003524:    070f1f1f    ....    DCD    118431519
        0x08003528:    00000103    ....    DCD    259
        0x0800352c:    fefe0000    ....    DCD    4278059008
        0x08003530:    fefefefe    ....    DCD    4278124286
        0x08003534:    3e3e3e3e    >>>>    DCD    1044266558
        0x08003538:    3e3e3e3e    >>>>    DCD    1044266558
        0x0800353c:    3e3e3e3e    >>>>    DCD    1044266558
        0x08003540:    3e3e3e3e    >>>>    DCD    1044266558
        0x08003544:    3e3e3e3e    >>>>    DCD    1044266558
        0x08003548:    ff3e3e3e    >>>.    DCD    4282269246
        0x0800354c:    ffffffff    ....    DCD    4294967295
        0x08003550:    000000ff    ....    DCD    255
        0x08003554:    00000000    ....    DCD    0
        0x08003558:    00000000    ....    DCD    0
        0x0800355c:    00000000    ....    DCD    0
        0x08003560:    00000000    ....    DCD    0
        0x08003564:    00000000    ....    DCD    0
        0x08003568:    ffffffff    ....    DCD    4294967295
        0x0800356c:    f0f0ffff    ....    DCD    4042326015
        0x08003570:    f0f0f0f0    ....    DCD    4042322160
        0x08003574:    f0f0f0f0    ....    DCD    4042322160
        0x08003578:    f0f0f0f0    ....    DCD    4042322160
        0x0800357c:    f0f0f0f0    ....    DCD    4042322160
        0x08003580:    0000f0f0    ....    DCD    61680
        0x08003584:    ffffff00    ....    DCD    4294967040
        0x08003588:    01ffffff    ....    DCD    33554431
        0x0800358c:    01010101    ....    DCD    16843009
        0x08003590:    01010101    ....    DCD    16843009
        0x08003594:    01010101    ....    DCD    16843009
        0x08003598:    01010101    ....    DCD    16843009
        0x0800359c:    00010101    ....    DCD    65793
        0x080035a0:    ffff0000    ....    DCD    4294901760
        0x080035a4:    ffffffff    ....    DCD    4294967295
        0x080035a8:    00000000    ....    DCD    0
        0x080035ac:    00000000    ....    DCD    0
        0x080035b0:    00000000    ....    DCD    0
        0x080035b4:    00000000    ....    DCD    0
        0x080035b8:    00000000    ....    DCD    0
        0x080035bc:    1f000000    ....    DCD    520093696
        0x080035c0:    1f1f1f1f    ....    DCD    522133279
        0x080035c4:    0000001f    ....    DCD    31
        0x080035c8:    00000000    ....    DCD    0
        0x080035cc:    00000000    ....    DCD    0
        0x080035d0:    00000000    ....    DCD    0
        0x080035d4:    00000000    ....    DCD    0
        0x080035d8:    00000000    ....    DCD    0
        0x080035dc:    3e3e3e3e    >>>>    DCD    1044266558
        0x080035e0:    3e3e3e3e    >>>>    DCD    1044266558
        0x080035e4:    3e3e3e3e    >>>>    DCD    1044266558
        0x080035e8:    fefe3e3e    >>..    DCD    4278074942
        0x080035ec:    fefefefe    ....    DCD    4278124286
        0x080035f0:    3e3e3e3e    >>>>    DCD    1044266558
        0x080035f4:    3e3e3e3e    >>>>    DCD    1044266558
        0x080035f8:    3e3e3e3e    >>>>    DCD    1044266558
        0x080035fc:    00003e3e    >>..    DCD    15934
        0x08003600:    00000000    ....    DCD    0
        0x08003604:    00000000    ....    DCD    0
        0x08003608:    00000000    ....    DCD    0
        0x0800360c:    ffffffff    ....    DCD    4294967295
        0x08003610:    0000ffff    ....    DCD    65535
        0x08003614:    00000000    ....    DCD    0
        0x08003618:    00000000    ....    DCD    0
        0x0800361c:    00000000    ....    DCD    0
        0x08003620:    00000000    ....    DCD    0
        0x08003624:    00000000    ....    DCD    0
        0x08003628:    00000000    ....    DCD    0
        0x0800362c:    ffff0000    ....    DCD    4294901760
        0x08003630:    ffffffff    ....    DCD    4294967295
        0x08003634:    00000000    ....    DCD    0
        0x08003638:    00000000    ....    DCD    0
        0x0800363c:    00000000    ....    DCD    0
        0x08003640:    00000000    ....    DCD    0
        0x08003644:    00000000    ....    DCD    0
        0x08003648:    00000000    ....    DCD    0
        0x0800364c:    00000000    ....    DCD    0
        0x08003650:    ffffffff    ....    DCD    4294967295
        0x08003654:    0000ffff    ....    DCD    65535
        0x08003658:    00000000    ....    DCD    0
        0x0800365c:    00000000    ....    DCD    0
        0x08003660:    00000000    ....    DCD    0
        0x08003664:    00000000    ....    DCD    0
        0x08003668:    00000000    ....    DCD    0
        0x0800366c:    00000000    ....    DCD    0
        0x08003670:    ffff0000    ....    DCD    4294901760
        0x08003674:    ffffffff    ....    DCD    4294967295
        0x08003678:    00000000    ....    DCD    0
        0x0800367c:    00000000    ....    DCD    0
        0x08003680:    00000000    ....    DCD    0
        0x08003684:    00000000    ....    DCD    0
        0x08003688:    00000000    ....    DCD    0
        0x0800368c:    00000000    ....    DCD    0
        0x08003690:    00000000    ....    DCD    0
        0x08003694:    1f1f1f1f    ....    DCD    522133279
        0x08003698:    00001f1f    ....    DCD    7967
        0x0800369c:    00000000    ....    DCD    0
        0x080036a0:    00000000    ....    DCD    0
        0x080036a4:    00000000    ....    DCD    0
    microsoftSansSerif_46ptDescriptors
        0x080036a8:    00002e06    ....    DCD    11782
        0x080036ac:    00000000    ....    DCD    0
        0x080036b0:    00242e1c    ..$.    DCD    2371100
        0x080036b4:    00cc2e10    ....    DCD    13381136
        0x080036b8:    012c2e1d    ..,.    DCD    19672605
        0x080036bc:    01da2e1c    ....    DCD    31075868
        0x080036c0:    02822e1e    ....    DCD    42085918
        0x080036c4:    03362e1c    ..6.    DCD    53882396
        0x080036c8:    03de2e1c    ....    DCD    64892444
        0x080036cc:    04862e1c    ....    DCD    75902492
        0x080036d0:    052e2e1c    ....    DCD    86912540
        0x080036d4:    05d62e1c    ....    DCD    97922588
        0x080036d8:    00000000    ....    DCD    0
        0x080036dc:    00000000    ....    DCD    0
        0x080036e0:    00000000    ....    DCD    0
        0x080036e4:    00000000    ....    DCD    0
        0x080036e8:    00000000    ....    DCD    0
        0x080036ec:    00000000    ....    DCD    0
        0x080036f0:    00000000    ....    DCD    0
        0x080036f4:    00000000    ....    DCD    0
        0x080036f8:    00000000    ....    DCD    0
        0x080036fc:    00000000    ....    DCD    0
        0x08003700:    00000000    ....    DCD    0
        0x08003704:    00000000    ....    DCD    0
        0x08003708:    067e2e1d    ..~.    DCD    108932637
        0x0800370c:    00000000    ....    DCD    0
        0x08003710:    00000000    ....    DCD    0
        0x08003714:    00000000    ....    DCD    0
        0x08003718:    00000000    ....    DCD    0
        0x0800371c:    00000000    ....    DCD    0
        0x08003720:    00000000    ....    DCD    0
        0x08003724:    00000000    ....    DCD    0
        0x08003728:    00000000    ....    DCD    0
        0x0800372c:    00000000    ....    DCD    0
        0x08003730:    00000000    ....    DCD    0
        0x08003734:    00000000    ....    DCD    0
        0x08003738:    00000000    ....    DCD    0
        0x0800373c:    00000000    ....    DCD    0
        0x08003740:    072c2e22    ".,.    DCD    120335906
    microsoftSansSerif_46ptFontInfo
        0x08003744:    02542e06    ..T.    DCD    39071238
        0x08003748:    080036a8    .6..    DCD    134231720
        0x0800374c:    08002eb0    ....    DCD    134229680
    consolas_18ptBitmaps
        0x08003750:    fff00000    ....    DCD    4293918720
        0x08003754:    ff1f033f    ?...    DCD    4280222527
        0x08003758:    0000c0f8    ....    DCD    49400
        0x0800375c:    0f3f7f78    x.?.    DCD    255819640
        0x08003760:    0f0e0e0e    ....    DCD    252579342
        0x08003764:    707e7f0f    ..~p    DCD    1887338255
        0x08003768:    f0e0c080    ....    DCD    4041261184
        0x0800376c:    808090b8    ....    DCD    2155909304
        0x08003770:    80808080    ....    DCD    2155905152
        0x08003774:    07030180    ....    DCD    117637504
        0x08003778:    01091d0f    ....    DCD    17374479
        0x0800377c:    01010101    ....    DCD    16843009
        0x08003780:    80800101    ....    DCD    2155872513
        0x08003784:    80808080    ....    DCD    2155905152
        0x08003788:    f0b89080    ....    DCD    4038627456
        0x0800378c:    0180c0e0    ....    DCD    25215200
        0x08003790:    01010101    ....    DCD    16843009
        0x08003794:    1d090101    ....    DCD    487129345
        0x08003798:    0103070f    ....    DCD    16975631
    consolas_18ptDescriptors
        0x0800379c:    00000f0c    ....    DCD    3852
        0x080037a0:    00180f0d    ....    DCD    1576717
        0x080037a4:    00320f0d    ..2.    DCD    3280653
    consolas_18ptFontInfo
        0x080037a8:    02020002    ....    DCD    33685506
        0x080037ac:    0800379c    .7..    DCD    134231964
        0x080037b0:    08003750    P7..    DCD    134231888
    microsoftSansSerif_20ptBitmaps
        0x080037b4:    00000000    ....    DCD    0
        0x080037b8:    07070000    ....    DCD    117899264
        0x080037bc:    fef8e007    ....    DCD    4277723143
        0x080037c0:    0303071e    ....    DCD    50530078
        0x080037c4:    1e070303    ....    DCD    503776003
        0x080037c8:    3fe0f8fe    ...?    DCD    1071708414
        0x080037cc:    00c0ffff    ....    DCD    12648447
        0x080037d0:    00000000    ....    DCD    0
        0x080037d4:    ffffc000    ....    DCD    4294950912
        0x080037d8:    0300003f    ?...    DCD    50331711
        0x080037dc:    06060703    ....    DCD    101058307
        0x080037e0:    03070606    ....    DCD    50791942
        0x080037e4:    30000003    ...0    DCD    805306371
        0x080037e8:    3c383030    008<    DCD    1010315312
        0x080037ec:    00ffffff    ....    DCD    16777215
        0x080037f0:    00000000    ....    DCD    0
        0x080037f4:    00ffffff    ....    DCD    16777215
        0x080037f8:    00000000    ....    DCD    0
        0x080037fc:    30070707    ...0    DCD    805766919
        0x08003800:    070e3e3c    <>..    DCD    118373948
        0x08003804:    03030303    ....    DCD    50529027
        0x08003808:    fcfe8f07    ....    DCD    4244541191
        0x0800380c:    c08000f8    ....    DCD    3229614328
        0x08003810:    3870e0e0    ..p8    DCD    946921696
        0x08003814:    070e1c1c    ....    DCD    118365212
        0x08003818:    06000103    ....    DCD    100663555
        0x0800381c:    06070707    ....    DCD    101123847
        0x08003820:    06060606    ....    DCD    101058054
        0x08003824:    06060606    ....    DCD    101058054
        0x08003828:    1e1c1806    ....    DCD    505157638
        0x0800382c:    0303070f    ....    DCD    50530063
        0x08003830:    fe878303    ....    DCD    4270293763
        0x08003834:    c00078fe    .x..    DCD    3221256446
        0x08003838:    0080c0c0    ....    DCD    8437952
        0x0800383c:    03030303    ....    DCD    50529027
        0x08003840:    fcfe8f07    ....    DCD    4244541191
        0x08003844:    030100f8    ....    DCD    50397432
        0x08003848:    06060707    ....    DCD    101058311
        0x0800384c:    03070606    ....    DCD    50791942
        0x08003850:    00000103    ....    DCD    259
        0x08003854:    80000000    ....    DCD    2147483648
        0x08003858:    1e78f0e0    ..x.    DCD    511242464
        0x0800385c:    00ffffff    ....    DCD    16777215
        0x08003860:    78700000    ..px    DCD    2020605952
        0x08003864:    63676f7c    |ogc    DCD    1667723132
        0x08003868:    ff606060    ```.    DCD    4284506208
        0x0800386c:    6060ffff    ..``    DCD    1616969727
        0x08003870:    00000060    `...    DCD    96
        0x08003874:    00000000    ....    DCD    0
        0x08003878:    07070000    ....    DCD    117899264
        0x0800387c:    00000007    ....    DCD    7
        0x08003880:    ffffe000    ....    DCD    4294959104
        0x08003884:    c3c3c39f    ....    DCD    3284386719
        0x08003888:    8383c3c3    ....    DCD    2206450627
        0x0800388c:    c3c00003    ....    DCD    3284140035
        0x08003890:    010183c3    ....    DCD    16876483
        0x08003894:    01000000    ....    DCD    16777216
        0x08003898:    7cffff83    ...|    DCD    2097151875
        0x0800389c:    07030100    ....    DCD    117637376
        0x080038a0:    06060607    ....    DCD    101058055
        0x080038a4:    03030706    ....    DCD    50530054
        0x080038a8:    f8e00001    ....    DCD    4175429633
        0x080038ac:    878f3efc    .>..    DCD    2274311932
        0x080038b0:    87838383    ....    DCD    2273543043
        0x080038b4:    181c1e07    ....    DCD    404495879
        0x080038b8:    c3ffff3f    ?...    DCD    3288334143
        0x080038bc:    01010103    ....    DCD    16843011
        0x080038c0:    ff870301    ....    DCD    4287038209
        0x080038c4:    00007cfe    .|..    DCD    31998
        0x080038c8:    07070301    ....    DCD    117900033
        0x080038cc:    07060606    ....    DCD    117835270
        0x080038d0:    00010303    ....    DCD    66307
        0x080038d4:    03030303    ....    DCD    50529027
        0x080038d8:    03030303    ....    DCD    50529027
        0x080038dc:    7fffe383    ....    DCD    2147476355
        0x080038e0:    0000071f    ....    DCD    1823
        0x080038e4:    e0000000    ....    DCD    3758096384
        0x080038e8:    073ffef8    ..?.    DCD    121634552
        0x080038ec:    00000001    ....    DCD    1
        0x080038f0:    04000000    ....    DCD    67108864
        0x080038f4:    00030707    ....    DCD    198407
        0x080038f8:    00000000    ....    DCD    0
        0x080038fc:    7c000000    ...|    DCD    2080374784
        0x08003900:    83c7fefe    ....    DCD    2210922238
        0x08003904:    c7830303    ....    DCD    3347251971
        0x08003908:    007cfefe    ..|.    DCD    8191742
        0x0800390c:    8ffcf8f0    ....    DCD    2415720688
        0x08003910:    03030707    ....    DCD    50530055
        0x08003914:    fc8f0707    ....    DCD    4237231879
        0x08003918:    0100f0f8    ....    DCD    16838904
        0x0800391c:    06070703    ....    DCD    101123843
        0x08003920:    07060606    ....    DCD    117835270
        0x08003924:    00010307    ....    DCD    66311
        0x08003928:    0efefcf0    ....    DCD    251591920
        0x0800392c:    03030307    ....    DCD    50529031
        0x08003930:    fc1e0707    ....    DCD    4229826311
        0x08003934:    c3c1e0f8    ....    DCD    3284263160
        0x08003938:    0c0e07c7    ....    DCD    202246087
        0x0800393c:    8e0c0c0c    ....    DCD    2383154188
        0x08003940:    3fffffe6    ...?    DCD    1073741798
        0x08003944:    07030100    ....    DCD    117637376
        0x08003948:    06060607    ....    DCD    101058055
        0x0800394c:    01030707    ....    DCD    16975623
        0x08003950:    ffff0000    ....    DCD    4294901760
        0x08003954:    030303ff    ....    DCD    50529279
        0x08003958:    03030303    ....    DCD    50529027
        0x0800395c:    03030303    ....    DCD    50529027
        0x08003960:    03ffffff    ....    DCD    67108863
        0x08003964:    03030303    ....    DCD    50529027
        0x08003968:    03030303    ....    DCD    50529027
        0x0800396c:    07070003    ....    DCD    117899267
        0x08003970:    00000007    ....    DCD    7
        0x08003974:    00000000    ....    DCD    0
        0x08003978:    00000000    ....    DCD    0
        0x0800397c:    03030303    ....    DCD    50529027
        0x08003980:    ffff0303    ....    DCD    4294902531
        0x08003984:    030303ff    ....    DCD    50529279
        0x08003988:    00030303    ....    DCD    197379
        0x0800398c:    00000000    ....    DCD    0
        0x08003990:    ffffff00    ....    DCD    4294967040
        0x08003994:    00000000    ....    DCD    0
        0x08003998:    00000000    ....    DCD    0
        0x0800399c:    00000000    ....    DCD    0
        0x080039a0:    00070707    ....    DCD    460551
        0x080039a4:    00000000    ....    DCD    0
        0x080039a8:    0000        ..      DCW    0
    microsoftSansSerif_20ptDescriptors
        0x080039aa:    1303        ..      DCW    4867
        0x080039ac:    00000000    ....    DCD    0
        0x080039b0:    130e0000    ....    DCD    319684608
        0x080039b4:    13080009    ....    DCD    319291401
        0x080039b8:    130e0033    3...    DCD    319684659
        0x080039bc:    130e004b    K...    DCD    319684683
        0x080039c0:    130f0075    u...    DCD    319750261
        0x080039c4:    130e009f    ....    DCD    319684767
        0x080039c8:    130e00cc    ....    DCD    319684812
        0x080039cc:    130e00f6    ....    DCD    319684854
        0x080039d0:    130e0120     ...    DCD    319684896
        0x080039d4:    130e014a    J...    DCD    319684938
        0x080039d8:    00000174    t...    DCD    372
        0x080039dc:    00000000    ....    DCD    0
        0x080039e0:    00000000    ....    DCD    0
        0x080039e4:    00000000    ....    DCD    0
        0x080039e8:    00000000    ....    DCD    0
        0x080039ec:    00000000    ....    DCD    0
        0x080039f0:    00000000    ....    DCD    0
        0x080039f4:    00000000    ....    DCD    0
        0x080039f8:    00000000    ....    DCD    0
        0x080039fc:    00000000    ....    DCD    0
        0x08003a00:    00000000    ....    DCD    0
        0x08003a04:    00000000    ....    DCD    0
        0x08003a08:    130e0000    ....    DCD    319684608
        0x08003a0c:    0000019e    ....    DCD    414
        0x08003a10:    00000000    ....    DCD    0
        0x08003a14:    00000000    ....    DCD    0
        0x08003a18:    00000000    ....    DCD    0
        0x08003a1c:    00000000    ....    DCD    0
        0x08003a20:    00000000    ....    DCD    0
        0x08003a24:    00000000    ....    DCD    0
        0x08003a28:    00000000    ....    DCD    0
        0x08003a2c:    00000000    ....    DCD    0
        0x08003a30:    00000000    ....    DCD    0
        0x08003a34:    00000000    ....    DCD    0
        0x08003a38:    00000000    ....    DCD    0
        0x08003a3c:    00000000    ....    DCD    0
        0x08003a40:    130f0000    ....    DCD    319750144
        0x08003a44:    000001c8    ....    DCD    456
    microsoftSansSerif_20ptFontInfo
        0x08003a48:    02542e03    ..T.    DCD    39071235
        0x08003a4c:    080039aa    .9..    DCD    134232490
        0x08003a50:    080037b4    .7..    DCD    134231988
    consolas_8ptBitmaps
        0x08003a54:    312142fc    .B!1    DCD    824263420
        0x08003a58:    00fc0a11    ....    DCD    16517649
        0x08003a5c:    02020201    ....    DCD    33686017
        0x08003a60:    02040001    ....    DCD    33816577
        0x08003a64:    0000ff01    ....    DCD    65281
        0x08003a68:    02020200    ....    DCD    33686016
        0x08003a6c:    02020203    ....    DCD    33686019
        0x08003a70:    41810102    ...A    DCD    1098973442
        0x08003a74:    02001e23    #...    DCD    33562147
        0x08003a78:    02020203    ....    DCD    33686019
        0x08003a7c:    11010202    ....    DCD    285278722
        0x08003a80:    ee391111    ..9.    DCD    3996717329
        0x08003a84:    02020202    ....    DCD    33686018
        0x08003a88:    e0c00001    ....    DCD    3770679297
        0x08003a8c:    ff838e98    ....    DCD    4286811800
        0x08003a90:    00008080    ....    DCD    32896
        0x08003a94:    03000000    ....    DCD    50331648
        0x08003a98:    111f0000    ....    DCD    287244288
        0x08003a9c:    e0311111    ..1.    DCD    3761312017
        0x08003aa0:    02020202    ....    DCD    33686018
        0x08003aa4:    26f80001    ...&    DCD    653787137
        0x08003aa8:    31111113    ...1    DCD    823202067
        0x08003aac:    020100e0    ....    DCD    33620192
        0x08003ab0:    01010202    ....    DCD    16843266
        0x08003ab4:    e1810101    ....    DCD    3783328001
        0x08003ab8:    00030f39    9...    DCD    200505
        0x08003abc:    00000302    ....    DCD    770
        0x08003ac0:    29ce0000    ...)    DCD    701366272
        0x08003ac4:    ce291111    ..).    DCD    3458797841
        0x08003ac8:    02020301    ....    DCD    33686273
        0x08003acc:    321e0102    ...2    DCD    840827138
        0x08003ad0:    92212121    !!!.    DCD    2451644705
        0x08003ad4:    0202007c    |...    DCD    33685628
        0x08003ad8:    00010102    ....    DCD    65794
    consolas_8ptDescriptors
        0x08003adc:    00000a07    ....    DCD    2567
        0x08003ae0:    000e0a07    ....    DCD    920071
        0x08003ae4:    001c0a07    ....    DCD    1837575
        0x08003ae8:    002a0a06    ..*.    DCD    2755078
        0x08003aec:    00360a08    ..6.    DCD    3541512
        0x08003af0:    00460a06    ..F.    DCD    4590086
        0x08003af4:    00520a07    ..R.    DCD    5376519
        0x08003af8:    00600a07    ..`.    DCD    6294023
        0x08003afc:    006e0a06    ..n.    DCD    7211526
        0x08003b00:    007a0a07    ..z.    DCD    7997959
    consolas_8ptFontInfo
        0x08003b04:    02393002    .09.    DCD    37302274
        0x08003b08:    08003adc    .:..    DCD    134232796
        0x08003b0c:    08003a54    T:..    DCD    134232660
    .constdata
    CHANNEL_OFFSET_TAB
        0x08003b10:    44301c08    ..0D    DCD    1144003592
        0x08003b14:    6c58        Xl      DCW    27736
        0x08003b16:    80          .       DCB    128
    OFFSET_TAB_CCMRx
        0x08003b17:    00          .       DCB    0
        0x08003b18:    04000000    ....    DCD    67108864
        0x08003b1c:    0404        ..      DCW    1028
    SHIFT_TAB_OCxx
        0x08003b1e:    0000        ..      DCW    0
        0x08003b20:    00000008    ....    DCD    8
        0x08003b24:    08          .       DCB    8
    SHIFT_TAB_ICxx
        0x08003b25:    000008      ...     DCB    0,0,8
        0x08003b28:    08000000    ....    DCD    134217728
    SHIFT_TAB_CCxP
        0x08003b2c:    06040200    ....    DCD    100925952
        0x08003b30:    0a08        ..      DCW    2568
        0x08003b32:    0c          .       DCB    12
    SHIFT_TAB_OISx
        0x08003b33:    00          .       DCB    0
        0x08003b34:    04030201    ....    DCD    67305985
        0x08003b38:    00000605    ....    DCD    1541
        0x08003b3c:    00000000    ....    DCD    0
    .constdata
    CHANNEL_OFFSET_TAB
        0x08003b40:    44301c08    ..0D    DCD    1144003592
        0x08003b44:    6c58        Xl      DCW    27736
        0x08003b46:    80          .       DCB    128
    OFFSET_TAB_CCMRx
        0x08003b47:    00          .       DCB    0
        0x08003b48:    04000000    ....    DCD    67108864
        0x08003b4c:    0404        ..      DCW    1028
    SHIFT_TAB_OCxx
        0x08003b4e:    0000        ..      DCW    0
        0x08003b50:    00000008    ....    DCD    8
        0x08003b54:    08          .       DCB    8
    SHIFT_TAB_ICxx
        0x08003b55:    000008      ...     DCB    0,0,8
        0x08003b58:    08000000    ....    DCD    134217728
    SHIFT_TAB_CCxP
        0x08003b5c:    06040200    ....    DCD    100925952
        0x08003b60:    0a08        ..      DCW    2568
        0x08003b62:    0c          .       DCB    12
    SHIFT_TAB_OISx
        0x08003b63:    00          .       DCB    0
        0x08003b64:    04030201    ....    DCD    67305985
        0x08003b68:    0605        ..      DCW    1541
    Menu_size
        0x08003b6a:    0021        !.      DCW    33
        0x08003b6c:    00000000    ....    DCD    0
    enc_setup
        0x08003b70:    00000000    ....    DCD    0
        0x08003b74:    00090000    ....    DCD    589824
    Region$$Table$$Base
        0x08003b78:    08003b98    .;..    DCD    134232984
        0x08003b7c:    20000000    ...     DCD    536870912
        0x08003b80:    00000598    ....    DCD    1432
        0x08003b84:    0800020c    ....    DCD    134218252
        0x08003b88:    08003e08    .>..    DCD    134233608
        0x08003b8c:    20000598    ...     DCD    536872344
        0x08003b90:    00003a6c    l:..    DCD    14956
        0x08003b94:    08001cac    ....    DCD    134225068
    Region$$Table$$Limit

** Section #2 'RW_IRAM1' (SHT_PROGBITS) [SHF_ALLOC + SHF_WRITE]
    Size   : 624 bytes (alignment 4)
    Address: 0x20000000


** Section #3 'RW_IRAM1' (SHT_NOBITS) [SHF_ALLOC + SHF_WRITE]
    Size   : 14956 bytes (alignment 8)
    Address: 0x20000598


** Section #4 '.debug_abbrev' (SHT_PROGBITS)
    Size   : 1476 bytes


** Section #5 '.debug_frame' (SHT_PROGBITS)
    Size   : 3584 bytes


** Section #6 '.debug_info' (SHT_PROGBITS)
    Size   : 188856 bytes


** Section #7 '.debug_line' (SHT_PROGBITS)
    Size   : 25624 bytes


** Section #8 '.debug_loc' (SHT_PROGBITS)
    Size   : 8412 bytes


** Section #9 '.debug_macinfo' (SHT_PROGBITS)
    Size   : 518896 bytes


** Section #10 '.debug_pubnames' (SHT_PROGBITS)
    Size   : 4638 bytes


** Section #11 '.symtab' (SHT_SYMTAB)
    Size   : 10160 bytes (alignment 4)
    String table #12 '.strtab'
    Last local symbol no. 440


** Section #12 '.strtab' (SHT_STRTAB)
    Size   : 8744 bytes


** Section #13 '.note' (SHT_NOTE)
    Size   : 28 bytes (alignment 4)


** Section #14 '.comment' (SHT_PROGBITS)
    Size   : 23488 bytes


** Section #15 '.shstrtab' (SHT_STRTAB)
    Size   : 156 bytes


