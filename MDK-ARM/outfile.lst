
========================================================================

** ELF Header Information

    File Name: C:\STM32\project\efeed\MDK-ARM\efeed\efeed.axf

    Machine class: ELFCLASS32 (32-bit)
    Data encoding: ELFDATA2LSB (Little endian)
    Header version: EV_CURRENT (Current version)
    Operating System ABI: none
    ABI Version: 0
    File Type: ET_EXEC (Executable) (2)
    Machine: EM_ARM (ARM)

    Image Entry point: 0x080000ed
    Flags: EF_ARM_HASENTRY + EF_ARM_ABI_FLOAT_SOFT (0x05000202)

    ARM ELF revision: 5 (ABI version 2)

    Conforms to Soft float procedure-call standard

    Built with
    Component: ARM Compiler 5.06 update 4 (build 422) Tool: armasm [4d35cf]
    Component: ARM Compiler 5.06 update 4 (build 422) Tool: armlink [4d35d2]

    Header size: 52 bytes (0x34)
    Program header entry size: 32 bytes (0x20)
    Section header entry size: 40 bytes (0x28)

    Program header entries: 1
    Section header entries: 16

    Program header offset: 830892 (0x000cadac)
    Section header offset: 830924 (0x000cadcc)

    Section header string table index: 15

========================================================================

** Program header #0 (PT_LOAD) [PF_X + PF_W + PF_R + PF_ARM_ENTRY]
    Size : 13688 bytes (11084 bytes in file)
    Virtual address: 0x08000000 (Alignment 8)


========================================================================

** Section #1 'ER_IROM1' (SHT_PROGBITS) [SHF_ALLOC + SHF_EXECINSTR]
    Size   : 10672 bytes (alignment 8)
    Address: 0x08000000

    $d.realdata
    RESET
    __Vectors
        0x08000000:    20000bc8    ...     DCD    536873928
        0x08000004:    08000101    ....    DCD    134217985
        0x08000008:    08000109    ....    DCD    134217993
        0x0800000c:    0800010b    ....    DCD    134217995
        0x08000010:    0800010d    ....    DCD    134217997
        0x08000014:    0800010f    ....    DCD    134217999
        0x08000018:    08000111    ....    DCD    134218001
        0x0800001c:    00000000    ....    DCD    0
        0x08000020:    00000000    ....    DCD    0
        0x08000024:    00000000    ....    DCD    0
        0x08000028:    00000000    ....    DCD    0
        0x0800002c:    080018bd    ....    DCD    134224061
        0x08000030:    08000115    ....    DCD    134218005
        0x08000034:    00000000    ....    DCD    0
        0x08000038:    080017bd    ....    DCD    134223805
        0x0800003c:    080018c1    ....    DCD    134224065
        0x08000040:    0800011b    ....    DCD    134218011
        0x08000044:    0800011b    ....    DCD    134218011
        0x08000048:    0800011b    ....    DCD    134218011
        0x0800004c:    0800011b    ....    DCD    134218011
        0x08000050:    0800011b    ....    DCD    134218011
        0x08000054:    0800011b    ....    DCD    134218011
        0x08000058:    0800011b    ....    DCD    134218011
        0x0800005c:    0800011b    ....    DCD    134218011
        0x08000060:    0800011b    ....    DCD    134218011
        0x08000064:    0800011b    ....    DCD    134218011
        0x08000068:    0800011b    ....    DCD    134218011
        0x0800006c:    0800011b    ....    DCD    134218011
        0x08000070:    0800011b    ....    DCD    134218011
        0x08000074:    0800011b    ....    DCD    134218011
        0x08000078:    08000265    e...    DCD    134218341
        0x0800007c:    0800011b    ....    DCD    134218011
        0x08000080:    0800011b    ....    DCD    134218011
        0x08000084:    0800029d    ....    DCD    134218397
        0x08000088:    0800011b    ....    DCD    134218011
        0x0800008c:    0800011b    ....    DCD    134218011
        0x08000090:    0800011b    ....    DCD    134218011
        0x08000094:    0800011b    ....    DCD    134218011
        0x08000098:    0800011b    ....    DCD    134218011
        0x0800009c:    0800011b    ....    DCD    134218011
        0x080000a0:    0800011b    ....    DCD    134218011
        0x080000a4:    08001a61    a...    DCD    134224481
        0x080000a8:    0800011b    ....    DCD    134218011
        0x080000ac:    0800011b    ....    DCD    134218011
        0x080000b0:    08001a81    ....    DCD    134224513
        0x080000b4:    08001ac9    ....    DCD    134224585
        0x080000b8:    08001b45    E...    DCD    134224709
        0x080000bc:    0800011b    ....    DCD    134218011
        0x080000c0:    0800011b    ....    DCD    134218011
        0x080000c4:    08000351    Q...    DCD    134218577
        0x080000c8:    0800034d    M...    DCD    134218573
        0x080000cc:    0800011b    ....    DCD    134218011
        0x080000d0:    0800011b    ....    DCD    134218011
        0x080000d4:    0800011b    ....    DCD    134218011
        0x080000d8:    08001bf9    ....    DCD    134224889
        0x080000dc:    0800011b    ....    DCD    134218011
        0x080000e0:    0800011b    ....    DCD    134218011
        0x080000e4:    0800011b    ....    DCD    134218011
        0x080000e8:    0800011b    ....    DCD    134218011
    $t
    .ARM.Collect$$$$00000000
    .ARM.Collect$$$$00000001
    __Vectors_End
    __main
    _main_stk
        0x080000ec:    f8dfd00c    ....    LDR      sp,__lit__00000000 ; [0x80000fc] = 0x20000bc8
    .ARM.Collect$$$$00000004
    _main_scatterload
        0x080000f0:    f000f87a    ..z.    BL       __scatterload ; 0x80001e8
    .ARM.Collect$$$$00000008
    .ARM.Collect$$$$0000000A
    .ARM.Collect$$$$0000000B
    __main_after_scatterload
    _main_clock
    _main_cpp_init
    _main_init
        0x080000f4:    4800        .H      LDR      r0,[pc,#0] ; [0x80000f8] = 0x80022a1
        0x080000f6:    4700        .G      BX       r0
    $d
        0x080000f8:    080022a1    ."..    DCD    134226593
    .ARM.Collect$$$$00002712
    __lit__00000000
    .ARM.Collect$$$$0000000D
    .ARM.Collect$$$$0000000F
    __rt_final_cpp
    __rt_final_exit
        0x080000fc:    20000bc8    ...     DCD    536873928
    $t
    .text
    Reset_Handler
;;;150                     LDR     R0, =SystemInit
        0x08000100:    4806        .H      LDR      r0,[pc,#24] ; [0x800011c] = 0x8001a09
;;;151                     BLX     R0
        0x08000102:    4780        .G      BLX      r0
;;;152                     LDR     R0, =__main
        0x08000104:    4806        .H      LDR      r0,[pc,#24] ; [0x8000120] = 0x80000ed
;;;153                     BX      R0
        0x08000106:    4700        .G      BX       r0
    NMI_Handler
;;;154                     ENDP
;;;155    
;;;156    ; Dummy Exception Handlers (infinite loops which can be modified)
;;;157    
;;;158    NMI_Handler     PROC
;;;159                    EXPORT  NMI_Handler                [WEAK]
;;;160                    B       .
        0x08000108:    e7fe        ..      B        NMI_Handler ; 0x8000108
    HardFault_Handler
;;;161                    ENDP
;;;162    HardFault_Handler\
;;;163                    PROC
;;;164                    EXPORT  HardFault_Handler          [WEAK]
;;;165                    B       .
        0x0800010a:    e7fe        ..      B        HardFault_Handler ; 0x800010a
    MemManage_Handler
;;;166                    ENDP
;;;167    MemManage_Handler\
;;;168                    PROC
;;;169                    EXPORT  MemManage_Handler          [WEAK]
;;;170                    B       .
        0x0800010c:    e7fe        ..      B        MemManage_Handler ; 0x800010c
    BusFault_Handler
;;;171                    ENDP
;;;172    BusFault_Handler\
;;;173                    PROC
;;;174                    EXPORT  BusFault_Handler           [WEAK]
;;;175                    B       .
        0x0800010e:    e7fe        ..      B        BusFault_Handler ; 0x800010e
    UsageFault_Handler
;;;176                    ENDP
;;;177    UsageFault_Handler\
;;;178                    PROC
;;;179                    EXPORT  UsageFault_Handler         [WEAK]
;;;180                    B       .
        0x08000110:    e7fe        ..      B        UsageFault_Handler ; 0x8000110
;;;181                    ENDP
;;;182    SVC_Handler     PROC
;;;183                    EXPORT  SVC_Handler                [WEAK]
;;;184                    B       .
        0x08000112:    e7fe        ..      B        0x8000112 ; UsageFault_Handler + 2
    DebugMon_Handler
;;;185                    ENDP
;;;186    DebugMon_Handler\
;;;187                    PROC
;;;188                    EXPORT  DebugMon_Handler           [WEAK]
;;;189                    B       .
        0x08000114:    e7fe        ..      B        DebugMon_Handler ; 0x8000114
;;;190                    ENDP
;;;191    PendSV_Handler  PROC
;;;192                    EXPORT  PendSV_Handler             [WEAK]
;;;193                    B       .
        0x08000116:    e7fe        ..      B        0x8000116 ; DebugMon_Handler + 2
;;;194                    ENDP
;;;195    SysTick_Handler PROC
;;;196                    EXPORT  SysTick_Handler            [WEAK]
;;;197                    B       .
        0x08000118:    e7fe        ..      B        0x8000118 ; DebugMon_Handler + 4
    ADC1_2_IRQHandler
    CAN1_RX1_IRQHandler
    CAN1_SCE_IRQHandler
    DMA1_Channel1_IRQHandler
    DMA1_Channel2_IRQHandler
    DMA1_Channel3_IRQHandler
    DMA1_Channel5_IRQHandler
    DMA1_Channel6_IRQHandler
    EXTI0_IRQHandler
    EXTI15_10_IRQHandler
    EXTI1_IRQHandler
    EXTI2_IRQHandler
    EXTI3_IRQHandler
    EXTI4_IRQHandler
    EXTI9_5_IRQHandler
    FLASH_IRQHandler
    I2C1_ER_IRQHandler
    I2C1_EV_IRQHandler
    PVD_IRQHandler
    RCC_IRQHandler
    RTC_Alarm_IRQHandler
    RTC_IRQHandler
    SPI1_IRQHandler
    SPI2_IRQHandler
    TAMPER_IRQHandler
    TIM1_BRK_IRQHandler
    TIM1_CC_IRQHandler
    TIM1_TRG_COM_IRQHandler
    USART1_IRQHandler
    USART3_IRQHandler
    USBWakeUp_IRQHandler
    USB_HP_CAN1_TX_IRQHandler
    USB_LP_CAN1_RX0_IRQHandler
    WWDG_IRQHandler
;;;198                    ENDP
;;;199    
;;;200    Default_Handler PROC
;;;201    
;;;202                    EXPORT  WWDG_IRQHandler            [WEAK]
;;;203                    EXPORT  PVD_IRQHandler             [WEAK]
;;;204                    EXPORT  TAMPER_IRQHandler          [WEAK]
;;;205                    EXPORT  RTC_IRQHandler             [WEAK]
;;;206                    EXPORT  FLASH_IRQHandler           [WEAK]
;;;207                    EXPORT  RCC_IRQHandler             [WEAK]
;;;208                    EXPORT  EXTI0_IRQHandler           [WEAK]
;;;209                    EXPORT  EXTI1_IRQHandler           [WEAK]
;;;210                    EXPORT  EXTI2_IRQHandler           [WEAK]
;;;211                    EXPORT  EXTI3_IRQHandler           [WEAK]
;;;212                    EXPORT  EXTI4_IRQHandler           [WEAK]
;;;213                    EXPORT  DMA1_Channel1_IRQHandler   [WEAK]
;;;214                    EXPORT  DMA1_Channel2_IRQHandler   [WEAK]
;;;215                    EXPORT  DMA1_Channel3_IRQHandler   [WEAK]
;;;216                    EXPORT  DMA1_Channel4_IRQHandler   [WEAK]
;;;217                    EXPORT  DMA1_Channel5_IRQHandler   [WEAK]
;;;218                    EXPORT  DMA1_Channel6_IRQHandler   [WEAK]
;;;219                    EXPORT  DMA1_Channel7_IRQHandler   [WEAK]
;;;220                    EXPORT  ADC1_2_IRQHandler          [WEAK]
;;;221                    EXPORT  USB_HP_CAN1_TX_IRQHandler  [WEAK]
;;;222                    EXPORT  USB_LP_CAN1_RX0_IRQHandler [WEAK]
;;;223                    EXPORT  CAN1_RX1_IRQHandler        [WEAK]
;;;224                    EXPORT  CAN1_SCE_IRQHandler        [WEAK]
;;;225                    EXPORT  EXTI9_5_IRQHandler         [WEAK]
;;;226                    EXPORT  TIM1_BRK_IRQHandler        [WEAK]
;;;227                    EXPORT  TIM1_UP_IRQHandler         [WEAK]
;;;228                    EXPORT  TIM1_TRG_COM_IRQHandler    [WEAK]
;;;229                    EXPORT  TIM1_CC_IRQHandler         [WEAK]
;;;230                    EXPORT  TIM2_IRQHandler            [WEAK]
;;;231                    EXPORT  TIM3_IRQHandler            [WEAK]
;;;232                    EXPORT  TIM4_IRQHandler            [WEAK]
;;;233                    EXPORT  I2C1_EV_IRQHandler         [WEAK]
;;;234                    EXPORT  I2C1_ER_IRQHandler         [WEAK]
;;;235                    EXPORT  I2C2_EV_IRQHandler         [WEAK]
;;;236                    EXPORT  I2C2_ER_IRQHandler         [WEAK]
;;;237                    EXPORT  SPI1_IRQHandler            [WEAK]
;;;238                    EXPORT  SPI2_IRQHandler            [WEAK]
;;;239                    EXPORT  USART1_IRQHandler          [WEAK]
;;;240                    EXPORT  USART2_IRQHandler          [WEAK]
;;;241                    EXPORT  USART3_IRQHandler          [WEAK]
;;;242                    EXPORT  EXTI15_10_IRQHandler       [WEAK]
;;;243                    EXPORT  RTC_Alarm_IRQHandler        [WEAK]
;;;244                    EXPORT  USBWakeUp_IRQHandler       [WEAK]
;;;245    
;;;246    WWDG_IRQHandler
;;;247    PVD_IRQHandler
;;;248    TAMPER_IRQHandler
;;;249    RTC_IRQHandler
;;;250    FLASH_IRQHandler
;;;251    RCC_IRQHandler
;;;252    EXTI0_IRQHandler
;;;253    EXTI1_IRQHandler
;;;254    EXTI2_IRQHandler
;;;255    EXTI3_IRQHandler
;;;256    EXTI4_IRQHandler
;;;257    DMA1_Channel1_IRQHandler
;;;258    DMA1_Channel2_IRQHandler
;;;259    DMA1_Channel3_IRQHandler
;;;260    DMA1_Channel4_IRQHandler
;;;261    DMA1_Channel5_IRQHandler
;;;262    DMA1_Channel6_IRQHandler
;;;263    DMA1_Channel7_IRQHandler
;;;264    ADC1_2_IRQHandler
;;;265    USB_HP_CAN1_TX_IRQHandler
;;;266    USB_LP_CAN1_RX0_IRQHandler
;;;267    CAN1_RX1_IRQHandler
;;;268    CAN1_SCE_IRQHandler
;;;269    EXTI9_5_IRQHandler
;;;270    TIM1_BRK_IRQHandler
;;;271    TIM1_UP_IRQHandler
;;;272    TIM1_TRG_COM_IRQHandler
;;;273    TIM1_CC_IRQHandler
;;;274    TIM2_IRQHandler
;;;275    TIM3_IRQHandler
;;;276    TIM4_IRQHandler
;;;277    I2C1_EV_IRQHandler
;;;278    I2C1_ER_IRQHandler
;;;279    I2C2_EV_IRQHandler
;;;280    I2C2_ER_IRQHandler
;;;281    SPI1_IRQHandler
;;;282    SPI2_IRQHandler
;;;283    USART1_IRQHandler
;;;284    USART2_IRQHandler
;;;285    USART3_IRQHandler
;;;286    EXTI15_10_IRQHandler
;;;287    RTC_Alarm_IRQHandler
;;;288    USBWakeUp_IRQHandler
;;;289    
;;;290                    B       .
        0x0800011a:    e7fe        ..      B        ADC1_2_IRQHandler ; 0x800011a
    $d
        0x0800011c:    08001a09    ....    DCD    134224393
        0x08000120:    080000ed    ....    DCD    134217965
    $t
    .text
    __aeabi_uldivmod
        0x08000124:    e92d5ff0    -.._    PUSH     {r4-r12,lr}
        0x08000128:    4605        .F      MOV      r5,r0
        0x0800012a:    2000        .       MOVS     r0,#0
        0x0800012c:    4692        .F      MOV      r10,r2
        0x0800012e:    469b        .F      MOV      r11,r3
        0x08000130:    4688        .F      MOV      r8,r1
        0x08000132:    4606        .F      MOV      r6,r0
        0x08000134:    4681        .F      MOV      r9,r0
        0x08000136:    2440        @$      MOVS     r4,#0x40
        0x08000138:    e01b        ..      B        0x8000172 ; __aeabi_uldivmod + 78
        0x0800013a:    4628        (F      MOV      r0,r5
        0x0800013c:    4641        AF      MOV      r1,r8
        0x0800013e:    4647        GF      MOV      r7,r8
        0x08000140:    4622        "F      MOV      r2,r4
        0x08000142:    f000f841    ..A.    BL       __aeabi_llsr ; 0x80001c8
        0x08000146:    4653        SF      MOV      r3,r10
        0x08000148:    465a        ZF      MOV      r2,r11
        0x0800014a:    1ac0        ..      SUBS     r0,r0,r3
        0x0800014c:    4191        .A      SBCS     r1,r1,r2
        0x0800014e:    d310        ..      BCC      0x8000172 ; __aeabi_uldivmod + 78
        0x08000150:    4611        .F      MOV      r1,r2
        0x08000152:    4618        .F      MOV      r0,r3
        0x08000154:    4622        "F      MOV      r2,r4
        0x08000156:    f000f828    ..(.    BL       __aeabi_llsl ; 0x80001aa
        0x0800015a:    1a2d        -.      SUBS     r5,r5,r0
        0x0800015c:    eb670801    g...    SBC      r8,r7,r1
        0x08000160:    464f        OF      MOV      r7,r9
        0x08000162:    4622        "F      MOV      r2,r4
        0x08000164:    2001        .       MOVS     r0,#1
        0x08000166:    2100        .!      MOVS     r1,#0
        0x08000168:    f000f81f    ....    BL       __aeabi_llsl ; 0x80001aa
        0x0800016c:    eb170900    ....    ADDS     r9,r7,r0
        0x08000170:    414e        NA      ADCS     r6,r6,r1
        0x08000172:    1e20         .      SUBS     r0,r4,#0
        0x08000174:    f1a40401    ....    SUB      r4,r4,#1
        0x08000178:    dcdf        ..      BGT      0x800013a ; __aeabi_uldivmod + 22
        0x0800017a:    4648        HF      MOV      r0,r9
        0x0800017c:    4631        1F      MOV      r1,r6
        0x0800017e:    462a        *F      MOV      r2,r5
        0x08000180:    4643        CF      MOV      r3,r8
        0x08000182:    e8bd9ff0    ....    POP      {r4-r12,pc}
    .text
    __aeabi_memset
    __aeabi_memset4
    __aeabi_memset8
        0x08000186:    b2d2        ..      UXTB     r2,r2
        0x08000188:    e001        ..      B        0x800018e ; __aeabi_memset + 8
        0x0800018a:    f8002b01    ...+    STRB     r2,[r0],#1
        0x0800018e:    1e49        I.      SUBS     r1,r1,#1
        0x08000190:    d2fb        ..      BCS      0x800018a ; __aeabi_memset + 4
        0x08000192:    4770        pG      BX       lr
    __aeabi_memclr
    __aeabi_memclr4
    __aeabi_memclr8
        0x08000194:    2200        ."      MOVS     r2,#0
        0x08000196:    e7f6        ..      B        __aeabi_memset ; 0x8000186
    _memset$wrapper
        0x08000198:    b510        ..      PUSH     {r4,lr}
        0x0800019a:    4613        .F      MOV      r3,r2
        0x0800019c:    460a        .F      MOV      r2,r1
        0x0800019e:    4604        .F      MOV      r4,r0
        0x080001a0:    4619        .F      MOV      r1,r3
        0x080001a2:    f7fffff0    ....    BL       __aeabi_memset ; 0x8000186
        0x080001a6:    4620         F      MOV      r0,r4
        0x080001a8:    bd10        ..      POP      {r4,pc}
    .text
    __aeabi_llsl
    _ll_shift_l
        0x080001aa:    2a20         *      CMP      r2,#0x20
        0x080001ac:    db04        ..      BLT      0x80001b8 ; __aeabi_llsl + 14
        0x080001ae:    3a20         :      SUBS     r2,r2,#0x20
        0x080001b0:    fa00f102    ....    LSL      r1,r0,r2
        0x080001b4:    2000        .       MOVS     r0,#0
        0x080001b6:    4770        pG      BX       lr
        0x080001b8:    4091        .@      LSLS     r1,r1,r2
        0x080001ba:    f1c20320    .. .    RSB      r3,r2,#0x20
        0x080001be:    fa20f303     ...    LSR      r3,r0,r3
        0x080001c2:    4319        .C      ORRS     r1,r1,r3
        0x080001c4:    4090        .@      LSLS     r0,r0,r2
        0x080001c6:    4770        pG      BX       lr
    .text
    __aeabi_llsr
    _ll_ushift_r
        0x080001c8:    2a20         *      CMP      r2,#0x20
        0x080001ca:    db04        ..      BLT      0x80001d6 ; __aeabi_llsr + 14
        0x080001cc:    3a20         :      SUBS     r2,r2,#0x20
        0x080001ce:    fa21f002    !...    LSR      r0,r1,r2
        0x080001d2:    2100        .!      MOVS     r1,#0
        0x080001d4:    4770        pG      BX       lr
        0x080001d6:    fa21f302    !...    LSR      r3,r1,r2
        0x080001da:    40d0        .@      LSRS     r0,r0,r2
        0x080001dc:    f1c20220    .. .    RSB      r2,r2,#0x20
        0x080001e0:    4091        .@      LSLS     r1,r1,r2
        0x080001e2:    4308        .C      ORRS     r0,r0,r1
        0x080001e4:    4619        .F      MOV      r1,r3
        0x080001e6:    4770        pG      BX       lr
    .text
    __scatterload
    __scatterload_rt2
        0x080001e8:    4c06        .L      LDR      r4,[pc,#24] ; [0x8000204] = 0x8002990
        0x080001ea:    4d07        .M      LDR      r5,[pc,#28] ; [0x8000208] = 0x80029b0
        0x080001ec:    e006        ..      B        0x80001fc ; __scatterload + 20
        0x080001ee:    68e0        .h      LDR      r0,[r4,#0xc]
        0x080001f0:    f0400301    @...    ORR      r3,r0,#1
        0x080001f4:    e8940007    ....    LDM      r4,{r0-r2}
        0x080001f8:    4798        .G      BLX      r3
        0x080001fa:    3410        .4      ADDS     r4,r4,#0x10
        0x080001fc:    42ac        .B      CMP      r4,r5
        0x080001fe:    d3f6        ..      BCC      0x80001ee ; __scatterload + 6
        0x08000200:    f7ffff78    ..x.    BL       __main_after_scatterload ; 0x80000f4
    $d
        0x08000204:    08002990    .)..    DCD    134228368
        0x08000208:    080029b0    .)..    DCD    134228400
    $t
    .text
    __decompress
    __decompress1
        0x0800020c:    b570        p.      PUSH     {r4-r6,lr}
        0x0800020e:    188c        ..      ADDS     r4,r1,r2
        0x08000210:    f8105b01    ...[    LDRB     r5,[r0],#1
        0x08000214:    f0150307    ....    ANDS     r3,r5,#7
        0x08000218:    d101        ..      BNE      0x800021e ; __decompress + 18
        0x0800021a:    f8103b01    ...;    LDRB     r3,[r0],#1
        0x0800021e:    112a        *.      ASRS     r2,r5,#4
        0x08000220:    d106        ..      BNE      0x8000230 ; __decompress + 36
        0x08000222:    f8102b01    ...+    LDRB     r2,[r0],#1
        0x08000226:    e003        ..      B        0x8000230 ; __decompress + 36
        0x08000228:    f8106b01    ...k    LDRB     r6,[r0],#1
        0x0800022c:    f8016b01    ...k    STRB     r6,[r1],#1
        0x08000230:    1e5b        [.      SUBS     r3,r3,#1
        0x08000232:    d1f9        ..      BNE      0x8000228 ; __decompress + 28
        0x08000234:    072b        +.      LSLS     r3,r5,#28
        0x08000236:    d405        ..      BMI      0x8000244 ; __decompress + 56
        0x08000238:    2300        .#      MOVS     r3,#0
        0x0800023a:    1e52        R.      SUBS     r2,r2,#1
        0x0800023c:    d40d        ..      BMI      0x800025a ; __decompress + 78
        0x0800023e:    f8013b01    ...;    STRB     r3,[r1],#1
        0x08000242:    e7fa        ..      B        0x800023a ; __decompress + 46
        0x08000244:    f8103b01    ...;    LDRB     r3,[r0],#1
        0x08000248:    1acb        ..      SUBS     r3,r1,r3
        0x0800024a:    1c92        ..      ADDS     r2,r2,#2
        0x0800024c:    e003        ..      B        0x8000256 ; __decompress + 74
        0x0800024e:    f8135b01    ...[    LDRB     r5,[r3],#1
        0x08000252:    f8015b01    ...[    STRB     r5,[r1],#1
        0x08000256:    1e52        R.      SUBS     r2,r2,#1
        0x08000258:    d5f9        ..      BPL      0x800024e ; __decompress + 66
        0x0800025a:    42a1        .B      CMP      r1,r4
        0x0800025c:    d3d8        ..      BCC      0x8000210 ; __decompress + 4
        0x0800025e:    2000        .       MOVS     r0,#0
        0x08000260:    bd70        p.      POP      {r4-r6,pc}
        0x08000262:    0000        ..      MOVS     r0,r0
    i.DMA1_Channel4_IRQHandler
    DMA1_Channel4_IRQHandler
;;; .\../Src/stm32f1xx_it.c
;;;195    {
        0x08000264:    b510        ..      PUSH     {r4,lr}
;;;196      /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */
;;;197      if(LL_DMA_IsActiveFlag_TC4(DMA1))
        0x08000266:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h
;;;1258     return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF4) == (DMA_ISR_TCIF4));
        0x08000268:    480b        .H      LDR      r0,[pc,#44] ; [0x8000298] = 0x40020000
        0x0800026a:    6800        .h      LDR      r0,[r0,#0]
        0x0800026c:    f3c03040    ..@0    UBFX     r0,r0,#13,#1
        0x08000270:    b140        @.      CBZ      r0,0x8000284 ; DMA1_Channel4_IRQHandler + 32
;;; .\../Src/stm32f1xx_it.c
;;;199        LL_DMA_ClearFlag_GI4(DMA1);
        0x08000272:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h
;;;1489     WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF4);
        0x08000274:    f44f5080    O..P    MOV      r0,#0x1000
        0x08000278:    4907        .I      LDR      r1,[pc,#28] ; [0x8000298] = 0x40020000
        0x0800027a:    6048        H`      STR      r0,[r1,#4]
;;;1490   }
        0x0800027c:    bf00        ..      NOP      
;;; .\../Src/stm32f1xx_it.c
;;;200        Transfer_Complete_Callback();
        0x0800027e:    f001fc85    ....    BL       Transfer_Complete_Callback ; 0x8001b8c
        0x08000282:    e007        ..      B        0x8000294 ; DMA1_Channel4_IRQHandler + 48
;;;201    //    DMA1_Transfer_Complete_Callback();
;;;202      }
;;;203      else if(LL_DMA_IsActiveFlag_TE4(DMA1))
        0x08000284:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h
;;;1412     return (READ_BIT(DMAx->ISR, DMA_ISR_TEIF4) == (DMA_ISR_TEIF4));
        0x08000286:    4804        .H      LDR      r0,[pc,#16] ; [0x8000298] = 0x40020000
        0x08000288:    6800        .h      LDR      r0,[r0,#0]
        0x0800028a:    f3c030c0    ...0    UBFX     r0,r0,#15,#1
        0x0800028e:    b108        ..      CBZ      r0,0x8000294 ; DMA1_Channel4_IRQHandler + 48
;;; .\../Src/stm32f1xx_it.c
;;;205        Transfer_Error_Callback();
        0x08000290:    f001fca6    ....    BL       Transfer_Error_Callback ; 0x8001be0
;;;206      }
;;;207    
;;;208      /* USER CODE END DMA1_Channel4_IRQn 0 */
;;;209      
;;;210      /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */
;;;211    
;;;212      /* USER CODE END DMA1_Channel4_IRQn 1 */
;;;213    }
        0x08000294:    bd10        ..      POP      {r4,pc}
    $d
        0x08000296:    0000        ..      DCW    0
        0x08000298:    40020000    ...@    DCD    1073872896
    $t
    i.DMA1_Channel7_IRQHandler
    DMA1_Channel7_IRQHandler
;;;214    
;;;215    /**
;;;216      * @brief This function handles DMA1 channel7 global interrupt.
;;;217      */
;;;218    void DMA1_Channel7_IRQHandler(void)
;;;219    {
;;;220      /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */
;;;221    
;;;222      /* USER CODE END DMA1_Channel7_IRQn 0 */
;;;223      
;;;224      /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */
;;;225    
;;;226      /* USER CODE END DMA1_Channel7_IRQn 1 */
;;;227    }
        0x0800029c:    4770        pG      BX       lr
    i.Error_Handler
    Error_Handler
;;; .\../Src/main.c
;;;1171   	while (1) {
        0x0800029e:    bf00        ..      NOP      
        0x080002a0:    e7fe        ..      B        0x80002a0 ; Error_Handler + 2
        0x080002a2:    0000        ..      MOVS     r0,r0
    i.G01
    G01
;;; .\..\Src\fsm.c
;;;490    void G01(int dx, int dz, int feed){
        0x080002a4:    b570        p.      PUSH     {r4-r6,lr}
        0x080002a6:    4605        .F      MOV      r5,r0
        0x080002a8:    460c        .F      MOV      r4,r1
        0x080002aa:    4616        .F      MOV      r6,r2
;;;491    	dzdx_init(dx, dz, &state);
        0x080002ac:    4a21        !J      LDR      r2,[pc,#132] ; [0x8000334] = 0x20000044
        0x080002ae:    4621        !F      MOV      r1,r4
        0x080002b0:    4628        (F      MOV      r0,r5
        0x080002b2:    f001ffb1    ....    BL       dzdx_init ; 0x8002218
;;;492    
;;;493    	if(dz<0) {
        0x080002b6:    2c00        .,      CMP      r4,#0
        0x080002b8:    da07        ..      BGE      0x80002ca ; G01 + 38
;;;494    		feed_direction = feed_direction_left;
        0x080002ba:    2000        .       MOVS     r0,#0
        0x080002bc:    491e        .I      LDR      r1,[pc,#120] ; [0x8000338] = 0x200000a1
        0x080002be:    7008        .p      STRB     r0,[r1,#0]
;;;495    		MOTOR_Z_Reverse();
        0x080002c0:    f2480080    H...    MOV      r0,#0x8080
        0x080002c4:    491d        .I      LDR      r1,[pc,#116] ; [0x800033c] = 0x40010814
        0x080002c6:    6008        .`      STR      r0,[r1,#0]
        0x080002c8:    e007        ..      B        0x80002da ; G01 + 54
;;;496    	} else {
;;;497    		feed_direction = feed_direction_right;
        0x080002ca:    2001        .       MOVS     r0,#1
        0x080002cc:    491a        .I      LDR      r1,[pc,#104] ; [0x8000338] = 0x200000a1
        0x080002ce:    7008        .p      STRB     r0,[r1,#0]
;;;498    		MOTOR_Z_Forward();
        0x080002d0:    f2480080    H...    MOV      r0,#0x8080
        0x080002d4:    4919        .I      LDR      r1,[pc,#100] ; [0x800033c] = 0x40010814
        0x080002d6:    1f09        ..      SUBS     r1,r1,#4
        0x080002d8:    6008        .`      STR      r0,[r1,#0]
;;;499    	}
;;;500    
;;;501    	if(dx<0) {
        0x080002da:    2d00        .-      CMP      r5,#0
        0x080002dc:    da03        ..      BGE      0x80002e6 ; G01 + 66
;;;502    		MOTOR_X_Reverse();
        0x080002de:    4818        .H      LDR      r0,[pc,#96] ; [0x8000340] = 0x4800080
        0x080002e0:    4918        .I      LDR      r1,[pc,#96] ; [0x8000344] = 0x40011000
        0x080002e2:    6148        Ha      STR      r0,[r1,#0x14]
        0x080002e4:    e002        ..      B        0x80002ec ; G01 + 72
;;;503    	} else {
;;;504    		MOTOR_X_Forward();
        0x080002e6:    4816        .H      LDR      r0,[pc,#88] ; [0x8000340] = 0x4800080
        0x080002e8:    4916        .I      LDR      r1,[pc,#88] ; [0x8000344] = 0x40011000
        0x080002ea:    6108        .a      STR      r0,[r1,#0x10]
;;;505    	}
;;;506    
;;;507    	state.sync = false;
        0x080002ec:    2000        .       MOVS     r0,#0
        0x080002ee:    4911        .I      LDR      r1,[pc,#68] ; [0x8000334] = 0x20000044
        0x080002f0:    7408        .t      STRB     r0,[r1,#0x10]
;;;508    	if(state.sync){
        0x080002f2:    4608        .F      MOV      r0,r1
        0x080002f4:    7c00        .|      LDRB     r0,[r0,#0x10]
        0x080002f6:    b110        ..      CBZ      r0,0x80002fe ; G01 + 90
;;;509    		state.main_feed_direction = feed_direction;
        0x080002f8:    480f        .H      LDR      r0,[pc,#60] ; [0x8000338] = 0x200000a1
        0x080002fa:    7800        .x      LDRB     r0,[r0,#0]
        0x080002fc:    7448        Ht      STRB     r0,[r1,#0x11]
;;;510    	}
;;;511    
;;;512    	z_axis.current_pos = 0;
        0x080002fe:    2000        .       MOVS     r0,#0
        0x08000300:    4911        .I      LDR      r1,[pc,#68] ; [0x8000348] = 0x200005e0
        0x08000302:    6008        .`      STR      r0,[r1,#0]
;;;513    	z_axis.end_pos = abs(dz);
        0x08000304:    1e20         .      SUBS     r0,r4,#0
        0x08000306:    db01        ..      BLT      0x800030c ; G01 + 104
        0x08000308:    4601        .F      MOV      r1,r0
        0x0800030a:    e000        ..      B        0x800030e ; G01 + 106
        0x0800030c:    4241        AB      RSBS     r1,r0,#0
        0x0800030e:    4a0e        .J      LDR      r2,[pc,#56] ; [0x8000348] = 0x200005e0
        0x08000310:    6051        Q`      STR      r1,[r2,#4]
;;;514    	if(z_axis.end_pos > 0){
        0x08000312:    4610        .F      MOV      r0,r2
        0x08000314:    6840        @h      LDR      r0,[r0,#4]
        0x08000316:    b130        0.      CBZ      r0,0x8000326 ; G01 + 130
;;;515    		z_axis.end_pos &= 0xFFFFFFFF - step_divider + 1;
        0x08000318:    4610        .F      MOV      r0,r2
        0x0800031a:    6840        @h      LDR      r0,[r0,#4]
        0x0800031c:    f0200001     ...    BIC      r0,r0,#1
        0x08000320:    4611        .F      MOV      r1,r2
        0x08000322:    6048        H`      STR      r0,[r1,#4]
        0x08000324:    e002        ..      B        0x800032c ; G01 + 136
;;;516    //		z_axis.end_pos |= step_divider; // to make sure that we'll not stop between full steps
;;;517    
;;;518    	} else {
;;;519    		state.sync = true;
        0x08000326:    2001        .       MOVS     r0,#1
        0x08000328:    4902        .I      LDR      r1,[pc,#8] ; [0x8000334] = 0x20000044
        0x0800032a:    7408        .t      STRB     r0,[r1,#0x10]
;;;520    	}
;;;521    	do_fsm_move_start(&state);
        0x0800032c:    4801        .H      LDR      r0,[pc,#4] ; [0x8000334] = 0x20000044
        0x0800032e:    f001fe49    ..I.    BL       do_fsm_move_start ; 0x8001fc4
;;;522    }
        0x08000332:    bd70        p.      POP      {r4-r6,pc}
    $d
        0x08000334:    20000044    D..     DCD    536870980
        0x08000338:    200000a1    ...     DCD    536871073
        0x0800033c:    40010814    ...@    DCD    1073809428
        0x08000340:    04800080    ....    DCD    75497600
        0x08000344:    40011000    ...@    DCD    1073811456
        0x08000348:    200005e0    ...     DCD    536872416
    $t
    i.I2C2_ER_IRQHandler
    I2C2_ER_IRQHandler
;;; .\../Src/stm32f1xx_it.c
;;;374      while(1){
        0x0800034c:    bf00        ..      NOP      
        0x0800034e:    e7fe        ..      B        0x800034e ; I2C2_ER_IRQHandler + 2
    i.I2C2_EV_IRQHandler
    I2C2_EV_IRQHandler
;;; .\../Src/stm32f1xx_it.c (343)
        0x08000350:    b508        ..      PUSH     {r3,lr}
;;;344      /* USER CODE BEGIN I2C2_EV_IRQn 0 */
;;;345      /* Check SB flag value in ISR register */
;;;346      if(LL_I2C_IsActiveFlag_SB(I2C2))
        0x08000352:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;1186     return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
        0x08000354:    4814        .H      LDR      r0,[pc,#80] ; [0x80003a8] = 0x40005800
        0x08000356:    6940        @i      LDR      r0,[r0,#0x14]
        0x08000358:    f0000001    ....    AND      r0,r0,#1
        0x0800035c:    b148        H.      CBZ      r0,0x8000372 ; I2C2_EV_IRQHandler + 34
;;; .\../Src/stm32f1xx_it.c
;;;349        LL_I2C_TransmitData8(I2C2, SSD1306_I2C_ADDR);
        0x0800035e:    2078        x       MOVS     r0,#0x78
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;1758     MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
        0x08000360:    4911        .I      LDR      r1,[pc,#68] ; [0x80003a8] = 0x40005800
        0x08000362:    6909        .i      LDR      r1,[r1,#0x10]
        0x08000364:    f02101ff    !...    BIC      r1,r1,#0xff
        0x08000368:    4301        .C      ORRS     r1,r1,r0
        0x0800036a:    4a0f        .J      LDR      r2,[pc,#60] ; [0x80003a8] = 0x40005800
        0x0800036c:    6111        .a      STR      r1,[r2,#0x10]
;;;1759   }
        0x0800036e:    bf00        ..      NOP      
        0x08000370:    e018        ..      B        0x80003a4 ; I2C2_EV_IRQHandler + 84
;;; .\../Src/stm32f1xx_it.c
;;;352      else if(LL_I2C_IsActiveFlag_ADDR(I2C2))
        0x08000372:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;1199     return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
        0x08000374:    480c        .H      LDR      r0,[pc,#48] ; [0x80003a8] = 0x40005800
        0x08000376:    6940        @i      LDR      r0,[r0,#0x14]
        0x08000378:    f3c00040    ..@.    UBFX     r0,r0,#1,#1
        0x0800037c:    b190        ..      CBZ      r0,0x80003a4 ; I2C2_EV_IRQHandler + 84
;;; .\../Src/stm32f1xx_it.c
;;;355        LL_I2C_EnableDMAReq_TX(I2C2);
        0x0800037e:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;401      SET_BIT(I2Cx->CR2, I2C_CR2_DMAEN);
        0x08000380:    4809        .H      LDR      r0,[pc,#36] ; [0x80003a8] = 0x40005800
        0x08000382:    6840        @h      LDR      r0,[r0,#4]
        0x08000384:    f4406000    @..`    ORR      r0,r0,#0x800
        0x08000388:    4907        .I      LDR      r1,[pc,#28] ; [0x80003a8] = 0x40005800
        0x0800038a:    6048        H`      STR      r0,[r1,#4]
;;;402    }
        0x0800038c:    bf00        ..      NOP      
;;; .\../Src/stm32f1xx_it.c
;;;358        LL_I2C_ClearFlag_ADDR(I2C2);
        0x0800038e:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;1415     tmpreg = I2Cx->SR1;
        0x08000390:    4608        .F      MOV      r0,r1
        0x08000392:    6940        @i      LDR      r0,[r0,#0x14]
        0x08000394:    9000        ..      STR      r0,[sp,#0]
;;;1416     (void) tmpreg;
        0x08000396:    bf00        ..      NOP      
;;;1417     tmpreg = I2Cx->SR2;
        0x08000398:    4608        .F      MOV      r0,r1
        0x0800039a:    6980        .i      LDR      r0,[r0,#0x18]
        0x0800039c:    9000        ..      STR      r0,[sp,#0]
;;;1418     (void) tmpreg;
        0x0800039e:    bf00        ..      NOP      
;;;1419   }
        0x080003a0:    bf00        ..      NOP      
        0x080003a2:    bf00        ..      NOP      
;;; .\../Src/stm32f1xx_it.c
;;;366    }
        0x080003a4:    bd08        ..      POP      {r3,pc}
    $d
        0x080003a6:    0000        ..      DCW    0
        0x080003a8:    40005800    .X.@    DCD    1073764352
    $t
    i.LL_APB1_GRP1_EnableClock
    LL_APB1_GRP1_EnableClock
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h
;;;464    {
        0x080003ac:    b508        ..      PUSH     {r3,lr}
;;;465      __IO uint32_t tmpreg;
;;;466      SET_BIT(RCC->APB1ENR, Periphs);
        0x080003ae:    4905        .I      LDR      r1,[pc,#20] ; [0x80003c4] = 0x40021000
        0x080003b0:    69c9        .i      LDR      r1,[r1,#0x1c]
        0x080003b2:    4301        .C      ORRS     r1,r1,r0
        0x080003b4:    4a03        .J      LDR      r2,[pc,#12] ; [0x80003c4] = 0x40021000
        0x080003b6:    61d1        .a      STR      r1,[r2,#0x1c]
;;;467      /* Delay after an RCC peripheral clock enabling */
;;;468      tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
        0x080003b8:    4611        .F      MOV      r1,r2
        0x080003ba:    69c9        .i      LDR      r1,[r1,#0x1c]
        0x080003bc:    4001        .@      ANDS     r1,r1,r0
        0x080003be:    9100        ..      STR      r1,[sp,#0]
;;;469      (void)tmpreg;
        0x080003c0:    bf00        ..      NOP      
;;;470    }
        0x080003c2:    bd08        ..      POP      {r3,pc}
    $d
        0x080003c4:    40021000    ...@    DCD    1073876992
    $t
    i.LL_APB2_GRP1_EnableClock
    LL_APB2_GRP1_EnableClock
;;;471    
;;;472    /**
;;;473      * @brief  Check if APB1 peripheral clock is enabled or not
;;;474      * @rmtoll APB1ENR      BKPEN         LL_APB1_GRP1_IsEnabledClock\n
;;;475      *         APB1ENR      CAN1EN        LL_APB1_GRP1_IsEnabledClock\n
;;;476      *         APB1ENR      CAN2EN        LL_APB1_GRP1_IsEnabledClock\n
;;;477      *         APB1ENR      CECEN         LL_APB1_GRP1_IsEnabledClock\n
;;;478      *         APB1ENR      DACEN         LL_APB1_GRP1_IsEnabledClock\n
;;;479      *         APB1ENR      I2C1EN        LL_APB1_GRP1_IsEnabledClock\n
;;;480      *         APB1ENR      I2C2EN        LL_APB1_GRP1_IsEnabledClock\n
;;;481      *         APB1ENR      PWREN         LL_APB1_GRP1_IsEnabledClock\n
;;;482      *         APB1ENR      SPI2EN        LL_APB1_GRP1_IsEnabledClock\n
;;;483      *         APB1ENR      SPI3EN        LL_APB1_GRP1_IsEnabledClock\n
;;;484      *         APB1ENR      TIM12EN       LL_APB1_GRP1_IsEnabledClock\n
;;;485      *         APB1ENR      TIM13EN       LL_APB1_GRP1_IsEnabledClock\n
;;;486      *         APB1ENR      TIM14EN       LL_APB1_GRP1_IsEnabledClock\n
;;;487      *         APB1ENR      TIM2EN        LL_APB1_GRP1_IsEnabledClock\n
;;;488      *         APB1ENR      TIM3EN        LL_APB1_GRP1_IsEnabledClock\n
;;;489      *         APB1ENR      TIM4EN        LL_APB1_GRP1_IsEnabledClock\n
;;;490      *         APB1ENR      TIM5EN        LL_APB1_GRP1_IsEnabledClock\n
;;;491      *         APB1ENR      TIM6EN        LL_APB1_GRP1_IsEnabledClock\n
;;;492      *         APB1ENR      TIM7EN        LL_APB1_GRP1_IsEnabledClock\n
;;;493      *         APB1ENR      UART4EN       LL_APB1_GRP1_IsEnabledClock\n
;;;494      *         APB1ENR      UART5EN       LL_APB1_GRP1_IsEnabledClock\n
;;;495      *         APB1ENR      USART2EN      LL_APB1_GRP1_IsEnabledClock\n
;;;496      *         APB1ENR      USART3EN      LL_APB1_GRP1_IsEnabledClock\n
;;;497      *         APB1ENR      USBEN         LL_APB1_GRP1_IsEnabledClock\n
;;;498      *         APB1ENR      WWDGEN        LL_APB1_GRP1_IsEnabledClock
;;;499      * @param  Periphs This parameter can be a combination of the following values:
;;;500      *         @arg @ref LL_APB1_GRP1_PERIPH_BKP
;;;501      *         @arg @ref LL_APB1_GRP1_PERIPH_CAN1 (*)
;;;502      *         @arg @ref LL_APB1_GRP1_PERIPH_CAN2 (*)
;;;503      *         @arg @ref LL_APB1_GRP1_PERIPH_CEC (*)
;;;504      *         @arg @ref LL_APB1_GRP1_PERIPH_DAC1 (*)
;;;505      *         @arg @ref LL_APB1_GRP1_PERIPH_I2C1
;;;506      *         @arg @ref LL_APB1_GRP1_PERIPH_I2C2 (*)
;;;507      *         @arg @ref LL_APB1_GRP1_PERIPH_PWR
;;;508      *         @arg @ref LL_APB1_GRP1_PERIPH_SPI2 (*)
;;;509      *         @arg @ref LL_APB1_GRP1_PERIPH_SPI3 (*)
;;;510      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM12 (*)
;;;511      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM13 (*)
;;;512      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM14 (*)
;;;513      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM2
;;;514      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM3
;;;515      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM4 (*)
;;;516      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM5 (*)
;;;517      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM6 (*)
;;;518      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM7 (*)
;;;519      *         @arg @ref LL_APB1_GRP1_PERIPH_UART4 (*)
;;;520      *         @arg @ref LL_APB1_GRP1_PERIPH_UART5 (*)
;;;521      *         @arg @ref LL_APB1_GRP1_PERIPH_USART2
;;;522      *         @arg @ref LL_APB1_GRP1_PERIPH_USART3 (*)
;;;523      *         @arg @ref LL_APB1_GRP1_PERIPH_USB (*)
;;;524      *         @arg @ref LL_APB1_GRP1_PERIPH_WWDG
;;;525      *
;;;526      *         (*) value not defined in all devices.
;;;527      * @retval State of Periphs (1 or 0).
;;;528    */
;;;529    __STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
;;;530    {
;;;531      return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
;;;532    }
;;;533    
;;;534    /**
;;;535      * @brief  Disable APB1 peripherals clock.
;;;536      * @rmtoll APB1ENR      BKPEN         LL_APB1_GRP1_DisableClock\n
;;;537      *         APB1ENR      CAN1EN        LL_APB1_GRP1_DisableClock\n
;;;538      *         APB1ENR      CAN2EN        LL_APB1_GRP1_DisableClock\n
;;;539      *         APB1ENR      CECEN         LL_APB1_GRP1_DisableClock\n
;;;540      *         APB1ENR      DACEN         LL_APB1_GRP1_DisableClock\n
;;;541      *         APB1ENR      I2C1EN        LL_APB1_GRP1_DisableClock\n
;;;542      *         APB1ENR      I2C2EN        LL_APB1_GRP1_DisableClock\n
;;;543      *         APB1ENR      PWREN         LL_APB1_GRP1_DisableClock\n
;;;544      *         APB1ENR      SPI2EN        LL_APB1_GRP1_DisableClock\n
;;;545      *         APB1ENR      SPI3EN        LL_APB1_GRP1_DisableClock\n
;;;546      *         APB1ENR      TIM12EN       LL_APB1_GRP1_DisableClock\n
;;;547      *         APB1ENR      TIM13EN       LL_APB1_GRP1_DisableClock\n
;;;548      *         APB1ENR      TIM14EN       LL_APB1_GRP1_DisableClock\n
;;;549      *         APB1ENR      TIM2EN        LL_APB1_GRP1_DisableClock\n
;;;550      *         APB1ENR      TIM3EN        LL_APB1_GRP1_DisableClock\n
;;;551      *         APB1ENR      TIM4EN        LL_APB1_GRP1_DisableClock\n
;;;552      *         APB1ENR      TIM5EN        LL_APB1_GRP1_DisableClock\n
;;;553      *         APB1ENR      TIM6EN        LL_APB1_GRP1_DisableClock\n
;;;554      *         APB1ENR      TIM7EN        LL_APB1_GRP1_DisableClock\n
;;;555      *         APB1ENR      UART4EN       LL_APB1_GRP1_DisableClock\n
;;;556      *         APB1ENR      UART5EN       LL_APB1_GRP1_DisableClock\n
;;;557      *         APB1ENR      USART2EN      LL_APB1_GRP1_DisableClock\n
;;;558      *         APB1ENR      USART3EN      LL_APB1_GRP1_DisableClock\n
;;;559      *         APB1ENR      USBEN         LL_APB1_GRP1_DisableClock\n
;;;560      *         APB1ENR      WWDGEN        LL_APB1_GRP1_DisableClock
;;;561      * @param  Periphs This parameter can be a combination of the following values:
;;;562      *         @arg @ref LL_APB1_GRP1_PERIPH_BKP
;;;563      *         @arg @ref LL_APB1_GRP1_PERIPH_CAN1 (*)
;;;564      *         @arg @ref LL_APB1_GRP1_PERIPH_CAN2 (*)
;;;565      *         @arg @ref LL_APB1_GRP1_PERIPH_CEC (*)
;;;566      *         @arg @ref LL_APB1_GRP1_PERIPH_DAC1 (*)
;;;567      *         @arg @ref LL_APB1_GRP1_PERIPH_I2C1
;;;568      *         @arg @ref LL_APB1_GRP1_PERIPH_I2C2 (*)
;;;569      *         @arg @ref LL_APB1_GRP1_PERIPH_PWR
;;;570      *         @arg @ref LL_APB1_GRP1_PERIPH_SPI2 (*)
;;;571      *         @arg @ref LL_APB1_GRP1_PERIPH_SPI3 (*)
;;;572      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM12 (*)
;;;573      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM13 (*)
;;;574      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM14 (*)
;;;575      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM2
;;;576      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM3
;;;577      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM4 (*)
;;;578      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM5 (*)
;;;579      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM6 (*)
;;;580      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM7 (*)
;;;581      *         @arg @ref LL_APB1_GRP1_PERIPH_UART4 (*)
;;;582      *         @arg @ref LL_APB1_GRP1_PERIPH_UART5 (*)
;;;583      *         @arg @ref LL_APB1_GRP1_PERIPH_USART2
;;;584      *         @arg @ref LL_APB1_GRP1_PERIPH_USART3 (*)
;;;585      *         @arg @ref LL_APB1_GRP1_PERIPH_USB (*)
;;;586      *         @arg @ref LL_APB1_GRP1_PERIPH_WWDG
;;;587      *
;;;588      *         (*) value not defined in all devices.
;;;589      * @retval None
;;;590    */
;;;591    __STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
;;;592    {
;;;593      CLEAR_BIT(RCC->APB1ENR, Periphs);
;;;594    }
;;;595    
;;;596    /**
;;;597      * @brief  Force APB1 peripherals reset.
;;;598      * @rmtoll APB1RSTR     BKPRST        LL_APB1_GRP1_ForceReset\n
;;;599      *         APB1RSTR     CAN1RST       LL_APB1_GRP1_ForceReset\n
;;;600      *         APB1RSTR     CAN2RST       LL_APB1_GRP1_ForceReset\n
;;;601      *         APB1RSTR     CECRST        LL_APB1_GRP1_ForceReset\n
;;;602      *         APB1RSTR     DACRST        LL_APB1_GRP1_ForceReset\n
;;;603      *         APB1RSTR     I2C1RST       LL_APB1_GRP1_ForceReset\n
;;;604      *         APB1RSTR     I2C2RST       LL_APB1_GRP1_ForceReset\n
;;;605      *         APB1RSTR     PWRRST        LL_APB1_GRP1_ForceReset\n
;;;606      *         APB1RSTR     SPI2RST       LL_APB1_GRP1_ForceReset\n
;;;607      *         APB1RSTR     SPI3RST       LL_APB1_GRP1_ForceReset\n
;;;608      *         APB1RSTR     TIM12RST      LL_APB1_GRP1_ForceReset\n
;;;609      *         APB1RSTR     TIM13RST      LL_APB1_GRP1_ForceReset\n
;;;610      *         APB1RSTR     TIM14RST      LL_APB1_GRP1_ForceReset\n
;;;611      *         APB1RSTR     TIM2RST       LL_APB1_GRP1_ForceReset\n
;;;612      *         APB1RSTR     TIM3RST       LL_APB1_GRP1_ForceReset\n
;;;613      *         APB1RSTR     TIM4RST       LL_APB1_GRP1_ForceReset\n
;;;614      *         APB1RSTR     TIM5RST       LL_APB1_GRP1_ForceReset\n
;;;615      *         APB1RSTR     TIM6RST       LL_APB1_GRP1_ForceReset\n
;;;616      *         APB1RSTR     TIM7RST       LL_APB1_GRP1_ForceReset\n
;;;617      *         APB1RSTR     UART4RST      LL_APB1_GRP1_ForceReset\n
;;;618      *         APB1RSTR     UART5RST      LL_APB1_GRP1_ForceReset\n
;;;619      *         APB1RSTR     USART2RST     LL_APB1_GRP1_ForceReset\n
;;;620      *         APB1RSTR     USART3RST     LL_APB1_GRP1_ForceReset\n
;;;621      *         APB1RSTR     USBRST        LL_APB1_GRP1_ForceReset\n
;;;622      *         APB1RSTR     WWDGRST       LL_APB1_GRP1_ForceReset
;;;623      * @param  Periphs This parameter can be a combination of the following values:
;;;624      *         @arg @ref LL_APB1_GRP1_PERIPH_ALL
;;;625      *         @arg @ref LL_APB1_GRP1_PERIPH_BKP
;;;626      *         @arg @ref LL_APB1_GRP1_PERIPH_CAN1 (*)
;;;627      *         @arg @ref LL_APB1_GRP1_PERIPH_CAN2 (*)
;;;628      *         @arg @ref LL_APB1_GRP1_PERIPH_CEC (*)
;;;629      *         @arg @ref LL_APB1_GRP1_PERIPH_DAC1 (*)
;;;630      *         @arg @ref LL_APB1_GRP1_PERIPH_I2C1
;;;631      *         @arg @ref LL_APB1_GRP1_PERIPH_I2C2 (*)
;;;632      *         @arg @ref LL_APB1_GRP1_PERIPH_PWR
;;;633      *         @arg @ref LL_APB1_GRP1_PERIPH_SPI2 (*)
;;;634      *         @arg @ref LL_APB1_GRP1_PERIPH_SPI3 (*)
;;;635      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM12 (*)
;;;636      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM13 (*)
;;;637      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM14 (*)
;;;638      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM2
;;;639      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM3
;;;640      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM4 (*)
;;;641      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM5 (*)
;;;642      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM6 (*)
;;;643      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM7 (*)
;;;644      *         @arg @ref LL_APB1_GRP1_PERIPH_UART4 (*)
;;;645      *         @arg @ref LL_APB1_GRP1_PERIPH_UART5 (*)
;;;646      *         @arg @ref LL_APB1_GRP1_PERIPH_USART2
;;;647      *         @arg @ref LL_APB1_GRP1_PERIPH_USART3 (*)
;;;648      *         @arg @ref LL_APB1_GRP1_PERIPH_USB (*)
;;;649      *         @arg @ref LL_APB1_GRP1_PERIPH_WWDG
;;;650      *
;;;651      *         (*) value not defined in all devices.
;;;652      * @retval None
;;;653    */
;;;654    __STATIC_INLINE void LL_APB1_GRP1_ForceReset(uint32_t Periphs)
;;;655    {
;;;656      SET_BIT(RCC->APB1RSTR, Periphs);
;;;657    }
;;;658    
;;;659    /**
;;;660      * @brief  Release APB1 peripherals reset.
;;;661      * @rmtoll APB1RSTR     BKPRST        LL_APB1_GRP1_ReleaseReset\n
;;;662      *         APB1RSTR     CAN1RST       LL_APB1_GRP1_ReleaseReset\n
;;;663      *         APB1RSTR     CAN2RST       LL_APB1_GRP1_ReleaseReset\n
;;;664      *         APB1RSTR     CECRST        LL_APB1_GRP1_ReleaseReset\n
;;;665      *         APB1RSTR     DACRST        LL_APB1_GRP1_ReleaseReset\n
;;;666      *         APB1RSTR     I2C1RST       LL_APB1_GRP1_ReleaseReset\n
;;;667      *         APB1RSTR     I2C2RST       LL_APB1_GRP1_ReleaseReset\n
;;;668      *         APB1RSTR     PWRRST        LL_APB1_GRP1_ReleaseReset\n
;;;669      *         APB1RSTR     SPI2RST       LL_APB1_GRP1_ReleaseReset\n
;;;670      *         APB1RSTR     SPI3RST       LL_APB1_GRP1_ReleaseReset\n
;;;671      *         APB1RSTR     TIM12RST      LL_APB1_GRP1_ReleaseReset\n
;;;672      *         APB1RSTR     TIM13RST      LL_APB1_GRP1_ReleaseReset\n
;;;673      *         APB1RSTR     TIM14RST      LL_APB1_GRP1_ReleaseReset\n
;;;674      *         APB1RSTR     TIM2RST       LL_APB1_GRP1_ReleaseReset\n
;;;675      *         APB1RSTR     TIM3RST       LL_APB1_GRP1_ReleaseReset\n
;;;676      *         APB1RSTR     TIM4RST       LL_APB1_GRP1_ReleaseReset\n
;;;677      *         APB1RSTR     TIM5RST       LL_APB1_GRP1_ReleaseReset\n
;;;678      *         APB1RSTR     TIM6RST       LL_APB1_GRP1_ReleaseReset\n
;;;679      *         APB1RSTR     TIM7RST       LL_APB1_GRP1_ReleaseReset\n
;;;680      *         APB1RSTR     UART4RST      LL_APB1_GRP1_ReleaseReset\n
;;;681      *         APB1RSTR     UART5RST      LL_APB1_GRP1_ReleaseReset\n
;;;682      *         APB1RSTR     USART2RST     LL_APB1_GRP1_ReleaseReset\n
;;;683      *         APB1RSTR     USART3RST     LL_APB1_GRP1_ReleaseReset\n
;;;684      *         APB1RSTR     USBRST        LL_APB1_GRP1_ReleaseReset\n
;;;685      *         APB1RSTR     WWDGRST       LL_APB1_GRP1_ReleaseReset
;;;686      * @param  Periphs This parameter can be a combination of the following values:
;;;687      *         @arg @ref LL_APB1_GRP1_PERIPH_ALL
;;;688      *         @arg @ref LL_APB1_GRP1_PERIPH_BKP
;;;689      *         @arg @ref LL_APB1_GRP1_PERIPH_CAN1 (*)
;;;690      *         @arg @ref LL_APB1_GRP1_PERIPH_CAN2 (*)
;;;691      *         @arg @ref LL_APB1_GRP1_PERIPH_CEC (*)
;;;692      *         @arg @ref LL_APB1_GRP1_PERIPH_DAC1 (*)
;;;693      *         @arg @ref LL_APB1_GRP1_PERIPH_I2C1
;;;694      *         @arg @ref LL_APB1_GRP1_PERIPH_I2C2 (*)
;;;695      *         @arg @ref LL_APB1_GRP1_PERIPH_PWR
;;;696      *         @arg @ref LL_APB1_GRP1_PERIPH_SPI2 (*)
;;;697      *         @arg @ref LL_APB1_GRP1_PERIPH_SPI3 (*)
;;;698      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM12 (*)
;;;699      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM13 (*)
;;;700      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM14 (*)
;;;701      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM2
;;;702      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM3
;;;703      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM4 (*)
;;;704      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM5 (*)
;;;705      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM6 (*)
;;;706      *         @arg @ref LL_APB1_GRP1_PERIPH_TIM7 (*)
;;;707      *         @arg @ref LL_APB1_GRP1_PERIPH_UART4 (*)
;;;708      *         @arg @ref LL_APB1_GRP1_PERIPH_UART5 (*)
;;;709      *         @arg @ref LL_APB1_GRP1_PERIPH_USART2
;;;710      *         @arg @ref LL_APB1_GRP1_PERIPH_USART3 (*)
;;;711      *         @arg @ref LL_APB1_GRP1_PERIPH_USB (*)
;;;712      *         @arg @ref LL_APB1_GRP1_PERIPH_WWDG
;;;713      *
;;;714      *         (*) value not defined in all devices.
;;;715      * @retval None
;;;716    */
;;;717    __STATIC_INLINE void LL_APB1_GRP1_ReleaseReset(uint32_t Periphs)
;;;718    {
;;;719      CLEAR_BIT(RCC->APB1RSTR, Periphs);
;;;720    }
;;;721    
;;;722    /**
;;;723      * @}
;;;724      */
;;;725    
;;;726    /** @defgroup BUS_LL_EF_APB2 APB2
;;;727      * @{
;;;728      */
;;;729    
;;;730    /**
;;;731      * @brief  Enable APB2 peripherals clock.
;;;732      * @rmtoll APB2ENR      ADC1EN        LL_APB2_GRP1_EnableClock\n
;;;733      *         APB2ENR      ADC2EN        LL_APB2_GRP1_EnableClock\n
;;;734      *         APB2ENR      ADC3EN        LL_APB2_GRP1_EnableClock\n
;;;735      *         APB2ENR      AFIOEN        LL_APB2_GRP1_EnableClock\n
;;;736      *         APB2ENR      IOPAEN        LL_APB2_GRP1_EnableClock\n
;;;737      *         APB2ENR      IOPBEN        LL_APB2_GRP1_EnableClock\n
;;;738      *         APB2ENR      IOPCEN        LL_APB2_GRP1_EnableClock\n
;;;739      *         APB2ENR      IOPDEN        LL_APB2_GRP1_EnableClock\n
;;;740      *         APB2ENR      IOPEEN        LL_APB2_GRP1_EnableClock\n
;;;741      *         APB2ENR      IOPFEN        LL_APB2_GRP1_EnableClock\n
;;;742      *         APB2ENR      IOPGEN        LL_APB2_GRP1_EnableClock\n
;;;743      *         APB2ENR      SPI1EN        LL_APB2_GRP1_EnableClock\n
;;;744      *         APB2ENR      TIM10EN       LL_APB2_GRP1_EnableClock\n
;;;745      *         APB2ENR      TIM11EN       LL_APB2_GRP1_EnableClock\n
;;;746      *         APB2ENR      TIM15EN       LL_APB2_GRP1_EnableClock\n
;;;747      *         APB2ENR      TIM16EN       LL_APB2_GRP1_EnableClock\n
;;;748      *         APB2ENR      TIM17EN       LL_APB2_GRP1_EnableClock\n
;;;749      *         APB2ENR      TIM1EN        LL_APB2_GRP1_EnableClock\n
;;;750      *         APB2ENR      TIM8EN        LL_APB2_GRP1_EnableClock\n
;;;751      *         APB2ENR      TIM9EN        LL_APB2_GRP1_EnableClock\n
;;;752      *         APB2ENR      USART1EN      LL_APB2_GRP1_EnableClock
;;;753      * @param  Periphs This parameter can be a combination of the following values:
;;;754      *         @arg @ref LL_APB2_GRP1_PERIPH_ADC1
;;;755      *         @arg @ref LL_APB2_GRP1_PERIPH_ADC2 (*)
;;;756      *         @arg @ref LL_APB2_GRP1_PERIPH_ADC3 (*)
;;;757      *         @arg @ref LL_APB2_GRP1_PERIPH_AFIO
;;;758      *         @arg @ref LL_APB2_GRP1_PERIPH_GPIOA
;;;759      *         @arg @ref LL_APB2_GRP1_PERIPH_GPIOB
;;;760      *         @arg @ref LL_APB2_GRP1_PERIPH_GPIOC
;;;761      *         @arg @ref LL_APB2_GRP1_PERIPH_GPIOD
;;;762      *         @arg @ref LL_APB2_GRP1_PERIPH_GPIOE (*)
;;;763      *         @arg @ref LL_APB2_GRP1_PERIPH_GPIOF (*)
;;;764      *         @arg @ref LL_APB2_GRP1_PERIPH_GPIOG (*)
;;;765      *         @arg @ref LL_APB2_GRP1_PERIPH_SPI1
;;;766      *         @arg @ref LL_APB2_GRP1_PERIPH_TIM10 (*)
;;;767      *         @arg @ref LL_APB2_GRP1_PERIPH_TIM11 (*)
;;;768      *         @arg @ref LL_APB2_GRP1_PERIPH_TIM15 (*)
;;;769      *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16 (*)
;;;770      *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17 (*)
;;;771      *         @arg @ref LL_APB2_GRP1_PERIPH_TIM1
;;;772      *         @arg @ref LL_APB2_GRP1_PERIPH_TIM8 (*)
;;;773      *         @arg @ref LL_APB2_GRP1_PERIPH_TIM9 (*)
;;;774      *         @arg @ref LL_APB2_GRP1_PERIPH_USART1
;;;775      *
;;;776      *         (*) value not defined in all devices.
;;;777      * @retval None
;;;778    */
;;;779    __STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
;;;780    {
        0x080003c8:    b508        ..      PUSH     {r3,lr}
;;;781      __IO uint32_t tmpreg;
;;;782      SET_BIT(RCC->APB2ENR, Periphs);
        0x080003ca:    4905        .I      LDR      r1,[pc,#20] ; [0x80003e0] = 0x40021000
        0x080003cc:    6989        .i      LDR      r1,[r1,#0x18]
        0x080003ce:    4301        .C      ORRS     r1,r1,r0
        0x080003d0:    4a03        .J      LDR      r2,[pc,#12] ; [0x80003e0] = 0x40021000
        0x080003d2:    6191        .a      STR      r1,[r2,#0x18]
;;;783      /* Delay after an RCC peripheral clock enabling */
;;;784      tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
        0x080003d4:    4611        .F      MOV      r1,r2
        0x080003d6:    6989        .i      LDR      r1,[r1,#0x18]
        0x080003d8:    4001        .@      ANDS     r1,r1,r0
        0x080003da:    9100        ..      STR      r1,[sp,#0]
;;;785      (void)tmpreg;
        0x080003dc:    bf00        ..      NOP      
;;;786    }
        0x080003de:    bd08        ..      POP      {r3,pc}
    $d
        0x080003e0:    40021000    ...@    DCD    1073876992
    $t
    i.LL_DMA_SetChannelPriorityLevel
    LL_DMA_SetChannelPriorityLevel
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h
;;;850    {
        0x080003e4:    b530        0.      PUSH     {r4,r5,lr}
;;;851      MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
        0x080003e6:    1e4b        K.      SUBS     r3,r1,#1
        0x080003e8:    4c05        .L      LDR      r4,[pc,#20] ; [0x8000400] = 0x80028b0
        0x080003ea:    5ce3        .\      LDRB     r3,[r4,r3]
        0x080003ec:    58c3        .X      LDR      r3,[r0,r3]
        0x080003ee:    f4235340    #.@S    BIC      r3,r3,#0x3000
        0x080003f2:    4313        .C      ORRS     r3,r3,r2
        0x080003f4:    1e4c        L.      SUBS     r4,r1,#1
        0x080003f6:    4d02        .M      LDR      r5,[pc,#8] ; [0x8000400] = 0x80028b0
        0x080003f8:    5d2c        ,]      LDRB     r4,[r5,r4]
        0x080003fa:    5103        .Q      STR      r3,[r0,r4]
;;;852                 Priority);
;;;853    }
        0x080003fc:    bd30        0.      POP      {r4,r5,pc}
    $d
        0x080003fe:    0000        ..      DCW    0
        0x08000400:    080028b0    .(..    DCD    134228144
    $t
    i.LL_DMA_SetDataTransferDirection
    LL_DMA_SetDataTransferDirection
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h (570)
        0x08000404:    b530        0.      PUSH     {r4,r5,lr}
;;;571      MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
        0x08000406:    1e4b        K.      SUBS     r3,r1,#1
        0x08000408:    4c05        .L      LDR      r4,[pc,#20] ; [0x8000420] = 0x80028b0
        0x0800040a:    5ce3        .\      LDRB     r3,[r4,r3]
        0x0800040c:    58c3        .X      LDR      r3,[r0,r3]
        0x0800040e:    f2440410    D...    MOV      r4,#0x4010
        0x08000412:    43a3        .C      BICS     r3,r3,r4
        0x08000414:    4313        .C      ORRS     r3,r3,r2
        0x08000416:    1e4c        L.      SUBS     r4,r1,#1
        0x08000418:    4d01        .M      LDR      r5,[pc,#4] ; [0x8000420] = 0x80028b0
        0x0800041a:    5d2c        ,]      LDRB     r4,[r5,r4]
        0x0800041c:    5103        .Q      STR      r3,[r0,r4]
;;;572                 DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
;;;573    }
        0x0800041e:    bd30        0.      POP      {r4,r5,pc}
    $d
        0x08000420:    080028b0    .(..    DCD    134228144
    $t
    i.LL_DMA_SetMemoryIncMode
    LL_DMA_SetMemoryIncMode
;;;574    
;;;575    /**
;;;576      * @brief  Get Data transfer direction (read from peripheral or from memory).
;;;577      * @rmtoll CCR          DIR           LL_DMA_GetDataTransferDirection\n
;;;578      *         CCR          MEM2MEM       LL_DMA_GetDataTransferDirection
;;;579      * @param  DMAx DMAx Instance
;;;580      * @param  Channel This parameter can be one of the following values:
;;;581      *         @arg @ref LL_DMA_CHANNEL_1
;;;582      *         @arg @ref LL_DMA_CHANNEL_2
;;;583      *         @arg @ref LL_DMA_CHANNEL_3
;;;584      *         @arg @ref LL_DMA_CHANNEL_4
;;;585      *         @arg @ref LL_DMA_CHANNEL_5
;;;586      *         @arg @ref LL_DMA_CHANNEL_6
;;;587      *         @arg @ref LL_DMA_CHANNEL_7
;;;588      * @retval Returned value can be one of the following values:
;;;589      *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
;;;590      *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
;;;591      *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
;;;592      */
;;;593    __STATIC_INLINE uint32_t LL_DMA_GetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel)
;;;594    {
;;;595      return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
;;;596                       DMA_CCR_DIR | DMA_CCR_MEM2MEM));
;;;597    }
;;;598    
;;;599    /**
;;;600      * @brief  Set DMA mode circular or normal.
;;;601      * @note The circular buffer mode cannot be used if the memory-to-memory
;;;602      * data transfer is configured on the selected Channel.
;;;603      * @rmtoll CCR          CIRC          LL_DMA_SetMode
;;;604      * @param  DMAx DMAx Instance
;;;605      * @param  Channel This parameter can be one of the following values:
;;;606      *         @arg @ref LL_DMA_CHANNEL_1
;;;607      *         @arg @ref LL_DMA_CHANNEL_2
;;;608      *         @arg @ref LL_DMA_CHANNEL_3
;;;609      *         @arg @ref LL_DMA_CHANNEL_4
;;;610      *         @arg @ref LL_DMA_CHANNEL_5
;;;611      *         @arg @ref LL_DMA_CHANNEL_6
;;;612      *         @arg @ref LL_DMA_CHANNEL_7
;;;613      * @param  Mode This parameter can be one of the following values:
;;;614      *         @arg @ref LL_DMA_MODE_NORMAL
;;;615      *         @arg @ref LL_DMA_MODE_CIRCULAR
;;;616      * @retval None
;;;617      */
;;;618    __STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
;;;619    {
;;;620      MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
;;;621                 Mode);
;;;622    }
;;;623    
;;;624    /**
;;;625      * @brief  Get DMA mode circular or normal.
;;;626      * @rmtoll CCR          CIRC          LL_DMA_GetMode
;;;627      * @param  DMAx DMAx Instance
;;;628      * @param  Channel This parameter can be one of the following values:
;;;629      *         @arg @ref LL_DMA_CHANNEL_1
;;;630      *         @arg @ref LL_DMA_CHANNEL_2
;;;631      *         @arg @ref LL_DMA_CHANNEL_3
;;;632      *         @arg @ref LL_DMA_CHANNEL_4
;;;633      *         @arg @ref LL_DMA_CHANNEL_5
;;;634      *         @arg @ref LL_DMA_CHANNEL_6
;;;635      *         @arg @ref LL_DMA_CHANNEL_7
;;;636      * @retval Returned value can be one of the following values:
;;;637      *         @arg @ref LL_DMA_MODE_NORMAL
;;;638      *         @arg @ref LL_DMA_MODE_CIRCULAR
;;;639      */
;;;640    __STATIC_INLINE uint32_t LL_DMA_GetMode(DMA_TypeDef *DMAx, uint32_t Channel)
;;;641    {
;;;642      return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
;;;643                       DMA_CCR_CIRC));
;;;644    }
;;;645    
;;;646    /**
;;;647      * @brief  Set Peripheral increment mode.
;;;648      * @rmtoll CCR          PINC          LL_DMA_SetPeriphIncMode
;;;649      * @param  DMAx DMAx Instance
;;;650      * @param  Channel This parameter can be one of the following values:
;;;651      *         @arg @ref LL_DMA_CHANNEL_1
;;;652      *         @arg @ref LL_DMA_CHANNEL_2
;;;653      *         @arg @ref LL_DMA_CHANNEL_3
;;;654      *         @arg @ref LL_DMA_CHANNEL_4
;;;655      *         @arg @ref LL_DMA_CHANNEL_5
;;;656      *         @arg @ref LL_DMA_CHANNEL_6
;;;657      *         @arg @ref LL_DMA_CHANNEL_7
;;;658      * @param  PeriphOrM2MSrcIncMode This parameter can be one of the following values:
;;;659      *         @arg @ref LL_DMA_PERIPH_INCREMENT
;;;660      *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
;;;661      * @retval None
;;;662      */
;;;663    __STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
;;;664    {
;;;665      MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
;;;666                 PeriphOrM2MSrcIncMode);
;;;667    }
;;;668    
;;;669    /**
;;;670      * @brief  Get Peripheral increment mode.
;;;671      * @rmtoll CCR          PINC          LL_DMA_GetPeriphIncMode
;;;672      * @param  DMAx DMAx Instance
;;;673      * @param  Channel This parameter can be one of the following values:
;;;674      *         @arg @ref LL_DMA_CHANNEL_1
;;;675      *         @arg @ref LL_DMA_CHANNEL_2
;;;676      *         @arg @ref LL_DMA_CHANNEL_3
;;;677      *         @arg @ref LL_DMA_CHANNEL_4
;;;678      *         @arg @ref LL_DMA_CHANNEL_5
;;;679      *         @arg @ref LL_DMA_CHANNEL_6
;;;680      *         @arg @ref LL_DMA_CHANNEL_7
;;;681      * @retval Returned value can be one of the following values:
;;;682      *         @arg @ref LL_DMA_PERIPH_INCREMENT
;;;683      *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
;;;684      */
;;;685    __STATIC_INLINE uint32_t LL_DMA_GetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel)
;;;686    {
;;;687      return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
;;;688                       DMA_CCR_PINC));
;;;689    }
;;;690    
;;;691    /**
;;;692      * @brief  Set Memory increment mode.
;;;693      * @rmtoll CCR          MINC          LL_DMA_SetMemoryIncMode
;;;694      * @param  DMAx DMAx Instance
;;;695      * @param  Channel This parameter can be one of the following values:
;;;696      *         @arg @ref LL_DMA_CHANNEL_1
;;;697      *         @arg @ref LL_DMA_CHANNEL_2
;;;698      *         @arg @ref LL_DMA_CHANNEL_3
;;;699      *         @arg @ref LL_DMA_CHANNEL_4
;;;700      *         @arg @ref LL_DMA_CHANNEL_5
;;;701      *         @arg @ref LL_DMA_CHANNEL_6
;;;702      *         @arg @ref LL_DMA_CHANNEL_7
;;;703      * @param  MemoryOrM2MDstIncMode This parameter can be one of the following values:
;;;704      *         @arg @ref LL_DMA_MEMORY_INCREMENT
;;;705      *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
;;;706      * @retval None
;;;707      */
;;;708    __STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
;;;709    {
        0x08000424:    b530        0.      PUSH     {r4,r5,lr}
;;;710      MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
        0x08000426:    1e4b        K.      SUBS     r3,r1,#1
        0x08000428:    4c05        .L      LDR      r4,[pc,#20] ; [0x8000440] = 0x80028b0
        0x0800042a:    5ce3        .\      LDRB     r3,[r4,r3]
        0x0800042c:    58c3        .X      LDR      r3,[r0,r3]
        0x0800042e:    f0230380    #...    BIC      r3,r3,#0x80
        0x08000432:    4313        .C      ORRS     r3,r3,r2
        0x08000434:    1e4c        L.      SUBS     r4,r1,#1
        0x08000436:    4d02        .M      LDR      r5,[pc,#8] ; [0x8000440] = 0x80028b0
        0x08000438:    5d2c        ,]      LDRB     r4,[r5,r4]
        0x0800043a:    5103        .Q      STR      r3,[r0,r4]
;;;711                 MemoryOrM2MDstIncMode);
;;;712    }
        0x0800043c:    bd30        0.      POP      {r4,r5,pc}
    $d
        0x0800043e:    0000        ..      DCW    0
        0x08000440:    080028b0    .(..    DCD    134228144
    $t
    i.LL_DMA_SetMemorySize
    LL_DMA_SetMemorySize
;;;713    
;;;714    /**
;;;715      * @brief  Get Memory increment mode.
;;;716      * @rmtoll CCR          MINC          LL_DMA_GetMemoryIncMode
;;;717      * @param  DMAx DMAx Instance
;;;718      * @param  Channel This parameter can be one of the following values:
;;;719      *         @arg @ref LL_DMA_CHANNEL_1
;;;720      *         @arg @ref LL_DMA_CHANNEL_2
;;;721      *         @arg @ref LL_DMA_CHANNEL_3
;;;722      *         @arg @ref LL_DMA_CHANNEL_4
;;;723      *         @arg @ref LL_DMA_CHANNEL_5
;;;724      *         @arg @ref LL_DMA_CHANNEL_6
;;;725      *         @arg @ref LL_DMA_CHANNEL_7
;;;726      * @retval Returned value can be one of the following values:
;;;727      *         @arg @ref LL_DMA_MEMORY_INCREMENT
;;;728      *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
;;;729      */
;;;730    __STATIC_INLINE uint32_t LL_DMA_GetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel)
;;;731    {
;;;732      return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
;;;733                       DMA_CCR_MINC));
;;;734    }
;;;735    
;;;736    /**
;;;737      * @brief  Set Peripheral size.
;;;738      * @rmtoll CCR          PSIZE         LL_DMA_SetPeriphSize
;;;739      * @param  DMAx DMAx Instance
;;;740      * @param  Channel This parameter can be one of the following values:
;;;741      *         @arg @ref LL_DMA_CHANNEL_1
;;;742      *         @arg @ref LL_DMA_CHANNEL_2
;;;743      *         @arg @ref LL_DMA_CHANNEL_3
;;;744      *         @arg @ref LL_DMA_CHANNEL_4
;;;745      *         @arg @ref LL_DMA_CHANNEL_5
;;;746      *         @arg @ref LL_DMA_CHANNEL_6
;;;747      *         @arg @ref LL_DMA_CHANNEL_7
;;;748      * @param  PeriphOrM2MSrcDataSize This parameter can be one of the following values:
;;;749      *         @arg @ref LL_DMA_PDATAALIGN_BYTE
;;;750      *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
;;;751      *         @arg @ref LL_DMA_PDATAALIGN_WORD
;;;752      * @retval None
;;;753      */
;;;754    __STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
;;;755    {
;;;756      MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
;;;757                 PeriphOrM2MSrcDataSize);
;;;758    }
;;;759    
;;;760    /**
;;;761      * @brief  Get Peripheral size.
;;;762      * @rmtoll CCR          PSIZE         LL_DMA_GetPeriphSize
;;;763      * @param  DMAx DMAx Instance
;;;764      * @param  Channel This parameter can be one of the following values:
;;;765      *         @arg @ref LL_DMA_CHANNEL_1
;;;766      *         @arg @ref LL_DMA_CHANNEL_2
;;;767      *         @arg @ref LL_DMA_CHANNEL_3
;;;768      *         @arg @ref LL_DMA_CHANNEL_4
;;;769      *         @arg @ref LL_DMA_CHANNEL_5
;;;770      *         @arg @ref LL_DMA_CHANNEL_6
;;;771      *         @arg @ref LL_DMA_CHANNEL_7
;;;772      * @retval Returned value can be one of the following values:
;;;773      *         @arg @ref LL_DMA_PDATAALIGN_BYTE
;;;774      *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
;;;775      *         @arg @ref LL_DMA_PDATAALIGN_WORD
;;;776      */
;;;777    __STATIC_INLINE uint32_t LL_DMA_GetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel)
;;;778    {
;;;779      return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
;;;780                       DMA_CCR_PSIZE));
;;;781    }
;;;782    
;;;783    /**
;;;784      * @brief  Set Memory size.
;;;785      * @rmtoll CCR          MSIZE         LL_DMA_SetMemorySize
;;;786      * @param  DMAx DMAx Instance
;;;787      * @param  Channel This parameter can be one of the following values:
;;;788      *         @arg @ref LL_DMA_CHANNEL_1
;;;789      *         @arg @ref LL_DMA_CHANNEL_2
;;;790      *         @arg @ref LL_DMA_CHANNEL_3
;;;791      *         @arg @ref LL_DMA_CHANNEL_4
;;;792      *         @arg @ref LL_DMA_CHANNEL_5
;;;793      *         @arg @ref LL_DMA_CHANNEL_6
;;;794      *         @arg @ref LL_DMA_CHANNEL_7
;;;795      * @param  MemoryOrM2MDstDataSize This parameter can be one of the following values:
;;;796      *         @arg @ref LL_DMA_MDATAALIGN_BYTE
;;;797      *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
;;;798      *         @arg @ref LL_DMA_MDATAALIGN_WORD
;;;799      * @retval None
;;;800      */
;;;801    __STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
;;;802    {
        0x08000444:    b530        0.      PUSH     {r4,r5,lr}
;;;803      MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
        0x08000446:    1e4b        K.      SUBS     r3,r1,#1
        0x08000448:    4c05        .L      LDR      r4,[pc,#20] ; [0x8000460] = 0x80028b0
        0x0800044a:    5ce3        .\      LDRB     r3,[r4,r3]
        0x0800044c:    58c3        .X      LDR      r3,[r0,r3]
        0x0800044e:    f4236340    #.@c    BIC      r3,r3,#0xc00
        0x08000452:    4313        .C      ORRS     r3,r3,r2
        0x08000454:    1e4c        L.      SUBS     r4,r1,#1
        0x08000456:    4d02        .M      LDR      r5,[pc,#8] ; [0x8000460] = 0x80028b0
        0x08000458:    5d2c        ,]      LDRB     r4,[r5,r4]
        0x0800045a:    5103        .Q      STR      r3,[r0,r4]
;;;804                 MemoryOrM2MDstDataSize);
;;;805    }
        0x0800045c:    bd30        0.      POP      {r4,r5,pc}
    $d
        0x0800045e:    0000        ..      DCW    0
        0x08000460:    080028b0    .(..    DCD    134228144
    $t
    i.LL_DMA_SetMode
    LL_DMA_SetMode
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h (619)
        0x08000464:    b530        0.      PUSH     {r4,r5,lr}
;;;620      MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
        0x08000466:    1e4b        K.      SUBS     r3,r1,#1
        0x08000468:    4c05        .L      LDR      r4,[pc,#20] ; [0x8000480] = 0x80028b0
        0x0800046a:    5ce3        .\      LDRB     r3,[r4,r3]
        0x0800046c:    58c3        .X      LDR      r3,[r0,r3]
        0x0800046e:    f0230320    #. .    BIC      r3,r3,#0x20
        0x08000472:    4313        .C      ORRS     r3,r3,r2
        0x08000474:    1e4c        L.      SUBS     r4,r1,#1
        0x08000476:    4d02        .M      LDR      r5,[pc,#8] ; [0x8000480] = 0x80028b0
        0x08000478:    5d2c        ,]      LDRB     r4,[r5,r4]
        0x0800047a:    5103        .Q      STR      r3,[r0,r4]
;;;621                 Mode);
;;;622    }
        0x0800047c:    bd30        0.      POP      {r4,r5,pc}
    $d
        0x0800047e:    0000        ..      DCW    0
        0x08000480:    080028b0    .(..    DCD    134228144
    $t
    i.LL_DMA_SetPeriphIncMode
    LL_DMA_SetPeriphIncMode
;;;623    
;;;624    /**
;;;625      * @brief  Get DMA mode circular or normal.
;;;626      * @rmtoll CCR          CIRC          LL_DMA_GetMode
;;;627      * @param  DMAx DMAx Instance
;;;628      * @param  Channel This parameter can be one of the following values:
;;;629      *         @arg @ref LL_DMA_CHANNEL_1
;;;630      *         @arg @ref LL_DMA_CHANNEL_2
;;;631      *         @arg @ref LL_DMA_CHANNEL_3
;;;632      *         @arg @ref LL_DMA_CHANNEL_4
;;;633      *         @arg @ref LL_DMA_CHANNEL_5
;;;634      *         @arg @ref LL_DMA_CHANNEL_6
;;;635      *         @arg @ref LL_DMA_CHANNEL_7
;;;636      * @retval Returned value can be one of the following values:
;;;637      *         @arg @ref LL_DMA_MODE_NORMAL
;;;638      *         @arg @ref LL_DMA_MODE_CIRCULAR
;;;639      */
;;;640    __STATIC_INLINE uint32_t LL_DMA_GetMode(DMA_TypeDef *DMAx, uint32_t Channel)
;;;641    {
;;;642      return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
;;;643                       DMA_CCR_CIRC));
;;;644    }
;;;645    
;;;646    /**
;;;647      * @brief  Set Peripheral increment mode.
;;;648      * @rmtoll CCR          PINC          LL_DMA_SetPeriphIncMode
;;;649      * @param  DMAx DMAx Instance
;;;650      * @param  Channel This parameter can be one of the following values:
;;;651      *         @arg @ref LL_DMA_CHANNEL_1
;;;652      *         @arg @ref LL_DMA_CHANNEL_2
;;;653      *         @arg @ref LL_DMA_CHANNEL_3
;;;654      *         @arg @ref LL_DMA_CHANNEL_4
;;;655      *         @arg @ref LL_DMA_CHANNEL_5
;;;656      *         @arg @ref LL_DMA_CHANNEL_6
;;;657      *         @arg @ref LL_DMA_CHANNEL_7
;;;658      * @param  PeriphOrM2MSrcIncMode This parameter can be one of the following values:
;;;659      *         @arg @ref LL_DMA_PERIPH_INCREMENT
;;;660      *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
;;;661      * @retval None
;;;662      */
;;;663    __STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
;;;664    {
        0x08000484:    b530        0.      PUSH     {r4,r5,lr}
;;;665      MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
        0x08000486:    1e4b        K.      SUBS     r3,r1,#1
        0x08000488:    4c05        .L      LDR      r4,[pc,#20] ; [0x80004a0] = 0x80028b0
        0x0800048a:    5ce3        .\      LDRB     r3,[r4,r3]
        0x0800048c:    58c3        .X      LDR      r3,[r0,r3]
        0x0800048e:    f0230340    #.@.    BIC      r3,r3,#0x40
        0x08000492:    4313        .C      ORRS     r3,r3,r2
        0x08000494:    1e4c        L.      SUBS     r4,r1,#1
        0x08000496:    4d02        .M      LDR      r5,[pc,#8] ; [0x80004a0] = 0x80028b0
        0x08000498:    5d2c        ,]      LDRB     r4,[r5,r4]
        0x0800049a:    5103        .Q      STR      r3,[r0,r4]
;;;666                 PeriphOrM2MSrcIncMode);
;;;667    }
        0x0800049c:    bd30        0.      POP      {r4,r5,pc}
    $d
        0x0800049e:    0000        ..      DCW    0
        0x080004a0:    080028b0    .(..    DCD    134228144
    $t
    i.LL_DMA_SetPeriphSize
    LL_DMA_SetPeriphSize
;;;668    
;;;669    /**
;;;670      * @brief  Get Peripheral increment mode.
;;;671      * @rmtoll CCR          PINC          LL_DMA_GetPeriphIncMode
;;;672      * @param  DMAx DMAx Instance
;;;673      * @param  Channel This parameter can be one of the following values:
;;;674      *         @arg @ref LL_DMA_CHANNEL_1
;;;675      *         @arg @ref LL_DMA_CHANNEL_2
;;;676      *         @arg @ref LL_DMA_CHANNEL_3
;;;677      *         @arg @ref LL_DMA_CHANNEL_4
;;;678      *         @arg @ref LL_DMA_CHANNEL_5
;;;679      *         @arg @ref LL_DMA_CHANNEL_6
;;;680      *         @arg @ref LL_DMA_CHANNEL_7
;;;681      * @retval Returned value can be one of the following values:
;;;682      *         @arg @ref LL_DMA_PERIPH_INCREMENT
;;;683      *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
;;;684      */
;;;685    __STATIC_INLINE uint32_t LL_DMA_GetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel)
;;;686    {
;;;687      return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
;;;688                       DMA_CCR_PINC));
;;;689    }
;;;690    
;;;691    /**
;;;692      * @brief  Set Memory increment mode.
;;;693      * @rmtoll CCR          MINC          LL_DMA_SetMemoryIncMode
;;;694      * @param  DMAx DMAx Instance
;;;695      * @param  Channel This parameter can be one of the following values:
;;;696      *         @arg @ref LL_DMA_CHANNEL_1
;;;697      *         @arg @ref LL_DMA_CHANNEL_2
;;;698      *         @arg @ref LL_DMA_CHANNEL_3
;;;699      *         @arg @ref LL_DMA_CHANNEL_4
;;;700      *         @arg @ref LL_DMA_CHANNEL_5
;;;701      *         @arg @ref LL_DMA_CHANNEL_6
;;;702      *         @arg @ref LL_DMA_CHANNEL_7
;;;703      * @param  MemoryOrM2MDstIncMode This parameter can be one of the following values:
;;;704      *         @arg @ref LL_DMA_MEMORY_INCREMENT
;;;705      *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
;;;706      * @retval None
;;;707      */
;;;708    __STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
;;;709    {
;;;710      MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
;;;711                 MemoryOrM2MDstIncMode);
;;;712    }
;;;713    
;;;714    /**
;;;715      * @brief  Get Memory increment mode.
;;;716      * @rmtoll CCR          MINC          LL_DMA_GetMemoryIncMode
;;;717      * @param  DMAx DMAx Instance
;;;718      * @param  Channel This parameter can be one of the following values:
;;;719      *         @arg @ref LL_DMA_CHANNEL_1
;;;720      *         @arg @ref LL_DMA_CHANNEL_2
;;;721      *         @arg @ref LL_DMA_CHANNEL_3
;;;722      *         @arg @ref LL_DMA_CHANNEL_4
;;;723      *         @arg @ref LL_DMA_CHANNEL_5
;;;724      *         @arg @ref LL_DMA_CHANNEL_6
;;;725      *         @arg @ref LL_DMA_CHANNEL_7
;;;726      * @retval Returned value can be one of the following values:
;;;727      *         @arg @ref LL_DMA_MEMORY_INCREMENT
;;;728      *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
;;;729      */
;;;730    __STATIC_INLINE uint32_t LL_DMA_GetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel)
;;;731    {
;;;732      return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
;;;733                       DMA_CCR_MINC));
;;;734    }
;;;735    
;;;736    /**
;;;737      * @brief  Set Peripheral size.
;;;738      * @rmtoll CCR          PSIZE         LL_DMA_SetPeriphSize
;;;739      * @param  DMAx DMAx Instance
;;;740      * @param  Channel This parameter can be one of the following values:
;;;741      *         @arg @ref LL_DMA_CHANNEL_1
;;;742      *         @arg @ref LL_DMA_CHANNEL_2
;;;743      *         @arg @ref LL_DMA_CHANNEL_3
;;;744      *         @arg @ref LL_DMA_CHANNEL_4
;;;745      *         @arg @ref LL_DMA_CHANNEL_5
;;;746      *         @arg @ref LL_DMA_CHANNEL_6
;;;747      *         @arg @ref LL_DMA_CHANNEL_7
;;;748      * @param  PeriphOrM2MSrcDataSize This parameter can be one of the following values:
;;;749      *         @arg @ref LL_DMA_PDATAALIGN_BYTE
;;;750      *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
;;;751      *         @arg @ref LL_DMA_PDATAALIGN_WORD
;;;752      * @retval None
;;;753      */
;;;754    __STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
;;;755    {
        0x080004a4:    b530        0.      PUSH     {r4,r5,lr}
;;;756      MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
        0x080004a6:    1e4b        K.      SUBS     r3,r1,#1
        0x080004a8:    4c05        .L      LDR      r4,[pc,#20] ; [0x80004c0] = 0x80028b0
        0x080004aa:    5ce3        .\      LDRB     r3,[r4,r3]
        0x080004ac:    58c3        .X      LDR      r3,[r0,r3]
        0x080004ae:    f4237340    #.@s    BIC      r3,r3,#0x300
        0x080004b2:    4313        .C      ORRS     r3,r3,r2
        0x080004b4:    1e4c        L.      SUBS     r4,r1,#1
        0x080004b6:    4d02        .M      LDR      r5,[pc,#8] ; [0x80004c0] = 0x80028b0
        0x080004b8:    5d2c        ,]      LDRB     r4,[r5,r4]
        0x080004ba:    5103        .Q      STR      r3,[r0,r4]
;;;757                 PeriphOrM2MSrcDataSize);
;;;758    }
        0x080004bc:    bd30        0.      POP      {r4,r5,pc}
    $d
        0x080004be:    0000        ..      DCW    0
        0x080004c0:    080028b0    .(..    DCD    134228144
    $t
    i.LL_GPIO_Init
    LL_GPIO_Init
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_gpio.c
;;;172    {
        0x080004c4:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x080004c8:    4602        .F      MOV      r2,r0
        0x080004ca:    460b        .F      MOV      r3,r1
;;;173      uint32_t pinmask;
;;;174      uint32_t pinpos;
;;;175      uint32_t currentpin;
;;;176    
;;;177      /* Check the parameters */
;;;178      assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
;;;179      assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));
;;;180    
;;;181      /* ------------------------- Configure the port pins ---------------- */
;;;182      /* Initialize  pinpos on first pin set */
;;;183    
;;;184      pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
        0x080004cc:    6818        .h      LDR      r0,[r3,#0]
        0x080004ce:    f3c0250f    ...%    UBFX     r5,r0,#8,#16
;;;185      pinpos = POSITION_VAL(pinmask);
        0x080004d2:    fa95f0a5    ....    RBIT     r0,r5
        0x080004d6:    fab0f480    ....    CLZ      r4,r0
;;;186    
;;;187      /* Configure the port pins */
;;;188      while ((pinmask  >> pinpos) != 0U)
        0x080004da:    e07c        |.      B        0x80005d6 ; LL_GPIO_Init + 274
;;;189      {
;;;190        /* skip if bit is not set */
;;;191        if ((pinmask & (1U << pinpos)) != 0U)
        0x080004dc:    2001        .       MOVS     r0,#1
        0x080004de:    40a0        .@      LSLS     r0,r0,r4
        0x080004e0:    4028        (@      ANDS     r0,r0,r5
        0x080004e2:    2800        .(      CMP      r0,#0
        0x080004e4:    d076        v.      BEQ      0x80005d4 ; LL_GPIO_Init + 272
;;;192        {
;;;193          /* Get current io position */
;;;194          if (pinpos < GPIO_PIN_MASK_POS)
        0x080004e6:    2c08        .,      CMP      r4,#8
        0x080004e8:    d204        ..      BCS      0x80004f4 ; LL_GPIO_Init + 48
;;;195          {
;;;196            currentpin = (0x00000101U << pinpos);
        0x080004ea:    f2401001    @...    MOV      r0,#0x101
        0x080004ee:    fa00f104    ....    LSL      r1,r0,r4
        0x080004f2:    e006        ..      B        0x8000502 ; LL_GPIO_Init + 62
;;;197          }
;;;198          else
;;;199          {
;;;200            currentpin = ((0x00010001U << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000U);
        0x080004f4:    f1a40008    ....    SUB      r0,r4,#8
        0x080004f8:    f04f1601    O...    MOV      r6,#0x10001
        0x080004fc:    4086        .@      LSLS     r6,r6,r0
        0x080004fe:    f0466180    F..a    ORR      r1,r6,#0x4000000
;;;201          }
;;;202    
;;;203          /* Check Pin Mode and Pin Pull parameters */
;;;204          assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
;;;205          assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));
;;;206    
;;;207          /* Pin Mode configuration */
;;;208          LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
        0x08000502:    6858        Xh      LDR      r0,[r3,#4]
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h
;;;360      register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
        0x08000504:    eb026611    ...f    ADD      r6,r2,r1,LSR #24
;;;361      MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
        0x08000508:    fa91fca1    ....    RBIT     r12,r1
        0x0800050c:    fabcfc8c    ....    CLZ      r12,r12
        0x08000510:    ea4f088c    O...    LSL      r8,r12,#2
        0x08000514:    f04f0c0f    O...    MOV      r12,#0xf
        0x08000518:    fa0cfc08    ....    LSL      r12,r12,r8
        0x0800051c:    6837        7h      LDR      r7,[r6,#0]
        0x0800051e:    ea27070c    '...    BIC      r7,r7,r12
        0x08000522:    fa91fca1    ....    RBIT     r12,r1
        0x08000526:    fabcfc8c    ....    CLZ      r12,r12
        0x0800052a:    ea4f0c8c    O...    LSL      r12,r12,#2
        0x0800052e:    fa00fc0c    ....    LSL      r12,r0,r12
        0x08000532:    ea47070c    G...    ORR      r7,r7,r12
        0x08000536:    6037        7`      STR      r7,[r6,#0]
;;;362    }
        0x08000538:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_gpio.c
;;;211          LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
        0x0800053a:    6918        .i      LDR      r0,[r3,#0x10]
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h
;;;583      MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
        0x0800053c:    68d6        .h      LDR      r6,[r2,#0xc]
        0x0800053e:    ea262611    &..&    BIC      r6,r6,r1,LSR #8
        0x08000542:    0a0f        ..      LSRS     r7,r1,#8
        0x08000544:    fa97f7a7    ....    RBIT     r7,r7
        0x08000548:    fab7f787    ....    CLZ      r7,r7
        0x0800054c:    fa00f707    ....    LSL      r7,r0,r7
        0x08000550:    433e        >C      ORRS     r6,r6,r7
        0x08000552:    60d6        .`      STR      r6,[r2,#0xc]
;;;584    }
        0x08000554:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_gpio.c
;;;213          if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
        0x08000556:    6858        Xh      LDR      r0,[r3,#4]
        0x08000558:    2801        .(      CMP      r0,#1
        0x0800055a:    d002        ..      BEQ      0x8000562 ; LL_GPIO_Init + 158
        0x0800055c:    6858        Xh      LDR      r0,[r3,#4]
        0x0800055e:    2809        .(      CMP      r0,#9
        0x08000560:    d138        8.      BNE      0x80005d4 ; LL_GPIO_Init + 272
;;;214          {
;;;215            /* Check speed and Output mode parameters */
;;;216            assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
;;;217            assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
;;;218    
;;;219            /* Speed mode configuration */
;;;220            LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
        0x08000562:    6898        .h      LDR      r0,[r3,#8]
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h
;;;438      register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
        0x08000564:    eb026611    ...f    ADD      r6,r2,r1,LSR #24
;;;439      MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
        0x08000568:    fa91fca1    ....    RBIT     r12,r1
        0x0800056c:    fabcfc8c    ....    CLZ      r12,r12
        0x08000570:    ea4f088c    O...    LSL      r8,r12,#2
        0x08000574:    f04f0c03    O...    MOV      r12,#3
        0x08000578:    fa0cfc08    ....    LSL      r12,r12,r8
        0x0800057c:    6837        7h      LDR      r7,[r6,#0]
        0x0800057e:    ea27070c    '...    BIC      r7,r7,r12
        0x08000582:    fa91fca1    ....    RBIT     r12,r1
        0x08000586:    fabcfc8c    ....    CLZ      r12,r12
        0x0800058a:    ea4f0c8c    O...    LSL      r12,r12,#2
        0x0800058e:    fa00fc0c    ....    LSL      r12,r0,r12
        0x08000592:    ea47070c    G...    ORR      r7,r7,r12
        0x08000596:    6037        7`      STR      r7,[r6,#0]
;;;440                 (Speed << (POSITION_VAL(Pin) * 4U)));
;;;441    }
        0x08000598:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_gpio.c
;;;223            LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
        0x0800059a:    68d8        .h      LDR      r0,[r3,#0xc]
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h
;;;512      register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
        0x0800059c:    eb026611    ...f    ADD      r6,r2,r1,LSR #24
;;;513      MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
        0x080005a0:    fa91fca1    ....    RBIT     r12,r1
        0x080005a4:    fabcfc8c    ....    CLZ      r12,r12
        0x080005a8:    ea4f088c    O...    LSL      r8,r12,#2
        0x080005ac:    f04f0c04    O...    MOV      r12,#4
        0x080005b0:    fa0cfc08    ....    LSL      r12,r12,r8
        0x080005b4:    6837        7h      LDR      r7,[r6,#0]
        0x080005b6:    ea27070c    '...    BIC      r7,r7,r12
        0x080005ba:    fa91fca1    ....    RBIT     r12,r1
        0x080005be:    fabcfc8c    ....    CLZ      r12,r12
        0x080005c2:    ea4f0c8c    O...    LSL      r12,r12,#2
        0x080005c6:    fa00fc0c    ....    LSL      r12,r0,r12
        0x080005ca:    ea47070c    G...    ORR      r7,r7,r12
        0x080005ce:    6037        7`      STR      r7,[r6,#0]
;;;514                 (OutputType << (POSITION_VAL(Pin) * 4U)));
;;;515    }
        0x080005d0:    bf00        ..      NOP      
        0x080005d2:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_gpio.c
;;;226        pinpos++;
        0x080005d4:    1c64        d.      ADDS     r4,r4,#1
        0x080005d6:    fa25f004    %...    LSR      r0,r5,r4
        0x080005da:    2800        .(      CMP      r0,#0
        0x080005dc:    f47faf7e    ..~.    BNE      0x80004dc ; LL_GPIO_Init + 24
;;;227      }
;;;228      return (SUCCESS);
        0x080005e0:    2001        .       MOVS     r0,#1
;;;229    }
        0x080005e2:    e8bd81f0    ....    POP      {r4-r8,pc}
    i.LL_GPIO_IsInputPinSet
    LL_GPIO_IsInputPinSet
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h
;;;740    {
        0x080005e6:    4602        .F      MOV      r2,r0
;;;741      return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
        0x080005e8:    6890        .h      LDR      r0,[r2,#8]
        0x080005ea:    f3c1230f    ...#    UBFX     r3,r1,#8,#16
        0x080005ee:    4018        .@      ANDS     r0,r0,r3
        0x080005f0:    f3c1230f    ...#    UBFX     r3,r1,#8,#16
        0x080005f4:    4298        .B      CMP      r0,r3
        0x080005f6:    d101        ..      BNE      0x80005fc ; LL_GPIO_IsInputPinSet + 22
        0x080005f8:    2001        .       MOVS     r0,#1
        0x080005fa:    4770        pG      BX       lr
        0x080005fc:    2000        .       MOVS     r0,#0
        0x080005fe:    e7fc        ..      B        0x80005fa ; LL_GPIO_IsInputPinSet + 20
    i.LL_GPIO_ResetOutputPin
    LL_GPIO_ResetOutputPin
;;;742    }
;;;743    
;;;744    /**
;;;745      * @brief  Write output data register for the port.
;;;746      * @rmtoll ODR          ODy           LL_GPIO_WriteOutputPort
;;;747      * @param  GPIOx GPIO Port
;;;748      * @param  PortValue Level value for each pin of the port
;;;749      * @retval None
;;;750      */
;;;751    __STATIC_INLINE void LL_GPIO_WriteOutputPort(GPIO_TypeDef *GPIOx, uint32_t PortValue)
;;;752    {
;;;753      WRITE_REG(GPIOx->ODR, PortValue);
;;;754    }
;;;755    
;;;756    /**
;;;757      * @brief  Return full output data register value for a dedicated port.
;;;758      * @rmtoll ODR          ODy           LL_GPIO_ReadOutputPort
;;;759      * @param  GPIOx GPIO Port
;;;760      * @retval Output data register value of port
;;;761      */
;;;762    __STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
;;;763    {
;;;764      return (uint32_t)(READ_REG(GPIOx->ODR));
;;;765    }
;;;766    
;;;767    /**
;;;768      * @brief  Return if input data level for several pins of dedicated port is high or low.
;;;769      * @rmtoll ODR          ODy           LL_GPIO_IsOutputPinSet
;;;770      * @param  GPIOx GPIO Port
;;;771      * @param  PinMask This parameter can be a combination of the following values:
;;;772      *         @arg @ref LL_GPIO_PIN_0
;;;773      *         @arg @ref LL_GPIO_PIN_1
;;;774      *         @arg @ref LL_GPIO_PIN_2
;;;775      *         @arg @ref LL_GPIO_PIN_3
;;;776      *         @arg @ref LL_GPIO_PIN_4
;;;777      *         @arg @ref LL_GPIO_PIN_5
;;;778      *         @arg @ref LL_GPIO_PIN_6
;;;779      *         @arg @ref LL_GPIO_PIN_7
;;;780      *         @arg @ref LL_GPIO_PIN_8
;;;781      *         @arg @ref LL_GPIO_PIN_9
;;;782      *         @arg @ref LL_GPIO_PIN_10
;;;783      *         @arg @ref LL_GPIO_PIN_11
;;;784      *         @arg @ref LL_GPIO_PIN_12
;;;785      *         @arg @ref LL_GPIO_PIN_13
;;;786      *         @arg @ref LL_GPIO_PIN_14
;;;787      *         @arg @ref LL_GPIO_PIN_15
;;;788      *         @arg @ref LL_GPIO_PIN_ALL
;;;789      * @retval State of bit (1 or 0).
;;;790      */
;;;791    __STATIC_INLINE uint32_t LL_GPIO_IsOutputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
;;;792    {
;;;793      return (READ_BIT(GPIOx->ODR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
;;;794    }
;;;795    
;;;796    /**
;;;797      * @brief  Set several pins to high level on dedicated gpio port.
;;;798      * @rmtoll BSRR         BSy           LL_GPIO_SetOutputPin
;;;799      * @param  GPIOx GPIO Port
;;;800      * @param  PinMask This parameter can be a combination of the following values:
;;;801      *         @arg @ref LL_GPIO_PIN_0
;;;802      *         @arg @ref LL_GPIO_PIN_1
;;;803      *         @arg @ref LL_GPIO_PIN_2
;;;804      *         @arg @ref LL_GPIO_PIN_3
;;;805      *         @arg @ref LL_GPIO_PIN_4
;;;806      *         @arg @ref LL_GPIO_PIN_5
;;;807      *         @arg @ref LL_GPIO_PIN_6
;;;808      *         @arg @ref LL_GPIO_PIN_7
;;;809      *         @arg @ref LL_GPIO_PIN_8
;;;810      *         @arg @ref LL_GPIO_PIN_9
;;;811      *         @arg @ref LL_GPIO_PIN_10
;;;812      *         @arg @ref LL_GPIO_PIN_11
;;;813      *         @arg @ref LL_GPIO_PIN_12
;;;814      *         @arg @ref LL_GPIO_PIN_13
;;;815      *         @arg @ref LL_GPIO_PIN_14
;;;816      *         @arg @ref LL_GPIO_PIN_15
;;;817      *         @arg @ref LL_GPIO_PIN_ALL
;;;818      * @retval None
;;;819      */
;;;820    __STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
;;;821    {
;;;822      WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
;;;823    }
;;;824    
;;;825    /**
;;;826      * @brief  Set several pins to low level on dedicated gpio port.
;;;827      * @rmtoll BRR          BRy           LL_GPIO_ResetOutputPin
;;;828      * @param  GPIOx GPIO Port
;;;829      * @param  PinMask This parameter can be a combination of the following values:
;;;830      *         @arg @ref LL_GPIO_PIN_0
;;;831      *         @arg @ref LL_GPIO_PIN_1
;;;832      *         @arg @ref LL_GPIO_PIN_2
;;;833      *         @arg @ref LL_GPIO_PIN_3
;;;834      *         @arg @ref LL_GPIO_PIN_4
;;;835      *         @arg @ref LL_GPIO_PIN_5
;;;836      *         @arg @ref LL_GPIO_PIN_6
;;;837      *         @arg @ref LL_GPIO_PIN_7
;;;838      *         @arg @ref LL_GPIO_PIN_8
;;;839      *         @arg @ref LL_GPIO_PIN_9
;;;840      *         @arg @ref LL_GPIO_PIN_10
;;;841      *         @arg @ref LL_GPIO_PIN_11
;;;842      *         @arg @ref LL_GPIO_PIN_12
;;;843      *         @arg @ref LL_GPIO_PIN_13
;;;844      *         @arg @ref LL_GPIO_PIN_14
;;;845      *         @arg @ref LL_GPIO_PIN_15
;;;846      *         @arg @ref LL_GPIO_PIN_ALL
;;;847      * @retval None
;;;848      */
;;;849    __STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
;;;850    {
;;;851      WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
        0x08000600:    f3c1220f    ..."    UBFX     r2,r1,#8,#16
        0x08000604:    6142        Ba      STR      r2,[r0,#0x14]
;;;852    }
        0x08000606:    4770        pG      BX       lr
    i.LL_I2C_ConfigSpeed
    LL_I2C_ConfigSpeed
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;747    {
        0x08000608:    b5f0        ..      PUSH     {r4-r7,lr}
;;;748      register uint32_t freqrange = 0x0U;
        0x0800060a:    2400        .$      MOVS     r4,#0
;;;749      register uint32_t clockconfig = 0x0U;
        0x0800060c:    2500        .%      MOVS     r5,#0
;;;750    
;;;751      /* Compute frequency range */
;;;752      freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
        0x0800060e:    4e2b        +N      LDR      r6,[pc,#172] ; [0x80006bc] = 0xf4240
        0x08000610:    fbb1f4f6    ....    UDIV     r4,r1,r6
;;;753    
;;;754      /* Configure I2Cx: Frequency range register */
;;;755      MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
        0x08000614:    6846        Fh      LDR      r6,[r0,#4]
        0x08000616:    f026063f    &.?.    BIC      r6,r6,#0x3f
        0x0800061a:    4326        &C      ORRS     r6,r6,r4
        0x0800061c:    6046        F`      STR      r6,[r0,#4]
;;;756    
;;;757      /* Configure I2Cx: Rise Time register */
;;;758      MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
        0x0800061e:    4e28        (N      LDR      r6,[pc,#160] ; [0x80006c0] = 0x186a0
        0x08000620:    42b2        .B      CMP      r2,r6
        0x08000622:    d801        ..      BHI      0x8000628 ; LL_I2C_ConfigSpeed + 32
        0x08000624:    1c66        f.      ADDS     r6,r4,#1
        0x08000626:    e007        ..      B        0x8000638 ; LL_I2C_ConfigSpeed + 48
        0x08000628:    f44f7696    O..v    MOV      r6,#0x12c
        0x0800062c:    4366        fC      MULS     r6,r4,r6
        0x0800062e:    f44f777a    O.zw    MOV      r7,#0x3e8
        0x08000632:    fbb6f6f7    ....    UDIV     r6,r6,r7
        0x08000636:    1c76        v.      ADDS     r6,r6,#1
        0x08000638:    6a07        .j      LDR      r7,[r0,#0x20]
        0x0800063a:    f027073f    '.?.    BIC      r7,r7,#0x3f
        0x0800063e:    433e        >C      ORRS     r6,r6,r7
        0x08000640:    6206        .b      STR      r6,[r0,#0x20]
;;;759    
;;;760      /* Configure Speed mode, Duty Cycle and Clock control register value */
;;;761      if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
        0x08000642:    4e1f        .N      LDR      r6,[pc,#124] ; [0x80006c0] = 0x186a0
        0x08000644:    42b2        .B      CMP      r2,r6
        0x08000646:    d924        $.      BLS      0x8000692 ; LL_I2C_ConfigSpeed + 138
;;;762      {
;;;763        /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
;;;764        clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
        0x08000648:    b96b        k.      CBNZ     r3,0x8000666 ; LL_I2C_ConfigSpeed + 94
;;;765                      __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
        0x0800064a:    eb020642    ..B.    ADD      r6,r2,r2,LSL #1
        0x0800064e:    fbb1f6f6    ....    UDIV     r6,r1,r6
        0x08000652:    f3c6060b    ....    UBFX     r6,r6,#0,#12
        0x08000656:    b90e        ..      CBNZ     r6,0x800065c ; LL_I2C_ConfigSpeed + 84
        0x08000658:    2601        .&      MOVS     r6,#1
        0x0800065a:    e015        ..      B        0x8000688 ; LL_I2C_ConfigSpeed + 128
        0x0800065c:    eb020642    ..B.    ADD      r6,r2,r2,LSL #1
        0x08000660:    fbb1f6f6    ....    UDIV     r6,r1,r6
        0x08000664:    e010        ..      B        0x8000688 ; LL_I2C_ConfigSpeed + 128
        0x08000666:    eb0206c2    ....    ADD      r6,r2,r2,LSL #3
        0x0800066a:    eb061602    ....    ADD      r6,r6,r2,LSL #4
        0x0800066e:    fbb1f6f6    ....    UDIV     r6,r1,r6
        0x08000672:    f3c6060b    ....    UBFX     r6,r6,#0,#12
        0x08000676:    b90e        ..      CBNZ     r6,0x800067c ; LL_I2C_ConfigSpeed + 116
        0x08000678:    2601        .&      MOVS     r6,#1
        0x0800067a:    e005        ..      B        0x8000688 ; LL_I2C_ConfigSpeed + 128
        0x0800067c:    eb0206c2    ....    ADD      r6,r2,r2,LSL #3
        0x08000680:    eb061602    ....    ADD      r6,r6,r2,LSL #4
        0x08000684:    fbb1f6f6    ....    UDIV     r6,r1,r6
        0x08000688:    f4464600    F..F    ORR      r6,r6,#0x8000
        0x0800068c:    ea460503    F...    ORR      r5,r6,r3
        0x08000690:    e00c        ..      B        0x80006ac ; LL_I2C_ConfigSpeed + 164
;;;766                      DutyCycle;
;;;767      }
;;;768      else
;;;769      {
;;;770        /* Set Speed mode at standard for Clock Speed request in standard clock range */
;;;771        clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
        0x08000692:    0056        V.      LSLS     r6,r2,#1
        0x08000694:    fbb1f6f6    ....    UDIV     r6,r1,r6
        0x08000698:    f3c6060b    ....    UBFX     r6,r6,#0,#12
        0x0800069c:    2e04        ..      CMP      r6,#4
        0x0800069e:    d201        ..      BCS      0x80006a4 ; LL_I2C_ConfigSpeed + 156
;;;772                      __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
        0x080006a0:    2604        .&      MOVS     r6,#4
        0x080006a2:    e002        ..      B        0x80006aa ; LL_I2C_ConfigSpeed + 162
        0x080006a4:    0056        V.      LSLS     r6,r2,#1
        0x080006a6:    fbb1f6f6    ....    UDIV     r6,r1,r6
        0x080006aa:    4635        5F      MOV      r5,r6
;;;773      }
;;;774    
;;;775      /* Configure I2Cx: Clock control register */
;;;776      MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
        0x080006ac:    69c6        .i      LDR      r6,[r0,#0x1c]
        0x080006ae:    f64c77ff    L..w    MOV      r7,#0xcfff
        0x080006b2:    43be        .C      BICS     r6,r6,r7
        0x080006b4:    432e        .C      ORRS     r6,r6,r5
        0x080006b6:    61c6        .a      STR      r6,[r0,#0x1c]
;;;777    }
        0x080006b8:    bdf0        ..      POP      {r4-r7,pc}
    $d
        0x080006ba:    0000        ..      DCW    0
        0x080006bc:    000f4240    @B..    DCD    1000000
        0x080006c0:    000186a0    ....    DCD    100000
    $t
    i.LL_I2C_Init
    LL_I2C_Init
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_i2c.c
;;;147    {
        0x080006c4:    b57f        ..      PUSH     {r0-r6,lr}
        0x080006c6:    4604        .F      MOV      r4,r0
        0x080006c8:    460d        .F      MOV      r5,r1
;;;148      LL_RCC_ClocksTypeDef rcc_clocks;
;;;149    
;;;150      /* Check the I2C Instance I2Cx */
;;;151      assert_param(IS_I2C_ALL_INSTANCE(I2Cx));
;;;152    
;;;153      /* Check the I2C parameters from I2C_InitStruct */
;;;154      assert_param(IS_LL_I2C_PERIPHERAL_MODE(I2C_InitStruct->PeripheralMode));
;;;155      assert_param(IS_LL_I2C_CLOCK_SPEED(I2C_InitStruct->ClockSpeed));
;;;156      assert_param(IS_LL_I2C_DUTY_CYCLE(I2C_InitStruct->DutyCycle));
;;;157      assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
;;;158      assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
;;;159      assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));
;;;160    
;;;161      /* Disable the selected I2Cx Peripheral */
;;;162      LL_I2C_Disable(I2Cx);
        0x080006ca:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;378      CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
        0x080006cc:    6820         h      LDR      r0,[r4,#0]
        0x080006ce:    f0200001     ...    BIC      r0,r0,#1
        0x080006d2:    6020         `      STR      r0,[r4,#0]
;;;379    }
        0x080006d4:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_i2c.c
;;;165      LL_RCC_GetSystemClocksFreq(&rcc_clocks);
        0x080006d6:    4668        hF      MOV      r0,sp
        0x080006d8:    f000f836    ..6.    BL       LL_RCC_GetSystemClocksFreq ; 0x8000748
;;;166    
;;;167      /*---------------------------- I2Cx SCL Clock Speed Configuration ------------
;;;168       * Configure the SCL speed :
;;;169       * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
;;;170       *           and I2C_CCR_CCR[11:0] bits
;;;171       * - DutyCycle: I2C_CCR_DUTY[7:0] bits
;;;172       */
;;;173      LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
        0x080006dc:    e9d52301    ...#    LDRD     r2,r3,[r5,#4]
        0x080006e0:    4620         F      MOV      r0,r4
        0x080006e2:    9902        ..      LDR      r1,[sp,#8]
        0x080006e4:    f7ffff90    ....    BL       LL_I2C_ConfigSpeed ; 0x8000608
;;;174    
;;;175      /*---------------------------- I2Cx OAR1 Configuration -----------------------
;;;176       * Disable, Configure and Enable I2Cx device own address 1 with parameters :
;;;177       * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
;;;178       * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
;;;179       */
;;;180      LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
        0x080006e8:    6969        ii      LDR      r1,[r5,#0x14]
        0x080006ea:    68e8        .h      LDR      r0,[r5,#0xc]
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;555      MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
        0x080006ec:    68a2        .h      LDR      r2,[r4,#8]
        0x080006ee:    f24833ff    H..3    MOV      r3,#0x83ff
        0x080006f2:    439a        .C      BICS     r2,r2,r3
        0x080006f4:    ea400301    @...    ORR      r3,r0,r1
        0x080006f8:    431a        .C      ORRS     r2,r2,r3
        0x080006fa:    60a2        .`      STR      r2,[r4,#8]
;;;556    }
        0x080006fc:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_i2c.c
;;;186      LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
        0x080006fe:    6828        (h      LDR      r0,[r5,#0]
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;796      MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
        0x08000700:    6821        !h      LDR      r1,[r4,#0]
        0x08000702:    f021011a    !...    BIC      r1,r1,#0x1a
        0x08000706:    4301        .C      ORRS     r1,r1,r0
        0x08000708:    6021        !`      STR      r1,[r4,#0]
;;;797    }
        0x0800070a:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_i2c.c
;;;189      LL_I2C_Enable(I2Cx);
        0x0800070c:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;367      SET_BIT(I2Cx->CR1, I2C_CR1_PE);
        0x0800070e:    6820         h      LDR      r0,[r4,#0]
        0x08000710:    f0400001    @...    ORR      r0,r0,#1
        0x08000714:    6020         `      STR      r0,[r4,#0]
;;;368    }
        0x08000716:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_i2c.c
;;;196      LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
        0x08000718:    6928        (i      LDR      r0,[r5,#0x10]
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;1572     MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
        0x0800071a:    6821        !h      LDR      r1,[r4,#0]
        0x0800071c:    f4216180    !..a    BIC      r1,r1,#0x400
        0x08000720:    4301        .C      ORRS     r1,r1,r0
        0x08000722:    6021        !`      STR      r1,[r4,#0]
;;;1573   }
        0x08000724:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_i2c.c
;;;198      return SUCCESS;
        0x08000726:    2001        .       MOVS     r0,#1
;;;199    }
        0x08000728:    b004        ..      ADD      sp,sp,#0x10
        0x0800072a:    bd70        p.      POP      {r4-r6,pc}
    i.LL_Init1msTick
    LL_Init1msTick
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_utils.c
;;;187      LL_InitTick(HCLKFrequency, 1000U);
        0x0800072c:    f44f717a    O.zq    MOV      r1,#0x3e8
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_utils.h
;;;237      SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
        0x08000730:    fbb0f2f1    ....    UDIV     r2,r0,r1
        0x08000734:    1e52        R.      SUBS     r2,r2,#1
        0x08000736:    f04f23e0    O..#    MOV      r3,#0xe000e000
        0x0800073a:    615a        Za      STR      r2,[r3,#0x14]
;;;238      SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
        0x0800073c:    2200        ."      MOVS     r2,#0
        0x0800073e:    619a        .a      STR      r2,[r3,#0x18]
;;;239      SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
        0x08000740:    2205        ."      MOVS     r2,#5
        0x08000742:    611a        .a      STR      r2,[r3,#0x10]
;;;240                       SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
;;;241    }
        0x08000744:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_utils.c
;;;188    }
        0x08000746:    4770        pG      BX       lr
    i.LL_RCC_GetSystemClocksFreq
    LL_RCC_GetSystemClocksFreq
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_rcc.c
;;;206    {
        0x08000748:    b510        ..      PUSH     {r4,lr}
        0x0800074a:    4604        .F      MOV      r4,r0
;;;207      /* Get SYSCLK frequency */
;;;208      RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
        0x0800074c:    f001f86c    ..l.    BL       RCC_GetSystemClockFreq ; 0x8001828
        0x08000750:    6020         `      STR      r0,[r4,#0]
;;;209    
;;;210      /* HCLK clock frequency */
;;;211      RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
        0x08000752:    6820         h      LDR      r0,[r4,#0]
        0x08000754:    f001f834    ..4.    BL       RCC_GetHCLKClockFreq ; 0x80017c0
        0x08000758:    6060        ``      STR      r0,[r4,#4]
;;;212    
;;;213      /* PCLK1 clock frequency */
;;;214      RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
        0x0800075a:    6860        `h      LDR      r0,[r4,#4]
        0x0800075c:    f001f840    ..@.    BL       RCC_GetPCLK1ClockFreq ; 0x80017e0
        0x08000760:    60a0        .`      STR      r0,[r4,#8]
;;;215    
;;;216      /* PCLK2 clock frequency */
;;;217      RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
        0x08000762:    6860        `h      LDR      r0,[r4,#4]
        0x08000764:    f001f84e    ..N.    BL       RCC_GetPCLK2ClockFreq ; 0x8001804
        0x08000768:    60e0        .`      STR      r0,[r4,#0xc]
;;;218    }
        0x0800076a:    bd10        ..      POP      {r4,pc}
    i.LL_SetSystemCoreClock
    LL_SetSystemCoreClock
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_utils.c
;;;261      SystemCoreClock = HCLKFrequency;
        0x0800076c:    4901        .I      LDR      r1,[pc,#4] ; [0x8000774] = 0x20000000
        0x0800076e:    6008        .`      STR      r0,[r1,#0]
;;;262    }
        0x08000770:    4770        pG      BX       lr
    $d
        0x08000772:    0000        ..      DCW    0
        0x08000774:    20000000    ...     DCD    536870912
    $t
    i.LL_TIM_BDTR_Init
    LL_TIM_BDTR_Init
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_tim.c
;;;715    {
        0x08000778:    b510        ..      PUSH     {r4,lr}
        0x0800077a:    4603        .F      MOV      r3,r0
        0x0800077c:    460a        .F      MOV      r2,r1
;;;716      uint32_t tmpbdtr = 0;
        0x0800077e:    2100        .!      MOVS     r1,#0
;;;717    
;;;718      /* Check the parameters */
;;;719      assert_param(IS_TIM_BREAK_INSTANCE(TIMx));
;;;720      assert_param(IS_LL_TIM_OSSR_STATE(TIM_BDTRInitStruct->OSSRState));
;;;721      assert_param(IS_LL_TIM_OSSI_STATE(TIM_BDTRInitStruct->OSSIState));
;;;722      assert_param(IS_LL_TIM_LOCK_LEVEL(TIM_BDTRInitStruct->LockLevel));
;;;723      assert_param(IS_LL_TIM_BREAK_STATE(TIM_BDTRInitStruct->BreakState));
;;;724      assert_param(IS_LL_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->BreakPolarity));
;;;725      assert_param(IS_LL_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->AutomaticOutput));
;;;726    
;;;727      /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
;;;728      the OSSI State, the dead time value and the Automatic Output Enable Bit */
;;;729    
;;;730      /* Set the BDTR bits */
;;;731      MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
        0x08000780:    7b14        .{      LDRB     r4,[r2,#0xc]
        0x08000782:    4621        !F      MOV      r1,r4
;;;732      MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
        0x08000784:    6890        .h      LDR      r0,[r2,#8]
        0x08000786:    4301        .C      ORRS     r1,r1,r0
;;;733      MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
        0x08000788:    f4216080    !..`    BIC      r0,r1,#0x400
        0x0800078c:    6854        Th      LDR      r4,[r2,#4]
        0x0800078e:    ea400104    @...    ORR      r1,r0,r4
;;;734      MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
        0x08000792:    f4216000    !..`    BIC      r0,r1,#0x800
        0x08000796:    6814        .h      LDR      r4,[r2,#0]
        0x08000798:    ea400104    @...    ORR      r1,r0,r4
;;;735      MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
        0x0800079c:    f4215080    !..P    BIC      r0,r1,#0x1000
        0x080007a0:    89d4        ..      LDRH     r4,[r2,#0xe]
        0x080007a2:    ea400104    @...    ORR      r1,r0,r4
;;;736      MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
        0x080007a6:    f4215000    !..P    BIC      r0,r1,#0x2000
        0x080007aa:    6914        .i      LDR      r4,[r2,#0x10]
        0x080007ac:    ea400104    @...    ORR      r1,r0,r4
;;;737      MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
        0x080007b0:    f4214080    !..@    BIC      r0,r1,#0x4000
        0x080007b4:    6954        Ti      LDR      r4,[r2,#0x14]
        0x080007b6:    ea400104    @...    ORR      r1,r0,r4
;;;738      MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
        0x080007ba:    f4214000    !..@    BIC      r0,r1,#0x8000
        0x080007be:    6954        Ti      LDR      r4,[r2,#0x14]
        0x080007c0:    ea400104    @...    ORR      r1,r0,r4
;;;739    
;;;740      /* Set TIMx_BDTR */
;;;741      LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
        0x080007c4:    6459        Yd      STR      r1,[r3,#0x44]
;;;742    
;;;743      return SUCCESS;
        0x080007c6:    2001        .       MOVS     r0,#1
;;;744    }
        0x080007c8:    bd10        ..      POP      {r4,pc}
    i.LL_TIM_CC_DisableChannel
    LL_TIM_CC_DisableChannel
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;1518     CLEAR_BIT(TIMx->CCER, Channels);
        0x080007ca:    6a02        .j      LDR      r2,[r0,#0x20]
        0x080007cc:    438a        .C      BICS     r2,r2,r1
        0x080007ce:    6202        .b      STR      r2,[r0,#0x20]
;;;1519   }
        0x080007d0:    4770        pG      BX       lr
    i.LL_TIM_CC_EnableChannel
    LL_TIM_CC_EnableChannel
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h (1493)
        0x080007d2:    6a02        .j      LDR      r2,[r0,#0x20]
        0x080007d4:    430a        .C      ORRS     r2,r2,r1
        0x080007d6:    6202        .b      STR      r2,[r0,#0x20]
;;;1494   }
        0x080007d8:    4770        pG      BX       lr
    i.LL_TIM_CC_EnableChannel
    LL_TIM_CC_EnableChannel
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h (1493)
        0x080007da:    6a02        .j      LDR      r2,[r0,#0x20]
        0x080007dc:    430a        .C      ORRS     r2,r2,r1
        0x080007de:    6202        .b      STR      r2,[r0,#0x20]
;;;1494   }
        0x080007e0:    4770        pG      BX       lr
    i.LL_TIM_DisableARRPreload
    LL_TIM_DisableARRPreload
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h (1209)
        0x080007e2:    6801        .h      LDR      r1,[r0,#0]
        0x080007e4:    f0210180    !...    BIC      r1,r1,#0x80
        0x080007e8:    6001        .`      STR      r1,[r0,#0]
;;;1210   }
        0x080007ea:    4770        pG      BX       lr
    i.LL_TIM_DisableMasterSlaveMode
    LL_TIM_DisableMasterSlaveMode
;;;1211   
;;;1212   /**
;;;1213     * @brief  Indicates whether auto-reload (ARR) preload is enabled.
;;;1214     * @rmtoll CR1          ARPE          LL_TIM_IsEnabledARRPreload
;;;1215     * @param  TIMx Timer instance
;;;1216     * @retval State of bit (1 or 0).
;;;1217     */
;;;1218   __STATIC_INLINE uint32_t LL_TIM_IsEnabledARRPreload(TIM_TypeDef *TIMx)
;;;1219   {
;;;1220     return (READ_BIT(TIMx->CR1, TIM_CR1_ARPE) == (TIM_CR1_ARPE));
;;;1221   }
;;;1222   
;;;1223   /**
;;;1224     * @brief  Set the division ratio between the timer clock  and the sampling clock used by the dead-time generators (when supported) and the digital filters.
;;;1225     * @note Macro @ref IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx) can be used to check
;;;1226     *       whether or not the clock division feature is supported by the timer
;;;1227     *       instance.
;;;1228     * @rmtoll CR1          CKD           LL_TIM_SetClockDivision
;;;1229     * @param  TIMx Timer instance
;;;1230     * @param  ClockDivision This parameter can be one of the following values:
;;;1231     *         @arg @ref LL_TIM_CLOCKDIVISION_DIV1
;;;1232     *         @arg @ref LL_TIM_CLOCKDIVISION_DIV2
;;;1233     *         @arg @ref LL_TIM_CLOCKDIVISION_DIV4
;;;1234     * @retval None
;;;1235     */
;;;1236   __STATIC_INLINE void LL_TIM_SetClockDivision(TIM_TypeDef *TIMx, uint32_t ClockDivision)
;;;1237   {
;;;1238     MODIFY_REG(TIMx->CR1, TIM_CR1_CKD, ClockDivision);
;;;1239   }
;;;1240   
;;;1241   /**
;;;1242     * @brief  Get the actual division ratio between the timer clock  and the sampling clock used by the dead-time generators (when supported) and the digital filters.
;;;1243     * @note Macro @ref IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx) can be used to check
;;;1244     *       whether or not the clock division feature is supported by the timer
;;;1245     *       instance.
;;;1246     * @rmtoll CR1          CKD           LL_TIM_GetClockDivision
;;;1247     * @param  TIMx Timer instance
;;;1248     * @retval Returned value can be one of the following values:
;;;1249     *         @arg @ref LL_TIM_CLOCKDIVISION_DIV1
;;;1250     *         @arg @ref LL_TIM_CLOCKDIVISION_DIV2
;;;1251     *         @arg @ref LL_TIM_CLOCKDIVISION_DIV4
;;;1252     */
;;;1253   __STATIC_INLINE uint32_t LL_TIM_GetClockDivision(TIM_TypeDef *TIMx)
;;;1254   {
;;;1255     return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_CKD));
;;;1256   }
;;;1257   
;;;1258   /**
;;;1259     * @brief  Set the counter value.
;;;1260     * @rmtoll CNT          CNT           LL_TIM_SetCounter
;;;1261     * @param  TIMx Timer instance
;;;1262     * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF)
;;;1263     * @retval None
;;;1264     */
;;;1265   __STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
;;;1266   {
;;;1267     WRITE_REG(TIMx->CNT, Counter);
;;;1268   }
;;;1269   
;;;1270   /**
;;;1271     * @brief  Get the counter value.
;;;1272     * @rmtoll CNT          CNT           LL_TIM_GetCounter
;;;1273     * @param  TIMx Timer instance
;;;1274     * @retval Counter value (between Min_Data=0 and Max_Data=0xFFFF)
;;;1275     */
;;;1276   __STATIC_INLINE uint32_t LL_TIM_GetCounter(TIM_TypeDef *TIMx)
;;;1277   {
;;;1278     return (uint32_t)(READ_REG(TIMx->CNT));
;;;1279   }
;;;1280   
;;;1281   /**
;;;1282     * @brief  Get the current direction of the counter
;;;1283     * @rmtoll CR1          DIR           LL_TIM_GetDirection
;;;1284     * @param  TIMx Timer instance
;;;1285     * @retval Returned value can be one of the following values:
;;;1286     *         @arg @ref LL_TIM_COUNTERDIRECTION_UP
;;;1287     *         @arg @ref LL_TIM_COUNTERDIRECTION_DOWN
;;;1288     */
;;;1289   __STATIC_INLINE uint32_t LL_TIM_GetDirection(TIM_TypeDef *TIMx)
;;;1290   {
;;;1291     return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
;;;1292   }
;;;1293   
;;;1294   /**
;;;1295     * @brief  Set the prescaler value.
;;;1296     * @note The counter clock frequency CK_CNT is equal to fCK_PSC / (PSC[15:0] + 1).
;;;1297     * @note The prescaler can be changed on the fly as this control register is buffered. The new
;;;1298     *       prescaler ratio is taken into account at the next update event.
;;;1299     * @note Helper macro @ref __LL_TIM_CALC_PSC can be used to calculate the Prescaler parameter
;;;1300     * @rmtoll PSC          PSC           LL_TIM_SetPrescaler
;;;1301     * @param  TIMx Timer instance
;;;1302     * @param  Prescaler between Min_Data=0 and Max_Data=65535
;;;1303     * @retval None
;;;1304     */
;;;1305   __STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
;;;1306   {
;;;1307     WRITE_REG(TIMx->PSC, Prescaler);
;;;1308   }
;;;1309   
;;;1310   /**
;;;1311     * @brief  Get the prescaler value.
;;;1312     * @rmtoll PSC          PSC           LL_TIM_GetPrescaler
;;;1313     * @param  TIMx Timer instance
;;;1314     * @retval  Prescaler value between Min_Data=0 and Max_Data=65535
;;;1315     */
;;;1316   __STATIC_INLINE uint32_t LL_TIM_GetPrescaler(TIM_TypeDef *TIMx)
;;;1317   {
;;;1318     return (uint32_t)(READ_REG(TIMx->PSC));
;;;1319   }
;;;1320   
;;;1321   /**
;;;1322     * @brief  Set the auto-reload value.
;;;1323     * @note The counter is blocked while the auto-reload value is null.
;;;1324     * @note Helper macro @ref __LL_TIM_CALC_ARR can be used to calculate the AutoReload parameter
;;;1325     * @rmtoll ARR          ARR           LL_TIM_SetAutoReload
;;;1326     * @param  TIMx Timer instance
;;;1327     * @param  AutoReload between Min_Data=0 and Max_Data=65535
;;;1328     * @retval None
;;;1329     */
;;;1330   __STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
;;;1331   {
;;;1332     WRITE_REG(TIMx->ARR, AutoReload);
;;;1333   }
;;;1334   
;;;1335   /**
;;;1336     * @brief  Get the auto-reload value.
;;;1337     * @rmtoll ARR          ARR           LL_TIM_GetAutoReload
;;;1338     * @param  TIMx Timer instance
;;;1339     * @retval Auto-reload value
;;;1340     */
;;;1341   __STATIC_INLINE uint32_t LL_TIM_GetAutoReload(TIM_TypeDef *TIMx)
;;;1342   {
;;;1343     return (uint32_t)(READ_REG(TIMx->ARR));
;;;1344   }
;;;1345   
;;;1346   /**
;;;1347     * @brief  Set the repetition counter value.
;;;1348     * @note Macro @ref IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx) can be used to check
;;;1349     *       whether or not a timer instance supports a repetition counter.
;;;1350     * @rmtoll RCR          REP           LL_TIM_SetRepetitionCounter
;;;1351     * @param  TIMx Timer instance
;;;1352     * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
;;;1353     * @retval None
;;;1354     */
;;;1355   __STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
;;;1356   {
;;;1357     WRITE_REG(TIMx->RCR, RepetitionCounter);
;;;1358   }
;;;1359   
;;;1360   /**
;;;1361     * @brief  Get the repetition counter value.
;;;1362     * @note Macro @ref IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx) can be used to check
;;;1363     *       whether or not a timer instance supports a repetition counter.
;;;1364     * @rmtoll RCR          REP           LL_TIM_GetRepetitionCounter
;;;1365     * @param  TIMx Timer instance
;;;1366     * @retval Repetition counter value
;;;1367     */
;;;1368   __STATIC_INLINE uint32_t LL_TIM_GetRepetitionCounter(TIM_TypeDef *TIMx)
;;;1369   {
;;;1370     return (uint32_t)(READ_REG(TIMx->RCR));
;;;1371   }
;;;1372   
;;;1373   /**
;;;1374     * @}
;;;1375     */
;;;1376   
;;;1377   /** @defgroup TIM_LL_EF_Capture_Compare Capture Compare configuration
;;;1378     * @{
;;;1379     */
;;;1380   /**
;;;1381     * @brief  Enable  the capture/compare control bits (CCxE, CCxNE and OCxM) preload.
;;;1382     * @note CCxE, CCxNE and OCxM bits are preloaded, after having been written,
;;;1383     *       they are updated only when a commutation event (COM) occurs.
;;;1384     * @note Only on channels that have a complementary output.
;;;1385     * @note Macro @ref IS_TIM_COMMUTATION_EVENT_INSTANCE(TIMx) can be used to check
;;;1386     *       whether or not a timer instance is able to generate a commutation event.
;;;1387     * @rmtoll CR2          CCPC          LL_TIM_CC_EnablePreload
;;;1388     * @param  TIMx Timer instance
;;;1389     * @retval None
;;;1390     */
;;;1391   __STATIC_INLINE void LL_TIM_CC_EnablePreload(TIM_TypeDef *TIMx)
;;;1392   {
;;;1393     SET_BIT(TIMx->CR2, TIM_CR2_CCPC);
;;;1394   }
;;;1395   
;;;1396   /**
;;;1397     * @brief  Disable  the capture/compare control bits (CCxE, CCxNE and OCxM) preload.
;;;1398     * @note Macro @ref IS_TIM_COMMUTATION_EVENT_INSTANCE(TIMx) can be used to check
;;;1399     *       whether or not a timer instance is able to generate a commutation event.
;;;1400     * @rmtoll CR2          CCPC          LL_TIM_CC_DisablePreload
;;;1401     * @param  TIMx Timer instance
;;;1402     * @retval None
;;;1403     */
;;;1404   __STATIC_INLINE void LL_TIM_CC_DisablePreload(TIM_TypeDef *TIMx)
;;;1405   {
;;;1406     CLEAR_BIT(TIMx->CR2, TIM_CR2_CCPC);
;;;1407   }
;;;1408   
;;;1409   /**
;;;1410     * @brief  Set the updated source of the capture/compare control bits (CCxE, CCxNE and OCxM).
;;;1411     * @note Macro @ref IS_TIM_COMMUTATION_EVENT_INSTANCE(TIMx) can be used to check
;;;1412     *       whether or not a timer instance is able to generate a commutation event.
;;;1413     * @rmtoll CR2          CCUS          LL_TIM_CC_SetUpdate
;;;1414     * @param  TIMx Timer instance
;;;1415     * @param  CCUpdateSource This parameter can be one of the following values:
;;;1416     *         @arg @ref LL_TIM_CCUPDATESOURCE_COMG_ONLY
;;;1417     *         @arg @ref LL_TIM_CCUPDATESOURCE_COMG_AND_TRGI
;;;1418     * @retval None
;;;1419     */
;;;1420   __STATIC_INLINE void LL_TIM_CC_SetUpdate(TIM_TypeDef *TIMx, uint32_t CCUpdateSource)
;;;1421   {
;;;1422     MODIFY_REG(TIMx->CR2, TIM_CR2_CCUS, CCUpdateSource);
;;;1423   }
;;;1424   
;;;1425   /**
;;;1426     * @brief  Set the trigger of the capture/compare DMA request.
;;;1427     * @rmtoll CR2          CCDS          LL_TIM_CC_SetDMAReqTrigger
;;;1428     * @param  TIMx Timer instance
;;;1429     * @param  DMAReqTrigger This parameter can be one of the following values:
;;;1430     *         @arg @ref LL_TIM_CCDMAREQUEST_CC
;;;1431     *         @arg @ref LL_TIM_CCDMAREQUEST_UPDATE
;;;1432     * @retval None
;;;1433     */
;;;1434   __STATIC_INLINE void LL_TIM_CC_SetDMAReqTrigger(TIM_TypeDef *TIMx, uint32_t DMAReqTrigger)
;;;1435   {
;;;1436     MODIFY_REG(TIMx->CR2, TIM_CR2_CCDS, DMAReqTrigger);
;;;1437   }
;;;1438   
;;;1439   /**
;;;1440     * @brief  Get actual trigger of the capture/compare DMA request.
;;;1441     * @rmtoll CR2          CCDS          LL_TIM_CC_GetDMAReqTrigger
;;;1442     * @param  TIMx Timer instance
;;;1443     * @retval Returned value can be one of the following values:
;;;1444     *         @arg @ref LL_TIM_CCDMAREQUEST_CC
;;;1445     *         @arg @ref LL_TIM_CCDMAREQUEST_UPDATE
;;;1446     */
;;;1447   __STATIC_INLINE uint32_t LL_TIM_CC_GetDMAReqTrigger(TIM_TypeDef *TIMx)
;;;1448   {
;;;1449     return (uint32_t)(READ_BIT(TIMx->CR2, TIM_CR2_CCDS));
;;;1450   }
;;;1451   
;;;1452   /**
;;;1453     * @brief  Set the lock level to freeze the
;;;1454     *         configuration of several capture/compare parameters.
;;;1455     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;1456     *       the lock mechanism is supported by a timer instance.
;;;1457     * @rmtoll BDTR         LOCK          LL_TIM_CC_SetLockLevel
;;;1458     * @param  TIMx Timer instance
;;;1459     * @param  LockLevel This parameter can be one of the following values:
;;;1460     *         @arg @ref LL_TIM_LOCKLEVEL_OFF
;;;1461     *         @arg @ref LL_TIM_LOCKLEVEL_1
;;;1462     *         @arg @ref LL_TIM_LOCKLEVEL_2
;;;1463     *         @arg @ref LL_TIM_LOCKLEVEL_3
;;;1464     * @retval None
;;;1465     */
;;;1466   __STATIC_INLINE void LL_TIM_CC_SetLockLevel(TIM_TypeDef *TIMx, uint32_t LockLevel)
;;;1467   {
;;;1468     MODIFY_REG(TIMx->BDTR, TIM_BDTR_LOCK, LockLevel);
;;;1469   }
;;;1470   
;;;1471   /**
;;;1472     * @brief  Enable capture/compare channels.
;;;1473     * @rmtoll CCER         CC1E          LL_TIM_CC_EnableChannel\n
;;;1474     *         CCER         CC1NE         LL_TIM_CC_EnableChannel\n
;;;1475     *         CCER         CC2E          LL_TIM_CC_EnableChannel\n
;;;1476     *         CCER         CC2NE         LL_TIM_CC_EnableChannel\n
;;;1477     *         CCER         CC3E          LL_TIM_CC_EnableChannel\n
;;;1478     *         CCER         CC3NE         LL_TIM_CC_EnableChannel\n
;;;1479     *         CCER         CC4E          LL_TIM_CC_EnableChannel
;;;1480     * @param  TIMx Timer instance
;;;1481     * @param  Channels This parameter can be a combination of the following values:
;;;1482     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1483     *         @arg @ref LL_TIM_CHANNEL_CH1N
;;;1484     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1485     *         @arg @ref LL_TIM_CHANNEL_CH2N
;;;1486     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1487     *         @arg @ref LL_TIM_CHANNEL_CH3N
;;;1488     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1489     * @retval None
;;;1490     */
;;;1491   __STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
;;;1492   {
;;;1493     SET_BIT(TIMx->CCER, Channels);
;;;1494   }
;;;1495   
;;;1496   /**
;;;1497     * @brief  Disable capture/compare channels.
;;;1498     * @rmtoll CCER         CC1E          LL_TIM_CC_DisableChannel\n
;;;1499     *         CCER         CC1NE         LL_TIM_CC_DisableChannel\n
;;;1500     *         CCER         CC2E          LL_TIM_CC_DisableChannel\n
;;;1501     *         CCER         CC2NE         LL_TIM_CC_DisableChannel\n
;;;1502     *         CCER         CC3E          LL_TIM_CC_DisableChannel\n
;;;1503     *         CCER         CC3NE         LL_TIM_CC_DisableChannel\n
;;;1504     *         CCER         CC4E          LL_TIM_CC_DisableChannel
;;;1505     * @param  TIMx Timer instance
;;;1506     * @param  Channels This parameter can be a combination of the following values:
;;;1507     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1508     *         @arg @ref LL_TIM_CHANNEL_CH1N
;;;1509     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1510     *         @arg @ref LL_TIM_CHANNEL_CH2N
;;;1511     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1512     *         @arg @ref LL_TIM_CHANNEL_CH3N
;;;1513     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1514     * @retval None
;;;1515     */
;;;1516   __STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
;;;1517   {
;;;1518     CLEAR_BIT(TIMx->CCER, Channels);
;;;1519   }
;;;1520   
;;;1521   /**
;;;1522     * @brief  Indicate whether channel(s) is(are) enabled.
;;;1523     * @rmtoll CCER         CC1E          LL_TIM_CC_IsEnabledChannel\n
;;;1524     *         CCER         CC1NE         LL_TIM_CC_IsEnabledChannel\n
;;;1525     *         CCER         CC2E          LL_TIM_CC_IsEnabledChannel\n
;;;1526     *         CCER         CC2NE         LL_TIM_CC_IsEnabledChannel\n
;;;1527     *         CCER         CC3E          LL_TIM_CC_IsEnabledChannel\n
;;;1528     *         CCER         CC3NE         LL_TIM_CC_IsEnabledChannel\n
;;;1529     *         CCER         CC4E          LL_TIM_CC_IsEnabledChannel
;;;1530     * @param  TIMx Timer instance
;;;1531     * @param  Channels This parameter can be a combination of the following values:
;;;1532     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1533     *         @arg @ref LL_TIM_CHANNEL_CH1N
;;;1534     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1535     *         @arg @ref LL_TIM_CHANNEL_CH2N
;;;1536     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1537     *         @arg @ref LL_TIM_CHANNEL_CH3N
;;;1538     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1539     * @retval State of bit (1 or 0).
;;;1540     */
;;;1541   __STATIC_INLINE uint32_t LL_TIM_CC_IsEnabledChannel(TIM_TypeDef *TIMx, uint32_t Channels)
;;;1542   {
;;;1543     return (READ_BIT(TIMx->CCER, Channels) == (Channels));
;;;1544   }
;;;1545   
;;;1546   /**
;;;1547     * @}
;;;1548     */
;;;1549   
;;;1550   /** @defgroup TIM_LL_EF_Output_Channel Output channel configuration
;;;1551     * @{
;;;1552     */
;;;1553   /**
;;;1554     * @brief  Configure an output channel.
;;;1555     * @rmtoll CCMR1        CC1S          LL_TIM_OC_ConfigOutput\n
;;;1556     *         CCMR1        CC2S          LL_TIM_OC_ConfigOutput\n
;;;1557     *         CCMR2        CC3S          LL_TIM_OC_ConfigOutput\n
;;;1558     *         CCMR2        CC4S          LL_TIM_OC_ConfigOutput\n
;;;1559     *         CCER         CC1P          LL_TIM_OC_ConfigOutput\n
;;;1560     *         CCER         CC2P          LL_TIM_OC_ConfigOutput\n
;;;1561     *         CCER         CC3P          LL_TIM_OC_ConfigOutput\n
;;;1562     *         CCER         CC4P          LL_TIM_OC_ConfigOutput\n
;;;1563     *         CR2          OIS1          LL_TIM_OC_ConfigOutput\n
;;;1564     *         CR2          OIS2          LL_TIM_OC_ConfigOutput\n
;;;1565     *         CR2          OIS3          LL_TIM_OC_ConfigOutput\n
;;;1566     *         CR2          OIS4          LL_TIM_OC_ConfigOutput
;;;1567     * @param  TIMx Timer instance
;;;1568     * @param  Channel This parameter can be one of the following values:
;;;1569     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1570     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1571     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1572     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1573     * @param  Configuration This parameter must be a combination of all the following values:
;;;1574     *         @arg @ref LL_TIM_OCPOLARITY_HIGH or @ref LL_TIM_OCPOLARITY_LOW
;;;1575     *         @arg @ref LL_TIM_OCIDLESTATE_LOW or @ref LL_TIM_OCIDLESTATE_HIGH
;;;1576     * @retval None
;;;1577     */
;;;1578   __STATIC_INLINE void LL_TIM_OC_ConfigOutput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Configuration)
;;;1579   {
;;;1580     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1581     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1582     CLEAR_BIT(*pReg, (TIM_CCMR1_CC1S << SHIFT_TAB_OCxx[iChannel]));
;;;1583     MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),
;;;1584                (Configuration & TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]);
;;;1585     MODIFY_REG(TIMx->CR2, (TIM_CR2_OIS1 << SHIFT_TAB_OISx[iChannel]),
;;;1586                (Configuration & TIM_CR2_OIS1) << SHIFT_TAB_OISx[iChannel]);
;;;1587   }
;;;1588   
;;;1589   /**
;;;1590     * @brief  Define the behavior of the output reference signal OCxREF from which
;;;1591     *         OCx and OCxN (when relevant) are derived.
;;;1592     * @rmtoll CCMR1        OC1M          LL_TIM_OC_SetMode\n
;;;1593     *         CCMR1        OC2M          LL_TIM_OC_SetMode\n
;;;1594     *         CCMR2        OC3M          LL_TIM_OC_SetMode\n
;;;1595     *         CCMR2        OC4M          LL_TIM_OC_SetMode
;;;1596     * @param  TIMx Timer instance
;;;1597     * @param  Channel This parameter can be one of the following values:
;;;1598     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1599     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1600     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1601     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1602     * @param  Mode This parameter can be one of the following values:
;;;1603     *         @arg @ref LL_TIM_OCMODE_FROZEN
;;;1604     *         @arg @ref LL_TIM_OCMODE_ACTIVE
;;;1605     *         @arg @ref LL_TIM_OCMODE_INACTIVE
;;;1606     *         @arg @ref LL_TIM_OCMODE_TOGGLE
;;;1607     *         @arg @ref LL_TIM_OCMODE_FORCED_INACTIVE
;;;1608     *         @arg @ref LL_TIM_OCMODE_FORCED_ACTIVE
;;;1609     *         @arg @ref LL_TIM_OCMODE_PWM1
;;;1610     *         @arg @ref LL_TIM_OCMODE_PWM2
;;;1611     * @retval None
;;;1612     */
;;;1613   __STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
;;;1614   {
;;;1615     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1616     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1617     MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
;;;1618   }
;;;1619   
;;;1620   /**
;;;1621     * @brief  Get the output compare mode of an output channel.
;;;1622     * @rmtoll CCMR1        OC1M          LL_TIM_OC_GetMode\n
;;;1623     *         CCMR1        OC2M          LL_TIM_OC_GetMode\n
;;;1624     *         CCMR2        OC3M          LL_TIM_OC_GetMode\n
;;;1625     *         CCMR2        OC4M          LL_TIM_OC_GetMode
;;;1626     * @param  TIMx Timer instance
;;;1627     * @param  Channel This parameter can be one of the following values:
;;;1628     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1629     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1630     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1631     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1632     * @retval Returned value can be one of the following values:
;;;1633     *         @arg @ref LL_TIM_OCMODE_FROZEN
;;;1634     *         @arg @ref LL_TIM_OCMODE_ACTIVE
;;;1635     *         @arg @ref LL_TIM_OCMODE_INACTIVE
;;;1636     *         @arg @ref LL_TIM_OCMODE_TOGGLE
;;;1637     *         @arg @ref LL_TIM_OCMODE_FORCED_INACTIVE
;;;1638     *         @arg @ref LL_TIM_OCMODE_FORCED_ACTIVE
;;;1639     *         @arg @ref LL_TIM_OCMODE_PWM1
;;;1640     *         @arg @ref LL_TIM_OCMODE_PWM2
;;;1641     */
;;;1642   __STATIC_INLINE uint32_t LL_TIM_OC_GetMode(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1643   {
;;;1644     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1645     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1646     return (READ_BIT(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel])) >> SHIFT_TAB_OCxx[iChannel]);
;;;1647   }
;;;1648   
;;;1649   /**
;;;1650     * @brief  Set the polarity of an output channel.
;;;1651     * @rmtoll CCER         CC1P          LL_TIM_OC_SetPolarity\n
;;;1652     *         CCER         CC1NP         LL_TIM_OC_SetPolarity\n
;;;1653     *         CCER         CC2P          LL_TIM_OC_SetPolarity\n
;;;1654     *         CCER         CC2NP         LL_TIM_OC_SetPolarity\n
;;;1655     *         CCER         CC3P          LL_TIM_OC_SetPolarity\n
;;;1656     *         CCER         CC3NP         LL_TIM_OC_SetPolarity\n
;;;1657     *         CCER         CC4P          LL_TIM_OC_SetPolarity
;;;1658     * @param  TIMx Timer instance
;;;1659     * @param  Channel This parameter can be one of the following values:
;;;1660     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1661     *         @arg @ref LL_TIM_CHANNEL_CH1N
;;;1662     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1663     *         @arg @ref LL_TIM_CHANNEL_CH2N
;;;1664     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1665     *         @arg @ref LL_TIM_CHANNEL_CH3N
;;;1666     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1667     * @param  Polarity This parameter can be one of the following values:
;;;1668     *         @arg @ref LL_TIM_OCPOLARITY_HIGH
;;;1669     *         @arg @ref LL_TIM_OCPOLARITY_LOW
;;;1670     * @retval None
;;;1671     */
;;;1672   __STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
;;;1673   {
;;;1674     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1675     MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
;;;1676   }
;;;1677   
;;;1678   /**
;;;1679     * @brief  Get the polarity of an output channel.
;;;1680     * @rmtoll CCER         CC1P          LL_TIM_OC_GetPolarity\n
;;;1681     *         CCER         CC1NP         LL_TIM_OC_GetPolarity\n
;;;1682     *         CCER         CC2P          LL_TIM_OC_GetPolarity\n
;;;1683     *         CCER         CC2NP         LL_TIM_OC_GetPolarity\n
;;;1684     *         CCER         CC3P          LL_TIM_OC_GetPolarity\n
;;;1685     *         CCER         CC3NP         LL_TIM_OC_GetPolarity\n
;;;1686     *         CCER         CC4P          LL_TIM_OC_GetPolarity
;;;1687     * @param  TIMx Timer instance
;;;1688     * @param  Channel This parameter can be one of the following values:
;;;1689     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1690     *         @arg @ref LL_TIM_CHANNEL_CH1N
;;;1691     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1692     *         @arg @ref LL_TIM_CHANNEL_CH2N
;;;1693     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1694     *         @arg @ref LL_TIM_CHANNEL_CH3N
;;;1695     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1696     * @retval Returned value can be one of the following values:
;;;1697     *         @arg @ref LL_TIM_OCPOLARITY_HIGH
;;;1698     *         @arg @ref LL_TIM_OCPOLARITY_LOW
;;;1699     */
;;;1700   __STATIC_INLINE uint32_t LL_TIM_OC_GetPolarity(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1701   {
;;;1702     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1703     return (READ_BIT(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel])) >> SHIFT_TAB_CCxP[iChannel]);
;;;1704   }
;;;1705   
;;;1706   /**
;;;1707     * @brief  Set the IDLE state of an output channel
;;;1708     * @note This function is significant only for the timer instances
;;;1709     *       supporting the break feature. Macro @ref IS_TIM_BREAK_INSTANCE(TIMx)
;;;1710     *       can be used to check whether or not a timer instance provides
;;;1711     *       a break input.
;;;1712     * @rmtoll CR2         OIS1          LL_TIM_OC_SetIdleState\n
;;;1713     *         CR2         OIS1N         LL_TIM_OC_SetIdleState\n
;;;1714     *         CR2         OIS2          LL_TIM_OC_SetIdleState\n
;;;1715     *         CR2         OIS2N         LL_TIM_OC_SetIdleState\n
;;;1716     *         CR2         OIS3          LL_TIM_OC_SetIdleState\n
;;;1717     *         CR2         OIS3N         LL_TIM_OC_SetIdleState\n
;;;1718     *         CR2         OIS4          LL_TIM_OC_SetIdleState
;;;1719     * @param  TIMx Timer instance
;;;1720     * @param  Channel This parameter can be one of the following values:
;;;1721     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1722     *         @arg @ref LL_TIM_CHANNEL_CH1N
;;;1723     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1724     *         @arg @ref LL_TIM_CHANNEL_CH2N
;;;1725     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1726     *         @arg @ref LL_TIM_CHANNEL_CH3N
;;;1727     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1728     * @param  IdleState This parameter can be one of the following values:
;;;1729     *         @arg @ref LL_TIM_OCIDLESTATE_LOW
;;;1730     *         @arg @ref LL_TIM_OCIDLESTATE_HIGH
;;;1731     * @retval None
;;;1732     */
;;;1733   __STATIC_INLINE void LL_TIM_OC_SetIdleState(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t IdleState)
;;;1734   {
;;;1735     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1736     MODIFY_REG(TIMx->CR2, (TIM_CR2_OIS1 << SHIFT_TAB_OISx[iChannel]),  IdleState << SHIFT_TAB_OISx[iChannel]);
;;;1737   }
;;;1738   
;;;1739   /**
;;;1740     * @brief  Get the IDLE state of an output channel
;;;1741     * @rmtoll CR2         OIS1          LL_TIM_OC_GetIdleState\n
;;;1742     *         CR2         OIS1N         LL_TIM_OC_GetIdleState\n
;;;1743     *         CR2         OIS2          LL_TIM_OC_GetIdleState\n
;;;1744     *         CR2         OIS2N         LL_TIM_OC_GetIdleState\n
;;;1745     *         CR2         OIS3          LL_TIM_OC_GetIdleState\n
;;;1746     *         CR2         OIS3N         LL_TIM_OC_GetIdleState\n
;;;1747     *         CR2         OIS4          LL_TIM_OC_GetIdleState
;;;1748     * @param  TIMx Timer instance
;;;1749     * @param  Channel This parameter can be one of the following values:
;;;1750     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1751     *         @arg @ref LL_TIM_CHANNEL_CH1N
;;;1752     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1753     *         @arg @ref LL_TIM_CHANNEL_CH2N
;;;1754     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1755     *         @arg @ref LL_TIM_CHANNEL_CH3N
;;;1756     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1757     * @retval Returned value can be one of the following values:
;;;1758     *         @arg @ref LL_TIM_OCIDLESTATE_LOW
;;;1759     *         @arg @ref LL_TIM_OCIDLESTATE_HIGH
;;;1760     */
;;;1761   __STATIC_INLINE uint32_t LL_TIM_OC_GetIdleState(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1762   {
;;;1763     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1764     return (READ_BIT(TIMx->CR2, (TIM_CR2_OIS1 << SHIFT_TAB_OISx[iChannel])) >> SHIFT_TAB_OISx[iChannel]);
;;;1765   }
;;;1766   
;;;1767   /**
;;;1768     * @brief  Enable fast mode for the output channel.
;;;1769     * @note Acts only if the channel is configured in PWM1 or PWM2 mode.
;;;1770     * @rmtoll CCMR1        OC1FE          LL_TIM_OC_EnableFast\n
;;;1771     *         CCMR1        OC2FE          LL_TIM_OC_EnableFast\n
;;;1772     *         CCMR2        OC3FE          LL_TIM_OC_EnableFast\n
;;;1773     *         CCMR2        OC4FE          LL_TIM_OC_EnableFast
;;;1774     * @param  TIMx Timer instance
;;;1775     * @param  Channel This parameter can be one of the following values:
;;;1776     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1777     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1778     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1779     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1780     * @retval None
;;;1781     */
;;;1782   __STATIC_INLINE void LL_TIM_OC_EnableFast(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1783   {
;;;1784     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1785     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1786     SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
;;;1787   
;;;1788   }
;;;1789   
;;;1790   /**
;;;1791     * @brief  Disable fast mode for the output channel.
;;;1792     * @rmtoll CCMR1        OC1FE          LL_TIM_OC_DisableFast\n
;;;1793     *         CCMR1        OC2FE          LL_TIM_OC_DisableFast\n
;;;1794     *         CCMR2        OC3FE          LL_TIM_OC_DisableFast\n
;;;1795     *         CCMR2        OC4FE          LL_TIM_OC_DisableFast
;;;1796     * @param  TIMx Timer instance
;;;1797     * @param  Channel This parameter can be one of the following values:
;;;1798     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1799     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1800     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1801     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1802     * @retval None
;;;1803     */
;;;1804   __STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1805   {
;;;1806     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1807     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1808     CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
;;;1809   
;;;1810   }
;;;1811   
;;;1812   /**
;;;1813     * @brief  Indicates whether fast mode is enabled for the output channel.
;;;1814     * @rmtoll CCMR1        OC1FE          LL_TIM_OC_IsEnabledFast\n
;;;1815     *         CCMR1        OC2FE          LL_TIM_OC_IsEnabledFast\n
;;;1816     *         CCMR2        OC3FE          LL_TIM_OC_IsEnabledFast\n
;;;1817     *         CCMR2        OC4FE          LL_TIM_OC_IsEnabledFast\n
;;;1818     * @param  TIMx Timer instance
;;;1819     * @param  Channel This parameter can be one of the following values:
;;;1820     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1821     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1822     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1823     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1824     * @retval State of bit (1 or 0).
;;;1825     */
;;;1826   __STATIC_INLINE uint32_t LL_TIM_OC_IsEnabledFast(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1827   {
;;;1828     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1829     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1830     register uint32_t bitfield = TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel];
;;;1831     return (READ_BIT(*pReg, bitfield) == bitfield);
;;;1832   }
;;;1833   
;;;1834   /**
;;;1835     * @brief  Enable compare register (TIMx_CCRx) preload for the output channel.
;;;1836     * @rmtoll CCMR1        OC1PE          LL_TIM_OC_EnablePreload\n
;;;1837     *         CCMR1        OC2PE          LL_TIM_OC_EnablePreload\n
;;;1838     *         CCMR2        OC3PE          LL_TIM_OC_EnablePreload\n
;;;1839     *         CCMR2        OC4PE          LL_TIM_OC_EnablePreload
;;;1840     * @param  TIMx Timer instance
;;;1841     * @param  Channel This parameter can be one of the following values:
;;;1842     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1843     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1844     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1845     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1846     * @retval None
;;;1847     */
;;;1848   __STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1849   {
;;;1850     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1851     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1852     SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
;;;1853   }
;;;1854   
;;;1855   /**
;;;1856     * @brief  Disable compare register (TIMx_CCRx) preload for the output channel.
;;;1857     * @rmtoll CCMR1        OC1PE          LL_TIM_OC_DisablePreload\n
;;;1858     *         CCMR1        OC2PE          LL_TIM_OC_DisablePreload\n
;;;1859     *         CCMR2        OC3PE          LL_TIM_OC_DisablePreload\n
;;;1860     *         CCMR2        OC4PE          LL_TIM_OC_DisablePreload
;;;1861     * @param  TIMx Timer instance
;;;1862     * @param  Channel This parameter can be one of the following values:
;;;1863     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1864     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1865     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1866     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1867     * @retval None
;;;1868     */
;;;1869   __STATIC_INLINE void LL_TIM_OC_DisablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1870   {
;;;1871     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1872     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1873     CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
;;;1874   }
;;;1875   
;;;1876   /**
;;;1877     * @brief  Indicates whether compare register (TIMx_CCRx) preload is enabled for the output channel.
;;;1878     * @rmtoll CCMR1        OC1PE          LL_TIM_OC_IsEnabledPreload\n
;;;1879     *         CCMR1        OC2PE          LL_TIM_OC_IsEnabledPreload\n
;;;1880     *         CCMR2        OC3PE          LL_TIM_OC_IsEnabledPreload\n
;;;1881     *         CCMR2        OC4PE          LL_TIM_OC_IsEnabledPreload\n
;;;1882     * @param  TIMx Timer instance
;;;1883     * @param  Channel This parameter can be one of the following values:
;;;1884     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1885     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1886     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1887     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1888     * @retval State of bit (1 or 0).
;;;1889     */
;;;1890   __STATIC_INLINE uint32_t LL_TIM_OC_IsEnabledPreload(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1891   {
;;;1892     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1893     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1894     register uint32_t bitfield = TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel];
;;;1895     return (READ_BIT(*pReg, bitfield) == bitfield);
;;;1896   }
;;;1897   
;;;1898   /**
;;;1899     * @brief  Enable clearing the output channel on an external event.
;;;1900     * @note This function can only be used in Output compare and PWM modes. It does not work in Forced mode.
;;;1901     * @note Macro @ref IS_TIM_OCXREF_CLEAR_INSTANCE(TIMx) can be used to check whether
;;;1902     *       or not a timer instance can clear the OCxREF signal on an external event.
;;;1903     * @rmtoll CCMR1        OC1CE          LL_TIM_OC_EnableClear\n
;;;1904     *         CCMR1        OC2CE          LL_TIM_OC_EnableClear\n
;;;1905     *         CCMR2        OC3CE          LL_TIM_OC_EnableClear\n
;;;1906     *         CCMR2        OC4CE          LL_TIM_OC_EnableClear
;;;1907     * @param  TIMx Timer instance
;;;1908     * @param  Channel This parameter can be one of the following values:
;;;1909     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1910     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1911     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1912     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1913     * @retval None
;;;1914     */
;;;1915   __STATIC_INLINE void LL_TIM_OC_EnableClear(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1916   {
;;;1917     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1918     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1919     SET_BIT(*pReg, (TIM_CCMR1_OC1CE << SHIFT_TAB_OCxx[iChannel]));
;;;1920   }
;;;1921   
;;;1922   /**
;;;1923     * @brief  Disable clearing the output channel on an external event.
;;;1924     * @note Macro @ref IS_TIM_OCXREF_CLEAR_INSTANCE(TIMx) can be used to check whether
;;;1925     *       or not a timer instance can clear the OCxREF signal on an external event.
;;;1926     * @rmtoll CCMR1        OC1CE          LL_TIM_OC_DisableClear\n
;;;1927     *         CCMR1        OC2CE          LL_TIM_OC_DisableClear\n
;;;1928     *         CCMR2        OC3CE          LL_TIM_OC_DisableClear\n
;;;1929     *         CCMR2        OC4CE          LL_TIM_OC_DisableClear
;;;1930     * @param  TIMx Timer instance
;;;1931     * @param  Channel This parameter can be one of the following values:
;;;1932     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1933     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1934     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1935     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1936     * @retval None
;;;1937     */
;;;1938   __STATIC_INLINE void LL_TIM_OC_DisableClear(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1939   {
;;;1940     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1941     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1942     CLEAR_BIT(*pReg, (TIM_CCMR1_OC1CE << SHIFT_TAB_OCxx[iChannel]));
;;;1943   }
;;;1944   
;;;1945   /**
;;;1946     * @brief  Indicates clearing the output channel on an external event is enabled for the output channel.
;;;1947     * @note This function enables clearing the output channel on an external event.
;;;1948     * @note This function can only be used in Output compare and PWM modes. It does not work in Forced mode.
;;;1949     * @note Macro @ref IS_TIM_OCXREF_CLEAR_INSTANCE(TIMx) can be used to check whether
;;;1950     *       or not a timer instance can clear the OCxREF signal on an external event.
;;;1951     * @rmtoll CCMR1        OC1CE          LL_TIM_OC_IsEnabledClear\n
;;;1952     *         CCMR1        OC2CE          LL_TIM_OC_IsEnabledClear\n
;;;1953     *         CCMR2        OC3CE          LL_TIM_OC_IsEnabledClear\n
;;;1954     *         CCMR2        OC4CE          LL_TIM_OC_IsEnabledClear\n
;;;1955     * @param  TIMx Timer instance
;;;1956     * @param  Channel This parameter can be one of the following values:
;;;1957     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1958     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1959     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1960     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1961     * @retval State of bit (1 or 0).
;;;1962     */
;;;1963   __STATIC_INLINE uint32_t LL_TIM_OC_IsEnabledClear(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1964   {
;;;1965     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1966     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1967     register uint32_t bitfield = TIM_CCMR1_OC1CE << SHIFT_TAB_OCxx[iChannel];
;;;1968     return (READ_BIT(*pReg, bitfield) == bitfield);
;;;1969   }
;;;1970   
;;;1971   /**
;;;1972     * @brief  Set the dead-time delay (delay inserted between the rising edge of the OCxREF signal and the rising edge if the Ocx and OCxN signals).
;;;1973     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;1974     *       dead-time insertion feature is supported by a timer instance.
;;;1975     * @note Helper macro @ref __LL_TIM_CALC_DEADTIME can be used to calculate the DeadTime parameter
;;;1976     * @rmtoll BDTR         DTG           LL_TIM_OC_SetDeadTime
;;;1977     * @param  TIMx Timer instance
;;;1978     * @param  DeadTime between Min_Data=0 and Max_Data=255
;;;1979     * @retval None
;;;1980     */
;;;1981   __STATIC_INLINE void LL_TIM_OC_SetDeadTime(TIM_TypeDef *TIMx, uint32_t DeadTime)
;;;1982   {
;;;1983     MODIFY_REG(TIMx->BDTR, TIM_BDTR_DTG, DeadTime);
;;;1984   }
;;;1985   
;;;1986   /**
;;;1987     * @brief  Set compare value for output channel 1 (TIMx_CCR1).
;;;1988     * @note Macro @ref IS_TIM_CC1_INSTANCE(TIMx) can be used to check whether or not
;;;1989     *       output channel 1 is supported by a timer instance.
;;;1990     * @rmtoll CCR1         CCR1          LL_TIM_OC_SetCompareCH1
;;;1991     * @param  TIMx Timer instance
;;;1992     * @param  CompareValue between Min_Data=0 and Max_Data=65535
;;;1993     * @retval None
;;;1994     */
;;;1995   __STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
;;;1996   {
;;;1997     WRITE_REG(TIMx->CCR1, CompareValue);
;;;1998   }
;;;1999   
;;;2000   /**
;;;2001     * @brief  Set compare value for output channel 2 (TIMx_CCR2).
;;;2002     * @note Macro @ref IS_TIM_CC2_INSTANCE(TIMx) can be used to check whether or not
;;;2003     *       output channel 2 is supported by a timer instance.
;;;2004     * @rmtoll CCR2         CCR2          LL_TIM_OC_SetCompareCH2
;;;2005     * @param  TIMx Timer instance
;;;2006     * @param  CompareValue between Min_Data=0 and Max_Data=65535
;;;2007     * @retval None
;;;2008     */
;;;2009   __STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
;;;2010   {
;;;2011     WRITE_REG(TIMx->CCR2, CompareValue);
;;;2012   }
;;;2013   
;;;2014   /**
;;;2015     * @brief  Set compare value for output channel 3 (TIMx_CCR3).
;;;2016     * @note Macro @ref IS_TIM_CC3_INSTANCE(TIMx) can be used to check whether or not
;;;2017     *       output channel is supported by a timer instance.
;;;2018     * @rmtoll CCR3         CCR3          LL_TIM_OC_SetCompareCH3
;;;2019     * @param  TIMx Timer instance
;;;2020     * @param  CompareValue between Min_Data=0 and Max_Data=65535
;;;2021     * @retval None
;;;2022     */
;;;2023   __STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
;;;2024   {
;;;2025     WRITE_REG(TIMx->CCR3, CompareValue);
;;;2026   }
;;;2027   
;;;2028   /**
;;;2029     * @brief  Set compare value for output channel 4 (TIMx_CCR4).
;;;2030     * @note Macro @ref IS_TIM_CC4_INSTANCE(TIMx) can be used to check whether or not
;;;2031     *       output channel 4 is supported by a timer instance.
;;;2032     * @rmtoll CCR4         CCR4          LL_TIM_OC_SetCompareCH4
;;;2033     * @param  TIMx Timer instance
;;;2034     * @param  CompareValue between Min_Data=0 and Max_Data=65535
;;;2035     * @retval None
;;;2036     */
;;;2037   __STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
;;;2038   {
;;;2039     WRITE_REG(TIMx->CCR4, CompareValue);
;;;2040   }
;;;2041   
;;;2042   /**
;;;2043     * @brief  Get compare value (TIMx_CCR1) set for  output channel 1.
;;;2044     * @note Macro @ref IS_TIM_CC1_INSTANCE(TIMx) can be used to check whether or not
;;;2045     *       output channel 1 is supported by a timer instance.
;;;2046     * @rmtoll CCR1         CCR1          LL_TIM_OC_GetCompareCH1
;;;2047     * @param  TIMx Timer instance
;;;2048     * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
;;;2049     */
;;;2050   __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH1(TIM_TypeDef *TIMx)
;;;2051   {
;;;2052     return (uint32_t)(READ_REG(TIMx->CCR1));
;;;2053   }
;;;2054   
;;;2055   /**
;;;2056     * @brief  Get compare value (TIMx_CCR2) set for  output channel 2.
;;;2057     * @note Macro @ref IS_TIM_CC2_INSTANCE(TIMx) can be used to check whether or not
;;;2058     *       output channel 2 is supported by a timer instance.
;;;2059     * @rmtoll CCR2         CCR2          LL_TIM_OC_GetCompareCH2
;;;2060     * @param  TIMx Timer instance
;;;2061     * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
;;;2062     */
;;;2063   __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH2(TIM_TypeDef *TIMx)
;;;2064   {
;;;2065     return (uint32_t)(READ_REG(TIMx->CCR2));
;;;2066   }
;;;2067   
;;;2068   /**
;;;2069     * @brief  Get compare value (TIMx_CCR3) set for  output channel 3.
;;;2070     * @note Macro @ref IS_TIM_CC3_INSTANCE(TIMx) can be used to check whether or not
;;;2071     *       output channel 3 is supported by a timer instance.
;;;2072     * @rmtoll CCR3         CCR3          LL_TIM_OC_GetCompareCH3
;;;2073     * @param  TIMx Timer instance
;;;2074     * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
;;;2075     */
;;;2076   __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH3(TIM_TypeDef *TIMx)
;;;2077   {
;;;2078     return (uint32_t)(READ_REG(TIMx->CCR3));
;;;2079   }
;;;2080   
;;;2081   /**
;;;2082     * @brief  Get compare value (TIMx_CCR4) set for  output channel 4.
;;;2083     * @note Macro @ref IS_TIM_CC4_INSTANCE(TIMx) can be used to check whether or not
;;;2084     *       output channel 4 is supported by a timer instance.
;;;2085     * @rmtoll CCR4         CCR4          LL_TIM_OC_GetCompareCH4
;;;2086     * @param  TIMx Timer instance
;;;2087     * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
;;;2088     */
;;;2089   __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH4(TIM_TypeDef *TIMx)
;;;2090   {
;;;2091     return (uint32_t)(READ_REG(TIMx->CCR4));
;;;2092   }
;;;2093   
;;;2094   /**
;;;2095     * @}
;;;2096     */
;;;2097   
;;;2098   /** @defgroup TIM_LL_EF_Input_Channel Input channel configuration
;;;2099     * @{
;;;2100     */
;;;2101   /**
;;;2102     * @brief  Configure input channel.
;;;2103     * @rmtoll CCMR1        CC1S          LL_TIM_IC_Config\n
;;;2104     *         CCMR1        IC1PSC        LL_TIM_IC_Config\n
;;;2105     *         CCMR1        IC1F          LL_TIM_IC_Config\n
;;;2106     *         CCMR1        CC2S          LL_TIM_IC_Config\n
;;;2107     *         CCMR1        IC2PSC        LL_TIM_IC_Config\n
;;;2108     *         CCMR1        IC2F          LL_TIM_IC_Config\n
;;;2109     *         CCMR2        CC3S          LL_TIM_IC_Config\n
;;;2110     *         CCMR2        IC3PSC        LL_TIM_IC_Config\n
;;;2111     *         CCMR2        IC3F          LL_TIM_IC_Config\n
;;;2112     *         CCMR2        CC4S          LL_TIM_IC_Config\n
;;;2113     *         CCMR2        IC4PSC        LL_TIM_IC_Config\n
;;;2114     *         CCMR2        IC4F          LL_TIM_IC_Config\n
;;;2115     *         CCER         CC1P          LL_TIM_IC_Config\n
;;;2116     *         CCER         CC1NP         LL_TIM_IC_Config\n
;;;2117     *         CCER         CC2P          LL_TIM_IC_Config\n
;;;2118     *         CCER         CC2NP         LL_TIM_IC_Config\n
;;;2119     *         CCER         CC3P          LL_TIM_IC_Config\n
;;;2120     *         CCER         CC3NP         LL_TIM_IC_Config\n
;;;2121     *         CCER         CC4P          LL_TIM_IC_Config\n
;;;2122     * @param  TIMx Timer instance
;;;2123     * @param  Channel This parameter can be one of the following values:
;;;2124     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2125     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2126     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2127     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2128     * @param  Configuration This parameter must be a combination of all the following values:
;;;2129     *         @arg @ref LL_TIM_ACTIVEINPUT_DIRECTTI or @ref LL_TIM_ACTIVEINPUT_INDIRECTTI or @ref LL_TIM_ACTIVEINPUT_TRC
;;;2130     *         @arg @ref LL_TIM_ICPSC_DIV1 or ... or @ref LL_TIM_ICPSC_DIV8
;;;2131     *         @arg @ref LL_TIM_IC_FILTER_FDIV1 or ... or @ref LL_TIM_IC_FILTER_FDIV32_N8
;;;2132     *         @arg @ref LL_TIM_IC_POLARITY_RISING or @ref LL_TIM_IC_POLARITY_FALLING
;;;2133     * @retval None
;;;2134     */
;;;2135   __STATIC_INLINE void LL_TIM_IC_Config(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Configuration)
;;;2136   {
;;;2137     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2138     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2139     MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F | TIM_CCMR1_IC1PSC | TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]),
;;;2140                ((Configuration >> 16U) & (TIM_CCMR1_IC1F | TIM_CCMR1_IC1PSC | TIM_CCMR1_CC1S))  << SHIFT_TAB_ICxx[iChannel]);
;;;2141     MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
;;;2142                (Configuration & (TIM_CCER_CC1NP | TIM_CCER_CC1P)) << SHIFT_TAB_CCxP[iChannel]);
;;;2143   }
;;;2144   
;;;2145   /**
;;;2146     * @brief  Set the active input.
;;;2147     * @rmtoll CCMR1        CC1S          LL_TIM_IC_SetActiveInput\n
;;;2148     *         CCMR1        CC2S          LL_TIM_IC_SetActiveInput\n
;;;2149     *         CCMR2        CC3S          LL_TIM_IC_SetActiveInput\n
;;;2150     *         CCMR2        CC4S          LL_TIM_IC_SetActiveInput
;;;2151     * @param  TIMx Timer instance
;;;2152     * @param  Channel This parameter can be one of the following values:
;;;2153     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2154     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2155     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2156     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2157     * @param  ICActiveInput This parameter can be one of the following values:
;;;2158     *         @arg @ref LL_TIM_ACTIVEINPUT_DIRECTTI
;;;2159     *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
;;;2160     *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
;;;2161     * @retval None
;;;2162     */
;;;2163   __STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiveInput)
;;;2164   {
;;;2165     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2166     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2167     MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
;;;2168   }
;;;2169   
;;;2170   /**
;;;2171     * @brief  Get the current active input.
;;;2172     * @rmtoll CCMR1        CC1S          LL_TIM_IC_GetActiveInput\n
;;;2173     *         CCMR1        CC2S          LL_TIM_IC_GetActiveInput\n
;;;2174     *         CCMR2        CC3S          LL_TIM_IC_GetActiveInput\n
;;;2175     *         CCMR2        CC4S          LL_TIM_IC_GetActiveInput
;;;2176     * @param  TIMx Timer instance
;;;2177     * @param  Channel This parameter can be one of the following values:
;;;2178     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2179     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2180     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2181     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2182     * @retval Returned value can be one of the following values:
;;;2183     *         @arg @ref LL_TIM_ACTIVEINPUT_DIRECTTI
;;;2184     *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
;;;2185     *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
;;;2186     */
;;;2187   __STATIC_INLINE uint32_t LL_TIM_IC_GetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel)
;;;2188   {
;;;2189     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2190     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2191     return ((READ_BIT(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iChannel]) << 16U);
;;;2192   }
;;;2193   
;;;2194   /**
;;;2195     * @brief  Set the prescaler of input channel.
;;;2196     * @rmtoll CCMR1        IC1PSC        LL_TIM_IC_SetPrescaler\n
;;;2197     *         CCMR1        IC2PSC        LL_TIM_IC_SetPrescaler\n
;;;2198     *         CCMR2        IC3PSC        LL_TIM_IC_SetPrescaler\n
;;;2199     *         CCMR2        IC4PSC        LL_TIM_IC_SetPrescaler
;;;2200     * @param  TIMx Timer instance
;;;2201     * @param  Channel This parameter can be one of the following values:
;;;2202     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2203     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2204     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2205     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2206     * @param  ICPrescaler This parameter can be one of the following values:
;;;2207     *         @arg @ref LL_TIM_ICPSC_DIV1
;;;2208     *         @arg @ref LL_TIM_ICPSC_DIV2
;;;2209     *         @arg @ref LL_TIM_ICPSC_DIV4
;;;2210     *         @arg @ref LL_TIM_ICPSC_DIV8
;;;2211     * @retval None
;;;2212     */
;;;2213   __STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
;;;2214   {
;;;2215     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2216     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2217     MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
;;;2218   }
;;;2219   
;;;2220   /**
;;;2221     * @brief  Get the current prescaler value acting on an  input channel.
;;;2222     * @rmtoll CCMR1        IC1PSC        LL_TIM_IC_GetPrescaler\n
;;;2223     *         CCMR1        IC2PSC        LL_TIM_IC_GetPrescaler\n
;;;2224     *         CCMR2        IC3PSC        LL_TIM_IC_GetPrescaler\n
;;;2225     *         CCMR2        IC4PSC        LL_TIM_IC_GetPrescaler
;;;2226     * @param  TIMx Timer instance
;;;2227     * @param  Channel This parameter can be one of the following values:
;;;2228     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2229     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2230     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2231     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2232     * @retval Returned value can be one of the following values:
;;;2233     *         @arg @ref LL_TIM_ICPSC_DIV1
;;;2234     *         @arg @ref LL_TIM_ICPSC_DIV2
;;;2235     *         @arg @ref LL_TIM_ICPSC_DIV4
;;;2236     *         @arg @ref LL_TIM_ICPSC_DIV8
;;;2237     */
;;;2238   __STATIC_INLINE uint32_t LL_TIM_IC_GetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel)
;;;2239   {
;;;2240     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2241     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2242     return ((READ_BIT(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iChannel]) << 16U);
;;;2243   }
;;;2244   
;;;2245   /**
;;;2246     * @brief  Set the input filter duration.
;;;2247     * @rmtoll CCMR1        IC1F          LL_TIM_IC_SetFilter\n
;;;2248     *         CCMR1        IC2F          LL_TIM_IC_SetFilter\n
;;;2249     *         CCMR2        IC3F          LL_TIM_IC_SetFilter\n
;;;2250     *         CCMR2        IC4F          LL_TIM_IC_SetFilter
;;;2251     * @param  TIMx Timer instance
;;;2252     * @param  Channel This parameter can be one of the following values:
;;;2253     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2254     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2255     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2256     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2257     * @param  ICFilter This parameter can be one of the following values:
;;;2258     *         @arg @ref LL_TIM_IC_FILTER_FDIV1
;;;2259     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N2
;;;2260     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N4
;;;2261     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N8
;;;2262     *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N6
;;;2263     *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N8
;;;2264     *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N6
;;;2265     *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N8
;;;2266     *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N6
;;;2267     *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N8
;;;2268     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N5
;;;2269     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N6
;;;2270     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N8
;;;2271     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N5
;;;2272     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
;;;2273     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
;;;2274     * @retval None
;;;2275     */
;;;2276   __STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
;;;2277   {
;;;2278     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2279     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2280     MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
;;;2281   }
;;;2282   
;;;2283   /**
;;;2284     * @brief  Get the input filter duration.
;;;2285     * @rmtoll CCMR1        IC1F          LL_TIM_IC_GetFilter\n
;;;2286     *         CCMR1        IC2F          LL_TIM_IC_GetFilter\n
;;;2287     *         CCMR2        IC3F          LL_TIM_IC_GetFilter\n
;;;2288     *         CCMR2        IC4F          LL_TIM_IC_GetFilter
;;;2289     * @param  TIMx Timer instance
;;;2290     * @param  Channel This parameter can be one of the following values:
;;;2291     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2292     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2293     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2294     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2295     * @retval Returned value can be one of the following values:
;;;2296     *         @arg @ref LL_TIM_IC_FILTER_FDIV1
;;;2297     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N2
;;;2298     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N4
;;;2299     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N8
;;;2300     *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N6
;;;2301     *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N8
;;;2302     *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N6
;;;2303     *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N8
;;;2304     *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N6
;;;2305     *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N8
;;;2306     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N5
;;;2307     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N6
;;;2308     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N8
;;;2309     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N5
;;;2310     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
;;;2311     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
;;;2312     */
;;;2313   __STATIC_INLINE uint32_t LL_TIM_IC_GetFilter(TIM_TypeDef *TIMx, uint32_t Channel)
;;;2314   {
;;;2315     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2316     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2317     return ((READ_BIT(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iChannel]) << 16U);
;;;2318   }
;;;2319   
;;;2320   /**
;;;2321     * @brief  Set the input channel polarity.
;;;2322     * @rmtoll CCER         CC1P          LL_TIM_IC_SetPolarity\n
;;;2323     *         CCER         CC1NP         LL_TIM_IC_SetPolarity\n
;;;2324     *         CCER         CC2P          LL_TIM_IC_SetPolarity\n
;;;2325     *         CCER         CC2NP         LL_TIM_IC_SetPolarity\n
;;;2326     *         CCER         CC3P          LL_TIM_IC_SetPolarity\n
;;;2327     *         CCER         CC3NP         LL_TIM_IC_SetPolarity\n
;;;2328     *         CCER         CC4P          LL_TIM_IC_SetPolarity\n
;;;2329     * @param  TIMx Timer instance
;;;2330     * @param  Channel This parameter can be one of the following values:
;;;2331     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2332     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2333     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2334     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2335     * @param  ICPolarity This parameter can be one of the following values:
;;;2336     *         @arg @ref LL_TIM_IC_POLARITY_RISING
;;;2337     *         @arg @ref LL_TIM_IC_POLARITY_FALLING
;;;2338     * @retval None
;;;2339     */
;;;2340   __STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
;;;2341   {
;;;2342     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2343     MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
;;;2344                ICPolarity << SHIFT_TAB_CCxP[iChannel]);
;;;2345   }
;;;2346   
;;;2347   /**
;;;2348     * @brief  Get the current input channel polarity.
;;;2349     * @rmtoll CCER         CC1P          LL_TIM_IC_GetPolarity\n
;;;2350     *         CCER         CC1NP         LL_TIM_IC_GetPolarity\n
;;;2351     *         CCER         CC2P          LL_TIM_IC_GetPolarity\n
;;;2352     *         CCER         CC2NP         LL_TIM_IC_GetPolarity\n
;;;2353     *         CCER         CC3P          LL_TIM_IC_GetPolarity\n
;;;2354     *         CCER         CC3NP         LL_TIM_IC_GetPolarity\n
;;;2355     *         CCER         CC4P          LL_TIM_IC_GetPolarity\n
;;;2356     * @param  TIMx Timer instance
;;;2357     * @param  Channel This parameter can be one of the following values:
;;;2358     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2359     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2360     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2361     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2362     * @retval Returned value can be one of the following values:
;;;2363     *         @arg @ref LL_TIM_IC_POLARITY_RISING
;;;2364     *         @arg @ref LL_TIM_IC_POLARITY_FALLING
;;;2365     */
;;;2366   __STATIC_INLINE uint32_t LL_TIM_IC_GetPolarity(TIM_TypeDef *TIMx, uint32_t Channel)
;;;2367   {
;;;2368     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2369     return (READ_BIT(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel])) >>
;;;2370             SHIFT_TAB_CCxP[iChannel]);
;;;2371   }
;;;2372   
;;;2373   /**
;;;2374     * @brief  Connect the TIMx_CH1, CH2 and CH3 pins  to the TI1 input (XOR combination).
;;;2375     * @note Macro @ref IS_TIM_XOR_INSTANCE(TIMx) can be used to check whether or not
;;;2376     *       a timer instance provides an XOR input.
;;;2377     * @rmtoll CR2          TI1S          LL_TIM_IC_EnableXORCombination
;;;2378     * @param  TIMx Timer instance
;;;2379     * @retval None
;;;2380     */
;;;2381   __STATIC_INLINE void LL_TIM_IC_EnableXORCombination(TIM_TypeDef *TIMx)
;;;2382   {
;;;2383     SET_BIT(TIMx->CR2, TIM_CR2_TI1S);
;;;2384   }
;;;2385   
;;;2386   /**
;;;2387     * @brief  Disconnect the TIMx_CH1, CH2 and CH3 pins  from the TI1 input.
;;;2388     * @note Macro @ref IS_TIM_XOR_INSTANCE(TIMx) can be used to check whether or not
;;;2389     *       a timer instance provides an XOR input.
;;;2390     * @rmtoll CR2          TI1S          LL_TIM_IC_DisableXORCombination
;;;2391     * @param  TIMx Timer instance
;;;2392     * @retval None
;;;2393     */
;;;2394   __STATIC_INLINE void LL_TIM_IC_DisableXORCombination(TIM_TypeDef *TIMx)
;;;2395   {
;;;2396     CLEAR_BIT(TIMx->CR2, TIM_CR2_TI1S);
;;;2397   }
;;;2398   
;;;2399   /**
;;;2400     * @brief  Indicates whether the TIMx_CH1, CH2 and CH3 pins are connectected to the TI1 input.
;;;2401     * @note Macro @ref IS_TIM_XOR_INSTANCE(TIMx) can be used to check whether or not
;;;2402     * a timer instance provides an XOR input.
;;;2403     * @rmtoll CR2          TI1S          LL_TIM_IC_IsEnabledXORCombination
;;;2404     * @param  TIMx Timer instance
;;;2405     * @retval State of bit (1 or 0).
;;;2406     */
;;;2407   __STATIC_INLINE uint32_t LL_TIM_IC_IsEnabledXORCombination(TIM_TypeDef *TIMx)
;;;2408   {
;;;2409     return (READ_BIT(TIMx->CR2, TIM_CR2_TI1S) == (TIM_CR2_TI1S));
;;;2410   }
;;;2411   
;;;2412   /**
;;;2413     * @brief  Get captured value for input channel 1.
;;;2414     * @note Macro @ref IS_TIM_CC1_INSTANCE(TIMx) can be used to check whether or not
;;;2415     *       input channel 1 is supported by a timer instance.
;;;2416     * @rmtoll CCR1         CCR1          LL_TIM_IC_GetCaptureCH1
;;;2417     * @param  TIMx Timer instance
;;;2418     * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
;;;2419     */
;;;2420   __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH1(TIM_TypeDef *TIMx)
;;;2421   {
;;;2422     return (uint32_t)(READ_REG(TIMx->CCR1));
;;;2423   }
;;;2424   
;;;2425   /**
;;;2426     * @brief  Get captured value for input channel 2.
;;;2427     * @note Macro @ref IS_TIM_CC2_INSTANCE(TIMx) can be used to check whether or not
;;;2428     *       input channel 2 is supported by a timer instance.
;;;2429     * @rmtoll CCR2         CCR2          LL_TIM_IC_GetCaptureCH2
;;;2430     * @param  TIMx Timer instance
;;;2431     * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
;;;2432     */
;;;2433   __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH2(TIM_TypeDef *TIMx)
;;;2434   {
;;;2435     return (uint32_t)(READ_REG(TIMx->CCR2));
;;;2436   }
;;;2437   
;;;2438   /**
;;;2439     * @brief  Get captured value for input channel 3.
;;;2440     * @note Macro @ref IS_TIM_CC3_INSTANCE(TIMx) can be used to check whether or not
;;;2441     *       input channel 3 is supported by a timer instance.
;;;2442     * @rmtoll CCR3         CCR3          LL_TIM_IC_GetCaptureCH3
;;;2443     * @param  TIMx Timer instance
;;;2444     * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
;;;2445     */
;;;2446   __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH3(TIM_TypeDef *TIMx)
;;;2447   {
;;;2448     return (uint32_t)(READ_REG(TIMx->CCR3));
;;;2449   }
;;;2450   
;;;2451   /**
;;;2452     * @brief  Get captured value for input channel 4.
;;;2453     * @note Macro @ref IS_TIM_CC4_INSTANCE(TIMx) can be used to check whether or not
;;;2454     *       input channel 4 is supported by a timer instance.
;;;2455     * @rmtoll CCR4         CCR4          LL_TIM_IC_GetCaptureCH4
;;;2456     * @param  TIMx Timer instance
;;;2457     * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
;;;2458     */
;;;2459   __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH4(TIM_TypeDef *TIMx)
;;;2460   {
;;;2461     return (uint32_t)(READ_REG(TIMx->CCR4));
;;;2462   }
;;;2463   
;;;2464   /**
;;;2465     * @}
;;;2466     */
;;;2467   
;;;2468   /** @defgroup TIM_LL_EF_Clock_Selection Counter clock selection
;;;2469     * @{
;;;2470     */
;;;2471   /**
;;;2472     * @brief  Enable external clock mode 2.
;;;2473     * @note When external clock mode 2 is enabled the counter is clocked by any active edge on the ETRF signal.
;;;2474     * @note Macro @ref IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
;;;2475     *       whether or not a timer instance supports external clock mode2.
;;;2476     * @rmtoll SMCR         ECE           LL_TIM_EnableExternalClock
;;;2477     * @param  TIMx Timer instance
;;;2478     * @retval None
;;;2479     */
;;;2480   __STATIC_INLINE void LL_TIM_EnableExternalClock(TIM_TypeDef *TIMx)
;;;2481   {
;;;2482     SET_BIT(TIMx->SMCR, TIM_SMCR_ECE);
;;;2483   }
;;;2484   
;;;2485   /**
;;;2486     * @brief  Disable external clock mode 2.
;;;2487     * @note Macro @ref IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
;;;2488     *       whether or not a timer instance supports external clock mode2.
;;;2489     * @rmtoll SMCR         ECE           LL_TIM_DisableExternalClock
;;;2490     * @param  TIMx Timer instance
;;;2491     * @retval None
;;;2492     */
;;;2493   __STATIC_INLINE void LL_TIM_DisableExternalClock(TIM_TypeDef *TIMx)
;;;2494   {
;;;2495     CLEAR_BIT(TIMx->SMCR, TIM_SMCR_ECE);
;;;2496   }
;;;2497   
;;;2498   /**
;;;2499     * @brief  Indicate whether external clock mode 2 is enabled.
;;;2500     * @note Macro @ref IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
;;;2501     *       whether or not a timer instance supports external clock mode2.
;;;2502     * @rmtoll SMCR         ECE           LL_TIM_IsEnabledExternalClock
;;;2503     * @param  TIMx Timer instance
;;;2504     * @retval State of bit (1 or 0).
;;;2505     */
;;;2506   __STATIC_INLINE uint32_t LL_TIM_IsEnabledExternalClock(TIM_TypeDef *TIMx)
;;;2507   {
;;;2508     return (READ_BIT(TIMx->SMCR, TIM_SMCR_ECE) == (TIM_SMCR_ECE));
;;;2509   }
;;;2510   
;;;2511   /**
;;;2512     * @brief  Set the clock source of the counter clock.
;;;2513     * @note when selected clock source is external clock mode 1, the timer input
;;;2514     *       the external clock is applied is selected by calling the @ref LL_TIM_SetTriggerInput()
;;;2515     *       function. This timer input must be configured by calling
;;;2516     *       the @ref LL_TIM_IC_Config() function.
;;;2517     * @note Macro @ref IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(TIMx) can be used to check
;;;2518     *       whether or not a timer instance supports external clock mode1.
;;;2519     * @note Macro @ref IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
;;;2520     *       whether or not a timer instance supports external clock mode2.
;;;2521     * @rmtoll SMCR         SMS           LL_TIM_SetClockSource\n
;;;2522     *         SMCR         ECE           LL_TIM_SetClockSource
;;;2523     * @param  TIMx Timer instance
;;;2524     * @param  ClockSource This parameter can be one of the following values:
;;;2525     *         @arg @ref LL_TIM_CLOCKSOURCE_INTERNAL
;;;2526     *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
;;;2527     *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
;;;2528     * @retval None
;;;2529     */
;;;2530   __STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
;;;2531   {
;;;2532     MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
;;;2533   }
;;;2534   
;;;2535   /**
;;;2536     * @brief  Set the encoder interface mode.
;;;2537     * @note Macro @ref IS_TIM_ENCODER_INTERFACE_INSTANCE(TIMx) can be used to check
;;;2538     *       whether or not a timer instance supports the encoder mode.
;;;2539     * @rmtoll SMCR         SMS           LL_TIM_SetEncoderMode
;;;2540     * @param  TIMx Timer instance
;;;2541     * @param  EncoderMode This parameter can be one of the following values:
;;;2542     *         @arg @ref LL_TIM_ENCODERMODE_X2_TI1
;;;2543     *         @arg @ref LL_TIM_ENCODERMODE_X2_TI2
;;;2544     *         @arg @ref LL_TIM_ENCODERMODE_X4_TI12
;;;2545     * @retval None
;;;2546     */
;;;2547   __STATIC_INLINE void LL_TIM_SetEncoderMode(TIM_TypeDef *TIMx, uint32_t EncoderMode)
;;;2548   {
;;;2549     MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
;;;2550   }
;;;2551   
;;;2552   /**
;;;2553     * @}
;;;2554     */
;;;2555   
;;;2556   /** @defgroup TIM_LL_EF_Timer_Synchronization Timer synchronisation configuration
;;;2557     * @{
;;;2558     */
;;;2559   /**
;;;2560     * @brief  Set the trigger output (TRGO) used for timer synchronization .
;;;2561     * @note Macro @ref IS_TIM_MASTER_INSTANCE(TIMx) can be used to check
;;;2562     *       whether or not a timer instance can operate as a master timer.
;;;2563     * @rmtoll CR2          MMS           LL_TIM_SetTriggerOutput
;;;2564     * @param  TIMx Timer instance
;;;2565     * @param  TimerSynchronization This parameter can be one of the following values:
;;;2566     *         @arg @ref LL_TIM_TRGO_RESET
;;;2567     *         @arg @ref LL_TIM_TRGO_ENABLE
;;;2568     *         @arg @ref LL_TIM_TRGO_UPDATE
;;;2569     *         @arg @ref LL_TIM_TRGO_CC1IF
;;;2570     *         @arg @ref LL_TIM_TRGO_OC1REF
;;;2571     *         @arg @ref LL_TIM_TRGO_OC2REF
;;;2572     *         @arg @ref LL_TIM_TRGO_OC3REF
;;;2573     *         @arg @ref LL_TIM_TRGO_OC4REF
;;;2574     * @retval None
;;;2575     */
;;;2576   __STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
;;;2577   {
;;;2578     MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
;;;2579   }
;;;2580   
;;;2581   /**
;;;2582     * @brief  Set the synchronization mode of a slave timer.
;;;2583     * @note Macro @ref IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
;;;2584     *       a timer instance can operate as a slave timer.
;;;2585     * @rmtoll SMCR         SMS           LL_TIM_SetSlaveMode
;;;2586     * @param  TIMx Timer instance
;;;2587     * @param  SlaveMode This parameter can be one of the following values:
;;;2588     *         @arg @ref LL_TIM_SLAVEMODE_DISABLED
;;;2589     *         @arg @ref LL_TIM_SLAVEMODE_RESET
;;;2590     *         @arg @ref LL_TIM_SLAVEMODE_GATED
;;;2591     *         @arg @ref LL_TIM_SLAVEMODE_TRIGGER
;;;2592     * @retval None
;;;2593     */
;;;2594   __STATIC_INLINE void LL_TIM_SetSlaveMode(TIM_TypeDef *TIMx, uint32_t SlaveMode)
;;;2595   {
;;;2596     MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
;;;2597   }
;;;2598   
;;;2599   /**
;;;2600     * @brief  Set the selects the trigger input to be used to synchronize the counter.
;;;2601     * @note Macro @ref IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
;;;2602     *       a timer instance can operate as a slave timer.
;;;2603     * @rmtoll SMCR         TS            LL_TIM_SetTriggerInput
;;;2604     * @param  TIMx Timer instance
;;;2605     * @param  TriggerInput This parameter can be one of the following values:
;;;2606     *         @arg @ref LL_TIM_TS_ITR0
;;;2607     *         @arg @ref LL_TIM_TS_ITR1
;;;2608     *         @arg @ref LL_TIM_TS_ITR2
;;;2609     *         @arg @ref LL_TIM_TS_ITR3
;;;2610     *         @arg @ref LL_TIM_TS_TI1F_ED
;;;2611     *         @arg @ref LL_TIM_TS_TI1FP1
;;;2612     *         @arg @ref LL_TIM_TS_TI2FP2
;;;2613     *         @arg @ref LL_TIM_TS_ETRF
;;;2614     * @retval None
;;;2615     */
;;;2616   __STATIC_INLINE void LL_TIM_SetTriggerInput(TIM_TypeDef *TIMx, uint32_t TriggerInput)
;;;2617   {
;;;2618     MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
;;;2619   }
;;;2620   
;;;2621   /**
;;;2622     * @brief  Enable the Master/Slave mode.
;;;2623     * @note Macro @ref IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
;;;2624     *       a timer instance can operate as a slave timer.
;;;2625     * @rmtoll SMCR         MSM           LL_TIM_EnableMasterSlaveMode
;;;2626     * @param  TIMx Timer instance
;;;2627     * @retval None
;;;2628     */
;;;2629   __STATIC_INLINE void LL_TIM_EnableMasterSlaveMode(TIM_TypeDef *TIMx)
;;;2630   {
;;;2631     SET_BIT(TIMx->SMCR, TIM_SMCR_MSM);
;;;2632   }
;;;2633   
;;;2634   /**
;;;2635     * @brief  Disable the Master/Slave mode.
;;;2636     * @note Macro @ref IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
;;;2637     *       a timer instance can operate as a slave timer.
;;;2638     * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
;;;2639     * @param  TIMx Timer instance
;;;2640     * @retval None
;;;2641     */
;;;2642   __STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
;;;2643   {
;;;2644     CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
        0x080007ec:    6881        .h      LDR      r1,[r0,#8]
        0x080007ee:    f0210180    !...    BIC      r1,r1,#0x80
        0x080007f2:    6081        .`      STR      r1,[r0,#8]
        0x080007f4:    4770        pG      BX       lr
    i.LL_TIM_EnableARRPreload
    LL_TIM_EnableARRPreload
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h (1198)
        0x080007f6:    6801        .h      LDR      r1,[r0,#0]
        0x080007f8:    f0410180    A...    ORR      r1,r1,#0x80
        0x080007fc:    6001        .`      STR      r1,[r0,#0]
;;;1199   }
        0x080007fe:    4770        pG      BX       lr
    i.LL_TIM_EnableIT_UPDATE
    LL_TIM_EnableIT_UPDATE
;;;1200   
;;;1201   /**
;;;1202     * @brief  Disable auto-reload (ARR) preload.
;;;1203     * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
;;;1204     * @param  TIMx Timer instance
;;;1205     * @retval None
;;;1206     */
;;;1207   __STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
;;;1208   {
;;;1209     CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
;;;1210   }
;;;1211   
;;;1212   /**
;;;1213     * @brief  Indicates whether auto-reload (ARR) preload is enabled.
;;;1214     * @rmtoll CR1          ARPE          LL_TIM_IsEnabledARRPreload
;;;1215     * @param  TIMx Timer instance
;;;1216     * @retval State of bit (1 or 0).
;;;1217     */
;;;1218   __STATIC_INLINE uint32_t LL_TIM_IsEnabledARRPreload(TIM_TypeDef *TIMx)
;;;1219   {
;;;1220     return (READ_BIT(TIMx->CR1, TIM_CR1_ARPE) == (TIM_CR1_ARPE));
;;;1221   }
;;;1222   
;;;1223   /**
;;;1224     * @brief  Set the division ratio between the timer clock  and the sampling clock used by the dead-time generators (when supported) and the digital filters.
;;;1225     * @note Macro @ref IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx) can be used to check
;;;1226     *       whether or not the clock division feature is supported by the timer
;;;1227     *       instance.
;;;1228     * @rmtoll CR1          CKD           LL_TIM_SetClockDivision
;;;1229     * @param  TIMx Timer instance
;;;1230     * @param  ClockDivision This parameter can be one of the following values:
;;;1231     *         @arg @ref LL_TIM_CLOCKDIVISION_DIV1
;;;1232     *         @arg @ref LL_TIM_CLOCKDIVISION_DIV2
;;;1233     *         @arg @ref LL_TIM_CLOCKDIVISION_DIV4
;;;1234     * @retval None
;;;1235     */
;;;1236   __STATIC_INLINE void LL_TIM_SetClockDivision(TIM_TypeDef *TIMx, uint32_t ClockDivision)
;;;1237   {
;;;1238     MODIFY_REG(TIMx->CR1, TIM_CR1_CKD, ClockDivision);
;;;1239   }
;;;1240   
;;;1241   /**
;;;1242     * @brief  Get the actual division ratio between the timer clock  and the sampling clock used by the dead-time generators (when supported) and the digital filters.
;;;1243     * @note Macro @ref IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx) can be used to check
;;;1244     *       whether or not the clock division feature is supported by the timer
;;;1245     *       instance.
;;;1246     * @rmtoll CR1          CKD           LL_TIM_GetClockDivision
;;;1247     * @param  TIMx Timer instance
;;;1248     * @retval Returned value can be one of the following values:
;;;1249     *         @arg @ref LL_TIM_CLOCKDIVISION_DIV1
;;;1250     *         @arg @ref LL_TIM_CLOCKDIVISION_DIV2
;;;1251     *         @arg @ref LL_TIM_CLOCKDIVISION_DIV4
;;;1252     */
;;;1253   __STATIC_INLINE uint32_t LL_TIM_GetClockDivision(TIM_TypeDef *TIMx)
;;;1254   {
;;;1255     return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_CKD));
;;;1256   }
;;;1257   
;;;1258   /**
;;;1259     * @brief  Set the counter value.
;;;1260     * @rmtoll CNT          CNT           LL_TIM_SetCounter
;;;1261     * @param  TIMx Timer instance
;;;1262     * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF)
;;;1263     * @retval None
;;;1264     */
;;;1265   __STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
;;;1266   {
;;;1267     WRITE_REG(TIMx->CNT, Counter);
;;;1268   }
;;;1269   
;;;1270   /**
;;;1271     * @brief  Get the counter value.
;;;1272     * @rmtoll CNT          CNT           LL_TIM_GetCounter
;;;1273     * @param  TIMx Timer instance
;;;1274     * @retval Counter value (between Min_Data=0 and Max_Data=0xFFFF)
;;;1275     */
;;;1276   __STATIC_INLINE uint32_t LL_TIM_GetCounter(TIM_TypeDef *TIMx)
;;;1277   {
;;;1278     return (uint32_t)(READ_REG(TIMx->CNT));
;;;1279   }
;;;1280   
;;;1281   /**
;;;1282     * @brief  Get the current direction of the counter
;;;1283     * @rmtoll CR1          DIR           LL_TIM_GetDirection
;;;1284     * @param  TIMx Timer instance
;;;1285     * @retval Returned value can be one of the following values:
;;;1286     *         @arg @ref LL_TIM_COUNTERDIRECTION_UP
;;;1287     *         @arg @ref LL_TIM_COUNTERDIRECTION_DOWN
;;;1288     */
;;;1289   __STATIC_INLINE uint32_t LL_TIM_GetDirection(TIM_TypeDef *TIMx)
;;;1290   {
;;;1291     return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
;;;1292   }
;;;1293   
;;;1294   /**
;;;1295     * @brief  Set the prescaler value.
;;;1296     * @note The counter clock frequency CK_CNT is equal to fCK_PSC / (PSC[15:0] + 1).
;;;1297     * @note The prescaler can be changed on the fly as this control register is buffered. The new
;;;1298     *       prescaler ratio is taken into account at the next update event.
;;;1299     * @note Helper macro @ref __LL_TIM_CALC_PSC can be used to calculate the Prescaler parameter
;;;1300     * @rmtoll PSC          PSC           LL_TIM_SetPrescaler
;;;1301     * @param  TIMx Timer instance
;;;1302     * @param  Prescaler between Min_Data=0 and Max_Data=65535
;;;1303     * @retval None
;;;1304     */
;;;1305   __STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
;;;1306   {
;;;1307     WRITE_REG(TIMx->PSC, Prescaler);
;;;1308   }
;;;1309   
;;;1310   /**
;;;1311     * @brief  Get the prescaler value.
;;;1312     * @rmtoll PSC          PSC           LL_TIM_GetPrescaler
;;;1313     * @param  TIMx Timer instance
;;;1314     * @retval  Prescaler value between Min_Data=0 and Max_Data=65535
;;;1315     */
;;;1316   __STATIC_INLINE uint32_t LL_TIM_GetPrescaler(TIM_TypeDef *TIMx)
;;;1317   {
;;;1318     return (uint32_t)(READ_REG(TIMx->PSC));
;;;1319   }
;;;1320   
;;;1321   /**
;;;1322     * @brief  Set the auto-reload value.
;;;1323     * @note The counter is blocked while the auto-reload value is null.
;;;1324     * @note Helper macro @ref __LL_TIM_CALC_ARR can be used to calculate the AutoReload parameter
;;;1325     * @rmtoll ARR          ARR           LL_TIM_SetAutoReload
;;;1326     * @param  TIMx Timer instance
;;;1327     * @param  AutoReload between Min_Data=0 and Max_Data=65535
;;;1328     * @retval None
;;;1329     */
;;;1330   __STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
;;;1331   {
;;;1332     WRITE_REG(TIMx->ARR, AutoReload);
;;;1333   }
;;;1334   
;;;1335   /**
;;;1336     * @brief  Get the auto-reload value.
;;;1337     * @rmtoll ARR          ARR           LL_TIM_GetAutoReload
;;;1338     * @param  TIMx Timer instance
;;;1339     * @retval Auto-reload value
;;;1340     */
;;;1341   __STATIC_INLINE uint32_t LL_TIM_GetAutoReload(TIM_TypeDef *TIMx)
;;;1342   {
;;;1343     return (uint32_t)(READ_REG(TIMx->ARR));
;;;1344   }
;;;1345   
;;;1346   /**
;;;1347     * @brief  Set the repetition counter value.
;;;1348     * @note Macro @ref IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx) can be used to check
;;;1349     *       whether or not a timer instance supports a repetition counter.
;;;1350     * @rmtoll RCR          REP           LL_TIM_SetRepetitionCounter
;;;1351     * @param  TIMx Timer instance
;;;1352     * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
;;;1353     * @retval None
;;;1354     */
;;;1355   __STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
;;;1356   {
;;;1357     WRITE_REG(TIMx->RCR, RepetitionCounter);
;;;1358   }
;;;1359   
;;;1360   /**
;;;1361     * @brief  Get the repetition counter value.
;;;1362     * @note Macro @ref IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx) can be used to check
;;;1363     *       whether or not a timer instance supports a repetition counter.
;;;1364     * @rmtoll RCR          REP           LL_TIM_GetRepetitionCounter
;;;1365     * @param  TIMx Timer instance
;;;1366     * @retval Repetition counter value
;;;1367     */
;;;1368   __STATIC_INLINE uint32_t LL_TIM_GetRepetitionCounter(TIM_TypeDef *TIMx)
;;;1369   {
;;;1370     return (uint32_t)(READ_REG(TIMx->RCR));
;;;1371   }
;;;1372   
;;;1373   /**
;;;1374     * @}
;;;1375     */
;;;1376   
;;;1377   /** @defgroup TIM_LL_EF_Capture_Compare Capture Compare configuration
;;;1378     * @{
;;;1379     */
;;;1380   /**
;;;1381     * @brief  Enable  the capture/compare control bits (CCxE, CCxNE and OCxM) preload.
;;;1382     * @note CCxE, CCxNE and OCxM bits are preloaded, after having been written,
;;;1383     *       they are updated only when a commutation event (COM) occurs.
;;;1384     * @note Only on channels that have a complementary output.
;;;1385     * @note Macro @ref IS_TIM_COMMUTATION_EVENT_INSTANCE(TIMx) can be used to check
;;;1386     *       whether or not a timer instance is able to generate a commutation event.
;;;1387     * @rmtoll CR2          CCPC          LL_TIM_CC_EnablePreload
;;;1388     * @param  TIMx Timer instance
;;;1389     * @retval None
;;;1390     */
;;;1391   __STATIC_INLINE void LL_TIM_CC_EnablePreload(TIM_TypeDef *TIMx)
;;;1392   {
;;;1393     SET_BIT(TIMx->CR2, TIM_CR2_CCPC);
;;;1394   }
;;;1395   
;;;1396   /**
;;;1397     * @brief  Disable  the capture/compare control bits (CCxE, CCxNE and OCxM) preload.
;;;1398     * @note Macro @ref IS_TIM_COMMUTATION_EVENT_INSTANCE(TIMx) can be used to check
;;;1399     *       whether or not a timer instance is able to generate a commutation event.
;;;1400     * @rmtoll CR2          CCPC          LL_TIM_CC_DisablePreload
;;;1401     * @param  TIMx Timer instance
;;;1402     * @retval None
;;;1403     */
;;;1404   __STATIC_INLINE void LL_TIM_CC_DisablePreload(TIM_TypeDef *TIMx)
;;;1405   {
;;;1406     CLEAR_BIT(TIMx->CR2, TIM_CR2_CCPC);
;;;1407   }
;;;1408   
;;;1409   /**
;;;1410     * @brief  Set the updated source of the capture/compare control bits (CCxE, CCxNE and OCxM).
;;;1411     * @note Macro @ref IS_TIM_COMMUTATION_EVENT_INSTANCE(TIMx) can be used to check
;;;1412     *       whether or not a timer instance is able to generate a commutation event.
;;;1413     * @rmtoll CR2          CCUS          LL_TIM_CC_SetUpdate
;;;1414     * @param  TIMx Timer instance
;;;1415     * @param  CCUpdateSource This parameter can be one of the following values:
;;;1416     *         @arg @ref LL_TIM_CCUPDATESOURCE_COMG_ONLY
;;;1417     *         @arg @ref LL_TIM_CCUPDATESOURCE_COMG_AND_TRGI
;;;1418     * @retval None
;;;1419     */
;;;1420   __STATIC_INLINE void LL_TIM_CC_SetUpdate(TIM_TypeDef *TIMx, uint32_t CCUpdateSource)
;;;1421   {
;;;1422     MODIFY_REG(TIMx->CR2, TIM_CR2_CCUS, CCUpdateSource);
;;;1423   }
;;;1424   
;;;1425   /**
;;;1426     * @brief  Set the trigger of the capture/compare DMA request.
;;;1427     * @rmtoll CR2          CCDS          LL_TIM_CC_SetDMAReqTrigger
;;;1428     * @param  TIMx Timer instance
;;;1429     * @param  DMAReqTrigger This parameter can be one of the following values:
;;;1430     *         @arg @ref LL_TIM_CCDMAREQUEST_CC
;;;1431     *         @arg @ref LL_TIM_CCDMAREQUEST_UPDATE
;;;1432     * @retval None
;;;1433     */
;;;1434   __STATIC_INLINE void LL_TIM_CC_SetDMAReqTrigger(TIM_TypeDef *TIMx, uint32_t DMAReqTrigger)
;;;1435   {
;;;1436     MODIFY_REG(TIMx->CR2, TIM_CR2_CCDS, DMAReqTrigger);
;;;1437   }
;;;1438   
;;;1439   /**
;;;1440     * @brief  Get actual trigger of the capture/compare DMA request.
;;;1441     * @rmtoll CR2          CCDS          LL_TIM_CC_GetDMAReqTrigger
;;;1442     * @param  TIMx Timer instance
;;;1443     * @retval Returned value can be one of the following values:
;;;1444     *         @arg @ref LL_TIM_CCDMAREQUEST_CC
;;;1445     *         @arg @ref LL_TIM_CCDMAREQUEST_UPDATE
;;;1446     */
;;;1447   __STATIC_INLINE uint32_t LL_TIM_CC_GetDMAReqTrigger(TIM_TypeDef *TIMx)
;;;1448   {
;;;1449     return (uint32_t)(READ_BIT(TIMx->CR2, TIM_CR2_CCDS));
;;;1450   }
;;;1451   
;;;1452   /**
;;;1453     * @brief  Set the lock level to freeze the
;;;1454     *         configuration of several capture/compare parameters.
;;;1455     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;1456     *       the lock mechanism is supported by a timer instance.
;;;1457     * @rmtoll BDTR         LOCK          LL_TIM_CC_SetLockLevel
;;;1458     * @param  TIMx Timer instance
;;;1459     * @param  LockLevel This parameter can be one of the following values:
;;;1460     *         @arg @ref LL_TIM_LOCKLEVEL_OFF
;;;1461     *         @arg @ref LL_TIM_LOCKLEVEL_1
;;;1462     *         @arg @ref LL_TIM_LOCKLEVEL_2
;;;1463     *         @arg @ref LL_TIM_LOCKLEVEL_3
;;;1464     * @retval None
;;;1465     */
;;;1466   __STATIC_INLINE void LL_TIM_CC_SetLockLevel(TIM_TypeDef *TIMx, uint32_t LockLevel)
;;;1467   {
;;;1468     MODIFY_REG(TIMx->BDTR, TIM_BDTR_LOCK, LockLevel);
;;;1469   }
;;;1470   
;;;1471   /**
;;;1472     * @brief  Enable capture/compare channels.
;;;1473     * @rmtoll CCER         CC1E          LL_TIM_CC_EnableChannel\n
;;;1474     *         CCER         CC1NE         LL_TIM_CC_EnableChannel\n
;;;1475     *         CCER         CC2E          LL_TIM_CC_EnableChannel\n
;;;1476     *         CCER         CC2NE         LL_TIM_CC_EnableChannel\n
;;;1477     *         CCER         CC3E          LL_TIM_CC_EnableChannel\n
;;;1478     *         CCER         CC3NE         LL_TIM_CC_EnableChannel\n
;;;1479     *         CCER         CC4E          LL_TIM_CC_EnableChannel
;;;1480     * @param  TIMx Timer instance
;;;1481     * @param  Channels This parameter can be a combination of the following values:
;;;1482     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1483     *         @arg @ref LL_TIM_CHANNEL_CH1N
;;;1484     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1485     *         @arg @ref LL_TIM_CHANNEL_CH2N
;;;1486     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1487     *         @arg @ref LL_TIM_CHANNEL_CH3N
;;;1488     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1489     * @retval None
;;;1490     */
;;;1491   __STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
;;;1492   {
;;;1493     SET_BIT(TIMx->CCER, Channels);
;;;1494   }
;;;1495   
;;;1496   /**
;;;1497     * @brief  Disable capture/compare channels.
;;;1498     * @rmtoll CCER         CC1E          LL_TIM_CC_DisableChannel\n
;;;1499     *         CCER         CC1NE         LL_TIM_CC_DisableChannel\n
;;;1500     *         CCER         CC2E          LL_TIM_CC_DisableChannel\n
;;;1501     *         CCER         CC2NE         LL_TIM_CC_DisableChannel\n
;;;1502     *         CCER         CC3E          LL_TIM_CC_DisableChannel\n
;;;1503     *         CCER         CC3NE         LL_TIM_CC_DisableChannel\n
;;;1504     *         CCER         CC4E          LL_TIM_CC_DisableChannel
;;;1505     * @param  TIMx Timer instance
;;;1506     * @param  Channels This parameter can be a combination of the following values:
;;;1507     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1508     *         @arg @ref LL_TIM_CHANNEL_CH1N
;;;1509     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1510     *         @arg @ref LL_TIM_CHANNEL_CH2N
;;;1511     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1512     *         @arg @ref LL_TIM_CHANNEL_CH3N
;;;1513     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1514     * @retval None
;;;1515     */
;;;1516   __STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
;;;1517   {
;;;1518     CLEAR_BIT(TIMx->CCER, Channels);
;;;1519   }
;;;1520   
;;;1521   /**
;;;1522     * @brief  Indicate whether channel(s) is(are) enabled.
;;;1523     * @rmtoll CCER         CC1E          LL_TIM_CC_IsEnabledChannel\n
;;;1524     *         CCER         CC1NE         LL_TIM_CC_IsEnabledChannel\n
;;;1525     *         CCER         CC2E          LL_TIM_CC_IsEnabledChannel\n
;;;1526     *         CCER         CC2NE         LL_TIM_CC_IsEnabledChannel\n
;;;1527     *         CCER         CC3E          LL_TIM_CC_IsEnabledChannel\n
;;;1528     *         CCER         CC3NE         LL_TIM_CC_IsEnabledChannel\n
;;;1529     *         CCER         CC4E          LL_TIM_CC_IsEnabledChannel
;;;1530     * @param  TIMx Timer instance
;;;1531     * @param  Channels This parameter can be a combination of the following values:
;;;1532     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1533     *         @arg @ref LL_TIM_CHANNEL_CH1N
;;;1534     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1535     *         @arg @ref LL_TIM_CHANNEL_CH2N
;;;1536     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1537     *         @arg @ref LL_TIM_CHANNEL_CH3N
;;;1538     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1539     * @retval State of bit (1 or 0).
;;;1540     */
;;;1541   __STATIC_INLINE uint32_t LL_TIM_CC_IsEnabledChannel(TIM_TypeDef *TIMx, uint32_t Channels)
;;;1542   {
;;;1543     return (READ_BIT(TIMx->CCER, Channels) == (Channels));
;;;1544   }
;;;1545   
;;;1546   /**
;;;1547     * @}
;;;1548     */
;;;1549   
;;;1550   /** @defgroup TIM_LL_EF_Output_Channel Output channel configuration
;;;1551     * @{
;;;1552     */
;;;1553   /**
;;;1554     * @brief  Configure an output channel.
;;;1555     * @rmtoll CCMR1        CC1S          LL_TIM_OC_ConfigOutput\n
;;;1556     *         CCMR1        CC2S          LL_TIM_OC_ConfigOutput\n
;;;1557     *         CCMR2        CC3S          LL_TIM_OC_ConfigOutput\n
;;;1558     *         CCMR2        CC4S          LL_TIM_OC_ConfigOutput\n
;;;1559     *         CCER         CC1P          LL_TIM_OC_ConfigOutput\n
;;;1560     *         CCER         CC2P          LL_TIM_OC_ConfigOutput\n
;;;1561     *         CCER         CC3P          LL_TIM_OC_ConfigOutput\n
;;;1562     *         CCER         CC4P          LL_TIM_OC_ConfigOutput\n
;;;1563     *         CR2          OIS1          LL_TIM_OC_ConfigOutput\n
;;;1564     *         CR2          OIS2          LL_TIM_OC_ConfigOutput\n
;;;1565     *         CR2          OIS3          LL_TIM_OC_ConfigOutput\n
;;;1566     *         CR2          OIS4          LL_TIM_OC_ConfigOutput
;;;1567     * @param  TIMx Timer instance
;;;1568     * @param  Channel This parameter can be one of the following values:
;;;1569     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1570     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1571     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1572     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1573     * @param  Configuration This parameter must be a combination of all the following values:
;;;1574     *         @arg @ref LL_TIM_OCPOLARITY_HIGH or @ref LL_TIM_OCPOLARITY_LOW
;;;1575     *         @arg @ref LL_TIM_OCIDLESTATE_LOW or @ref LL_TIM_OCIDLESTATE_HIGH
;;;1576     * @retval None
;;;1577     */
;;;1578   __STATIC_INLINE void LL_TIM_OC_ConfigOutput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Configuration)
;;;1579   {
;;;1580     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1581     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1582     CLEAR_BIT(*pReg, (TIM_CCMR1_CC1S << SHIFT_TAB_OCxx[iChannel]));
;;;1583     MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),
;;;1584                (Configuration & TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]);
;;;1585     MODIFY_REG(TIMx->CR2, (TIM_CR2_OIS1 << SHIFT_TAB_OISx[iChannel]),
;;;1586                (Configuration & TIM_CR2_OIS1) << SHIFT_TAB_OISx[iChannel]);
;;;1587   }
;;;1588   
;;;1589   /**
;;;1590     * @brief  Define the behavior of the output reference signal OCxREF from which
;;;1591     *         OCx and OCxN (when relevant) are derived.
;;;1592     * @rmtoll CCMR1        OC1M          LL_TIM_OC_SetMode\n
;;;1593     *         CCMR1        OC2M          LL_TIM_OC_SetMode\n
;;;1594     *         CCMR2        OC3M          LL_TIM_OC_SetMode\n
;;;1595     *         CCMR2        OC4M          LL_TIM_OC_SetMode
;;;1596     * @param  TIMx Timer instance
;;;1597     * @param  Channel This parameter can be one of the following values:
;;;1598     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1599     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1600     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1601     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1602     * @param  Mode This parameter can be one of the following values:
;;;1603     *         @arg @ref LL_TIM_OCMODE_FROZEN
;;;1604     *         @arg @ref LL_TIM_OCMODE_ACTIVE
;;;1605     *         @arg @ref LL_TIM_OCMODE_INACTIVE
;;;1606     *         @arg @ref LL_TIM_OCMODE_TOGGLE
;;;1607     *         @arg @ref LL_TIM_OCMODE_FORCED_INACTIVE
;;;1608     *         @arg @ref LL_TIM_OCMODE_FORCED_ACTIVE
;;;1609     *         @arg @ref LL_TIM_OCMODE_PWM1
;;;1610     *         @arg @ref LL_TIM_OCMODE_PWM2
;;;1611     * @retval None
;;;1612     */
;;;1613   __STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
;;;1614   {
;;;1615     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1616     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1617     MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
;;;1618   }
;;;1619   
;;;1620   /**
;;;1621     * @brief  Get the output compare mode of an output channel.
;;;1622     * @rmtoll CCMR1        OC1M          LL_TIM_OC_GetMode\n
;;;1623     *         CCMR1        OC2M          LL_TIM_OC_GetMode\n
;;;1624     *         CCMR2        OC3M          LL_TIM_OC_GetMode\n
;;;1625     *         CCMR2        OC4M          LL_TIM_OC_GetMode
;;;1626     * @param  TIMx Timer instance
;;;1627     * @param  Channel This parameter can be one of the following values:
;;;1628     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1629     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1630     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1631     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1632     * @retval Returned value can be one of the following values:
;;;1633     *         @arg @ref LL_TIM_OCMODE_FROZEN
;;;1634     *         @arg @ref LL_TIM_OCMODE_ACTIVE
;;;1635     *         @arg @ref LL_TIM_OCMODE_INACTIVE
;;;1636     *         @arg @ref LL_TIM_OCMODE_TOGGLE
;;;1637     *         @arg @ref LL_TIM_OCMODE_FORCED_INACTIVE
;;;1638     *         @arg @ref LL_TIM_OCMODE_FORCED_ACTIVE
;;;1639     *         @arg @ref LL_TIM_OCMODE_PWM1
;;;1640     *         @arg @ref LL_TIM_OCMODE_PWM2
;;;1641     */
;;;1642   __STATIC_INLINE uint32_t LL_TIM_OC_GetMode(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1643   {
;;;1644     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1645     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1646     return (READ_BIT(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel])) >> SHIFT_TAB_OCxx[iChannel]);
;;;1647   }
;;;1648   
;;;1649   /**
;;;1650     * @brief  Set the polarity of an output channel.
;;;1651     * @rmtoll CCER         CC1P          LL_TIM_OC_SetPolarity\n
;;;1652     *         CCER         CC1NP         LL_TIM_OC_SetPolarity\n
;;;1653     *         CCER         CC2P          LL_TIM_OC_SetPolarity\n
;;;1654     *         CCER         CC2NP         LL_TIM_OC_SetPolarity\n
;;;1655     *         CCER         CC3P          LL_TIM_OC_SetPolarity\n
;;;1656     *         CCER         CC3NP         LL_TIM_OC_SetPolarity\n
;;;1657     *         CCER         CC4P          LL_TIM_OC_SetPolarity
;;;1658     * @param  TIMx Timer instance
;;;1659     * @param  Channel This parameter can be one of the following values:
;;;1660     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1661     *         @arg @ref LL_TIM_CHANNEL_CH1N
;;;1662     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1663     *         @arg @ref LL_TIM_CHANNEL_CH2N
;;;1664     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1665     *         @arg @ref LL_TIM_CHANNEL_CH3N
;;;1666     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1667     * @param  Polarity This parameter can be one of the following values:
;;;1668     *         @arg @ref LL_TIM_OCPOLARITY_HIGH
;;;1669     *         @arg @ref LL_TIM_OCPOLARITY_LOW
;;;1670     * @retval None
;;;1671     */
;;;1672   __STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
;;;1673   {
;;;1674     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1675     MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
;;;1676   }
;;;1677   
;;;1678   /**
;;;1679     * @brief  Get the polarity of an output channel.
;;;1680     * @rmtoll CCER         CC1P          LL_TIM_OC_GetPolarity\n
;;;1681     *         CCER         CC1NP         LL_TIM_OC_GetPolarity\n
;;;1682     *         CCER         CC2P          LL_TIM_OC_GetPolarity\n
;;;1683     *         CCER         CC2NP         LL_TIM_OC_GetPolarity\n
;;;1684     *         CCER         CC3P          LL_TIM_OC_GetPolarity\n
;;;1685     *         CCER         CC3NP         LL_TIM_OC_GetPolarity\n
;;;1686     *         CCER         CC4P          LL_TIM_OC_GetPolarity
;;;1687     * @param  TIMx Timer instance
;;;1688     * @param  Channel This parameter can be one of the following values:
;;;1689     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1690     *         @arg @ref LL_TIM_CHANNEL_CH1N
;;;1691     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1692     *         @arg @ref LL_TIM_CHANNEL_CH2N
;;;1693     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1694     *         @arg @ref LL_TIM_CHANNEL_CH3N
;;;1695     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1696     * @retval Returned value can be one of the following values:
;;;1697     *         @arg @ref LL_TIM_OCPOLARITY_HIGH
;;;1698     *         @arg @ref LL_TIM_OCPOLARITY_LOW
;;;1699     */
;;;1700   __STATIC_INLINE uint32_t LL_TIM_OC_GetPolarity(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1701   {
;;;1702     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1703     return (READ_BIT(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel])) >> SHIFT_TAB_CCxP[iChannel]);
;;;1704   }
;;;1705   
;;;1706   /**
;;;1707     * @brief  Set the IDLE state of an output channel
;;;1708     * @note This function is significant only for the timer instances
;;;1709     *       supporting the break feature. Macro @ref IS_TIM_BREAK_INSTANCE(TIMx)
;;;1710     *       can be used to check whether or not a timer instance provides
;;;1711     *       a break input.
;;;1712     * @rmtoll CR2         OIS1          LL_TIM_OC_SetIdleState\n
;;;1713     *         CR2         OIS1N         LL_TIM_OC_SetIdleState\n
;;;1714     *         CR2         OIS2          LL_TIM_OC_SetIdleState\n
;;;1715     *         CR2         OIS2N         LL_TIM_OC_SetIdleState\n
;;;1716     *         CR2         OIS3          LL_TIM_OC_SetIdleState\n
;;;1717     *         CR2         OIS3N         LL_TIM_OC_SetIdleState\n
;;;1718     *         CR2         OIS4          LL_TIM_OC_SetIdleState
;;;1719     * @param  TIMx Timer instance
;;;1720     * @param  Channel This parameter can be one of the following values:
;;;1721     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1722     *         @arg @ref LL_TIM_CHANNEL_CH1N
;;;1723     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1724     *         @arg @ref LL_TIM_CHANNEL_CH2N
;;;1725     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1726     *         @arg @ref LL_TIM_CHANNEL_CH3N
;;;1727     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1728     * @param  IdleState This parameter can be one of the following values:
;;;1729     *         @arg @ref LL_TIM_OCIDLESTATE_LOW
;;;1730     *         @arg @ref LL_TIM_OCIDLESTATE_HIGH
;;;1731     * @retval None
;;;1732     */
;;;1733   __STATIC_INLINE void LL_TIM_OC_SetIdleState(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t IdleState)
;;;1734   {
;;;1735     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1736     MODIFY_REG(TIMx->CR2, (TIM_CR2_OIS1 << SHIFT_TAB_OISx[iChannel]),  IdleState << SHIFT_TAB_OISx[iChannel]);
;;;1737   }
;;;1738   
;;;1739   /**
;;;1740     * @brief  Get the IDLE state of an output channel
;;;1741     * @rmtoll CR2         OIS1          LL_TIM_OC_GetIdleState\n
;;;1742     *         CR2         OIS1N         LL_TIM_OC_GetIdleState\n
;;;1743     *         CR2         OIS2          LL_TIM_OC_GetIdleState\n
;;;1744     *         CR2         OIS2N         LL_TIM_OC_GetIdleState\n
;;;1745     *         CR2         OIS3          LL_TIM_OC_GetIdleState\n
;;;1746     *         CR2         OIS3N         LL_TIM_OC_GetIdleState\n
;;;1747     *         CR2         OIS4          LL_TIM_OC_GetIdleState
;;;1748     * @param  TIMx Timer instance
;;;1749     * @param  Channel This parameter can be one of the following values:
;;;1750     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1751     *         @arg @ref LL_TIM_CHANNEL_CH1N
;;;1752     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1753     *         @arg @ref LL_TIM_CHANNEL_CH2N
;;;1754     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1755     *         @arg @ref LL_TIM_CHANNEL_CH3N
;;;1756     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1757     * @retval Returned value can be one of the following values:
;;;1758     *         @arg @ref LL_TIM_OCIDLESTATE_LOW
;;;1759     *         @arg @ref LL_TIM_OCIDLESTATE_HIGH
;;;1760     */
;;;1761   __STATIC_INLINE uint32_t LL_TIM_OC_GetIdleState(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1762   {
;;;1763     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1764     return (READ_BIT(TIMx->CR2, (TIM_CR2_OIS1 << SHIFT_TAB_OISx[iChannel])) >> SHIFT_TAB_OISx[iChannel]);
;;;1765   }
;;;1766   
;;;1767   /**
;;;1768     * @brief  Enable fast mode for the output channel.
;;;1769     * @note Acts only if the channel is configured in PWM1 or PWM2 mode.
;;;1770     * @rmtoll CCMR1        OC1FE          LL_TIM_OC_EnableFast\n
;;;1771     *         CCMR1        OC2FE          LL_TIM_OC_EnableFast\n
;;;1772     *         CCMR2        OC3FE          LL_TIM_OC_EnableFast\n
;;;1773     *         CCMR2        OC4FE          LL_TIM_OC_EnableFast
;;;1774     * @param  TIMx Timer instance
;;;1775     * @param  Channel This parameter can be one of the following values:
;;;1776     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1777     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1778     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1779     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1780     * @retval None
;;;1781     */
;;;1782   __STATIC_INLINE void LL_TIM_OC_EnableFast(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1783   {
;;;1784     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1785     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1786     SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
;;;1787   
;;;1788   }
;;;1789   
;;;1790   /**
;;;1791     * @brief  Disable fast mode for the output channel.
;;;1792     * @rmtoll CCMR1        OC1FE          LL_TIM_OC_DisableFast\n
;;;1793     *         CCMR1        OC2FE          LL_TIM_OC_DisableFast\n
;;;1794     *         CCMR2        OC3FE          LL_TIM_OC_DisableFast\n
;;;1795     *         CCMR2        OC4FE          LL_TIM_OC_DisableFast
;;;1796     * @param  TIMx Timer instance
;;;1797     * @param  Channel This parameter can be one of the following values:
;;;1798     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1799     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1800     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1801     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1802     * @retval None
;;;1803     */
;;;1804   __STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1805   {
;;;1806     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1807     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1808     CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
;;;1809   
;;;1810   }
;;;1811   
;;;1812   /**
;;;1813     * @brief  Indicates whether fast mode is enabled for the output channel.
;;;1814     * @rmtoll CCMR1        OC1FE          LL_TIM_OC_IsEnabledFast\n
;;;1815     *         CCMR1        OC2FE          LL_TIM_OC_IsEnabledFast\n
;;;1816     *         CCMR2        OC3FE          LL_TIM_OC_IsEnabledFast\n
;;;1817     *         CCMR2        OC4FE          LL_TIM_OC_IsEnabledFast\n
;;;1818     * @param  TIMx Timer instance
;;;1819     * @param  Channel This parameter can be one of the following values:
;;;1820     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1821     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1822     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1823     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1824     * @retval State of bit (1 or 0).
;;;1825     */
;;;1826   __STATIC_INLINE uint32_t LL_TIM_OC_IsEnabledFast(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1827   {
;;;1828     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1829     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1830     register uint32_t bitfield = TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel];
;;;1831     return (READ_BIT(*pReg, bitfield) == bitfield);
;;;1832   }
;;;1833   
;;;1834   /**
;;;1835     * @brief  Enable compare register (TIMx_CCRx) preload for the output channel.
;;;1836     * @rmtoll CCMR1        OC1PE          LL_TIM_OC_EnablePreload\n
;;;1837     *         CCMR1        OC2PE          LL_TIM_OC_EnablePreload\n
;;;1838     *         CCMR2        OC3PE          LL_TIM_OC_EnablePreload\n
;;;1839     *         CCMR2        OC4PE          LL_TIM_OC_EnablePreload
;;;1840     * @param  TIMx Timer instance
;;;1841     * @param  Channel This parameter can be one of the following values:
;;;1842     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1843     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1844     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1845     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1846     * @retval None
;;;1847     */
;;;1848   __STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1849   {
;;;1850     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1851     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1852     SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
;;;1853   }
;;;1854   
;;;1855   /**
;;;1856     * @brief  Disable compare register (TIMx_CCRx) preload for the output channel.
;;;1857     * @rmtoll CCMR1        OC1PE          LL_TIM_OC_DisablePreload\n
;;;1858     *         CCMR1        OC2PE          LL_TIM_OC_DisablePreload\n
;;;1859     *         CCMR2        OC3PE          LL_TIM_OC_DisablePreload\n
;;;1860     *         CCMR2        OC4PE          LL_TIM_OC_DisablePreload
;;;1861     * @param  TIMx Timer instance
;;;1862     * @param  Channel This parameter can be one of the following values:
;;;1863     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1864     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1865     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1866     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1867     * @retval None
;;;1868     */
;;;1869   __STATIC_INLINE void LL_TIM_OC_DisablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1870   {
;;;1871     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1872     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1873     CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
;;;1874   }
;;;1875   
;;;1876   /**
;;;1877     * @brief  Indicates whether compare register (TIMx_CCRx) preload is enabled for the output channel.
;;;1878     * @rmtoll CCMR1        OC1PE          LL_TIM_OC_IsEnabledPreload\n
;;;1879     *         CCMR1        OC2PE          LL_TIM_OC_IsEnabledPreload\n
;;;1880     *         CCMR2        OC3PE          LL_TIM_OC_IsEnabledPreload\n
;;;1881     *         CCMR2        OC4PE          LL_TIM_OC_IsEnabledPreload\n
;;;1882     * @param  TIMx Timer instance
;;;1883     * @param  Channel This parameter can be one of the following values:
;;;1884     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1885     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1886     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1887     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1888     * @retval State of bit (1 or 0).
;;;1889     */
;;;1890   __STATIC_INLINE uint32_t LL_TIM_OC_IsEnabledPreload(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1891   {
;;;1892     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1893     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1894     register uint32_t bitfield = TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel];
;;;1895     return (READ_BIT(*pReg, bitfield) == bitfield);
;;;1896   }
;;;1897   
;;;1898   /**
;;;1899     * @brief  Enable clearing the output channel on an external event.
;;;1900     * @note This function can only be used in Output compare and PWM modes. It does not work in Forced mode.
;;;1901     * @note Macro @ref IS_TIM_OCXREF_CLEAR_INSTANCE(TIMx) can be used to check whether
;;;1902     *       or not a timer instance can clear the OCxREF signal on an external event.
;;;1903     * @rmtoll CCMR1        OC1CE          LL_TIM_OC_EnableClear\n
;;;1904     *         CCMR1        OC2CE          LL_TIM_OC_EnableClear\n
;;;1905     *         CCMR2        OC3CE          LL_TIM_OC_EnableClear\n
;;;1906     *         CCMR2        OC4CE          LL_TIM_OC_EnableClear
;;;1907     * @param  TIMx Timer instance
;;;1908     * @param  Channel This parameter can be one of the following values:
;;;1909     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1910     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1911     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1912     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1913     * @retval None
;;;1914     */
;;;1915   __STATIC_INLINE void LL_TIM_OC_EnableClear(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1916   {
;;;1917     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1918     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1919     SET_BIT(*pReg, (TIM_CCMR1_OC1CE << SHIFT_TAB_OCxx[iChannel]));
;;;1920   }
;;;1921   
;;;1922   /**
;;;1923     * @brief  Disable clearing the output channel on an external event.
;;;1924     * @note Macro @ref IS_TIM_OCXREF_CLEAR_INSTANCE(TIMx) can be used to check whether
;;;1925     *       or not a timer instance can clear the OCxREF signal on an external event.
;;;1926     * @rmtoll CCMR1        OC1CE          LL_TIM_OC_DisableClear\n
;;;1927     *         CCMR1        OC2CE          LL_TIM_OC_DisableClear\n
;;;1928     *         CCMR2        OC3CE          LL_TIM_OC_DisableClear\n
;;;1929     *         CCMR2        OC4CE          LL_TIM_OC_DisableClear
;;;1930     * @param  TIMx Timer instance
;;;1931     * @param  Channel This parameter can be one of the following values:
;;;1932     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1933     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1934     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1935     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1936     * @retval None
;;;1937     */
;;;1938   __STATIC_INLINE void LL_TIM_OC_DisableClear(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1939   {
;;;1940     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1941     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1942     CLEAR_BIT(*pReg, (TIM_CCMR1_OC1CE << SHIFT_TAB_OCxx[iChannel]));
;;;1943   }
;;;1944   
;;;1945   /**
;;;1946     * @brief  Indicates clearing the output channel on an external event is enabled for the output channel.
;;;1947     * @note This function enables clearing the output channel on an external event.
;;;1948     * @note This function can only be used in Output compare and PWM modes. It does not work in Forced mode.
;;;1949     * @note Macro @ref IS_TIM_OCXREF_CLEAR_INSTANCE(TIMx) can be used to check whether
;;;1950     *       or not a timer instance can clear the OCxREF signal on an external event.
;;;1951     * @rmtoll CCMR1        OC1CE          LL_TIM_OC_IsEnabledClear\n
;;;1952     *         CCMR1        OC2CE          LL_TIM_OC_IsEnabledClear\n
;;;1953     *         CCMR2        OC3CE          LL_TIM_OC_IsEnabledClear\n
;;;1954     *         CCMR2        OC4CE          LL_TIM_OC_IsEnabledClear\n
;;;1955     * @param  TIMx Timer instance
;;;1956     * @param  Channel This parameter can be one of the following values:
;;;1957     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1958     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1959     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1960     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1961     * @retval State of bit (1 or 0).
;;;1962     */
;;;1963   __STATIC_INLINE uint32_t LL_TIM_OC_IsEnabledClear(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1964   {
;;;1965     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1966     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1967     register uint32_t bitfield = TIM_CCMR1_OC1CE << SHIFT_TAB_OCxx[iChannel];
;;;1968     return (READ_BIT(*pReg, bitfield) == bitfield);
;;;1969   }
;;;1970   
;;;1971   /**
;;;1972     * @brief  Set the dead-time delay (delay inserted between the rising edge of the OCxREF signal and the rising edge if the Ocx and OCxN signals).
;;;1973     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;1974     *       dead-time insertion feature is supported by a timer instance.
;;;1975     * @note Helper macro @ref __LL_TIM_CALC_DEADTIME can be used to calculate the DeadTime parameter
;;;1976     * @rmtoll BDTR         DTG           LL_TIM_OC_SetDeadTime
;;;1977     * @param  TIMx Timer instance
;;;1978     * @param  DeadTime between Min_Data=0 and Max_Data=255
;;;1979     * @retval None
;;;1980     */
;;;1981   __STATIC_INLINE void LL_TIM_OC_SetDeadTime(TIM_TypeDef *TIMx, uint32_t DeadTime)
;;;1982   {
;;;1983     MODIFY_REG(TIMx->BDTR, TIM_BDTR_DTG, DeadTime);
;;;1984   }
;;;1985   
;;;1986   /**
;;;1987     * @brief  Set compare value for output channel 1 (TIMx_CCR1).
;;;1988     * @note Macro @ref IS_TIM_CC1_INSTANCE(TIMx) can be used to check whether or not
;;;1989     *       output channel 1 is supported by a timer instance.
;;;1990     * @rmtoll CCR1         CCR1          LL_TIM_OC_SetCompareCH1
;;;1991     * @param  TIMx Timer instance
;;;1992     * @param  CompareValue between Min_Data=0 and Max_Data=65535
;;;1993     * @retval None
;;;1994     */
;;;1995   __STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
;;;1996   {
;;;1997     WRITE_REG(TIMx->CCR1, CompareValue);
;;;1998   }
;;;1999   
;;;2000   /**
;;;2001     * @brief  Set compare value for output channel 2 (TIMx_CCR2).
;;;2002     * @note Macro @ref IS_TIM_CC2_INSTANCE(TIMx) can be used to check whether or not
;;;2003     *       output channel 2 is supported by a timer instance.
;;;2004     * @rmtoll CCR2         CCR2          LL_TIM_OC_SetCompareCH2
;;;2005     * @param  TIMx Timer instance
;;;2006     * @param  CompareValue between Min_Data=0 and Max_Data=65535
;;;2007     * @retval None
;;;2008     */
;;;2009   __STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
;;;2010   {
;;;2011     WRITE_REG(TIMx->CCR2, CompareValue);
;;;2012   }
;;;2013   
;;;2014   /**
;;;2015     * @brief  Set compare value for output channel 3 (TIMx_CCR3).
;;;2016     * @note Macro @ref IS_TIM_CC3_INSTANCE(TIMx) can be used to check whether or not
;;;2017     *       output channel is supported by a timer instance.
;;;2018     * @rmtoll CCR3         CCR3          LL_TIM_OC_SetCompareCH3
;;;2019     * @param  TIMx Timer instance
;;;2020     * @param  CompareValue between Min_Data=0 and Max_Data=65535
;;;2021     * @retval None
;;;2022     */
;;;2023   __STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
;;;2024   {
;;;2025     WRITE_REG(TIMx->CCR3, CompareValue);
;;;2026   }
;;;2027   
;;;2028   /**
;;;2029     * @brief  Set compare value for output channel 4 (TIMx_CCR4).
;;;2030     * @note Macro @ref IS_TIM_CC4_INSTANCE(TIMx) can be used to check whether or not
;;;2031     *       output channel 4 is supported by a timer instance.
;;;2032     * @rmtoll CCR4         CCR4          LL_TIM_OC_SetCompareCH4
;;;2033     * @param  TIMx Timer instance
;;;2034     * @param  CompareValue between Min_Data=0 and Max_Data=65535
;;;2035     * @retval None
;;;2036     */
;;;2037   __STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
;;;2038   {
;;;2039     WRITE_REG(TIMx->CCR4, CompareValue);
;;;2040   }
;;;2041   
;;;2042   /**
;;;2043     * @brief  Get compare value (TIMx_CCR1) set for  output channel 1.
;;;2044     * @note Macro @ref IS_TIM_CC1_INSTANCE(TIMx) can be used to check whether or not
;;;2045     *       output channel 1 is supported by a timer instance.
;;;2046     * @rmtoll CCR1         CCR1          LL_TIM_OC_GetCompareCH1
;;;2047     * @param  TIMx Timer instance
;;;2048     * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
;;;2049     */
;;;2050   __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH1(TIM_TypeDef *TIMx)
;;;2051   {
;;;2052     return (uint32_t)(READ_REG(TIMx->CCR1));
;;;2053   }
;;;2054   
;;;2055   /**
;;;2056     * @brief  Get compare value (TIMx_CCR2) set for  output channel 2.
;;;2057     * @note Macro @ref IS_TIM_CC2_INSTANCE(TIMx) can be used to check whether or not
;;;2058     *       output channel 2 is supported by a timer instance.
;;;2059     * @rmtoll CCR2         CCR2          LL_TIM_OC_GetCompareCH2
;;;2060     * @param  TIMx Timer instance
;;;2061     * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
;;;2062     */
;;;2063   __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH2(TIM_TypeDef *TIMx)
;;;2064   {
;;;2065     return (uint32_t)(READ_REG(TIMx->CCR2));
;;;2066   }
;;;2067   
;;;2068   /**
;;;2069     * @brief  Get compare value (TIMx_CCR3) set for  output channel 3.
;;;2070     * @note Macro @ref IS_TIM_CC3_INSTANCE(TIMx) can be used to check whether or not
;;;2071     *       output channel 3 is supported by a timer instance.
;;;2072     * @rmtoll CCR3         CCR3          LL_TIM_OC_GetCompareCH3
;;;2073     * @param  TIMx Timer instance
;;;2074     * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
;;;2075     */
;;;2076   __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH3(TIM_TypeDef *TIMx)
;;;2077   {
;;;2078     return (uint32_t)(READ_REG(TIMx->CCR3));
;;;2079   }
;;;2080   
;;;2081   /**
;;;2082     * @brief  Get compare value (TIMx_CCR4) set for  output channel 4.
;;;2083     * @note Macro @ref IS_TIM_CC4_INSTANCE(TIMx) can be used to check whether or not
;;;2084     *       output channel 4 is supported by a timer instance.
;;;2085     * @rmtoll CCR4         CCR4          LL_TIM_OC_GetCompareCH4
;;;2086     * @param  TIMx Timer instance
;;;2087     * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
;;;2088     */
;;;2089   __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH4(TIM_TypeDef *TIMx)
;;;2090   {
;;;2091     return (uint32_t)(READ_REG(TIMx->CCR4));
;;;2092   }
;;;2093   
;;;2094   /**
;;;2095     * @}
;;;2096     */
;;;2097   
;;;2098   /** @defgroup TIM_LL_EF_Input_Channel Input channel configuration
;;;2099     * @{
;;;2100     */
;;;2101   /**
;;;2102     * @brief  Configure input channel.
;;;2103     * @rmtoll CCMR1        CC1S          LL_TIM_IC_Config\n
;;;2104     *         CCMR1        IC1PSC        LL_TIM_IC_Config\n
;;;2105     *         CCMR1        IC1F          LL_TIM_IC_Config\n
;;;2106     *         CCMR1        CC2S          LL_TIM_IC_Config\n
;;;2107     *         CCMR1        IC2PSC        LL_TIM_IC_Config\n
;;;2108     *         CCMR1        IC2F          LL_TIM_IC_Config\n
;;;2109     *         CCMR2        CC3S          LL_TIM_IC_Config\n
;;;2110     *         CCMR2        IC3PSC        LL_TIM_IC_Config\n
;;;2111     *         CCMR2        IC3F          LL_TIM_IC_Config\n
;;;2112     *         CCMR2        CC4S          LL_TIM_IC_Config\n
;;;2113     *         CCMR2        IC4PSC        LL_TIM_IC_Config\n
;;;2114     *         CCMR2        IC4F          LL_TIM_IC_Config\n
;;;2115     *         CCER         CC1P          LL_TIM_IC_Config\n
;;;2116     *         CCER         CC1NP         LL_TIM_IC_Config\n
;;;2117     *         CCER         CC2P          LL_TIM_IC_Config\n
;;;2118     *         CCER         CC2NP         LL_TIM_IC_Config\n
;;;2119     *         CCER         CC3P          LL_TIM_IC_Config\n
;;;2120     *         CCER         CC3NP         LL_TIM_IC_Config\n
;;;2121     *         CCER         CC4P          LL_TIM_IC_Config\n
;;;2122     * @param  TIMx Timer instance
;;;2123     * @param  Channel This parameter can be one of the following values:
;;;2124     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2125     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2126     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2127     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2128     * @param  Configuration This parameter must be a combination of all the following values:
;;;2129     *         @arg @ref LL_TIM_ACTIVEINPUT_DIRECTTI or @ref LL_TIM_ACTIVEINPUT_INDIRECTTI or @ref LL_TIM_ACTIVEINPUT_TRC
;;;2130     *         @arg @ref LL_TIM_ICPSC_DIV1 or ... or @ref LL_TIM_ICPSC_DIV8
;;;2131     *         @arg @ref LL_TIM_IC_FILTER_FDIV1 or ... or @ref LL_TIM_IC_FILTER_FDIV32_N8
;;;2132     *         @arg @ref LL_TIM_IC_POLARITY_RISING or @ref LL_TIM_IC_POLARITY_FALLING
;;;2133     * @retval None
;;;2134     */
;;;2135   __STATIC_INLINE void LL_TIM_IC_Config(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Configuration)
;;;2136   {
;;;2137     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2138     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2139     MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F | TIM_CCMR1_IC1PSC | TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]),
;;;2140                ((Configuration >> 16U) & (TIM_CCMR1_IC1F | TIM_CCMR1_IC1PSC | TIM_CCMR1_CC1S))  << SHIFT_TAB_ICxx[iChannel]);
;;;2141     MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
;;;2142                (Configuration & (TIM_CCER_CC1NP | TIM_CCER_CC1P)) << SHIFT_TAB_CCxP[iChannel]);
;;;2143   }
;;;2144   
;;;2145   /**
;;;2146     * @brief  Set the active input.
;;;2147     * @rmtoll CCMR1        CC1S          LL_TIM_IC_SetActiveInput\n
;;;2148     *         CCMR1        CC2S          LL_TIM_IC_SetActiveInput\n
;;;2149     *         CCMR2        CC3S          LL_TIM_IC_SetActiveInput\n
;;;2150     *         CCMR2        CC4S          LL_TIM_IC_SetActiveInput
;;;2151     * @param  TIMx Timer instance
;;;2152     * @param  Channel This parameter can be one of the following values:
;;;2153     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2154     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2155     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2156     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2157     * @param  ICActiveInput This parameter can be one of the following values:
;;;2158     *         @arg @ref LL_TIM_ACTIVEINPUT_DIRECTTI
;;;2159     *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
;;;2160     *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
;;;2161     * @retval None
;;;2162     */
;;;2163   __STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiveInput)
;;;2164   {
;;;2165     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2166     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2167     MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
;;;2168   }
;;;2169   
;;;2170   /**
;;;2171     * @brief  Get the current active input.
;;;2172     * @rmtoll CCMR1        CC1S          LL_TIM_IC_GetActiveInput\n
;;;2173     *         CCMR1        CC2S          LL_TIM_IC_GetActiveInput\n
;;;2174     *         CCMR2        CC3S          LL_TIM_IC_GetActiveInput\n
;;;2175     *         CCMR2        CC4S          LL_TIM_IC_GetActiveInput
;;;2176     * @param  TIMx Timer instance
;;;2177     * @param  Channel This parameter can be one of the following values:
;;;2178     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2179     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2180     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2181     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2182     * @retval Returned value can be one of the following values:
;;;2183     *         @arg @ref LL_TIM_ACTIVEINPUT_DIRECTTI
;;;2184     *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
;;;2185     *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
;;;2186     */
;;;2187   __STATIC_INLINE uint32_t LL_TIM_IC_GetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel)
;;;2188   {
;;;2189     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2190     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2191     return ((READ_BIT(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iChannel]) << 16U);
;;;2192   }
;;;2193   
;;;2194   /**
;;;2195     * @brief  Set the prescaler of input channel.
;;;2196     * @rmtoll CCMR1        IC1PSC        LL_TIM_IC_SetPrescaler\n
;;;2197     *         CCMR1        IC2PSC        LL_TIM_IC_SetPrescaler\n
;;;2198     *         CCMR2        IC3PSC        LL_TIM_IC_SetPrescaler\n
;;;2199     *         CCMR2        IC4PSC        LL_TIM_IC_SetPrescaler
;;;2200     * @param  TIMx Timer instance
;;;2201     * @param  Channel This parameter can be one of the following values:
;;;2202     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2203     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2204     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2205     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2206     * @param  ICPrescaler This parameter can be one of the following values:
;;;2207     *         @arg @ref LL_TIM_ICPSC_DIV1
;;;2208     *         @arg @ref LL_TIM_ICPSC_DIV2
;;;2209     *         @arg @ref LL_TIM_ICPSC_DIV4
;;;2210     *         @arg @ref LL_TIM_ICPSC_DIV8
;;;2211     * @retval None
;;;2212     */
;;;2213   __STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
;;;2214   {
;;;2215     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2216     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2217     MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
;;;2218   }
;;;2219   
;;;2220   /**
;;;2221     * @brief  Get the current prescaler value acting on an  input channel.
;;;2222     * @rmtoll CCMR1        IC1PSC        LL_TIM_IC_GetPrescaler\n
;;;2223     *         CCMR1        IC2PSC        LL_TIM_IC_GetPrescaler\n
;;;2224     *         CCMR2        IC3PSC        LL_TIM_IC_GetPrescaler\n
;;;2225     *         CCMR2        IC4PSC        LL_TIM_IC_GetPrescaler
;;;2226     * @param  TIMx Timer instance
;;;2227     * @param  Channel This parameter can be one of the following values:
;;;2228     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2229     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2230     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2231     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2232     * @retval Returned value can be one of the following values:
;;;2233     *         @arg @ref LL_TIM_ICPSC_DIV1
;;;2234     *         @arg @ref LL_TIM_ICPSC_DIV2
;;;2235     *         @arg @ref LL_TIM_ICPSC_DIV4
;;;2236     *         @arg @ref LL_TIM_ICPSC_DIV8
;;;2237     */
;;;2238   __STATIC_INLINE uint32_t LL_TIM_IC_GetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel)
;;;2239   {
;;;2240     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2241     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2242     return ((READ_BIT(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iChannel]) << 16U);
;;;2243   }
;;;2244   
;;;2245   /**
;;;2246     * @brief  Set the input filter duration.
;;;2247     * @rmtoll CCMR1        IC1F          LL_TIM_IC_SetFilter\n
;;;2248     *         CCMR1        IC2F          LL_TIM_IC_SetFilter\n
;;;2249     *         CCMR2        IC3F          LL_TIM_IC_SetFilter\n
;;;2250     *         CCMR2        IC4F          LL_TIM_IC_SetFilter
;;;2251     * @param  TIMx Timer instance
;;;2252     * @param  Channel This parameter can be one of the following values:
;;;2253     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2254     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2255     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2256     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2257     * @param  ICFilter This parameter can be one of the following values:
;;;2258     *         @arg @ref LL_TIM_IC_FILTER_FDIV1
;;;2259     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N2
;;;2260     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N4
;;;2261     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N8
;;;2262     *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N6
;;;2263     *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N8
;;;2264     *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N6
;;;2265     *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N8
;;;2266     *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N6
;;;2267     *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N8
;;;2268     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N5
;;;2269     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N6
;;;2270     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N8
;;;2271     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N5
;;;2272     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
;;;2273     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
;;;2274     * @retval None
;;;2275     */
;;;2276   __STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
;;;2277   {
;;;2278     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2279     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2280     MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
;;;2281   }
;;;2282   
;;;2283   /**
;;;2284     * @brief  Get the input filter duration.
;;;2285     * @rmtoll CCMR1        IC1F          LL_TIM_IC_GetFilter\n
;;;2286     *         CCMR1        IC2F          LL_TIM_IC_GetFilter\n
;;;2287     *         CCMR2        IC3F          LL_TIM_IC_GetFilter\n
;;;2288     *         CCMR2        IC4F          LL_TIM_IC_GetFilter
;;;2289     * @param  TIMx Timer instance
;;;2290     * @param  Channel This parameter can be one of the following values:
;;;2291     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2292     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2293     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2294     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2295     * @retval Returned value can be one of the following values:
;;;2296     *         @arg @ref LL_TIM_IC_FILTER_FDIV1
;;;2297     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N2
;;;2298     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N4
;;;2299     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N8
;;;2300     *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N6
;;;2301     *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N8
;;;2302     *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N6
;;;2303     *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N8
;;;2304     *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N6
;;;2305     *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N8
;;;2306     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N5
;;;2307     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N6
;;;2308     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N8
;;;2309     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N5
;;;2310     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
;;;2311     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
;;;2312     */
;;;2313   __STATIC_INLINE uint32_t LL_TIM_IC_GetFilter(TIM_TypeDef *TIMx, uint32_t Channel)
;;;2314   {
;;;2315     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2316     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2317     return ((READ_BIT(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iChannel]) << 16U);
;;;2318   }
;;;2319   
;;;2320   /**
;;;2321     * @brief  Set the input channel polarity.
;;;2322     * @rmtoll CCER         CC1P          LL_TIM_IC_SetPolarity\n
;;;2323     *         CCER         CC1NP         LL_TIM_IC_SetPolarity\n
;;;2324     *         CCER         CC2P          LL_TIM_IC_SetPolarity\n
;;;2325     *         CCER         CC2NP         LL_TIM_IC_SetPolarity\n
;;;2326     *         CCER         CC3P          LL_TIM_IC_SetPolarity\n
;;;2327     *         CCER         CC3NP         LL_TIM_IC_SetPolarity\n
;;;2328     *         CCER         CC4P          LL_TIM_IC_SetPolarity\n
;;;2329     * @param  TIMx Timer instance
;;;2330     * @param  Channel This parameter can be one of the following values:
;;;2331     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2332     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2333     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2334     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2335     * @param  ICPolarity This parameter can be one of the following values:
;;;2336     *         @arg @ref LL_TIM_IC_POLARITY_RISING
;;;2337     *         @arg @ref LL_TIM_IC_POLARITY_FALLING
;;;2338     * @retval None
;;;2339     */
;;;2340   __STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
;;;2341   {
;;;2342     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2343     MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
;;;2344                ICPolarity << SHIFT_TAB_CCxP[iChannel]);
;;;2345   }
;;;2346   
;;;2347   /**
;;;2348     * @brief  Get the current input channel polarity.
;;;2349     * @rmtoll CCER         CC1P          LL_TIM_IC_GetPolarity\n
;;;2350     *         CCER         CC1NP         LL_TIM_IC_GetPolarity\n
;;;2351     *         CCER         CC2P          LL_TIM_IC_GetPolarity\n
;;;2352     *         CCER         CC2NP         LL_TIM_IC_GetPolarity\n
;;;2353     *         CCER         CC3P          LL_TIM_IC_GetPolarity\n
;;;2354     *         CCER         CC3NP         LL_TIM_IC_GetPolarity\n
;;;2355     *         CCER         CC4P          LL_TIM_IC_GetPolarity\n
;;;2356     * @param  TIMx Timer instance
;;;2357     * @param  Channel This parameter can be one of the following values:
;;;2358     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2359     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2360     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2361     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2362     * @retval Returned value can be one of the following values:
;;;2363     *         @arg @ref LL_TIM_IC_POLARITY_RISING
;;;2364     *         @arg @ref LL_TIM_IC_POLARITY_FALLING
;;;2365     */
;;;2366   __STATIC_INLINE uint32_t LL_TIM_IC_GetPolarity(TIM_TypeDef *TIMx, uint32_t Channel)
;;;2367   {
;;;2368     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2369     return (READ_BIT(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel])) >>
;;;2370             SHIFT_TAB_CCxP[iChannel]);
;;;2371   }
;;;2372   
;;;2373   /**
;;;2374     * @brief  Connect the TIMx_CH1, CH2 and CH3 pins  to the TI1 input (XOR combination).
;;;2375     * @note Macro @ref IS_TIM_XOR_INSTANCE(TIMx) can be used to check whether or not
;;;2376     *       a timer instance provides an XOR input.
;;;2377     * @rmtoll CR2          TI1S          LL_TIM_IC_EnableXORCombination
;;;2378     * @param  TIMx Timer instance
;;;2379     * @retval None
;;;2380     */
;;;2381   __STATIC_INLINE void LL_TIM_IC_EnableXORCombination(TIM_TypeDef *TIMx)
;;;2382   {
;;;2383     SET_BIT(TIMx->CR2, TIM_CR2_TI1S);
;;;2384   }
;;;2385   
;;;2386   /**
;;;2387     * @brief  Disconnect the TIMx_CH1, CH2 and CH3 pins  from the TI1 input.
;;;2388     * @note Macro @ref IS_TIM_XOR_INSTANCE(TIMx) can be used to check whether or not
;;;2389     *       a timer instance provides an XOR input.
;;;2390     * @rmtoll CR2          TI1S          LL_TIM_IC_DisableXORCombination
;;;2391     * @param  TIMx Timer instance
;;;2392     * @retval None
;;;2393     */
;;;2394   __STATIC_INLINE void LL_TIM_IC_DisableXORCombination(TIM_TypeDef *TIMx)
;;;2395   {
;;;2396     CLEAR_BIT(TIMx->CR2, TIM_CR2_TI1S);
;;;2397   }
;;;2398   
;;;2399   /**
;;;2400     * @brief  Indicates whether the TIMx_CH1, CH2 and CH3 pins are connectected to the TI1 input.
;;;2401     * @note Macro @ref IS_TIM_XOR_INSTANCE(TIMx) can be used to check whether or not
;;;2402     * a timer instance provides an XOR input.
;;;2403     * @rmtoll CR2          TI1S          LL_TIM_IC_IsEnabledXORCombination
;;;2404     * @param  TIMx Timer instance
;;;2405     * @retval State of bit (1 or 0).
;;;2406     */
;;;2407   __STATIC_INLINE uint32_t LL_TIM_IC_IsEnabledXORCombination(TIM_TypeDef *TIMx)
;;;2408   {
;;;2409     return (READ_BIT(TIMx->CR2, TIM_CR2_TI1S) == (TIM_CR2_TI1S));
;;;2410   }
;;;2411   
;;;2412   /**
;;;2413     * @brief  Get captured value for input channel 1.
;;;2414     * @note Macro @ref IS_TIM_CC1_INSTANCE(TIMx) can be used to check whether or not
;;;2415     *       input channel 1 is supported by a timer instance.
;;;2416     * @rmtoll CCR1         CCR1          LL_TIM_IC_GetCaptureCH1
;;;2417     * @param  TIMx Timer instance
;;;2418     * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
;;;2419     */
;;;2420   __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH1(TIM_TypeDef *TIMx)
;;;2421   {
;;;2422     return (uint32_t)(READ_REG(TIMx->CCR1));
;;;2423   }
;;;2424   
;;;2425   /**
;;;2426     * @brief  Get captured value for input channel 2.
;;;2427     * @note Macro @ref IS_TIM_CC2_INSTANCE(TIMx) can be used to check whether or not
;;;2428     *       input channel 2 is supported by a timer instance.
;;;2429     * @rmtoll CCR2         CCR2          LL_TIM_IC_GetCaptureCH2
;;;2430     * @param  TIMx Timer instance
;;;2431     * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
;;;2432     */
;;;2433   __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH2(TIM_TypeDef *TIMx)
;;;2434   {
;;;2435     return (uint32_t)(READ_REG(TIMx->CCR2));
;;;2436   }
;;;2437   
;;;2438   /**
;;;2439     * @brief  Get captured value for input channel 3.
;;;2440     * @note Macro @ref IS_TIM_CC3_INSTANCE(TIMx) can be used to check whether or not
;;;2441     *       input channel 3 is supported by a timer instance.
;;;2442     * @rmtoll CCR3         CCR3          LL_TIM_IC_GetCaptureCH3
;;;2443     * @param  TIMx Timer instance
;;;2444     * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
;;;2445     */
;;;2446   __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH3(TIM_TypeDef *TIMx)
;;;2447   {
;;;2448     return (uint32_t)(READ_REG(TIMx->CCR3));
;;;2449   }
;;;2450   
;;;2451   /**
;;;2452     * @brief  Get captured value for input channel 4.
;;;2453     * @note Macro @ref IS_TIM_CC4_INSTANCE(TIMx) can be used to check whether or not
;;;2454     *       input channel 4 is supported by a timer instance.
;;;2455     * @rmtoll CCR4         CCR4          LL_TIM_IC_GetCaptureCH4
;;;2456     * @param  TIMx Timer instance
;;;2457     * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
;;;2458     */
;;;2459   __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH4(TIM_TypeDef *TIMx)
;;;2460   {
;;;2461     return (uint32_t)(READ_REG(TIMx->CCR4));
;;;2462   }
;;;2463   
;;;2464   /**
;;;2465     * @}
;;;2466     */
;;;2467   
;;;2468   /** @defgroup TIM_LL_EF_Clock_Selection Counter clock selection
;;;2469     * @{
;;;2470     */
;;;2471   /**
;;;2472     * @brief  Enable external clock mode 2.
;;;2473     * @note When external clock mode 2 is enabled the counter is clocked by any active edge on the ETRF signal.
;;;2474     * @note Macro @ref IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
;;;2475     *       whether or not a timer instance supports external clock mode2.
;;;2476     * @rmtoll SMCR         ECE           LL_TIM_EnableExternalClock
;;;2477     * @param  TIMx Timer instance
;;;2478     * @retval None
;;;2479     */
;;;2480   __STATIC_INLINE void LL_TIM_EnableExternalClock(TIM_TypeDef *TIMx)
;;;2481   {
;;;2482     SET_BIT(TIMx->SMCR, TIM_SMCR_ECE);
;;;2483   }
;;;2484   
;;;2485   /**
;;;2486     * @brief  Disable external clock mode 2.
;;;2487     * @note Macro @ref IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
;;;2488     *       whether or not a timer instance supports external clock mode2.
;;;2489     * @rmtoll SMCR         ECE           LL_TIM_DisableExternalClock
;;;2490     * @param  TIMx Timer instance
;;;2491     * @retval None
;;;2492     */
;;;2493   __STATIC_INLINE void LL_TIM_DisableExternalClock(TIM_TypeDef *TIMx)
;;;2494   {
;;;2495     CLEAR_BIT(TIMx->SMCR, TIM_SMCR_ECE);
;;;2496   }
;;;2497   
;;;2498   /**
;;;2499     * @brief  Indicate whether external clock mode 2 is enabled.
;;;2500     * @note Macro @ref IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
;;;2501     *       whether or not a timer instance supports external clock mode2.
;;;2502     * @rmtoll SMCR         ECE           LL_TIM_IsEnabledExternalClock
;;;2503     * @param  TIMx Timer instance
;;;2504     * @retval State of bit (1 or 0).
;;;2505     */
;;;2506   __STATIC_INLINE uint32_t LL_TIM_IsEnabledExternalClock(TIM_TypeDef *TIMx)
;;;2507   {
;;;2508     return (READ_BIT(TIMx->SMCR, TIM_SMCR_ECE) == (TIM_SMCR_ECE));
;;;2509   }
;;;2510   
;;;2511   /**
;;;2512     * @brief  Set the clock source of the counter clock.
;;;2513     * @note when selected clock source is external clock mode 1, the timer input
;;;2514     *       the external clock is applied is selected by calling the @ref LL_TIM_SetTriggerInput()
;;;2515     *       function. This timer input must be configured by calling
;;;2516     *       the @ref LL_TIM_IC_Config() function.
;;;2517     * @note Macro @ref IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(TIMx) can be used to check
;;;2518     *       whether or not a timer instance supports external clock mode1.
;;;2519     * @note Macro @ref IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
;;;2520     *       whether or not a timer instance supports external clock mode2.
;;;2521     * @rmtoll SMCR         SMS           LL_TIM_SetClockSource\n
;;;2522     *         SMCR         ECE           LL_TIM_SetClockSource
;;;2523     * @param  TIMx Timer instance
;;;2524     * @param  ClockSource This parameter can be one of the following values:
;;;2525     *         @arg @ref LL_TIM_CLOCKSOURCE_INTERNAL
;;;2526     *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
;;;2527     *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
;;;2528     * @retval None
;;;2529     */
;;;2530   __STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
;;;2531   {
;;;2532     MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
;;;2533   }
;;;2534   
;;;2535   /**
;;;2536     * @brief  Set the encoder interface mode.
;;;2537     * @note Macro @ref IS_TIM_ENCODER_INTERFACE_INSTANCE(TIMx) can be used to check
;;;2538     *       whether or not a timer instance supports the encoder mode.
;;;2539     * @rmtoll SMCR         SMS           LL_TIM_SetEncoderMode
;;;2540     * @param  TIMx Timer instance
;;;2541     * @param  EncoderMode This parameter can be one of the following values:
;;;2542     *         @arg @ref LL_TIM_ENCODERMODE_X2_TI1
;;;2543     *         @arg @ref LL_TIM_ENCODERMODE_X2_TI2
;;;2544     *         @arg @ref LL_TIM_ENCODERMODE_X4_TI12
;;;2545     * @retval None
;;;2546     */
;;;2547   __STATIC_INLINE void LL_TIM_SetEncoderMode(TIM_TypeDef *TIMx, uint32_t EncoderMode)
;;;2548   {
;;;2549     MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
;;;2550   }
;;;2551   
;;;2552   /**
;;;2553     * @}
;;;2554     */
;;;2555   
;;;2556   /** @defgroup TIM_LL_EF_Timer_Synchronization Timer synchronisation configuration
;;;2557     * @{
;;;2558     */
;;;2559   /**
;;;2560     * @brief  Set the trigger output (TRGO) used for timer synchronization .
;;;2561     * @note Macro @ref IS_TIM_MASTER_INSTANCE(TIMx) can be used to check
;;;2562     *       whether or not a timer instance can operate as a master timer.
;;;2563     * @rmtoll CR2          MMS           LL_TIM_SetTriggerOutput
;;;2564     * @param  TIMx Timer instance
;;;2565     * @param  TimerSynchronization This parameter can be one of the following values:
;;;2566     *         @arg @ref LL_TIM_TRGO_RESET
;;;2567     *         @arg @ref LL_TIM_TRGO_ENABLE
;;;2568     *         @arg @ref LL_TIM_TRGO_UPDATE
;;;2569     *         @arg @ref LL_TIM_TRGO_CC1IF
;;;2570     *         @arg @ref LL_TIM_TRGO_OC1REF
;;;2571     *         @arg @ref LL_TIM_TRGO_OC2REF
;;;2572     *         @arg @ref LL_TIM_TRGO_OC3REF
;;;2573     *         @arg @ref LL_TIM_TRGO_OC4REF
;;;2574     * @retval None
;;;2575     */
;;;2576   __STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
;;;2577   {
;;;2578     MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
;;;2579   }
;;;2580   
;;;2581   /**
;;;2582     * @brief  Set the synchronization mode of a slave timer.
;;;2583     * @note Macro @ref IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
;;;2584     *       a timer instance can operate as a slave timer.
;;;2585     * @rmtoll SMCR         SMS           LL_TIM_SetSlaveMode
;;;2586     * @param  TIMx Timer instance
;;;2587     * @param  SlaveMode This parameter can be one of the following values:
;;;2588     *         @arg @ref LL_TIM_SLAVEMODE_DISABLED
;;;2589     *         @arg @ref LL_TIM_SLAVEMODE_RESET
;;;2590     *         @arg @ref LL_TIM_SLAVEMODE_GATED
;;;2591     *         @arg @ref LL_TIM_SLAVEMODE_TRIGGER
;;;2592     * @retval None
;;;2593     */
;;;2594   __STATIC_INLINE void LL_TIM_SetSlaveMode(TIM_TypeDef *TIMx, uint32_t SlaveMode)
;;;2595   {
;;;2596     MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
;;;2597   }
;;;2598   
;;;2599   /**
;;;2600     * @brief  Set the selects the trigger input to be used to synchronize the counter.
;;;2601     * @note Macro @ref IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
;;;2602     *       a timer instance can operate as a slave timer.
;;;2603     * @rmtoll SMCR         TS            LL_TIM_SetTriggerInput
;;;2604     * @param  TIMx Timer instance
;;;2605     * @param  TriggerInput This parameter can be one of the following values:
;;;2606     *         @arg @ref LL_TIM_TS_ITR0
;;;2607     *         @arg @ref LL_TIM_TS_ITR1
;;;2608     *         @arg @ref LL_TIM_TS_ITR2
;;;2609     *         @arg @ref LL_TIM_TS_ITR3
;;;2610     *         @arg @ref LL_TIM_TS_TI1F_ED
;;;2611     *         @arg @ref LL_TIM_TS_TI1FP1
;;;2612     *         @arg @ref LL_TIM_TS_TI2FP2
;;;2613     *         @arg @ref LL_TIM_TS_ETRF
;;;2614     * @retval None
;;;2615     */
;;;2616   __STATIC_INLINE void LL_TIM_SetTriggerInput(TIM_TypeDef *TIMx, uint32_t TriggerInput)
;;;2617   {
;;;2618     MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
;;;2619   }
;;;2620   
;;;2621   /**
;;;2622     * @brief  Enable the Master/Slave mode.
;;;2623     * @note Macro @ref IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
;;;2624     *       a timer instance can operate as a slave timer.
;;;2625     * @rmtoll SMCR         MSM           LL_TIM_EnableMasterSlaveMode
;;;2626     * @param  TIMx Timer instance
;;;2627     * @retval None
;;;2628     */
;;;2629   __STATIC_INLINE void LL_TIM_EnableMasterSlaveMode(TIM_TypeDef *TIMx)
;;;2630   {
;;;2631     SET_BIT(TIMx->SMCR, TIM_SMCR_MSM);
;;;2632   }
;;;2633   
;;;2634   /**
;;;2635     * @brief  Disable the Master/Slave mode.
;;;2636     * @note Macro @ref IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
;;;2637     *       a timer instance can operate as a slave timer.
;;;2638     * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
;;;2639     * @param  TIMx Timer instance
;;;2640     * @retval None
;;;2641     */
;;;2642   __STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
;;;2643   {
;;;2644     CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
;;;2645   }
;;;2646   
;;;2647   /**
;;;2648     * @brief Indicates whether the Master/Slave mode is enabled.
;;;2649     * @note Macro @ref IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
;;;2650     * a timer instance can operate as a slave timer.
;;;2651     * @rmtoll SMCR         MSM           LL_TIM_IsEnabledMasterSlaveMode
;;;2652     * @param  TIMx Timer instance
;;;2653     * @retval State of bit (1 or 0).
;;;2654     */
;;;2655   __STATIC_INLINE uint32_t LL_TIM_IsEnabledMasterSlaveMode(TIM_TypeDef *TIMx)
;;;2656   {
;;;2657     return (READ_BIT(TIMx->SMCR, TIM_SMCR_MSM) == (TIM_SMCR_MSM));
;;;2658   }
;;;2659   
;;;2660   /**
;;;2661     * @brief  Configure the external trigger (ETR) input.
;;;2662     * @note Macro @ref IS_TIM_ETR_INSTANCE(TIMx) can be used to check whether or not
;;;2663     *       a timer instance provides an external trigger input.
;;;2664     * @rmtoll SMCR         ETP           LL_TIM_ConfigETR\n
;;;2665     *         SMCR         ETPS          LL_TIM_ConfigETR\n
;;;2666     *         SMCR         ETF           LL_TIM_ConfigETR
;;;2667     * @param  TIMx Timer instance
;;;2668     * @param  ETRPolarity This parameter can be one of the following values:
;;;2669     *         @arg @ref LL_TIM_ETR_POLARITY_NONINVERTED
;;;2670     *         @arg @ref LL_TIM_ETR_POLARITY_INVERTED
;;;2671     * @param  ETRPrescaler This parameter can be one of the following values:
;;;2672     *         @arg @ref LL_TIM_ETR_PRESCALER_DIV1
;;;2673     *         @arg @ref LL_TIM_ETR_PRESCALER_DIV2
;;;2674     *         @arg @ref LL_TIM_ETR_PRESCALER_DIV4
;;;2675     *         @arg @ref LL_TIM_ETR_PRESCALER_DIV8
;;;2676     * @param  ETRFilter This parameter can be one of the following values:
;;;2677     *         @arg @ref LL_TIM_ETR_FILTER_FDIV1
;;;2678     *         @arg @ref LL_TIM_ETR_FILTER_FDIV1_N2
;;;2679     *         @arg @ref LL_TIM_ETR_FILTER_FDIV1_N4
;;;2680     *         @arg @ref LL_TIM_ETR_FILTER_FDIV1_N8
;;;2681     *         @arg @ref LL_TIM_ETR_FILTER_FDIV2_N6
;;;2682     *         @arg @ref LL_TIM_ETR_FILTER_FDIV2_N8
;;;2683     *         @arg @ref LL_TIM_ETR_FILTER_FDIV4_N6
;;;2684     *         @arg @ref LL_TIM_ETR_FILTER_FDIV4_N8
;;;2685     *         @arg @ref LL_TIM_ETR_FILTER_FDIV8_N6
;;;2686     *         @arg @ref LL_TIM_ETR_FILTER_FDIV8_N8
;;;2687     *         @arg @ref LL_TIM_ETR_FILTER_FDIV16_N5
;;;2688     *         @arg @ref LL_TIM_ETR_FILTER_FDIV16_N6
;;;2689     *         @arg @ref LL_TIM_ETR_FILTER_FDIV16_N8
;;;2690     *         @arg @ref LL_TIM_ETR_FILTER_FDIV32_N5
;;;2691     *         @arg @ref LL_TIM_ETR_FILTER_FDIV32_N6
;;;2692     *         @arg @ref LL_TIM_ETR_FILTER_FDIV32_N8
;;;2693     * @retval None
;;;2694     */
;;;2695   __STATIC_INLINE void LL_TIM_ConfigETR(TIM_TypeDef *TIMx, uint32_t ETRPolarity, uint32_t ETRPrescaler,
;;;2696                                         uint32_t ETRFilter)
;;;2697   {
;;;2698     MODIFY_REG(TIMx->SMCR, TIM_SMCR_ETP | TIM_SMCR_ETPS | TIM_SMCR_ETF, ETRPolarity | ETRPrescaler | ETRFilter);
;;;2699   }
;;;2700   
;;;2701   /**
;;;2702     * @}
;;;2703     */
;;;2704   
;;;2705   /** @defgroup TIM_LL_EF_Break_Function Break function configuration
;;;2706     * @{
;;;2707     */
;;;2708   /**
;;;2709     * @brief  Enable the break function.
;;;2710     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;2711     *       a timer instance provides a break input.
;;;2712     * @rmtoll BDTR         BKE           LL_TIM_EnableBRK
;;;2713     * @param  TIMx Timer instance
;;;2714     * @retval None
;;;2715     */
;;;2716   __STATIC_INLINE void LL_TIM_EnableBRK(TIM_TypeDef *TIMx)
;;;2717   {
;;;2718     SET_BIT(TIMx->BDTR, TIM_BDTR_BKE);
;;;2719   }
;;;2720   
;;;2721   /**
;;;2722     * @brief  Disable the break function.
;;;2723     * @rmtoll BDTR         BKE           LL_TIM_DisableBRK
;;;2724     * @param  TIMx Timer instance
;;;2725     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;2726     *       a timer instance provides a break input.
;;;2727     * @retval None
;;;2728     */
;;;2729   __STATIC_INLINE void LL_TIM_DisableBRK(TIM_TypeDef *TIMx)
;;;2730   {
;;;2731     CLEAR_BIT(TIMx->BDTR, TIM_BDTR_BKE);
;;;2732   }
;;;2733   
;;;2734   /**
;;;2735     * @brief  Configure the break input.
;;;2736     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;2737     *       a timer instance provides a break input.
;;;2738     * @rmtoll BDTR         BKP           LL_TIM_ConfigBRK
;;;2739     * @param  TIMx Timer instance
;;;2740     * @param  BreakPolarity This parameter can be one of the following values:
;;;2741     *         @arg @ref LL_TIM_BREAK_POLARITY_LOW
;;;2742     *         @arg @ref LL_TIM_BREAK_POLARITY_HIGH
;;;2743     * @retval None
;;;2744     */
;;;2745   __STATIC_INLINE void LL_TIM_ConfigBRK(TIM_TypeDef *TIMx, uint32_t BreakPolarity)
;;;2746   {
;;;2747     MODIFY_REG(TIMx->BDTR, TIM_BDTR_BKP, BreakPolarity);
;;;2748   }
;;;2749   
;;;2750   /**
;;;2751     * @brief  Select the outputs off state (enabled v.s. disabled) in Idle and Run modes.
;;;2752     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;2753     *       a timer instance provides a break input.
;;;2754     * @rmtoll BDTR         OSSI          LL_TIM_SetOffStates\n
;;;2755     *         BDTR         OSSR          LL_TIM_SetOffStates
;;;2756     * @param  TIMx Timer instance
;;;2757     * @param  OffStateIdle This parameter can be one of the following values:
;;;2758     *         @arg @ref LL_TIM_OSSI_DISABLE
;;;2759     *         @arg @ref LL_TIM_OSSI_ENABLE
;;;2760     * @param  OffStateRun This parameter can be one of the following values:
;;;2761     *         @arg @ref LL_TIM_OSSR_DISABLE
;;;2762     *         @arg @ref LL_TIM_OSSR_ENABLE
;;;2763     * @retval None
;;;2764     */
;;;2765   __STATIC_INLINE void LL_TIM_SetOffStates(TIM_TypeDef *TIMx, uint32_t OffStateIdle, uint32_t OffStateRun)
;;;2766   {
;;;2767     MODIFY_REG(TIMx->BDTR, TIM_BDTR_OSSI | TIM_BDTR_OSSR, OffStateIdle | OffStateRun);
;;;2768   }
;;;2769   
;;;2770   /**
;;;2771     * @brief  Enable automatic output (MOE can be set by software or automatically when a break input is active).
;;;2772     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;2773     *       a timer instance provides a break input.
;;;2774     * @rmtoll BDTR         AOE           LL_TIM_EnableAutomaticOutput
;;;2775     * @param  TIMx Timer instance
;;;2776     * @retval None
;;;2777     */
;;;2778   __STATIC_INLINE void LL_TIM_EnableAutomaticOutput(TIM_TypeDef *TIMx)
;;;2779   {
;;;2780     SET_BIT(TIMx->BDTR, TIM_BDTR_AOE);
;;;2781   }
;;;2782   
;;;2783   /**
;;;2784     * @brief  Disable automatic output (MOE can be set only by software).
;;;2785     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;2786     *       a timer instance provides a break input.
;;;2787     * @rmtoll BDTR         AOE           LL_TIM_DisableAutomaticOutput
;;;2788     * @param  TIMx Timer instance
;;;2789     * @retval None
;;;2790     */
;;;2791   __STATIC_INLINE void LL_TIM_DisableAutomaticOutput(TIM_TypeDef *TIMx)
;;;2792   {
;;;2793     CLEAR_BIT(TIMx->BDTR, TIM_BDTR_AOE);
;;;2794   }
;;;2795   
;;;2796   /**
;;;2797     * @brief  Indicate whether automatic output is enabled.
;;;2798     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;2799     *       a timer instance provides a break input.
;;;2800     * @rmtoll BDTR         AOE           LL_TIM_IsEnabledAutomaticOutput
;;;2801     * @param  TIMx Timer instance
;;;2802     * @retval State of bit (1 or 0).
;;;2803     */
;;;2804   __STATIC_INLINE uint32_t LL_TIM_IsEnabledAutomaticOutput(TIM_TypeDef *TIMx)
;;;2805   {
;;;2806     return (READ_BIT(TIMx->BDTR, TIM_BDTR_AOE) == (TIM_BDTR_AOE));
;;;2807   }
;;;2808   
;;;2809   /**
;;;2810     * @brief  Enable the outputs (set the MOE bit in TIMx_BDTR register).
;;;2811     * @note The MOE bit in TIMx_BDTR register allows to enable /disable the outputs by
;;;2812     *       software and is reset in case of break or break2 event
;;;2813     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;2814     *       a timer instance provides a break input.
;;;2815     * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
;;;2816     * @param  TIMx Timer instance
;;;2817     * @retval None
;;;2818     */
;;;2819   __STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
;;;2820   {
;;;2821     SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
;;;2822   }
;;;2823   
;;;2824   /**
;;;2825     * @brief  Disable the outputs (reset the MOE bit in TIMx_BDTR register).
;;;2826     * @note The MOE bit in TIMx_BDTR register allows to enable /disable the outputs by
;;;2827     *       software and is reset in case of break or break2 event.
;;;2828     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;2829     *       a timer instance provides a break input.
;;;2830     * @rmtoll BDTR         MOE           LL_TIM_DisableAllOutputs
;;;2831     * @param  TIMx Timer instance
;;;2832     * @retval None
;;;2833     */
;;;2834   __STATIC_INLINE void LL_TIM_DisableAllOutputs(TIM_TypeDef *TIMx)
;;;2835   {
;;;2836     CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
;;;2837   }
;;;2838   
;;;2839   /**
;;;2840     * @brief  Indicates whether outputs are enabled.
;;;2841     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;2842     *       a timer instance provides a break input.
;;;2843     * @rmtoll BDTR         MOE           LL_TIM_IsEnabledAllOutputs
;;;2844     * @param  TIMx Timer instance
;;;2845     * @retval State of bit (1 or 0).
;;;2846     */
;;;2847   __STATIC_INLINE uint32_t LL_TIM_IsEnabledAllOutputs(TIM_TypeDef *TIMx)
;;;2848   {
;;;2849     return (READ_BIT(TIMx->BDTR, TIM_BDTR_MOE) == (TIM_BDTR_MOE));
;;;2850   }
;;;2851   
;;;2852   /**
;;;2853     * @}
;;;2854     */
;;;2855   
;;;2856   /** @defgroup TIM_LL_EF_DMA_Burst_Mode DMA burst mode configuration
;;;2857     * @{
;;;2858     */
;;;2859   /**
;;;2860     * @brief  Configures the timer DMA burst feature.
;;;2861     * @note Macro @ref IS_TIM_DMABURST_INSTANCE(TIMx) can be used to check whether or
;;;2862     *       not a timer instance supports the DMA burst mode.
;;;2863     * @rmtoll DCR          DBL           LL_TIM_ConfigDMABurst\n
;;;2864     *         DCR          DBA           LL_TIM_ConfigDMABurst
;;;2865     * @param  TIMx Timer instance
;;;2866     * @param  DMABurstBaseAddress This parameter can be one of the following values:
;;;2867     *         @arg @ref LL_TIM_DMABURST_BASEADDR_CR1
;;;2868     *         @arg @ref LL_TIM_DMABURST_BASEADDR_CR2
;;;2869     *         @arg @ref LL_TIM_DMABURST_BASEADDR_SMCR
;;;2870     *         @arg @ref LL_TIM_DMABURST_BASEADDR_DIER
;;;2871     *         @arg @ref LL_TIM_DMABURST_BASEADDR_SR
;;;2872     *         @arg @ref LL_TIM_DMABURST_BASEADDR_EGR
;;;2873     *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCMR1
;;;2874     *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCMR2
;;;2875     *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCER
;;;2876     *         @arg @ref LL_TIM_DMABURST_BASEADDR_CNT
;;;2877     *         @arg @ref LL_TIM_DMABURST_BASEADDR_PSC
;;;2878     *         @arg @ref LL_TIM_DMABURST_BASEADDR_ARR
;;;2879     *         @arg @ref LL_TIM_DMABURST_BASEADDR_RCR
;;;2880     *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCR1
;;;2881     *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCR2
;;;2882     *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCR3
;;;2883     *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCR4
;;;2884     *         @arg @ref LL_TIM_DMABURST_BASEADDR_BDTR
;;;2885     * @param  DMABurstLength This parameter can be one of the following values:
;;;2886     *         @arg @ref LL_TIM_DMABURST_LENGTH_1TRANSFER
;;;2887     *         @arg @ref LL_TIM_DMABURST_LENGTH_2TRANSFERS
;;;2888     *         @arg @ref LL_TIM_DMABURST_LENGTH_3TRANSFERS
;;;2889     *         @arg @ref LL_TIM_DMABURST_LENGTH_4TRANSFERS
;;;2890     *         @arg @ref LL_TIM_DMABURST_LENGTH_5TRANSFERS
;;;2891     *         @arg @ref LL_TIM_DMABURST_LENGTH_6TRANSFERS
;;;2892     *         @arg @ref LL_TIM_DMABURST_LENGTH_7TRANSFERS
;;;2893     *         @arg @ref LL_TIM_DMABURST_LENGTH_8TRANSFERS
;;;2894     *         @arg @ref LL_TIM_DMABURST_LENGTH_9TRANSFERS
;;;2895     *         @arg @ref LL_TIM_DMABURST_LENGTH_10TRANSFERS
;;;2896     *         @arg @ref LL_TIM_DMABURST_LENGTH_11TRANSFERS
;;;2897     *         @arg @ref LL_TIM_DMABURST_LENGTH_12TRANSFERS
;;;2898     *         @arg @ref LL_TIM_DMABURST_LENGTH_13TRANSFERS
;;;2899     *         @arg @ref LL_TIM_DMABURST_LENGTH_14TRANSFERS
;;;2900     *         @arg @ref LL_TIM_DMABURST_LENGTH_15TRANSFERS
;;;2901     *         @arg @ref LL_TIM_DMABURST_LENGTH_16TRANSFERS
;;;2902     *         @arg @ref LL_TIM_DMABURST_LENGTH_17TRANSFERS
;;;2903     *         @arg @ref LL_TIM_DMABURST_LENGTH_18TRANSFERS
;;;2904     * @retval None
;;;2905     */
;;;2906   __STATIC_INLINE void LL_TIM_ConfigDMABurst(TIM_TypeDef *TIMx, uint32_t DMABurstBaseAddress, uint32_t DMABurstLength)
;;;2907   {
;;;2908     MODIFY_REG(TIMx->DCR, TIM_DCR_DBL | TIM_DCR_DBA, DMABurstBaseAddress | DMABurstLength);
;;;2909   }
;;;2910   
;;;2911   /**
;;;2912     * @}
;;;2913     */
;;;2914   
;;;2915   
;;;2916   /**
;;;2917     * @}
;;;2918     */
;;;2919   
;;;2920   
;;;2921   /** @defgroup TIM_LL_EF_FLAG_Management FLAG-Management
;;;2922     * @{
;;;2923     */
;;;2924   /**
;;;2925     * @brief  Clear the update interrupt flag (UIF).
;;;2926     * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
;;;2927     * @param  TIMx Timer instance
;;;2928     * @retval None
;;;2929     */
;;;2930   __STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
;;;2931   {
;;;2932     WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
;;;2933   }
;;;2934   
;;;2935   /**
;;;2936     * @brief  Indicate whether update interrupt flag (UIF) is set (update interrupt is pending).
;;;2937     * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
;;;2938     * @param  TIMx Timer instance
;;;2939     * @retval State of bit (1 or 0).
;;;2940     */
;;;2941   __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
;;;2942   {
;;;2943     return (READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF));
;;;2944   }
;;;2945   
;;;2946   /**
;;;2947     * @brief  Clear the Capture/Compare 1 interrupt flag (CC1F).
;;;2948     * @rmtoll SR           CC1IF         LL_TIM_ClearFlag_CC1
;;;2949     * @param  TIMx Timer instance
;;;2950     * @retval None
;;;2951     */
;;;2952   __STATIC_INLINE void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
;;;2953   {
;;;2954     WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
;;;2955   }
;;;2956   
;;;2957   /**
;;;2958     * @brief  Indicate whether Capture/Compare 1 interrupt flag (CC1F) is set (Capture/Compare 1 interrupt is pending).
;;;2959     * @rmtoll SR           CC1IF         LL_TIM_IsActiveFlag_CC1
;;;2960     * @param  TIMx Timer instance
;;;2961     * @retval State of bit (1 or 0).
;;;2962     */
;;;2963   __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC1(TIM_TypeDef *TIMx)
;;;2964   {
;;;2965     return (READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF));
;;;2966   }
;;;2967   
;;;2968   /**
;;;2969     * @brief  Clear the Capture/Compare 2 interrupt flag (CC2F).
;;;2970     * @rmtoll SR           CC2IF         LL_TIM_ClearFlag_CC2
;;;2971     * @param  TIMx Timer instance
;;;2972     * @retval None
;;;2973     */
;;;2974   __STATIC_INLINE void LL_TIM_ClearFlag_CC2(TIM_TypeDef *TIMx)
;;;2975   {
;;;2976     WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
;;;2977   }
;;;2978   
;;;2979   /**
;;;2980     * @brief  Indicate whether Capture/Compare 2 interrupt flag (CC2F) is set (Capture/Compare 2 interrupt is pending).
;;;2981     * @rmtoll SR           CC2IF         LL_TIM_IsActiveFlag_CC2
;;;2982     * @param  TIMx Timer instance
;;;2983     * @retval State of bit (1 or 0).
;;;2984     */
;;;2985   __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC2(TIM_TypeDef *TIMx)
;;;2986   {
;;;2987     return (READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF));
;;;2988   }
;;;2989   
;;;2990   /**
;;;2991     * @brief  Clear the Capture/Compare 3 interrupt flag (CC3F).
;;;2992     * @rmtoll SR           CC3IF         LL_TIM_ClearFlag_CC3
;;;2993     * @param  TIMx Timer instance
;;;2994     * @retval None
;;;2995     */
;;;2996   __STATIC_INLINE void LL_TIM_ClearFlag_CC3(TIM_TypeDef *TIMx)
;;;2997   {
;;;2998     WRITE_REG(TIMx->SR, ~(TIM_SR_CC3IF));
;;;2999   }
;;;3000   
;;;3001   /**
;;;3002     * @brief  Indicate whether Capture/Compare 3 interrupt flag (CC3F) is set (Capture/Compare 3 interrupt is pending).
;;;3003     * @rmtoll SR           CC3IF         LL_TIM_IsActiveFlag_CC3
;;;3004     * @param  TIMx Timer instance
;;;3005     * @retval State of bit (1 or 0).
;;;3006     */
;;;3007   __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC3(TIM_TypeDef *TIMx)
;;;3008   {
;;;3009     return (READ_BIT(TIMx->SR, TIM_SR_CC3IF) == (TIM_SR_CC3IF));
;;;3010   }
;;;3011   
;;;3012   /**
;;;3013     * @brief  Clear the Capture/Compare 4 interrupt flag (CC4F).
;;;3014     * @rmtoll SR           CC4IF         LL_TIM_ClearFlag_CC4
;;;3015     * @param  TIMx Timer instance
;;;3016     * @retval None
;;;3017     */
;;;3018   __STATIC_INLINE void LL_TIM_ClearFlag_CC4(TIM_TypeDef *TIMx)
;;;3019   {
;;;3020     WRITE_REG(TIMx->SR, ~(TIM_SR_CC4IF));
;;;3021   }
;;;3022   
;;;3023   /**
;;;3024     * @brief  Indicate whether Capture/Compare 4 interrupt flag (CC4F) is set (Capture/Compare 4 interrupt is pending).
;;;3025     * @rmtoll SR           CC4IF         LL_TIM_IsActiveFlag_CC4
;;;3026     * @param  TIMx Timer instance
;;;3027     * @retval State of bit (1 or 0).
;;;3028     */
;;;3029   __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC4(TIM_TypeDef *TIMx)
;;;3030   {
;;;3031     return (READ_BIT(TIMx->SR, TIM_SR_CC4IF) == (TIM_SR_CC4IF));
;;;3032   }
;;;3033   
;;;3034   /**
;;;3035     * @brief  Clear the commutation interrupt flag (COMIF).
;;;3036     * @rmtoll SR           COMIF         LL_TIM_ClearFlag_COM
;;;3037     * @param  TIMx Timer instance
;;;3038     * @retval None
;;;3039     */
;;;3040   __STATIC_INLINE void LL_TIM_ClearFlag_COM(TIM_TypeDef *TIMx)
;;;3041   {
;;;3042     WRITE_REG(TIMx->SR, ~(TIM_SR_COMIF));
;;;3043   }
;;;3044   
;;;3045   /**
;;;3046     * @brief  Indicate whether commutation interrupt flag (COMIF) is set (commutation interrupt is pending).
;;;3047     * @rmtoll SR           COMIF         LL_TIM_IsActiveFlag_COM
;;;3048     * @param  TIMx Timer instance
;;;3049     * @retval State of bit (1 or 0).
;;;3050     */
;;;3051   __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_COM(TIM_TypeDef *TIMx)
;;;3052   {
;;;3053     return (READ_BIT(TIMx->SR, TIM_SR_COMIF) == (TIM_SR_COMIF));
;;;3054   }
;;;3055   
;;;3056   /**
;;;3057     * @brief  Clear the trigger interrupt flag (TIF).
;;;3058     * @rmtoll SR           TIF           LL_TIM_ClearFlag_TRIG
;;;3059     * @param  TIMx Timer instance
;;;3060     * @retval None
;;;3061     */
;;;3062   __STATIC_INLINE void LL_TIM_ClearFlag_TRIG(TIM_TypeDef *TIMx)
;;;3063   {
;;;3064     WRITE_REG(TIMx->SR, ~(TIM_SR_TIF));
;;;3065   }
;;;3066   
;;;3067   /**
;;;3068     * @brief  Indicate whether trigger interrupt flag (TIF) is set (trigger interrupt is pending).
;;;3069     * @rmtoll SR           TIF           LL_TIM_IsActiveFlag_TRIG
;;;3070     * @param  TIMx Timer instance
;;;3071     * @retval State of bit (1 or 0).
;;;3072     */
;;;3073   __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_TRIG(TIM_TypeDef *TIMx)
;;;3074   {
;;;3075     return (READ_BIT(TIMx->SR, TIM_SR_TIF) == (TIM_SR_TIF));
;;;3076   }
;;;3077   
;;;3078   /**
;;;3079     * @brief  Clear the break interrupt flag (BIF).
;;;3080     * @rmtoll SR           BIF           LL_TIM_ClearFlag_BRK
;;;3081     * @param  TIMx Timer instance
;;;3082     * @retval None
;;;3083     */
;;;3084   __STATIC_INLINE void LL_TIM_ClearFlag_BRK(TIM_TypeDef *TIMx)
;;;3085   {
;;;3086     WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
;;;3087   }
;;;3088   
;;;3089   /**
;;;3090     * @brief  Indicate whether break interrupt flag (BIF) is set (break interrupt is pending).
;;;3091     * @rmtoll SR           BIF           LL_TIM_IsActiveFlag_BRK
;;;3092     * @param  TIMx Timer instance
;;;3093     * @retval State of bit (1 or 0).
;;;3094     */
;;;3095   __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
;;;3096   {
;;;3097     return (READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF));
;;;3098   }
;;;3099   
;;;3100   /**
;;;3101     * @brief  Clear the Capture/Compare 1 over-capture interrupt flag (CC1OF).
;;;3102     * @rmtoll SR           CC1OF         LL_TIM_ClearFlag_CC1OVR
;;;3103     * @param  TIMx Timer instance
;;;3104     * @retval None
;;;3105     */
;;;3106   __STATIC_INLINE void LL_TIM_ClearFlag_CC1OVR(TIM_TypeDef *TIMx)
;;;3107   {
;;;3108     WRITE_REG(TIMx->SR, ~(TIM_SR_CC1OF));
;;;3109   }
;;;3110   
;;;3111   /**
;;;3112     * @brief  Indicate whether Capture/Compare 1 over-capture interrupt flag (CC1OF) is set (Capture/Compare 1 interrupt is pending).
;;;3113     * @rmtoll SR           CC1OF         LL_TIM_IsActiveFlag_CC1OVR
;;;3114     * @param  TIMx Timer instance
;;;3115     * @retval State of bit (1 or 0).
;;;3116     */
;;;3117   __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC1OVR(TIM_TypeDef *TIMx)
;;;3118   {
;;;3119     return (READ_BIT(TIMx->SR, TIM_SR_CC1OF) == (TIM_SR_CC1OF));
;;;3120   }
;;;3121   
;;;3122   /**
;;;3123     * @brief  Clear the Capture/Compare 2 over-capture interrupt flag (CC2OF).
;;;3124     * @rmtoll SR           CC2OF         LL_TIM_ClearFlag_CC2OVR
;;;3125     * @param  TIMx Timer instance
;;;3126     * @retval None
;;;3127     */
;;;3128   __STATIC_INLINE void LL_TIM_ClearFlag_CC2OVR(TIM_TypeDef *TIMx)
;;;3129   {
;;;3130     WRITE_REG(TIMx->SR, ~(TIM_SR_CC2OF));
;;;3131   }
;;;3132   
;;;3133   /**
;;;3134     * @brief  Indicate whether Capture/Compare 2 over-capture interrupt flag (CC2OF) is set (Capture/Compare 2 over-capture interrupt is pending).
;;;3135     * @rmtoll SR           CC2OF         LL_TIM_IsActiveFlag_CC2OVR
;;;3136     * @param  TIMx Timer instance
;;;3137     * @retval State of bit (1 or 0).
;;;3138     */
;;;3139   __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC2OVR(TIM_TypeDef *TIMx)
;;;3140   {
;;;3141     return (READ_BIT(TIMx->SR, TIM_SR_CC2OF) == (TIM_SR_CC2OF));
;;;3142   }
;;;3143   
;;;3144   /**
;;;3145     * @brief  Clear the Capture/Compare 3 over-capture interrupt flag (CC3OF).
;;;3146     * @rmtoll SR           CC3OF         LL_TIM_ClearFlag_CC3OVR
;;;3147     * @param  TIMx Timer instance
;;;3148     * @retval None
;;;3149     */
;;;3150   __STATIC_INLINE void LL_TIM_ClearFlag_CC3OVR(TIM_TypeDef *TIMx)
;;;3151   {
;;;3152     WRITE_REG(TIMx->SR, ~(TIM_SR_CC3OF));
;;;3153   }
;;;3154   
;;;3155   /**
;;;3156     * @brief  Indicate whether Capture/Compare 3 over-capture interrupt flag (CC3OF) is set (Capture/Compare 3 over-capture interrupt is pending).
;;;3157     * @rmtoll SR           CC3OF         LL_TIM_IsActiveFlag_CC3OVR
;;;3158     * @param  TIMx Timer instance
;;;3159     * @retval State of bit (1 or 0).
;;;3160     */
;;;3161   __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC3OVR(TIM_TypeDef *TIMx)
;;;3162   {
;;;3163     return (READ_BIT(TIMx->SR, TIM_SR_CC3OF) == (TIM_SR_CC3OF));
;;;3164   }
;;;3165   
;;;3166   /**
;;;3167     * @brief  Clear the Capture/Compare 4 over-capture interrupt flag (CC4OF).
;;;3168     * @rmtoll SR           CC4OF         LL_TIM_ClearFlag_CC4OVR
;;;3169     * @param  TIMx Timer instance
;;;3170     * @retval None
;;;3171     */
;;;3172   __STATIC_INLINE void LL_TIM_ClearFlag_CC4OVR(TIM_TypeDef *TIMx)
;;;3173   {
;;;3174     WRITE_REG(TIMx->SR, ~(TIM_SR_CC4OF));
;;;3175   }
;;;3176   
;;;3177   /**
;;;3178     * @brief  Indicate whether Capture/Compare 4 over-capture interrupt flag (CC4OF) is set (Capture/Compare 4 over-capture interrupt is pending).
;;;3179     * @rmtoll SR           CC4OF         LL_TIM_IsActiveFlag_CC4OVR
;;;3180     * @param  TIMx Timer instance
;;;3181     * @retval State of bit (1 or 0).
;;;3182     */
;;;3183   __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC4OVR(TIM_TypeDef *TIMx)
;;;3184   {
;;;3185     return (READ_BIT(TIMx->SR, TIM_SR_CC4OF) == (TIM_SR_CC4OF));
;;;3186   }
;;;3187   
;;;3188   /**
;;;3189     * @}
;;;3190     */
;;;3191   
;;;3192   /** @defgroup TIM_LL_EF_IT_Management IT-Management
;;;3193     * @{
;;;3194     */
;;;3195   /**
;;;3196     * @brief  Enable update interrupt (UIE).
;;;3197     * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
;;;3198     * @param  TIMx Timer instance
;;;3199     * @retval None
;;;3200     */
;;;3201   __STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
;;;3202   {
;;;3203     SET_BIT(TIMx->DIER, TIM_DIER_UIE);
        0x08000800:    68c1        .h      LDR      r1,[r0,#0xc]
        0x08000802:    f0410101    A...    ORR      r1,r1,#1
        0x08000806:    60c1        .`      STR      r1,[r0,#0xc]
        0x08000808:    4770        pG      BX       lr
    i.LL_TIM_EnableMasterSlaveMode
    LL_TIM_EnableMasterSlaveMode
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h (2631)
        0x0800080a:    6881        .h      LDR      r1,[r0,#8]
        0x0800080c:    f0410180    A...    ORR      r1,r1,#0x80
        0x08000810:    6081        .`      STR      r1,[r0,#8]
;;;2632   }
        0x08000812:    4770        pG      BX       lr
    i.LL_TIM_GenerateEvent_UPDATE
    LL_TIM_GenerateEvent_UPDATE
;;;2633   
;;;2634   /**
;;;2635     * @brief  Disable the Master/Slave mode.
;;;2636     * @note Macro @ref IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
;;;2637     *       a timer instance can operate as a slave timer.
;;;2638     * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
;;;2639     * @param  TIMx Timer instance
;;;2640     * @retval None
;;;2641     */
;;;2642   __STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
;;;2643   {
;;;2644     CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
;;;2645   }
;;;2646   
;;;2647   /**
;;;2648     * @brief Indicates whether the Master/Slave mode is enabled.
;;;2649     * @note Macro @ref IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
;;;2650     * a timer instance can operate as a slave timer.
;;;2651     * @rmtoll SMCR         MSM           LL_TIM_IsEnabledMasterSlaveMode
;;;2652     * @param  TIMx Timer instance
;;;2653     * @retval State of bit (1 or 0).
;;;2654     */
;;;2655   __STATIC_INLINE uint32_t LL_TIM_IsEnabledMasterSlaveMode(TIM_TypeDef *TIMx)
;;;2656   {
;;;2657     return (READ_BIT(TIMx->SMCR, TIM_SMCR_MSM) == (TIM_SMCR_MSM));
;;;2658   }
;;;2659   
;;;2660   /**
;;;2661     * @brief  Configure the external trigger (ETR) input.
;;;2662     * @note Macro @ref IS_TIM_ETR_INSTANCE(TIMx) can be used to check whether or not
;;;2663     *       a timer instance provides an external trigger input.
;;;2664     * @rmtoll SMCR         ETP           LL_TIM_ConfigETR\n
;;;2665     *         SMCR         ETPS          LL_TIM_ConfigETR\n
;;;2666     *         SMCR         ETF           LL_TIM_ConfigETR
;;;2667     * @param  TIMx Timer instance
;;;2668     * @param  ETRPolarity This parameter can be one of the following values:
;;;2669     *         @arg @ref LL_TIM_ETR_POLARITY_NONINVERTED
;;;2670     *         @arg @ref LL_TIM_ETR_POLARITY_INVERTED
;;;2671     * @param  ETRPrescaler This parameter can be one of the following values:
;;;2672     *         @arg @ref LL_TIM_ETR_PRESCALER_DIV1
;;;2673     *         @arg @ref LL_TIM_ETR_PRESCALER_DIV2
;;;2674     *         @arg @ref LL_TIM_ETR_PRESCALER_DIV4
;;;2675     *         @arg @ref LL_TIM_ETR_PRESCALER_DIV8
;;;2676     * @param  ETRFilter This parameter can be one of the following values:
;;;2677     *         @arg @ref LL_TIM_ETR_FILTER_FDIV1
;;;2678     *         @arg @ref LL_TIM_ETR_FILTER_FDIV1_N2
;;;2679     *         @arg @ref LL_TIM_ETR_FILTER_FDIV1_N4
;;;2680     *         @arg @ref LL_TIM_ETR_FILTER_FDIV1_N8
;;;2681     *         @arg @ref LL_TIM_ETR_FILTER_FDIV2_N6
;;;2682     *         @arg @ref LL_TIM_ETR_FILTER_FDIV2_N8
;;;2683     *         @arg @ref LL_TIM_ETR_FILTER_FDIV4_N6
;;;2684     *         @arg @ref LL_TIM_ETR_FILTER_FDIV4_N8
;;;2685     *         @arg @ref LL_TIM_ETR_FILTER_FDIV8_N6
;;;2686     *         @arg @ref LL_TIM_ETR_FILTER_FDIV8_N8
;;;2687     *         @arg @ref LL_TIM_ETR_FILTER_FDIV16_N5
;;;2688     *         @arg @ref LL_TIM_ETR_FILTER_FDIV16_N6
;;;2689     *         @arg @ref LL_TIM_ETR_FILTER_FDIV16_N8
;;;2690     *         @arg @ref LL_TIM_ETR_FILTER_FDIV32_N5
;;;2691     *         @arg @ref LL_TIM_ETR_FILTER_FDIV32_N6
;;;2692     *         @arg @ref LL_TIM_ETR_FILTER_FDIV32_N8
;;;2693     * @retval None
;;;2694     */
;;;2695   __STATIC_INLINE void LL_TIM_ConfigETR(TIM_TypeDef *TIMx, uint32_t ETRPolarity, uint32_t ETRPrescaler,
;;;2696                                         uint32_t ETRFilter)
;;;2697   {
;;;2698     MODIFY_REG(TIMx->SMCR, TIM_SMCR_ETP | TIM_SMCR_ETPS | TIM_SMCR_ETF, ETRPolarity | ETRPrescaler | ETRFilter);
;;;2699   }
;;;2700   
;;;2701   /**
;;;2702     * @}
;;;2703     */
;;;2704   
;;;2705   /** @defgroup TIM_LL_EF_Break_Function Break function configuration
;;;2706     * @{
;;;2707     */
;;;2708   /**
;;;2709     * @brief  Enable the break function.
;;;2710     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;2711     *       a timer instance provides a break input.
;;;2712     * @rmtoll BDTR         BKE           LL_TIM_EnableBRK
;;;2713     * @param  TIMx Timer instance
;;;2714     * @retval None
;;;2715     */
;;;2716   __STATIC_INLINE void LL_TIM_EnableBRK(TIM_TypeDef *TIMx)
;;;2717   {
;;;2718     SET_BIT(TIMx->BDTR, TIM_BDTR_BKE);
;;;2719   }
;;;2720   
;;;2721   /**
;;;2722     * @brief  Disable the break function.
;;;2723     * @rmtoll BDTR         BKE           LL_TIM_DisableBRK
;;;2724     * @param  TIMx Timer instance
;;;2725     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;2726     *       a timer instance provides a break input.
;;;2727     * @retval None
;;;2728     */
;;;2729   __STATIC_INLINE void LL_TIM_DisableBRK(TIM_TypeDef *TIMx)
;;;2730   {
;;;2731     CLEAR_BIT(TIMx->BDTR, TIM_BDTR_BKE);
;;;2732   }
;;;2733   
;;;2734   /**
;;;2735     * @brief  Configure the break input.
;;;2736     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;2737     *       a timer instance provides a break input.
;;;2738     * @rmtoll BDTR         BKP           LL_TIM_ConfigBRK
;;;2739     * @param  TIMx Timer instance
;;;2740     * @param  BreakPolarity This parameter can be one of the following values:
;;;2741     *         @arg @ref LL_TIM_BREAK_POLARITY_LOW
;;;2742     *         @arg @ref LL_TIM_BREAK_POLARITY_HIGH
;;;2743     * @retval None
;;;2744     */
;;;2745   __STATIC_INLINE void LL_TIM_ConfigBRK(TIM_TypeDef *TIMx, uint32_t BreakPolarity)
;;;2746   {
;;;2747     MODIFY_REG(TIMx->BDTR, TIM_BDTR_BKP, BreakPolarity);
;;;2748   }
;;;2749   
;;;2750   /**
;;;2751     * @brief  Select the outputs off state (enabled v.s. disabled) in Idle and Run modes.
;;;2752     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;2753     *       a timer instance provides a break input.
;;;2754     * @rmtoll BDTR         OSSI          LL_TIM_SetOffStates\n
;;;2755     *         BDTR         OSSR          LL_TIM_SetOffStates
;;;2756     * @param  TIMx Timer instance
;;;2757     * @param  OffStateIdle This parameter can be one of the following values:
;;;2758     *         @arg @ref LL_TIM_OSSI_DISABLE
;;;2759     *         @arg @ref LL_TIM_OSSI_ENABLE
;;;2760     * @param  OffStateRun This parameter can be one of the following values:
;;;2761     *         @arg @ref LL_TIM_OSSR_DISABLE
;;;2762     *         @arg @ref LL_TIM_OSSR_ENABLE
;;;2763     * @retval None
;;;2764     */
;;;2765   __STATIC_INLINE void LL_TIM_SetOffStates(TIM_TypeDef *TIMx, uint32_t OffStateIdle, uint32_t OffStateRun)
;;;2766   {
;;;2767     MODIFY_REG(TIMx->BDTR, TIM_BDTR_OSSI | TIM_BDTR_OSSR, OffStateIdle | OffStateRun);
;;;2768   }
;;;2769   
;;;2770   /**
;;;2771     * @brief  Enable automatic output (MOE can be set by software or automatically when a break input is active).
;;;2772     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;2773     *       a timer instance provides a break input.
;;;2774     * @rmtoll BDTR         AOE           LL_TIM_EnableAutomaticOutput
;;;2775     * @param  TIMx Timer instance
;;;2776     * @retval None
;;;2777     */
;;;2778   __STATIC_INLINE void LL_TIM_EnableAutomaticOutput(TIM_TypeDef *TIMx)
;;;2779   {
;;;2780     SET_BIT(TIMx->BDTR, TIM_BDTR_AOE);
;;;2781   }
;;;2782   
;;;2783   /**
;;;2784     * @brief  Disable automatic output (MOE can be set only by software).
;;;2785     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;2786     *       a timer instance provides a break input.
;;;2787     * @rmtoll BDTR         AOE           LL_TIM_DisableAutomaticOutput
;;;2788     * @param  TIMx Timer instance
;;;2789     * @retval None
;;;2790     */
;;;2791   __STATIC_INLINE void LL_TIM_DisableAutomaticOutput(TIM_TypeDef *TIMx)
;;;2792   {
;;;2793     CLEAR_BIT(TIMx->BDTR, TIM_BDTR_AOE);
;;;2794   }
;;;2795   
;;;2796   /**
;;;2797     * @brief  Indicate whether automatic output is enabled.
;;;2798     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;2799     *       a timer instance provides a break input.
;;;2800     * @rmtoll BDTR         AOE           LL_TIM_IsEnabledAutomaticOutput
;;;2801     * @param  TIMx Timer instance
;;;2802     * @retval State of bit (1 or 0).
;;;2803     */
;;;2804   __STATIC_INLINE uint32_t LL_TIM_IsEnabledAutomaticOutput(TIM_TypeDef *TIMx)
;;;2805   {
;;;2806     return (READ_BIT(TIMx->BDTR, TIM_BDTR_AOE) == (TIM_BDTR_AOE));
;;;2807   }
;;;2808   
;;;2809   /**
;;;2810     * @brief  Enable the outputs (set the MOE bit in TIMx_BDTR register).
;;;2811     * @note The MOE bit in TIMx_BDTR register allows to enable /disable the outputs by
;;;2812     *       software and is reset in case of break or break2 event
;;;2813     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;2814     *       a timer instance provides a break input.
;;;2815     * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
;;;2816     * @param  TIMx Timer instance
;;;2817     * @retval None
;;;2818     */
;;;2819   __STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
;;;2820   {
;;;2821     SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
;;;2822   }
;;;2823   
;;;2824   /**
;;;2825     * @brief  Disable the outputs (reset the MOE bit in TIMx_BDTR register).
;;;2826     * @note The MOE bit in TIMx_BDTR register allows to enable /disable the outputs by
;;;2827     *       software and is reset in case of break or break2 event.
;;;2828     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;2829     *       a timer instance provides a break input.
;;;2830     * @rmtoll BDTR         MOE           LL_TIM_DisableAllOutputs
;;;2831     * @param  TIMx Timer instance
;;;2832     * @retval None
;;;2833     */
;;;2834   __STATIC_INLINE void LL_TIM_DisableAllOutputs(TIM_TypeDef *TIMx)
;;;2835   {
;;;2836     CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
;;;2837   }
;;;2838   
;;;2839   /**
;;;2840     * @brief  Indicates whether outputs are enabled.
;;;2841     * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
;;;2842     *       a timer instance provides a break input.
;;;2843     * @rmtoll BDTR         MOE           LL_TIM_IsEnabledAllOutputs
;;;2844     * @param  TIMx Timer instance
;;;2845     * @retval State of bit (1 or 0).
;;;2846     */
;;;2847   __STATIC_INLINE uint32_t LL_TIM_IsEnabledAllOutputs(TIM_TypeDef *TIMx)
;;;2848   {
;;;2849     return (READ_BIT(TIMx->BDTR, TIM_BDTR_MOE) == (TIM_BDTR_MOE));
;;;2850   }
;;;2851   
;;;2852   /**
;;;2853     * @}
;;;2854     */
;;;2855   
;;;2856   /** @defgroup TIM_LL_EF_DMA_Burst_Mode DMA burst mode configuration
;;;2857     * @{
;;;2858     */
;;;2859   /**
;;;2860     * @brief  Configures the timer DMA burst feature.
;;;2861     * @note Macro @ref IS_TIM_DMABURST_INSTANCE(TIMx) can be used to check whether or
;;;2862     *       not a timer instance supports the DMA burst mode.
;;;2863     * @rmtoll DCR          DBL           LL_TIM_ConfigDMABurst\n
;;;2864     *         DCR          DBA           LL_TIM_ConfigDMABurst
;;;2865     * @param  TIMx Timer instance
;;;2866     * @param  DMABurstBaseAddress This parameter can be one of the following values:
;;;2867     *         @arg @ref LL_TIM_DMABURST_BASEADDR_CR1
;;;2868     *         @arg @ref LL_TIM_DMABURST_BASEADDR_CR2
;;;2869     *         @arg @ref LL_TIM_DMABURST_BASEADDR_SMCR
;;;2870     *         @arg @ref LL_TIM_DMABURST_BASEADDR_DIER
;;;2871     *         @arg @ref LL_TIM_DMABURST_BASEADDR_SR
;;;2872     *         @arg @ref LL_TIM_DMABURST_BASEADDR_EGR
;;;2873     *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCMR1
;;;2874     *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCMR2
;;;2875     *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCER
;;;2876     *         @arg @ref LL_TIM_DMABURST_BASEADDR_CNT
;;;2877     *         @arg @ref LL_TIM_DMABURST_BASEADDR_PSC
;;;2878     *         @arg @ref LL_TIM_DMABURST_BASEADDR_ARR
;;;2879     *         @arg @ref LL_TIM_DMABURST_BASEADDR_RCR
;;;2880     *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCR1
;;;2881     *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCR2
;;;2882     *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCR3
;;;2883     *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCR4
;;;2884     *         @arg @ref LL_TIM_DMABURST_BASEADDR_BDTR
;;;2885     * @param  DMABurstLength This parameter can be one of the following values:
;;;2886     *         @arg @ref LL_TIM_DMABURST_LENGTH_1TRANSFER
;;;2887     *         @arg @ref LL_TIM_DMABURST_LENGTH_2TRANSFERS
;;;2888     *         @arg @ref LL_TIM_DMABURST_LENGTH_3TRANSFERS
;;;2889     *         @arg @ref LL_TIM_DMABURST_LENGTH_4TRANSFERS
;;;2890     *         @arg @ref LL_TIM_DMABURST_LENGTH_5TRANSFERS
;;;2891     *         @arg @ref LL_TIM_DMABURST_LENGTH_6TRANSFERS
;;;2892     *         @arg @ref LL_TIM_DMABURST_LENGTH_7TRANSFERS
;;;2893     *         @arg @ref LL_TIM_DMABURST_LENGTH_8TRANSFERS
;;;2894     *         @arg @ref LL_TIM_DMABURST_LENGTH_9TRANSFERS
;;;2895     *         @arg @ref LL_TIM_DMABURST_LENGTH_10TRANSFERS
;;;2896     *         @arg @ref LL_TIM_DMABURST_LENGTH_11TRANSFERS
;;;2897     *         @arg @ref LL_TIM_DMABURST_LENGTH_12TRANSFERS
;;;2898     *         @arg @ref LL_TIM_DMABURST_LENGTH_13TRANSFERS
;;;2899     *         @arg @ref LL_TIM_DMABURST_LENGTH_14TRANSFERS
;;;2900     *         @arg @ref LL_TIM_DMABURST_LENGTH_15TRANSFERS
;;;2901     *         @arg @ref LL_TIM_DMABURST_LENGTH_16TRANSFERS
;;;2902     *         @arg @ref LL_TIM_DMABURST_LENGTH_17TRANSFERS
;;;2903     *         @arg @ref LL_TIM_DMABURST_LENGTH_18TRANSFERS
;;;2904     * @retval None
;;;2905     */
;;;2906   __STATIC_INLINE void LL_TIM_ConfigDMABurst(TIM_TypeDef *TIMx, uint32_t DMABurstBaseAddress, uint32_t DMABurstLength)
;;;2907   {
;;;2908     MODIFY_REG(TIMx->DCR, TIM_DCR_DBL | TIM_DCR_DBA, DMABurstBaseAddress | DMABurstLength);
;;;2909   }
;;;2910   
;;;2911   /**
;;;2912     * @}
;;;2913     */
;;;2914   
;;;2915   
;;;2916   /**
;;;2917     * @}
;;;2918     */
;;;2919   
;;;2920   
;;;2921   /** @defgroup TIM_LL_EF_FLAG_Management FLAG-Management
;;;2922     * @{
;;;2923     */
;;;2924   /**
;;;2925     * @brief  Clear the update interrupt flag (UIF).
;;;2926     * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
;;;2927     * @param  TIMx Timer instance
;;;2928     * @retval None
;;;2929     */
;;;2930   __STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
;;;2931   {
;;;2932     WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
;;;2933   }
;;;2934   
;;;2935   /**
;;;2936     * @brief  Indicate whether update interrupt flag (UIF) is set (update interrupt is pending).
;;;2937     * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
;;;2938     * @param  TIMx Timer instance
;;;2939     * @retval State of bit (1 or 0).
;;;2940     */
;;;2941   __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
;;;2942   {
;;;2943     return (READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF));
;;;2944   }
;;;2945   
;;;2946   /**
;;;2947     * @brief  Clear the Capture/Compare 1 interrupt flag (CC1F).
;;;2948     * @rmtoll SR           CC1IF         LL_TIM_ClearFlag_CC1
;;;2949     * @param  TIMx Timer instance
;;;2950     * @retval None
;;;2951     */
;;;2952   __STATIC_INLINE void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
;;;2953   {
;;;2954     WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
;;;2955   }
;;;2956   
;;;2957   /**
;;;2958     * @brief  Indicate whether Capture/Compare 1 interrupt flag (CC1F) is set (Capture/Compare 1 interrupt is pending).
;;;2959     * @rmtoll SR           CC1IF         LL_TIM_IsActiveFlag_CC1
;;;2960     * @param  TIMx Timer instance
;;;2961     * @retval State of bit (1 or 0).
;;;2962     */
;;;2963   __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC1(TIM_TypeDef *TIMx)
;;;2964   {
;;;2965     return (READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF));
;;;2966   }
;;;2967   
;;;2968   /**
;;;2969     * @brief  Clear the Capture/Compare 2 interrupt flag (CC2F).
;;;2970     * @rmtoll SR           CC2IF         LL_TIM_ClearFlag_CC2
;;;2971     * @param  TIMx Timer instance
;;;2972     * @retval None
;;;2973     */
;;;2974   __STATIC_INLINE void LL_TIM_ClearFlag_CC2(TIM_TypeDef *TIMx)
;;;2975   {
;;;2976     WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
;;;2977   }
;;;2978   
;;;2979   /**
;;;2980     * @brief  Indicate whether Capture/Compare 2 interrupt flag (CC2F) is set (Capture/Compare 2 interrupt is pending).
;;;2981     * @rmtoll SR           CC2IF         LL_TIM_IsActiveFlag_CC2
;;;2982     * @param  TIMx Timer instance
;;;2983     * @retval State of bit (1 or 0).
;;;2984     */
;;;2985   __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC2(TIM_TypeDef *TIMx)
;;;2986   {
;;;2987     return (READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF));
;;;2988   }
;;;2989   
;;;2990   /**
;;;2991     * @brief  Clear the Capture/Compare 3 interrupt flag (CC3F).
;;;2992     * @rmtoll SR           CC3IF         LL_TIM_ClearFlag_CC3
;;;2993     * @param  TIMx Timer instance
;;;2994     * @retval None
;;;2995     */
;;;2996   __STATIC_INLINE void LL_TIM_ClearFlag_CC3(TIM_TypeDef *TIMx)
;;;2997   {
;;;2998     WRITE_REG(TIMx->SR, ~(TIM_SR_CC3IF));
;;;2999   }
;;;3000   
;;;3001   /**
;;;3002     * @brief  Indicate whether Capture/Compare 3 interrupt flag (CC3F) is set (Capture/Compare 3 interrupt is pending).
;;;3003     * @rmtoll SR           CC3IF         LL_TIM_IsActiveFlag_CC3
;;;3004     * @param  TIMx Timer instance
;;;3005     * @retval State of bit (1 or 0).
;;;3006     */
;;;3007   __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC3(TIM_TypeDef *TIMx)
;;;3008   {
;;;3009     return (READ_BIT(TIMx->SR, TIM_SR_CC3IF) == (TIM_SR_CC3IF));
;;;3010   }
;;;3011   
;;;3012   /**
;;;3013     * @brief  Clear the Capture/Compare 4 interrupt flag (CC4F).
;;;3014     * @rmtoll SR           CC4IF         LL_TIM_ClearFlag_CC4
;;;3015     * @param  TIMx Timer instance
;;;3016     * @retval None
;;;3017     */
;;;3018   __STATIC_INLINE void LL_TIM_ClearFlag_CC4(TIM_TypeDef *TIMx)
;;;3019   {
;;;3020     WRITE_REG(TIMx->SR, ~(TIM_SR_CC4IF));
;;;3021   }
;;;3022   
;;;3023   /**
;;;3024     * @brief  Indicate whether Capture/Compare 4 interrupt flag (CC4F) is set (Capture/Compare 4 interrupt is pending).
;;;3025     * @rmtoll SR           CC4IF         LL_TIM_IsActiveFlag_CC4
;;;3026     * @param  TIMx Timer instance
;;;3027     * @retval State of bit (1 or 0).
;;;3028     */
;;;3029   __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC4(TIM_TypeDef *TIMx)
;;;3030   {
;;;3031     return (READ_BIT(TIMx->SR, TIM_SR_CC4IF) == (TIM_SR_CC4IF));
;;;3032   }
;;;3033   
;;;3034   /**
;;;3035     * @brief  Clear the commutation interrupt flag (COMIF).
;;;3036     * @rmtoll SR           COMIF         LL_TIM_ClearFlag_COM
;;;3037     * @param  TIMx Timer instance
;;;3038     * @retval None
;;;3039     */
;;;3040   __STATIC_INLINE void LL_TIM_ClearFlag_COM(TIM_TypeDef *TIMx)
;;;3041   {
;;;3042     WRITE_REG(TIMx->SR, ~(TIM_SR_COMIF));
;;;3043   }
;;;3044   
;;;3045   /**
;;;3046     * @brief  Indicate whether commutation interrupt flag (COMIF) is set (commutation interrupt is pending).
;;;3047     * @rmtoll SR           COMIF         LL_TIM_IsActiveFlag_COM
;;;3048     * @param  TIMx Timer instance
;;;3049     * @retval State of bit (1 or 0).
;;;3050     */
;;;3051   __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_COM(TIM_TypeDef *TIMx)
;;;3052   {
;;;3053     return (READ_BIT(TIMx->SR, TIM_SR_COMIF) == (TIM_SR_COMIF));
;;;3054   }
;;;3055   
;;;3056   /**
;;;3057     * @brief  Clear the trigger interrupt flag (TIF).
;;;3058     * @rmtoll SR           TIF           LL_TIM_ClearFlag_TRIG
;;;3059     * @param  TIMx Timer instance
;;;3060     * @retval None
;;;3061     */
;;;3062   __STATIC_INLINE void LL_TIM_ClearFlag_TRIG(TIM_TypeDef *TIMx)
;;;3063   {
;;;3064     WRITE_REG(TIMx->SR, ~(TIM_SR_TIF));
;;;3065   }
;;;3066   
;;;3067   /**
;;;3068     * @brief  Indicate whether trigger interrupt flag (TIF) is set (trigger interrupt is pending).
;;;3069     * @rmtoll SR           TIF           LL_TIM_IsActiveFlag_TRIG
;;;3070     * @param  TIMx Timer instance
;;;3071     * @retval State of bit (1 or 0).
;;;3072     */
;;;3073   __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_TRIG(TIM_TypeDef *TIMx)
;;;3074   {
;;;3075     return (READ_BIT(TIMx->SR, TIM_SR_TIF) == (TIM_SR_TIF));
;;;3076   }
;;;3077   
;;;3078   /**
;;;3079     * @brief  Clear the break interrupt flag (BIF).
;;;3080     * @rmtoll SR           BIF           LL_TIM_ClearFlag_BRK
;;;3081     * @param  TIMx Timer instance
;;;3082     * @retval None
;;;3083     */
;;;3084   __STATIC_INLINE void LL_TIM_ClearFlag_BRK(TIM_TypeDef *TIMx)
;;;3085   {
;;;3086     WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
;;;3087   }
;;;3088   
;;;3089   /**
;;;3090     * @brief  Indicate whether break interrupt flag (BIF) is set (break interrupt is pending).
;;;3091     * @rmtoll SR           BIF           LL_TIM_IsActiveFlag_BRK
;;;3092     * @param  TIMx Timer instance
;;;3093     * @retval State of bit (1 or 0).
;;;3094     */
;;;3095   __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
;;;3096   {
;;;3097     return (READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF));
;;;3098   }
;;;3099   
;;;3100   /**
;;;3101     * @brief  Clear the Capture/Compare 1 over-capture interrupt flag (CC1OF).
;;;3102     * @rmtoll SR           CC1OF         LL_TIM_ClearFlag_CC1OVR
;;;3103     * @param  TIMx Timer instance
;;;3104     * @retval None
;;;3105     */
;;;3106   __STATIC_INLINE void LL_TIM_ClearFlag_CC1OVR(TIM_TypeDef *TIMx)
;;;3107   {
;;;3108     WRITE_REG(TIMx->SR, ~(TIM_SR_CC1OF));
;;;3109   }
;;;3110   
;;;3111   /**
;;;3112     * @brief  Indicate whether Capture/Compare 1 over-capture interrupt flag (CC1OF) is set (Capture/Compare 1 interrupt is pending).
;;;3113     * @rmtoll SR           CC1OF         LL_TIM_IsActiveFlag_CC1OVR
;;;3114     * @param  TIMx Timer instance
;;;3115     * @retval State of bit (1 or 0).
;;;3116     */
;;;3117   __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC1OVR(TIM_TypeDef *TIMx)
;;;3118   {
;;;3119     return (READ_BIT(TIMx->SR, TIM_SR_CC1OF) == (TIM_SR_CC1OF));
;;;3120   }
;;;3121   
;;;3122   /**
;;;3123     * @brief  Clear the Capture/Compare 2 over-capture interrupt flag (CC2OF).
;;;3124     * @rmtoll SR           CC2OF         LL_TIM_ClearFlag_CC2OVR
;;;3125     * @param  TIMx Timer instance
;;;3126     * @retval None
;;;3127     */
;;;3128   __STATIC_INLINE void LL_TIM_ClearFlag_CC2OVR(TIM_TypeDef *TIMx)
;;;3129   {
;;;3130     WRITE_REG(TIMx->SR, ~(TIM_SR_CC2OF));
;;;3131   }
;;;3132   
;;;3133   /**
;;;3134     * @brief  Indicate whether Capture/Compare 2 over-capture interrupt flag (CC2OF) is set (Capture/Compare 2 over-capture interrupt is pending).
;;;3135     * @rmtoll SR           CC2OF         LL_TIM_IsActiveFlag_CC2OVR
;;;3136     * @param  TIMx Timer instance
;;;3137     * @retval State of bit (1 or 0).
;;;3138     */
;;;3139   __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC2OVR(TIM_TypeDef *TIMx)
;;;3140   {
;;;3141     return (READ_BIT(TIMx->SR, TIM_SR_CC2OF) == (TIM_SR_CC2OF));
;;;3142   }
;;;3143   
;;;3144   /**
;;;3145     * @brief  Clear the Capture/Compare 3 over-capture interrupt flag (CC3OF).
;;;3146     * @rmtoll SR           CC3OF         LL_TIM_ClearFlag_CC3OVR
;;;3147     * @param  TIMx Timer instance
;;;3148     * @retval None
;;;3149     */
;;;3150   __STATIC_INLINE void LL_TIM_ClearFlag_CC3OVR(TIM_TypeDef *TIMx)
;;;3151   {
;;;3152     WRITE_REG(TIMx->SR, ~(TIM_SR_CC3OF));
;;;3153   }
;;;3154   
;;;3155   /**
;;;3156     * @brief  Indicate whether Capture/Compare 3 over-capture interrupt flag (CC3OF) is set (Capture/Compare 3 over-capture interrupt is pending).
;;;3157     * @rmtoll SR           CC3OF         LL_TIM_IsActiveFlag_CC3OVR
;;;3158     * @param  TIMx Timer instance
;;;3159     * @retval State of bit (1 or 0).
;;;3160     */
;;;3161   __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC3OVR(TIM_TypeDef *TIMx)
;;;3162   {
;;;3163     return (READ_BIT(TIMx->SR, TIM_SR_CC3OF) == (TIM_SR_CC3OF));
;;;3164   }
;;;3165   
;;;3166   /**
;;;3167     * @brief  Clear the Capture/Compare 4 over-capture interrupt flag (CC4OF).
;;;3168     * @rmtoll SR           CC4OF         LL_TIM_ClearFlag_CC4OVR
;;;3169     * @param  TIMx Timer instance
;;;3170     * @retval None
;;;3171     */
;;;3172   __STATIC_INLINE void LL_TIM_ClearFlag_CC4OVR(TIM_TypeDef *TIMx)
;;;3173   {
;;;3174     WRITE_REG(TIMx->SR, ~(TIM_SR_CC4OF));
;;;3175   }
;;;3176   
;;;3177   /**
;;;3178     * @brief  Indicate whether Capture/Compare 4 over-capture interrupt flag (CC4OF) is set (Capture/Compare 4 over-capture interrupt is pending).
;;;3179     * @rmtoll SR           CC4OF         LL_TIM_IsActiveFlag_CC4OVR
;;;3180     * @param  TIMx Timer instance
;;;3181     * @retval State of bit (1 or 0).
;;;3182     */
;;;3183   __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC4OVR(TIM_TypeDef *TIMx)
;;;3184   {
;;;3185     return (READ_BIT(TIMx->SR, TIM_SR_CC4OF) == (TIM_SR_CC4OF));
;;;3186   }
;;;3187   
;;;3188   /**
;;;3189     * @}
;;;3190     */
;;;3191   
;;;3192   /** @defgroup TIM_LL_EF_IT_Management IT-Management
;;;3193     * @{
;;;3194     */
;;;3195   /**
;;;3196     * @brief  Enable update interrupt (UIE).
;;;3197     * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
;;;3198     * @param  TIMx Timer instance
;;;3199     * @retval None
;;;3200     */
;;;3201   __STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
;;;3202   {
;;;3203     SET_BIT(TIMx->DIER, TIM_DIER_UIE);
;;;3204   }
;;;3205   
;;;3206   /**
;;;3207     * @brief  Disable update interrupt (UIE).
;;;3208     * @rmtoll DIER         UIE           LL_TIM_DisableIT_UPDATE
;;;3209     * @param  TIMx Timer instance
;;;3210     * @retval None
;;;3211     */
;;;3212   __STATIC_INLINE void LL_TIM_DisableIT_UPDATE(TIM_TypeDef *TIMx)
;;;3213   {
;;;3214     CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
;;;3215   }
;;;3216   
;;;3217   /**
;;;3218     * @brief  Indicates whether the update interrupt (UIE) is enabled.
;;;3219     * @rmtoll DIER         UIE           LL_TIM_IsEnabledIT_UPDATE
;;;3220     * @param  TIMx Timer instance
;;;3221     * @retval State of bit (1 or 0).
;;;3222     */
;;;3223   __STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_UPDATE(TIM_TypeDef *TIMx)
;;;3224   {
;;;3225     return (READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE));
;;;3226   }
;;;3227   
;;;3228   /**
;;;3229     * @brief  Enable capture/compare 1 interrupt (CC1IE).
;;;3230     * @rmtoll DIER         CC1IE         LL_TIM_EnableIT_CC1
;;;3231     * @param  TIMx Timer instance
;;;3232     * @retval None
;;;3233     */
;;;3234   __STATIC_INLINE void LL_TIM_EnableIT_CC1(TIM_TypeDef *TIMx)
;;;3235   {
;;;3236     SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
;;;3237   }
;;;3238   
;;;3239   /**
;;;3240     * @brief  Disable capture/compare 1  interrupt (CC1IE).
;;;3241     * @rmtoll DIER         CC1IE         LL_TIM_DisableIT_CC1
;;;3242     * @param  TIMx Timer instance
;;;3243     * @retval None
;;;3244     */
;;;3245   __STATIC_INLINE void LL_TIM_DisableIT_CC1(TIM_TypeDef *TIMx)
;;;3246   {
;;;3247     CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1IE);
;;;3248   }
;;;3249   
;;;3250   /**
;;;3251     * @brief  Indicates whether the capture/compare 1 interrupt (CC1IE) is enabled.
;;;3252     * @rmtoll DIER         CC1IE         LL_TIM_IsEnabledIT_CC1
;;;3253     * @param  TIMx Timer instance
;;;3254     * @retval State of bit (1 or 0).
;;;3255     */
;;;3256   __STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_CC1(TIM_TypeDef *TIMx)
;;;3257   {
;;;3258     return (READ_BIT(TIMx->DIER, TIM_DIER_CC1IE) == (TIM_DIER_CC1IE));
;;;3259   }
;;;3260   
;;;3261   /**
;;;3262     * @brief  Enable capture/compare 2 interrupt (CC2IE).
;;;3263     * @rmtoll DIER         CC2IE         LL_TIM_EnableIT_CC2
;;;3264     * @param  TIMx Timer instance
;;;3265     * @retval None
;;;3266     */
;;;3267   __STATIC_INLINE void LL_TIM_EnableIT_CC2(TIM_TypeDef *TIMx)
;;;3268   {
;;;3269     SET_BIT(TIMx->DIER, TIM_DIER_CC2IE);
;;;3270   }
;;;3271   
;;;3272   /**
;;;3273     * @brief  Disable capture/compare 2  interrupt (CC2IE).
;;;3274     * @rmtoll DIER         CC2IE         LL_TIM_DisableIT_CC2
;;;3275     * @param  TIMx Timer instance
;;;3276     * @retval None
;;;3277     */
;;;3278   __STATIC_INLINE void LL_TIM_DisableIT_CC2(TIM_TypeDef *TIMx)
;;;3279   {
;;;3280     CLEAR_BIT(TIMx->DIER, TIM_DIER_CC2IE);
;;;3281   }
;;;3282   
;;;3283   /**
;;;3284     * @brief  Indicates whether the capture/compare 2 interrupt (CC2IE) is enabled.
;;;3285     * @rmtoll DIER         CC2IE         LL_TIM_IsEnabledIT_CC2
;;;3286     * @param  TIMx Timer instance
;;;3287     * @retval State of bit (1 or 0).
;;;3288     */
;;;3289   __STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_CC2(TIM_TypeDef *TIMx)
;;;3290   {
;;;3291     return (READ_BIT(TIMx->DIER, TIM_DIER_CC2IE) == (TIM_DIER_CC2IE));
;;;3292   }
;;;3293   
;;;3294   /**
;;;3295     * @brief  Enable capture/compare 3 interrupt (CC3IE).
;;;3296     * @rmtoll DIER         CC3IE         LL_TIM_EnableIT_CC3
;;;3297     * @param  TIMx Timer instance
;;;3298     * @retval None
;;;3299     */
;;;3300   __STATIC_INLINE void LL_TIM_EnableIT_CC3(TIM_TypeDef *TIMx)
;;;3301   {
;;;3302     SET_BIT(TIMx->DIER, TIM_DIER_CC3IE);
;;;3303   }
;;;3304   
;;;3305   /**
;;;3306     * @brief  Disable capture/compare 3  interrupt (CC3IE).
;;;3307     * @rmtoll DIER         CC3IE         LL_TIM_DisableIT_CC3
;;;3308     * @param  TIMx Timer instance
;;;3309     * @retval None
;;;3310     */
;;;3311   __STATIC_INLINE void LL_TIM_DisableIT_CC3(TIM_TypeDef *TIMx)
;;;3312   {
;;;3313     CLEAR_BIT(TIMx->DIER, TIM_DIER_CC3IE);
;;;3314   }
;;;3315   
;;;3316   /**
;;;3317     * @brief  Indicates whether the capture/compare 3 interrupt (CC3IE) is enabled.
;;;3318     * @rmtoll DIER         CC3IE         LL_TIM_IsEnabledIT_CC3
;;;3319     * @param  TIMx Timer instance
;;;3320     * @retval State of bit (1 or 0).
;;;3321     */
;;;3322   __STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_CC3(TIM_TypeDef *TIMx)
;;;3323   {
;;;3324     return (READ_BIT(TIMx->DIER, TIM_DIER_CC3IE) == (TIM_DIER_CC3IE));
;;;3325   }
;;;3326   
;;;3327   /**
;;;3328     * @brief  Enable capture/compare 4 interrupt (CC4IE).
;;;3329     * @rmtoll DIER         CC4IE         LL_TIM_EnableIT_CC4
;;;3330     * @param  TIMx Timer instance
;;;3331     * @retval None
;;;3332     */
;;;3333   __STATIC_INLINE void LL_TIM_EnableIT_CC4(TIM_TypeDef *TIMx)
;;;3334   {
;;;3335     SET_BIT(TIMx->DIER, TIM_DIER_CC4IE);
;;;3336   }
;;;3337   
;;;3338   /**
;;;3339     * @brief  Disable capture/compare 4  interrupt (CC4IE).
;;;3340     * @rmtoll DIER         CC4IE         LL_TIM_DisableIT_CC4
;;;3341     * @param  TIMx Timer instance
;;;3342     * @retval None
;;;3343     */
;;;3344   __STATIC_INLINE void LL_TIM_DisableIT_CC4(TIM_TypeDef *TIMx)
;;;3345   {
;;;3346     CLEAR_BIT(TIMx->DIER, TIM_DIER_CC4IE);
;;;3347   }
;;;3348   
;;;3349   /**
;;;3350     * @brief  Indicates whether the capture/compare 4 interrupt (CC4IE) is enabled.
;;;3351     * @rmtoll DIER         CC4IE         LL_TIM_IsEnabledIT_CC4
;;;3352     * @param  TIMx Timer instance
;;;3353     * @retval State of bit (1 or 0).
;;;3354     */
;;;3355   __STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_CC4(TIM_TypeDef *TIMx)
;;;3356   {
;;;3357     return (READ_BIT(TIMx->DIER, TIM_DIER_CC4IE) == (TIM_DIER_CC4IE));
;;;3358   }
;;;3359   
;;;3360   /**
;;;3361     * @brief  Enable commutation interrupt (COMIE).
;;;3362     * @rmtoll DIER         COMIE         LL_TIM_EnableIT_COM
;;;3363     * @param  TIMx Timer instance
;;;3364     * @retval None
;;;3365     */
;;;3366   __STATIC_INLINE void LL_TIM_EnableIT_COM(TIM_TypeDef *TIMx)
;;;3367   {
;;;3368     SET_BIT(TIMx->DIER, TIM_DIER_COMIE);
;;;3369   }
;;;3370   
;;;3371   /**
;;;3372     * @brief  Disable commutation interrupt (COMIE).
;;;3373     * @rmtoll DIER         COMIE         LL_TIM_DisableIT_COM
;;;3374     * @param  TIMx Timer instance
;;;3375     * @retval None
;;;3376     */
;;;3377   __STATIC_INLINE void LL_TIM_DisableIT_COM(TIM_TypeDef *TIMx)
;;;3378   {
;;;3379     CLEAR_BIT(TIMx->DIER, TIM_DIER_COMIE);
;;;3380   }
;;;3381   
;;;3382   /**
;;;3383     * @brief  Indicates whether the commutation interrupt (COMIE) is enabled.
;;;3384     * @rmtoll DIER         COMIE         LL_TIM_IsEnabledIT_COM
;;;3385     * @param  TIMx Timer instance
;;;3386     * @retval State of bit (1 or 0).
;;;3387     */
;;;3388   __STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_COM(TIM_TypeDef *TIMx)
;;;3389   {
;;;3390     return (READ_BIT(TIMx->DIER, TIM_DIER_COMIE) == (TIM_DIER_COMIE));
;;;3391   }
;;;3392   
;;;3393   /**
;;;3394     * @brief  Enable trigger interrupt (TIE).
;;;3395     * @rmtoll DIER         TIE           LL_TIM_EnableIT_TRIG
;;;3396     * @param  TIMx Timer instance
;;;3397     * @retval None
;;;3398     */
;;;3399   __STATIC_INLINE void LL_TIM_EnableIT_TRIG(TIM_TypeDef *TIMx)
;;;3400   {
;;;3401     SET_BIT(TIMx->DIER, TIM_DIER_TIE);
;;;3402   }
;;;3403   
;;;3404   /**
;;;3405     * @brief  Disable trigger interrupt (TIE).
;;;3406     * @rmtoll DIER         TIE           LL_TIM_DisableIT_TRIG
;;;3407     * @param  TIMx Timer instance
;;;3408     * @retval None
;;;3409     */
;;;3410   __STATIC_INLINE void LL_TIM_DisableIT_TRIG(TIM_TypeDef *TIMx)
;;;3411   {
;;;3412     CLEAR_BIT(TIMx->DIER, TIM_DIER_TIE);
;;;3413   }
;;;3414   
;;;3415   /**
;;;3416     * @brief  Indicates whether the trigger interrupt (TIE) is enabled.
;;;3417     * @rmtoll DIER         TIE           LL_TIM_IsEnabledIT_TRIG
;;;3418     * @param  TIMx Timer instance
;;;3419     * @retval State of bit (1 or 0).
;;;3420     */
;;;3421   __STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_TRIG(TIM_TypeDef *TIMx)
;;;3422   {
;;;3423     return (READ_BIT(TIMx->DIER, TIM_DIER_TIE) == (TIM_DIER_TIE));
;;;3424   }
;;;3425   
;;;3426   /**
;;;3427     * @brief  Enable break interrupt (BIE).
;;;3428     * @rmtoll DIER         BIE           LL_TIM_EnableIT_BRK
;;;3429     * @param  TIMx Timer instance
;;;3430     * @retval None
;;;3431     */
;;;3432   __STATIC_INLINE void LL_TIM_EnableIT_BRK(TIM_TypeDef *TIMx)
;;;3433   {
;;;3434     SET_BIT(TIMx->DIER, TIM_DIER_BIE);
;;;3435   }
;;;3436   
;;;3437   /**
;;;3438     * @brief  Disable break interrupt (BIE).
;;;3439     * @rmtoll DIER         BIE           LL_TIM_DisableIT_BRK
;;;3440     * @param  TIMx Timer instance
;;;3441     * @retval None
;;;3442     */
;;;3443   __STATIC_INLINE void LL_TIM_DisableIT_BRK(TIM_TypeDef *TIMx)
;;;3444   {
;;;3445     CLEAR_BIT(TIMx->DIER, TIM_DIER_BIE);
;;;3446   }
;;;3447   
;;;3448   /**
;;;3449     * @brief  Indicates whether the break interrupt (BIE) is enabled.
;;;3450     * @rmtoll DIER         BIE           LL_TIM_IsEnabledIT_BRK
;;;3451     * @param  TIMx Timer instance
;;;3452     * @retval State of bit (1 or 0).
;;;3453     */
;;;3454   __STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_BRK(TIM_TypeDef *TIMx)
;;;3455   {
;;;3456     return (READ_BIT(TIMx->DIER, TIM_DIER_BIE) == (TIM_DIER_BIE));
;;;3457   }
;;;3458   
;;;3459   /**
;;;3460     * @}
;;;3461     */
;;;3462   
;;;3463   /** @defgroup TIM_LL_EF_DMA_Management DMA-Management
;;;3464     * @{
;;;3465     */
;;;3466   /**
;;;3467     * @brief  Enable update DMA request (UDE).
;;;3468     * @rmtoll DIER         UDE           LL_TIM_EnableDMAReq_UPDATE
;;;3469     * @param  TIMx Timer instance
;;;3470     * @retval None
;;;3471     */
;;;3472   __STATIC_INLINE void LL_TIM_EnableDMAReq_UPDATE(TIM_TypeDef *TIMx)
;;;3473   {
;;;3474     SET_BIT(TIMx->DIER, TIM_DIER_UDE);
;;;3475   }
;;;3476   
;;;3477   /**
;;;3478     * @brief  Disable update DMA request (UDE).
;;;3479     * @rmtoll DIER         UDE           LL_TIM_DisableDMAReq_UPDATE
;;;3480     * @param  TIMx Timer instance
;;;3481     * @retval None
;;;3482     */
;;;3483   __STATIC_INLINE void LL_TIM_DisableDMAReq_UPDATE(TIM_TypeDef *TIMx)
;;;3484   {
;;;3485     CLEAR_BIT(TIMx->DIER, TIM_DIER_UDE);
;;;3486   }
;;;3487   
;;;3488   /**
;;;3489     * @brief  Indicates whether the update DMA request  (UDE) is enabled.
;;;3490     * @rmtoll DIER         UDE           LL_TIM_IsEnabledDMAReq_UPDATE
;;;3491     * @param  TIMx Timer instance
;;;3492     * @retval State of bit (1 or 0).
;;;3493     */
;;;3494   __STATIC_INLINE uint32_t LL_TIM_IsEnabledDMAReq_UPDATE(TIM_TypeDef *TIMx)
;;;3495   {
;;;3496     return (READ_BIT(TIMx->DIER, TIM_DIER_UDE) == (TIM_DIER_UDE));
;;;3497   }
;;;3498   
;;;3499   /**
;;;3500     * @brief  Enable capture/compare 1 DMA request (CC1DE).
;;;3501     * @rmtoll DIER         CC1DE         LL_TIM_EnableDMAReq_CC1
;;;3502     * @param  TIMx Timer instance
;;;3503     * @retval None
;;;3504     */
;;;3505   __STATIC_INLINE void LL_TIM_EnableDMAReq_CC1(TIM_TypeDef *TIMx)
;;;3506   {
;;;3507     SET_BIT(TIMx->DIER, TIM_DIER_CC1DE);
;;;3508   }
;;;3509   
;;;3510   /**
;;;3511     * @brief  Disable capture/compare 1  DMA request (CC1DE).
;;;3512     * @rmtoll DIER         CC1DE         LL_TIM_DisableDMAReq_CC1
;;;3513     * @param  TIMx Timer instance
;;;3514     * @retval None
;;;3515     */
;;;3516   __STATIC_INLINE void LL_TIM_DisableDMAReq_CC1(TIM_TypeDef *TIMx)
;;;3517   {
;;;3518     CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1DE);
;;;3519   }
;;;3520   
;;;3521   /**
;;;3522     * @brief  Indicates whether the capture/compare 1 DMA request (CC1DE) is enabled.
;;;3523     * @rmtoll DIER         CC1DE         LL_TIM_IsEnabledDMAReq_CC1
;;;3524     * @param  TIMx Timer instance
;;;3525     * @retval State of bit (1 or 0).
;;;3526     */
;;;3527   __STATIC_INLINE uint32_t LL_TIM_IsEnabledDMAReq_CC1(TIM_TypeDef *TIMx)
;;;3528   {
;;;3529     return (READ_BIT(TIMx->DIER, TIM_DIER_CC1DE) == (TIM_DIER_CC1DE));
;;;3530   }
;;;3531   
;;;3532   /**
;;;3533     * @brief  Enable capture/compare 2 DMA request (CC2DE).
;;;3534     * @rmtoll DIER         CC2DE         LL_TIM_EnableDMAReq_CC2
;;;3535     * @param  TIMx Timer instance
;;;3536     * @retval None
;;;3537     */
;;;3538   __STATIC_INLINE void LL_TIM_EnableDMAReq_CC2(TIM_TypeDef *TIMx)
;;;3539   {
;;;3540     SET_BIT(TIMx->DIER, TIM_DIER_CC2DE);
;;;3541   }
;;;3542   
;;;3543   /**
;;;3544     * @brief  Disable capture/compare 2  DMA request (CC2DE).
;;;3545     * @rmtoll DIER         CC2DE         LL_TIM_DisableDMAReq_CC2
;;;3546     * @param  TIMx Timer instance
;;;3547     * @retval None
;;;3548     */
;;;3549   __STATIC_INLINE void LL_TIM_DisableDMAReq_CC2(TIM_TypeDef *TIMx)
;;;3550   {
;;;3551     CLEAR_BIT(TIMx->DIER, TIM_DIER_CC2DE);
;;;3552   }
;;;3553   
;;;3554   /**
;;;3555     * @brief  Indicates whether the capture/compare 2 DMA request (CC2DE) is enabled.
;;;3556     * @rmtoll DIER         CC2DE         LL_TIM_IsEnabledDMAReq_CC2
;;;3557     * @param  TIMx Timer instance
;;;3558     * @retval State of bit (1 or 0).
;;;3559     */
;;;3560   __STATIC_INLINE uint32_t LL_TIM_IsEnabledDMAReq_CC2(TIM_TypeDef *TIMx)
;;;3561   {
;;;3562     return (READ_BIT(TIMx->DIER, TIM_DIER_CC2DE) == (TIM_DIER_CC2DE));
;;;3563   }
;;;3564   
;;;3565   /**
;;;3566     * @brief  Enable capture/compare 3 DMA request (CC3DE).
;;;3567     * @rmtoll DIER         CC3DE         LL_TIM_EnableDMAReq_CC3
;;;3568     * @param  TIMx Timer instance
;;;3569     * @retval None
;;;3570     */
;;;3571   __STATIC_INLINE void LL_TIM_EnableDMAReq_CC3(TIM_TypeDef *TIMx)
;;;3572   {
;;;3573     SET_BIT(TIMx->DIER, TIM_DIER_CC3DE);
;;;3574   }
;;;3575   
;;;3576   /**
;;;3577     * @brief  Disable capture/compare 3  DMA request (CC3DE).
;;;3578     * @rmtoll DIER         CC3DE         LL_TIM_DisableDMAReq_CC3
;;;3579     * @param  TIMx Timer instance
;;;3580     * @retval None
;;;3581     */
;;;3582   __STATIC_INLINE void LL_TIM_DisableDMAReq_CC3(TIM_TypeDef *TIMx)
;;;3583   {
;;;3584     CLEAR_BIT(TIMx->DIER, TIM_DIER_CC3DE);
;;;3585   }
;;;3586   
;;;3587   /**
;;;3588     * @brief  Indicates whether the capture/compare 3 DMA request (CC3DE) is enabled.
;;;3589     * @rmtoll DIER         CC3DE         LL_TIM_IsEnabledDMAReq_CC3
;;;3590     * @param  TIMx Timer instance
;;;3591     * @retval State of bit (1 or 0).
;;;3592     */
;;;3593   __STATIC_INLINE uint32_t LL_TIM_IsEnabledDMAReq_CC3(TIM_TypeDef *TIMx)
;;;3594   {
;;;3595     return (READ_BIT(TIMx->DIER, TIM_DIER_CC3DE) == (TIM_DIER_CC3DE));
;;;3596   }
;;;3597   
;;;3598   /**
;;;3599     * @brief  Enable capture/compare 4 DMA request (CC4DE).
;;;3600     * @rmtoll DIER         CC4DE         LL_TIM_EnableDMAReq_CC4
;;;3601     * @param  TIMx Timer instance
;;;3602     * @retval None
;;;3603     */
;;;3604   __STATIC_INLINE void LL_TIM_EnableDMAReq_CC4(TIM_TypeDef *TIMx)
;;;3605   {
;;;3606     SET_BIT(TIMx->DIER, TIM_DIER_CC4DE);
;;;3607   }
;;;3608   
;;;3609   /**
;;;3610     * @brief  Disable capture/compare 4  DMA request (CC4DE).
;;;3611     * @rmtoll DIER         CC4DE         LL_TIM_DisableDMAReq_CC4
;;;3612     * @param  TIMx Timer instance
;;;3613     * @retval None
;;;3614     */
;;;3615   __STATIC_INLINE void LL_TIM_DisableDMAReq_CC4(TIM_TypeDef *TIMx)
;;;3616   {
;;;3617     CLEAR_BIT(TIMx->DIER, TIM_DIER_CC4DE);
;;;3618   }
;;;3619   
;;;3620   /**
;;;3621     * @brief  Indicates whether the capture/compare 4 DMA request (CC4DE) is enabled.
;;;3622     * @rmtoll DIER         CC4DE         LL_TIM_IsEnabledDMAReq_CC4
;;;3623     * @param  TIMx Timer instance
;;;3624     * @retval State of bit (1 or 0).
;;;3625     */
;;;3626   __STATIC_INLINE uint32_t LL_TIM_IsEnabledDMAReq_CC4(TIM_TypeDef *TIMx)
;;;3627   {
;;;3628     return (READ_BIT(TIMx->DIER, TIM_DIER_CC4DE) == (TIM_DIER_CC4DE));
;;;3629   }
;;;3630   
;;;3631   /**
;;;3632     * @brief  Enable commutation DMA request (COMDE).
;;;3633     * @rmtoll DIER         COMDE         LL_TIM_EnableDMAReq_COM
;;;3634     * @param  TIMx Timer instance
;;;3635     * @retval None
;;;3636     */
;;;3637   __STATIC_INLINE void LL_TIM_EnableDMAReq_COM(TIM_TypeDef *TIMx)
;;;3638   {
;;;3639     SET_BIT(TIMx->DIER, TIM_DIER_COMDE);
;;;3640   }
;;;3641   
;;;3642   /**
;;;3643     * @brief  Disable commutation DMA request (COMDE).
;;;3644     * @rmtoll DIER         COMDE         LL_TIM_DisableDMAReq_COM
;;;3645     * @param  TIMx Timer instance
;;;3646     * @retval None
;;;3647     */
;;;3648   __STATIC_INLINE void LL_TIM_DisableDMAReq_COM(TIM_TypeDef *TIMx)
;;;3649   {
;;;3650     CLEAR_BIT(TIMx->DIER, TIM_DIER_COMDE);
;;;3651   }
;;;3652   
;;;3653   /**
;;;3654     * @brief  Indicates whether the commutation DMA request (COMDE) is enabled.
;;;3655     * @rmtoll DIER         COMDE         LL_TIM_IsEnabledDMAReq_COM
;;;3656     * @param  TIMx Timer instance
;;;3657     * @retval State of bit (1 or 0).
;;;3658     */
;;;3659   __STATIC_INLINE uint32_t LL_TIM_IsEnabledDMAReq_COM(TIM_TypeDef *TIMx)
;;;3660   {
;;;3661     return (READ_BIT(TIMx->DIER, TIM_DIER_COMDE) == (TIM_DIER_COMDE));
;;;3662   }
;;;3663   
;;;3664   /**
;;;3665     * @brief  Enable trigger interrupt (TDE).
;;;3666     * @rmtoll DIER         TDE           LL_TIM_EnableDMAReq_TRIG
;;;3667     * @param  TIMx Timer instance
;;;3668     * @retval None
;;;3669     */
;;;3670   __STATIC_INLINE void LL_TIM_EnableDMAReq_TRIG(TIM_TypeDef *TIMx)
;;;3671   {
;;;3672     SET_BIT(TIMx->DIER, TIM_DIER_TDE);
;;;3673   }
;;;3674   
;;;3675   /**
;;;3676     * @brief  Disable trigger interrupt (TDE).
;;;3677     * @rmtoll DIER         TDE           LL_TIM_DisableDMAReq_TRIG
;;;3678     * @param  TIMx Timer instance
;;;3679     * @retval None
;;;3680     */
;;;3681   __STATIC_INLINE void LL_TIM_DisableDMAReq_TRIG(TIM_TypeDef *TIMx)
;;;3682   {
;;;3683     CLEAR_BIT(TIMx->DIER, TIM_DIER_TDE);
;;;3684   }
;;;3685   
;;;3686   /**
;;;3687     * @brief  Indicates whether the trigger interrupt (TDE) is enabled.
;;;3688     * @rmtoll DIER         TDE           LL_TIM_IsEnabledDMAReq_TRIG
;;;3689     * @param  TIMx Timer instance
;;;3690     * @retval State of bit (1 or 0).
;;;3691     */
;;;3692   __STATIC_INLINE uint32_t LL_TIM_IsEnabledDMAReq_TRIG(TIM_TypeDef *TIMx)
;;;3693   {
;;;3694     return (READ_BIT(TIMx->DIER, TIM_DIER_TDE) == (TIM_DIER_TDE));
;;;3695   }
;;;3696   
;;;3697   /**
;;;3698     * @}
;;;3699     */
;;;3700   
;;;3701   /** @defgroup TIM_LL_EF_EVENT_Management EVENT-Management
;;;3702     * @{
;;;3703     */
;;;3704   /**
;;;3705     * @brief  Generate an update event.
;;;3706     * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
;;;3707     * @param  TIMx Timer instance
;;;3708     * @retval None
;;;3709     */
;;;3710   __STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
;;;3711   {
;;;3712     SET_BIT(TIMx->EGR, TIM_EGR_UG);
        0x08000814:    6941        Ai      LDR      r1,[r0,#0x14]
        0x08000816:    f0410101    A...    ORR      r1,r1,#1
        0x0800081a:    6141        Aa      STR      r1,[r0,#0x14]
;;;3713   }
        0x0800081c:    4770        pG      BX       lr
        0x0800081e:    0000        ..      MOVS     r0,r0
    i.LL_TIM_IC_SetActiveInput
    LL_TIM_IC_SetActiveInput
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h (2164)
        0x08000820:    b5f0        ..      PUSH     {r4-r7,lr}
        0x08000822:    4603        .F      MOV      r3,r0
        0x08000824:    4614        .F      MOV      r4,r2
;;;2165     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
        0x08000826:    2901        .)      CMP      r1,#1
        0x08000828:    d101        ..      BNE      0x800082e ; LL_TIM_IC_SetActiveInput + 14
        0x0800082a:    2500        .%      MOVS     r5,#0
        0x0800082c:    e016        ..      B        0x800085c ; LL_TIM_IC_SetActiveInput + 60
        0x0800082e:    2904        .)      CMP      r1,#4
        0x08000830:    d101        ..      BNE      0x8000836 ; LL_TIM_IC_SetActiveInput + 22
        0x08000832:    2501        .%      MOVS     r5,#1
        0x08000834:    e012        ..      B        0x800085c ; LL_TIM_IC_SetActiveInput + 60
        0x08000836:    2910        .)      CMP      r1,#0x10
        0x08000838:    d101        ..      BNE      0x800083e ; LL_TIM_IC_SetActiveInput + 30
        0x0800083a:    2502        .%      MOVS     r5,#2
        0x0800083c:    e00e        ..      B        0x800085c ; LL_TIM_IC_SetActiveInput + 60
        0x0800083e:    2940        @)      CMP      r1,#0x40
        0x08000840:    d101        ..      BNE      0x8000846 ; LL_TIM_IC_SetActiveInput + 38
        0x08000842:    2503        .%      MOVS     r5,#3
        0x08000844:    e00a        ..      B        0x800085c ; LL_TIM_IC_SetActiveInput + 60
        0x08000846:    f5b17f80    ....    CMP      r1,#0x100
        0x0800084a:    d101        ..      BNE      0x8000850 ; LL_TIM_IC_SetActiveInput + 48
        0x0800084c:    2504        .%      MOVS     r5,#4
        0x0800084e:    e005        ..      B        0x800085c ; LL_TIM_IC_SetActiveInput + 60
        0x08000850:    f5b16f80    ...o    CMP      r1,#0x400
        0x08000854:    d101        ..      BNE      0x800085a ; LL_TIM_IC_SetActiveInput + 58
        0x08000856:    2505        .%      MOVS     r5,#5
        0x08000858:    e000        ..      B        0x800085c ; LL_TIM_IC_SetActiveInput + 60
        0x0800085a:    2506        .%      MOVS     r5,#6
        0x0800085c:    4628        (F      MOV      r0,r5
;;;2166     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
        0x0800085e:    4d09        .M      LDR      r5,[pc,#36] ; [0x8000884] = 0x80028b7
        0x08000860:    5c2e        .\      LDRB     r6,[r5,r0]
        0x08000862:    f1030518    ....    ADD      r5,r3,#0x18
        0x08000866:    1972        r.      ADDS     r2,r6,r5
;;;2167     MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
        0x08000868:    4e07        .N      LDR      r6,[pc,#28] ; [0x8000888] = 0x80028c5
        0x0800086a:    5c37        7\      LDRB     r7,[r6,r0]
        0x0800086c:    2603        .&      MOVS     r6,#3
        0x0800086e:    40be        .@      LSLS     r6,r6,r7
        0x08000870:    6815        .h      LDR      r5,[r2,#0]
        0x08000872:    43b5        .C      BICS     r5,r5,r6
        0x08000874:    0c26        &.      LSRS     r6,r4,#16
        0x08000876:    4f04        .O      LDR      r7,[pc,#16] ; [0x8000888] = 0x80028c5
        0x08000878:    5c3f        ?\      LDRB     r7,[r7,r0]
        0x0800087a:    40be        .@      LSLS     r6,r6,r7
        0x0800087c:    4335        5C      ORRS     r5,r5,r6
        0x0800087e:    6015        .`      STR      r5,[r2,#0]
;;;2168   }
        0x08000880:    bdf0        ..      POP      {r4-r7,pc}
    $d
        0x08000882:    0000        ..      DCW    0
        0x08000884:    080028b7    .(..    DCD    134228151
        0x08000888:    080028c5    .(..    DCD    134228165
    $t
    i.LL_TIM_IC_SetFilter
    LL_TIM_IC_SetFilter
;;;2169   
;;;2170   /**
;;;2171     * @brief  Get the current active input.
;;;2172     * @rmtoll CCMR1        CC1S          LL_TIM_IC_GetActiveInput\n
;;;2173     *         CCMR1        CC2S          LL_TIM_IC_GetActiveInput\n
;;;2174     *         CCMR2        CC3S          LL_TIM_IC_GetActiveInput\n
;;;2175     *         CCMR2        CC4S          LL_TIM_IC_GetActiveInput
;;;2176     * @param  TIMx Timer instance
;;;2177     * @param  Channel This parameter can be one of the following values:
;;;2178     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2179     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2180     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2181     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2182     * @retval Returned value can be one of the following values:
;;;2183     *         @arg @ref LL_TIM_ACTIVEINPUT_DIRECTTI
;;;2184     *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
;;;2185     *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
;;;2186     */
;;;2187   __STATIC_INLINE uint32_t LL_TIM_IC_GetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel)
;;;2188   {
;;;2189     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2190     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2191     return ((READ_BIT(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iChannel]) << 16U);
;;;2192   }
;;;2193   
;;;2194   /**
;;;2195     * @brief  Set the prescaler of input channel.
;;;2196     * @rmtoll CCMR1        IC1PSC        LL_TIM_IC_SetPrescaler\n
;;;2197     *         CCMR1        IC2PSC        LL_TIM_IC_SetPrescaler\n
;;;2198     *         CCMR2        IC3PSC        LL_TIM_IC_SetPrescaler\n
;;;2199     *         CCMR2        IC4PSC        LL_TIM_IC_SetPrescaler
;;;2200     * @param  TIMx Timer instance
;;;2201     * @param  Channel This parameter can be one of the following values:
;;;2202     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2203     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2204     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2205     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2206     * @param  ICPrescaler This parameter can be one of the following values:
;;;2207     *         @arg @ref LL_TIM_ICPSC_DIV1
;;;2208     *         @arg @ref LL_TIM_ICPSC_DIV2
;;;2209     *         @arg @ref LL_TIM_ICPSC_DIV4
;;;2210     *         @arg @ref LL_TIM_ICPSC_DIV8
;;;2211     * @retval None
;;;2212     */
;;;2213   __STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
;;;2214   {
;;;2215     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2216     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2217     MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
;;;2218   }
;;;2219   
;;;2220   /**
;;;2221     * @brief  Get the current prescaler value acting on an  input channel.
;;;2222     * @rmtoll CCMR1        IC1PSC        LL_TIM_IC_GetPrescaler\n
;;;2223     *         CCMR1        IC2PSC        LL_TIM_IC_GetPrescaler\n
;;;2224     *         CCMR2        IC3PSC        LL_TIM_IC_GetPrescaler\n
;;;2225     *         CCMR2        IC4PSC        LL_TIM_IC_GetPrescaler
;;;2226     * @param  TIMx Timer instance
;;;2227     * @param  Channel This parameter can be one of the following values:
;;;2228     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2229     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2230     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2231     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2232     * @retval Returned value can be one of the following values:
;;;2233     *         @arg @ref LL_TIM_ICPSC_DIV1
;;;2234     *         @arg @ref LL_TIM_ICPSC_DIV2
;;;2235     *         @arg @ref LL_TIM_ICPSC_DIV4
;;;2236     *         @arg @ref LL_TIM_ICPSC_DIV8
;;;2237     */
;;;2238   __STATIC_INLINE uint32_t LL_TIM_IC_GetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel)
;;;2239   {
;;;2240     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2241     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2242     return ((READ_BIT(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iChannel]) << 16U);
;;;2243   }
;;;2244   
;;;2245   /**
;;;2246     * @brief  Set the input filter duration.
;;;2247     * @rmtoll CCMR1        IC1F          LL_TIM_IC_SetFilter\n
;;;2248     *         CCMR1        IC2F          LL_TIM_IC_SetFilter\n
;;;2249     *         CCMR2        IC3F          LL_TIM_IC_SetFilter\n
;;;2250     *         CCMR2        IC4F          LL_TIM_IC_SetFilter
;;;2251     * @param  TIMx Timer instance
;;;2252     * @param  Channel This parameter can be one of the following values:
;;;2253     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2254     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2255     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2256     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2257     * @param  ICFilter This parameter can be one of the following values:
;;;2258     *         @arg @ref LL_TIM_IC_FILTER_FDIV1
;;;2259     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N2
;;;2260     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N4
;;;2261     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N8
;;;2262     *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N6
;;;2263     *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N8
;;;2264     *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N6
;;;2265     *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N8
;;;2266     *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N6
;;;2267     *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N8
;;;2268     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N5
;;;2269     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N6
;;;2270     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N8
;;;2271     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N5
;;;2272     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
;;;2273     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
;;;2274     * @retval None
;;;2275     */
;;;2276   __STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
;;;2277   {
        0x0800088c:    b5f0        ..      PUSH     {r4-r7,lr}
        0x0800088e:    4603        .F      MOV      r3,r0
        0x08000890:    4614        .F      MOV      r4,r2
;;;2278     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
        0x08000892:    2901        .)      CMP      r1,#1
        0x08000894:    d101        ..      BNE      0x800089a ; LL_TIM_IC_SetFilter + 14
        0x08000896:    2500        .%      MOVS     r5,#0
        0x08000898:    e016        ..      B        0x80008c8 ; LL_TIM_IC_SetFilter + 60
        0x0800089a:    2904        .)      CMP      r1,#4
        0x0800089c:    d101        ..      BNE      0x80008a2 ; LL_TIM_IC_SetFilter + 22
        0x0800089e:    2501        .%      MOVS     r5,#1
        0x080008a0:    e012        ..      B        0x80008c8 ; LL_TIM_IC_SetFilter + 60
        0x080008a2:    2910        .)      CMP      r1,#0x10
        0x080008a4:    d101        ..      BNE      0x80008aa ; LL_TIM_IC_SetFilter + 30
        0x080008a6:    2502        .%      MOVS     r5,#2
        0x080008a8:    e00e        ..      B        0x80008c8 ; LL_TIM_IC_SetFilter + 60
        0x080008aa:    2940        @)      CMP      r1,#0x40
        0x080008ac:    d101        ..      BNE      0x80008b2 ; LL_TIM_IC_SetFilter + 38
        0x080008ae:    2503        .%      MOVS     r5,#3
        0x080008b0:    e00a        ..      B        0x80008c8 ; LL_TIM_IC_SetFilter + 60
        0x080008b2:    f5b17f80    ....    CMP      r1,#0x100
        0x080008b6:    d101        ..      BNE      0x80008bc ; LL_TIM_IC_SetFilter + 48
        0x080008b8:    2504        .%      MOVS     r5,#4
        0x080008ba:    e005        ..      B        0x80008c8 ; LL_TIM_IC_SetFilter + 60
        0x080008bc:    f5b16f80    ...o    CMP      r1,#0x400
        0x080008c0:    d101        ..      BNE      0x80008c6 ; LL_TIM_IC_SetFilter + 58
        0x080008c2:    2505        .%      MOVS     r5,#5
        0x080008c4:    e000        ..      B        0x80008c8 ; LL_TIM_IC_SetFilter + 60
        0x080008c6:    2506        .%      MOVS     r5,#6
        0x080008c8:    4628        (F      MOV      r0,r5
;;;2279     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
        0x080008ca:    4d09        .M      LDR      r5,[pc,#36] ; [0x80008f0] = 0x80028b7
        0x080008cc:    5c2e        .\      LDRB     r6,[r5,r0]
        0x080008ce:    f1030518    ....    ADD      r5,r3,#0x18
        0x080008d2:    1972        r.      ADDS     r2,r6,r5
;;;2280     MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
        0x080008d4:    4e07        .N      LDR      r6,[pc,#28] ; [0x80008f4] = 0x80028c5
        0x080008d6:    5c37        7\      LDRB     r7,[r6,r0]
        0x080008d8:    26f0        .&      MOVS     r6,#0xf0
        0x080008da:    40be        .@      LSLS     r6,r6,r7
        0x080008dc:    6815        .h      LDR      r5,[r2,#0]
        0x080008de:    43b5        .C      BICS     r5,r5,r6
        0x080008e0:    0c26        &.      LSRS     r6,r4,#16
        0x080008e2:    4f04        .O      LDR      r7,[pc,#16] ; [0x80008f4] = 0x80028c5
        0x080008e4:    5c3f        ?\      LDRB     r7,[r7,r0]
        0x080008e6:    40be        .@      LSLS     r6,r6,r7
        0x080008e8:    4335        5C      ORRS     r5,r5,r6
        0x080008ea:    6015        .`      STR      r5,[r2,#0]
;;;2281   }
        0x080008ec:    bdf0        ..      POP      {r4-r7,pc}
    $d
        0x080008ee:    0000        ..      DCW    0
        0x080008f0:    080028b7    .(..    DCD    134228151
        0x080008f4:    080028c5    .(..    DCD    134228165
    $t
    i.LL_TIM_IC_SetPolarity
    LL_TIM_IC_SetPolarity
;;;2282   
;;;2283   /**
;;;2284     * @brief  Get the input filter duration.
;;;2285     * @rmtoll CCMR1        IC1F          LL_TIM_IC_GetFilter\n
;;;2286     *         CCMR1        IC2F          LL_TIM_IC_GetFilter\n
;;;2287     *         CCMR2        IC3F          LL_TIM_IC_GetFilter\n
;;;2288     *         CCMR2        IC4F          LL_TIM_IC_GetFilter
;;;2289     * @param  TIMx Timer instance
;;;2290     * @param  Channel This parameter can be one of the following values:
;;;2291     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2292     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2293     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2294     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2295     * @retval Returned value can be one of the following values:
;;;2296     *         @arg @ref LL_TIM_IC_FILTER_FDIV1
;;;2297     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N2
;;;2298     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N4
;;;2299     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N8
;;;2300     *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N6
;;;2301     *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N8
;;;2302     *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N6
;;;2303     *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N8
;;;2304     *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N6
;;;2305     *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N8
;;;2306     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N5
;;;2307     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N6
;;;2308     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N8
;;;2309     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N5
;;;2310     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
;;;2311     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
;;;2312     */
;;;2313   __STATIC_INLINE uint32_t LL_TIM_IC_GetFilter(TIM_TypeDef *TIMx, uint32_t Channel)
;;;2314   {
;;;2315     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2316     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2317     return ((READ_BIT(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iChannel]) << 16U);
;;;2318   }
;;;2319   
;;;2320   /**
;;;2321     * @brief  Set the input channel polarity.
;;;2322     * @rmtoll CCER         CC1P          LL_TIM_IC_SetPolarity\n
;;;2323     *         CCER         CC1NP         LL_TIM_IC_SetPolarity\n
;;;2324     *         CCER         CC2P          LL_TIM_IC_SetPolarity\n
;;;2325     *         CCER         CC2NP         LL_TIM_IC_SetPolarity\n
;;;2326     *         CCER         CC3P          LL_TIM_IC_SetPolarity\n
;;;2327     *         CCER         CC3NP         LL_TIM_IC_SetPolarity\n
;;;2328     *         CCER         CC4P          LL_TIM_IC_SetPolarity\n
;;;2329     * @param  TIMx Timer instance
;;;2330     * @param  Channel This parameter can be one of the following values:
;;;2331     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2332     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2333     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2334     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2335     * @param  ICPolarity This parameter can be one of the following values:
;;;2336     *         @arg @ref LL_TIM_IC_POLARITY_RISING
;;;2337     *         @arg @ref LL_TIM_IC_POLARITY_FALLING
;;;2338     * @retval None
;;;2339     */
;;;2340   __STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
;;;2341   {
        0x080008f8:    b570        p.      PUSH     {r4-r6,lr}
;;;2342     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
        0x080008fa:    2901        .)      CMP      r1,#1
        0x080008fc:    d101        ..      BNE      0x8000902 ; LL_TIM_IC_SetPolarity + 10
        0x080008fe:    2400        .$      MOVS     r4,#0
        0x08000900:    e016        ..      B        0x8000930 ; LL_TIM_IC_SetPolarity + 56
        0x08000902:    2904        .)      CMP      r1,#4
        0x08000904:    d101        ..      BNE      0x800090a ; LL_TIM_IC_SetPolarity + 18
        0x08000906:    2401        .$      MOVS     r4,#1
        0x08000908:    e012        ..      B        0x8000930 ; LL_TIM_IC_SetPolarity + 56
        0x0800090a:    2910        .)      CMP      r1,#0x10
        0x0800090c:    d101        ..      BNE      0x8000912 ; LL_TIM_IC_SetPolarity + 26
        0x0800090e:    2402        .$      MOVS     r4,#2
        0x08000910:    e00e        ..      B        0x8000930 ; LL_TIM_IC_SetPolarity + 56
        0x08000912:    2940        @)      CMP      r1,#0x40
        0x08000914:    d101        ..      BNE      0x800091a ; LL_TIM_IC_SetPolarity + 34
        0x08000916:    2403        .$      MOVS     r4,#3
        0x08000918:    e00a        ..      B        0x8000930 ; LL_TIM_IC_SetPolarity + 56
        0x0800091a:    f5b17f80    ....    CMP      r1,#0x100
        0x0800091e:    d101        ..      BNE      0x8000924 ; LL_TIM_IC_SetPolarity + 44
        0x08000920:    2404        .$      MOVS     r4,#4
        0x08000922:    e005        ..      B        0x8000930 ; LL_TIM_IC_SetPolarity + 56
        0x08000924:    f5b16f80    ...o    CMP      r1,#0x400
        0x08000928:    d101        ..      BNE      0x800092e ; LL_TIM_IC_SetPolarity + 54
        0x0800092a:    2405        .$      MOVS     r4,#5
        0x0800092c:    e000        ..      B        0x8000930 ; LL_TIM_IC_SetPolarity + 56
        0x0800092e:    2406        .$      MOVS     r4,#6
        0x08000930:    4623        #F      MOV      r3,r4
;;;2343     MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
        0x08000932:    6a04        .j      LDR      r4,[r0,#0x20]
        0x08000934:    4d05        .M      LDR      r5,[pc,#20] ; [0x800094c] = 0x80028cc
        0x08000936:    5cee        .\      LDRB     r6,[r5,r3]
        0x08000938:    250a        .%      MOVS     r5,#0xa
        0x0800093a:    40b5        .@      LSLS     r5,r5,r6
        0x0800093c:    43ac        .C      BICS     r4,r4,r5
        0x0800093e:    4d03        .M      LDR      r5,[pc,#12] ; [0x800094c] = 0x80028cc
        0x08000940:    5ced        .\      LDRB     r5,[r5,r3]
        0x08000942:    fa02f505    ....    LSL      r5,r2,r5
        0x08000946:    432c        ,C      ORRS     r4,r4,r5
        0x08000948:    6204        .b      STR      r4,[r0,#0x20]
;;;2344                ICPolarity << SHIFT_TAB_CCxP[iChannel]);
;;;2345   }
        0x0800094a:    bd70        p.      POP      {r4-r6,pc}
    $d
        0x0800094c:    080028cc    .(..    DCD    134228172
    $t
    i.LL_TIM_IC_SetPrescaler
    LL_TIM_IC_SetPrescaler
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h (2214)
        0x08000950:    b5f0        ..      PUSH     {r4-r7,lr}
        0x08000952:    4603        .F      MOV      r3,r0
        0x08000954:    4614        .F      MOV      r4,r2
;;;2215     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
        0x08000956:    2901        .)      CMP      r1,#1
        0x08000958:    d101        ..      BNE      0x800095e ; LL_TIM_IC_SetPrescaler + 14
        0x0800095a:    2500        .%      MOVS     r5,#0
        0x0800095c:    e016        ..      B        0x800098c ; LL_TIM_IC_SetPrescaler + 60
        0x0800095e:    2904        .)      CMP      r1,#4
        0x08000960:    d101        ..      BNE      0x8000966 ; LL_TIM_IC_SetPrescaler + 22
        0x08000962:    2501        .%      MOVS     r5,#1
        0x08000964:    e012        ..      B        0x800098c ; LL_TIM_IC_SetPrescaler + 60
        0x08000966:    2910        .)      CMP      r1,#0x10
        0x08000968:    d101        ..      BNE      0x800096e ; LL_TIM_IC_SetPrescaler + 30
        0x0800096a:    2502        .%      MOVS     r5,#2
        0x0800096c:    e00e        ..      B        0x800098c ; LL_TIM_IC_SetPrescaler + 60
        0x0800096e:    2940        @)      CMP      r1,#0x40
        0x08000970:    d101        ..      BNE      0x8000976 ; LL_TIM_IC_SetPrescaler + 38
        0x08000972:    2503        .%      MOVS     r5,#3
        0x08000974:    e00a        ..      B        0x800098c ; LL_TIM_IC_SetPrescaler + 60
        0x08000976:    f5b17f80    ....    CMP      r1,#0x100
        0x0800097a:    d101        ..      BNE      0x8000980 ; LL_TIM_IC_SetPrescaler + 48
        0x0800097c:    2504        .%      MOVS     r5,#4
        0x0800097e:    e005        ..      B        0x800098c ; LL_TIM_IC_SetPrescaler + 60
        0x08000980:    f5b16f80    ...o    CMP      r1,#0x400
        0x08000984:    d101        ..      BNE      0x800098a ; LL_TIM_IC_SetPrescaler + 58
        0x08000986:    2505        .%      MOVS     r5,#5
        0x08000988:    e000        ..      B        0x800098c ; LL_TIM_IC_SetPrescaler + 60
        0x0800098a:    2506        .%      MOVS     r5,#6
        0x0800098c:    4628        (F      MOV      r0,r5
;;;2216     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
        0x0800098e:    4d09        .M      LDR      r5,[pc,#36] ; [0x80009b4] = 0x80028b7
        0x08000990:    5c2e        .\      LDRB     r6,[r5,r0]
        0x08000992:    f1030518    ....    ADD      r5,r3,#0x18
        0x08000996:    1972        r.      ADDS     r2,r6,r5
;;;2217     MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
        0x08000998:    4e07        .N      LDR      r6,[pc,#28] ; [0x80009b8] = 0x80028c5
        0x0800099a:    5c37        7\      LDRB     r7,[r6,r0]
        0x0800099c:    260c        .&      MOVS     r6,#0xc
        0x0800099e:    40be        .@      LSLS     r6,r6,r7
        0x080009a0:    6815        .h      LDR      r5,[r2,#0]
        0x080009a2:    43b5        .C      BICS     r5,r5,r6
        0x080009a4:    0c26        &.      LSRS     r6,r4,#16
        0x080009a6:    4f04        .O      LDR      r7,[pc,#16] ; [0x80009b8] = 0x80028c5
        0x080009a8:    5c3f        ?\      LDRB     r7,[r7,r0]
        0x080009aa:    40be        .@      LSLS     r6,r6,r7
        0x080009ac:    4335        5C      ORRS     r5,r5,r6
        0x080009ae:    6015        .`      STR      r5,[r2,#0]
;;;2218   }
        0x080009b0:    bdf0        ..      POP      {r4-r7,pc}
    $d
        0x080009b2:    0000        ..      DCW    0
        0x080009b4:    080028b7    .(..    DCD    134228151
        0x080009b8:    080028c5    .(..    DCD    134228165
    $t
    i.LL_TIM_Init
    LL_TIM_Init
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_tim.c
;;;341    {
        0x080009bc:    b510        ..      PUSH     {r4,lr}
        0x080009be:    4602        .F      MOV      r2,r0
;;;342      uint32_t tmpcr1 = 0U;
        0x080009c0:    2300        .#      MOVS     r3,#0
;;;343    
;;;344      /* Check the parameters */
;;;345      assert_param(IS_TIM_INSTANCE(TIMx));
;;;346      assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
;;;347      assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));
;;;348    
;;;349      tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
        0x080009c2:    6813        .h      LDR      r3,[r2,#0]
;;;350    
;;;351      if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
        0x080009c4:    481b        .H      LDR      r0,[pc,#108] ; [0x8000a34] = 0x40012c00
        0x080009c6:    4282        .B      CMP      r2,r0
        0x080009c8:    d008        ..      BEQ      0x80009dc ; LL_TIM_Init + 32
        0x080009ca:    f1b24f80    ...O    CMP      r2,#0x40000000
        0x080009ce:    d005        ..      BEQ      0x80009dc ; LL_TIM_Init + 32
        0x080009d0:    4819        .H      LDR      r0,[pc,#100] ; [0x8000a38] = 0x40000400
        0x080009d2:    4282        .B      CMP      r2,r0
        0x080009d4:    d002        ..      BEQ      0x80009dc ; LL_TIM_Init + 32
        0x080009d6:    4819        .H      LDR      r0,[pc,#100] ; [0x8000a3c] = 0x40000800
        0x080009d8:    4282        .B      CMP      r2,r0
        0x080009da:    d104        ..      BNE      0x80009e6 ; LL_TIM_Init + 42
;;;352      {
;;;353        /* Select the Counter Mode */
;;;354        MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
        0x080009dc:    f0230070    #.p.    BIC      r0,r3,#0x70
        0x080009e0:    684c        Lh      LDR      r4,[r1,#4]
        0x080009e2:    ea400304    @...    ORR      r3,r0,r4
;;;355      }
;;;356    
;;;357      if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
        0x080009e6:    4813        .H      LDR      r0,[pc,#76] ; [0x8000a34] = 0x40012c00
        0x080009e8:    4282        .B      CMP      r2,r0
        0x080009ea:    d008        ..      BEQ      0x80009fe ; LL_TIM_Init + 66
        0x080009ec:    f1b24f80    ...O    CMP      r2,#0x40000000
        0x080009f0:    d005        ..      BEQ      0x80009fe ; LL_TIM_Init + 66
        0x080009f2:    4811        .H      LDR      r0,[pc,#68] ; [0x8000a38] = 0x40000400
        0x080009f4:    4282        .B      CMP      r2,r0
        0x080009f6:    d002        ..      BEQ      0x80009fe ; LL_TIM_Init + 66
        0x080009f8:    4810        .H      LDR      r0,[pc,#64] ; [0x8000a3c] = 0x40000800
        0x080009fa:    4282        .B      CMP      r2,r0
        0x080009fc:    d104        ..      BNE      0x8000a08 ; LL_TIM_Init + 76
;;;358      {
;;;359        /* Set the clock division */
;;;360        MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
        0x080009fe:    f4237040    #.@p    BIC      r0,r3,#0x300
        0x08000a02:    68cc        .h      LDR      r4,[r1,#0xc]
        0x08000a04:    ea400304    @...    ORR      r3,r0,r4
;;;361      }
;;;362    
;;;363      /* Write to TIMx CR1 */
;;;364      LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
        0x08000a08:    6013        .`      STR      r3,[r2,#0]
;;;365    
;;;366      /* Set the Autoreload value */
;;;367      LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
        0x08000a0a:    6888        .h      LDR      r0,[r1,#8]
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;1332     WRITE_REG(TIMx->ARR, AutoReload);
        0x08000a0c:    62d0        .b      STR      r0,[r2,#0x2c]
;;;1333   }
        0x08000a0e:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_tim.c
;;;370      LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
        0x08000a10:    8808        ..      LDRH     r0,[r1,#0]
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;1307     WRITE_REG(TIMx->PSC, Prescaler);
        0x08000a12:    6290        .b      STR      r0,[r2,#0x28]
;;;1308   }
        0x08000a14:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_tim.c
;;;372      if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
        0x08000a16:    4807        .H      LDR      r0,[pc,#28] ; [0x8000a34] = 0x40012c00
        0x08000a18:    4282        .B      CMP      r2,r0
        0x08000a1a:    d103        ..      BNE      0x8000a24 ; LL_TIM_Init + 104
;;;373      {
;;;374        /* Set the Repetition Counter value */
;;;375        LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
        0x08000a1c:    7c08        .|      LDRB     r0,[r1,#0x10]
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;1357     WRITE_REG(TIMx->RCR, RepetitionCounter);
        0x08000a1e:    6310        .c      STR      r0,[r2,#0x30]
;;;1358   }
        0x08000a20:    bf00        ..      NOP      
        0x08000a22:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_tim.c
;;;380      LL_TIM_GenerateEvent_UPDATE(TIMx);
        0x08000a24:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;3712     SET_BIT(TIMx->EGR, TIM_EGR_UG);
        0x08000a26:    6950        Pi      LDR      r0,[r2,#0x14]
        0x08000a28:    f0400001    @...    ORR      r0,r0,#1
        0x08000a2c:    6150        Pa      STR      r0,[r2,#0x14]
;;;3713   }
        0x08000a2e:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_tim.c
;;;382      return SUCCESS;
        0x08000a30:    2001        .       MOVS     r0,#1
;;;383    }
        0x08000a32:    bd10        ..      POP      {r4,pc}
    $d
        0x08000a34:    40012c00    .,.@    DCD    1073818624
        0x08000a38:    40000400    ...@    DCD    1073742848
        0x08000a3c:    40000800    ...@    DCD    1073743872
    $t
    i.LL_TIM_IsActiveFlag_UPDATE
    LL_TIM_IsActiveFlag_UPDATE
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;2942   {
        0x08000a40:    4601        .F      MOV      r1,r0
;;;2943     return (READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF));
        0x08000a42:    6908        .i      LDR      r0,[r1,#0x10]
        0x08000a44:    f0000001    ....    AND      r0,r0,#1
;;;2944   }
        0x08000a48:    4770        pG      BX       lr
        0x08000a4a:    0000        ..      MOVS     r0,r0
    i.LL_TIM_OC_DisableFast
    LL_TIM_OC_DisableFast
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h (1805)
        0x08000a4c:    b570        p.      PUSH     {r4-r6,lr}
        0x08000a4e:    4602        .F      MOV      r2,r0
;;;1806     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
        0x08000a50:    2901        .)      CMP      r1,#1
        0x08000a52:    d101        ..      BNE      0x8000a58 ; LL_TIM_OC_DisableFast + 12
        0x08000a54:    2400        .$      MOVS     r4,#0
        0x08000a56:    e016        ..      B        0x8000a86 ; LL_TIM_OC_DisableFast + 58
        0x08000a58:    2904        .)      CMP      r1,#4
        0x08000a5a:    d101        ..      BNE      0x8000a60 ; LL_TIM_OC_DisableFast + 20
        0x08000a5c:    2401        .$      MOVS     r4,#1
        0x08000a5e:    e012        ..      B        0x8000a86 ; LL_TIM_OC_DisableFast + 58
        0x08000a60:    2910        .)      CMP      r1,#0x10
        0x08000a62:    d101        ..      BNE      0x8000a68 ; LL_TIM_OC_DisableFast + 28
        0x08000a64:    2402        .$      MOVS     r4,#2
        0x08000a66:    e00e        ..      B        0x8000a86 ; LL_TIM_OC_DisableFast + 58
        0x08000a68:    2940        @)      CMP      r1,#0x40
        0x08000a6a:    d101        ..      BNE      0x8000a70 ; LL_TIM_OC_DisableFast + 36
        0x08000a6c:    2403        .$      MOVS     r4,#3
        0x08000a6e:    e00a        ..      B        0x8000a86 ; LL_TIM_OC_DisableFast + 58
        0x08000a70:    f5b17f80    ....    CMP      r1,#0x100
        0x08000a74:    d101        ..      BNE      0x8000a7a ; LL_TIM_OC_DisableFast + 46
        0x08000a76:    2404        .$      MOVS     r4,#4
        0x08000a78:    e005        ..      B        0x8000a86 ; LL_TIM_OC_DisableFast + 58
        0x08000a7a:    f5b16f80    ...o    CMP      r1,#0x400
        0x08000a7e:    d101        ..      BNE      0x8000a84 ; LL_TIM_OC_DisableFast + 56
        0x08000a80:    2405        .$      MOVS     r4,#5
        0x08000a82:    e000        ..      B        0x8000a86 ; LL_TIM_OC_DisableFast + 58
        0x08000a84:    2406        .$      MOVS     r4,#6
        0x08000a86:    4623        #F      MOV      r3,r4
;;;1807     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
        0x08000a88:    4c06        .L      LDR      r4,[pc,#24] ; [0x8000aa4] = 0x80028b7
        0x08000a8a:    5ce5        .\      LDRB     r5,[r4,r3]
        0x08000a8c:    f1020418    ....    ADD      r4,r2,#0x18
        0x08000a90:    1928        (.      ADDS     r0,r5,r4
;;;1808     CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
        0x08000a92:    4d05        .M      LDR      r5,[pc,#20] ; [0x8000aa8] = 0x80028be
        0x08000a94:    5cee        .\      LDRB     r6,[r5,r3]
        0x08000a96:    2504        .%      MOVS     r5,#4
        0x08000a98:    40b5        .@      LSLS     r5,r5,r6
        0x08000a9a:    6804        .h      LDR      r4,[r0,#0]
        0x08000a9c:    43ac        .C      BICS     r4,r4,r5
        0x08000a9e:    6004        .`      STR      r4,[r0,#0]
;;;1809   
;;;1810   }
        0x08000aa0:    bd70        p.      POP      {r4-r6,pc}
    $d
        0x08000aa2:    0000        ..      DCW    0
        0x08000aa4:    080028b7    .(..    DCD    134228151
        0x08000aa8:    080028be    .(..    DCD    134228158
    $t
    i.LL_TIM_OC_EnablePreload
    LL_TIM_OC_EnablePreload
;;;1811   
;;;1812   /**
;;;1813     * @brief  Indicates whether fast mode is enabled for the output channel.
;;;1814     * @rmtoll CCMR1        OC1FE          LL_TIM_OC_IsEnabledFast\n
;;;1815     *         CCMR1        OC2FE          LL_TIM_OC_IsEnabledFast\n
;;;1816     *         CCMR2        OC3FE          LL_TIM_OC_IsEnabledFast\n
;;;1817     *         CCMR2        OC4FE          LL_TIM_OC_IsEnabledFast\n
;;;1818     * @param  TIMx Timer instance
;;;1819     * @param  Channel This parameter can be one of the following values:
;;;1820     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1821     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1822     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1823     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1824     * @retval State of bit (1 or 0).
;;;1825     */
;;;1826   __STATIC_INLINE uint32_t LL_TIM_OC_IsEnabledFast(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1827   {
;;;1828     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;1829     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;1830     register uint32_t bitfield = TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel];
;;;1831     return (READ_BIT(*pReg, bitfield) == bitfield);
;;;1832   }
;;;1833   
;;;1834   /**
;;;1835     * @brief  Enable compare register (TIMx_CCRx) preload for the output channel.
;;;1836     * @rmtoll CCMR1        OC1PE          LL_TIM_OC_EnablePreload\n
;;;1837     *         CCMR1        OC2PE          LL_TIM_OC_EnablePreload\n
;;;1838     *         CCMR2        OC3PE          LL_TIM_OC_EnablePreload\n
;;;1839     *         CCMR2        OC4PE          LL_TIM_OC_EnablePreload
;;;1840     * @param  TIMx Timer instance
;;;1841     * @param  Channel This parameter can be one of the following values:
;;;1842     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;1843     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;1844     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;1845     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;1846     * @retval None
;;;1847     */
;;;1848   __STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
;;;1849   {
        0x08000aac:    b570        p.      PUSH     {r4-r6,lr}
        0x08000aae:    4602        .F      MOV      r2,r0
;;;1850     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
        0x08000ab0:    2901        .)      CMP      r1,#1
        0x08000ab2:    d101        ..      BNE      0x8000ab8 ; LL_TIM_OC_EnablePreload + 12
        0x08000ab4:    2400        .$      MOVS     r4,#0
        0x08000ab6:    e016        ..      B        0x8000ae6 ; LL_TIM_OC_EnablePreload + 58
        0x08000ab8:    2904        .)      CMP      r1,#4
        0x08000aba:    d101        ..      BNE      0x8000ac0 ; LL_TIM_OC_EnablePreload + 20
        0x08000abc:    2401        .$      MOVS     r4,#1
        0x08000abe:    e012        ..      B        0x8000ae6 ; LL_TIM_OC_EnablePreload + 58
        0x08000ac0:    2910        .)      CMP      r1,#0x10
        0x08000ac2:    d101        ..      BNE      0x8000ac8 ; LL_TIM_OC_EnablePreload + 28
        0x08000ac4:    2402        .$      MOVS     r4,#2
        0x08000ac6:    e00e        ..      B        0x8000ae6 ; LL_TIM_OC_EnablePreload + 58
        0x08000ac8:    2940        @)      CMP      r1,#0x40
        0x08000aca:    d101        ..      BNE      0x8000ad0 ; LL_TIM_OC_EnablePreload + 36
        0x08000acc:    2403        .$      MOVS     r4,#3
        0x08000ace:    e00a        ..      B        0x8000ae6 ; LL_TIM_OC_EnablePreload + 58
        0x08000ad0:    f5b17f80    ....    CMP      r1,#0x100
        0x08000ad4:    d101        ..      BNE      0x8000ada ; LL_TIM_OC_EnablePreload + 46
        0x08000ad6:    2404        .$      MOVS     r4,#4
        0x08000ad8:    e005        ..      B        0x8000ae6 ; LL_TIM_OC_EnablePreload + 58
        0x08000ada:    f5b16f80    ...o    CMP      r1,#0x400
        0x08000ade:    d101        ..      BNE      0x8000ae4 ; LL_TIM_OC_EnablePreload + 56
        0x08000ae0:    2405        .$      MOVS     r4,#5
        0x08000ae2:    e000        ..      B        0x8000ae6 ; LL_TIM_OC_EnablePreload + 58
        0x08000ae4:    2406        .$      MOVS     r4,#6
        0x08000ae6:    4623        #F      MOV      r3,r4
;;;1851     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
        0x08000ae8:    4c06        .L      LDR      r4,[pc,#24] ; [0x8000b04] = 0x80028b7
        0x08000aea:    5ce5        .\      LDRB     r5,[r4,r3]
        0x08000aec:    f1020418    ....    ADD      r4,r2,#0x18
        0x08000af0:    1928        (.      ADDS     r0,r5,r4
;;;1852     SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
        0x08000af2:    4d05        .M      LDR      r5,[pc,#20] ; [0x8000b08] = 0x80028be
        0x08000af4:    5cee        .\      LDRB     r6,[r5,r3]
        0x08000af6:    2508        .%      MOVS     r5,#8
        0x08000af8:    40b5        .@      LSLS     r5,r5,r6
        0x08000afa:    6804        .h      LDR      r4,[r0,#0]
        0x08000afc:    432c        ,C      ORRS     r4,r4,r5
        0x08000afe:    6004        .`      STR      r4,[r0,#0]
;;;1853   }
        0x08000b00:    bd70        p.      POP      {r4-r6,pc}
    $d
        0x08000b02:    0000        ..      DCW    0
        0x08000b04:    080028b7    .(..    DCD    134228151
        0x08000b08:    080028be    .(..    DCD    134228158
    $t
    i.LL_TIM_OC_Init
    LL_TIM_OC_Init
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_tim.c
;;;418    {
        0x08000b0c:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x08000b10:    4606        .F      MOV      r6,r0
        0x08000b12:    460c        .F      MOV      r4,r1
        0x08000b14:    4615        .F      MOV      r5,r2
;;;419      ErrorStatus result = ERROR;
        0x08000b16:    2700        .'      MOVS     r7,#0
;;;420    
;;;421      switch (Channel)
        0x08000b18:    2c01        .,      CMP      r4,#1
        0x08000b1a:    d008        ..      BEQ      0x8000b2e ; LL_TIM_OC_Init + 34
        0x08000b1c:    2c10        .,      CMP      r4,#0x10
        0x08000b1e:    d00c        ..      BEQ      0x8000b3a ; LL_TIM_OC_Init + 46
        0x08000b20:    f5b47f80    ....    CMP      r4,#0x100
        0x08000b24:    d00f        ..      BEQ      0x8000b46 ; LL_TIM_OC_Init + 58
        0x08000b26:    f5b45f80    ..._    CMP      r4,#0x1000
        0x08000b2a:    d118        ..      BNE      0x8000b5e ; LL_TIM_OC_Init + 82
        0x08000b2c:    e011        ..      B        0x8000b52 ; LL_TIM_OC_Init + 70
;;;422      {
;;;423        case LL_TIM_CHANNEL_CH1:
;;;424          result = OC1Config(TIMx, TIM_OC_InitStruct);
        0x08000b2e:    4629        )F      MOV      r1,r5
        0x08000b30:    4630        0F      MOV      r0,r6
        0x08000b32:    f000fd53    ..S.    BL       OC1Config ; 0x80015dc
        0x08000b36:    4607        .F      MOV      r7,r0
;;;425          break;
        0x08000b38:    e012        ..      B        0x8000b60 ; LL_TIM_OC_Init + 84
;;;426        case LL_TIM_CHANNEL_CH2:
;;;427          result = OC2Config(TIMx, TIM_OC_InitStruct);
        0x08000b3a:    4629        )F      MOV      r1,r5
        0x08000b3c:    4630        0F      MOV      r0,r6
        0x08000b3e:    f000fd8b    ....    BL       OC2Config ; 0x8001658
        0x08000b42:    4607        .F      MOV      r7,r0
;;;428          break;
        0x08000b44:    e00c        ..      B        0x8000b60 ; LL_TIM_OC_Init + 84
;;;429        case LL_TIM_CHANNEL_CH3:
;;;430          result = OC3Config(TIMx, TIM_OC_InitStruct);
        0x08000b46:    4629        )F      MOV      r1,r5
        0x08000b48:    4630        0F      MOV      r0,r6
        0x08000b4a:    f000fdc9    ....    BL       OC3Config ; 0x80016e0
        0x08000b4e:    4607        .F      MOV      r7,r0
;;;431          break;
        0x08000b50:    e006        ..      B        0x8000b60 ; LL_TIM_OC_Init + 84
;;;432        case LL_TIM_CHANNEL_CH4:
;;;433          result = OC4Config(TIMx, TIM_OC_InitStruct);
        0x08000b52:    4629        )F      MOV      r1,r5
        0x08000b54:    4630        0F      MOV      r0,r6
        0x08000b56:    f000fe01    ....    BL       OC4Config ; 0x800175c
        0x08000b5a:    4607        .F      MOV      r7,r0
;;;434          break;
        0x08000b5c:    e000        ..      B        0x8000b60 ; LL_TIM_OC_Init + 84
;;;435        default:
;;;436          break;
        0x08000b5e:    bf00        ..      NOP      
        0x08000b60:    bf00        ..      NOP      
;;;437      }
;;;438    
;;;439      return result;
        0x08000b62:    4638        8F      MOV      r0,r7
;;;440    }
        0x08000b64:    e8bd81f0    ....    POP      {r4-r8,pc}
    i.LL_TIM_OC_SetCompareCH2
    LL_TIM_OC_SetCompareCH2
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;2011     WRITE_REG(TIMx->CCR2, CompareValue);
        0x08000b68:    6381        .c      STR      r1,[r0,#0x38]
;;;2012   }
        0x08000b6a:    4770        pG      BX       lr
    i.LL_TIM_SetClockSource
    LL_TIM_SetClockSource
;;;2013   
;;;2014   /**
;;;2015     * @brief  Set compare value for output channel 3 (TIMx_CCR3).
;;;2016     * @note Macro @ref IS_TIM_CC3_INSTANCE(TIMx) can be used to check whether or not
;;;2017     *       output channel is supported by a timer instance.
;;;2018     * @rmtoll CCR3         CCR3          LL_TIM_OC_SetCompareCH3
;;;2019     * @param  TIMx Timer instance
;;;2020     * @param  CompareValue between Min_Data=0 and Max_Data=65535
;;;2021     * @retval None
;;;2022     */
;;;2023   __STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
;;;2024   {
;;;2025     WRITE_REG(TIMx->CCR3, CompareValue);
;;;2026   }
;;;2027   
;;;2028   /**
;;;2029     * @brief  Set compare value for output channel 4 (TIMx_CCR4).
;;;2030     * @note Macro @ref IS_TIM_CC4_INSTANCE(TIMx) can be used to check whether or not
;;;2031     *       output channel 4 is supported by a timer instance.
;;;2032     * @rmtoll CCR4         CCR4          LL_TIM_OC_SetCompareCH4
;;;2033     * @param  TIMx Timer instance
;;;2034     * @param  CompareValue between Min_Data=0 and Max_Data=65535
;;;2035     * @retval None
;;;2036     */
;;;2037   __STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
;;;2038   {
;;;2039     WRITE_REG(TIMx->CCR4, CompareValue);
;;;2040   }
;;;2041   
;;;2042   /**
;;;2043     * @brief  Get compare value (TIMx_CCR1) set for  output channel 1.
;;;2044     * @note Macro @ref IS_TIM_CC1_INSTANCE(TIMx) can be used to check whether or not
;;;2045     *       output channel 1 is supported by a timer instance.
;;;2046     * @rmtoll CCR1         CCR1          LL_TIM_OC_GetCompareCH1
;;;2047     * @param  TIMx Timer instance
;;;2048     * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
;;;2049     */
;;;2050   __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH1(TIM_TypeDef *TIMx)
;;;2051   {
;;;2052     return (uint32_t)(READ_REG(TIMx->CCR1));
;;;2053   }
;;;2054   
;;;2055   /**
;;;2056     * @brief  Get compare value (TIMx_CCR2) set for  output channel 2.
;;;2057     * @note Macro @ref IS_TIM_CC2_INSTANCE(TIMx) can be used to check whether or not
;;;2058     *       output channel 2 is supported by a timer instance.
;;;2059     * @rmtoll CCR2         CCR2          LL_TIM_OC_GetCompareCH2
;;;2060     * @param  TIMx Timer instance
;;;2061     * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
;;;2062     */
;;;2063   __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH2(TIM_TypeDef *TIMx)
;;;2064   {
;;;2065     return (uint32_t)(READ_REG(TIMx->CCR2));
;;;2066   }
;;;2067   
;;;2068   /**
;;;2069     * @brief  Get compare value (TIMx_CCR3) set for  output channel 3.
;;;2070     * @note Macro @ref IS_TIM_CC3_INSTANCE(TIMx) can be used to check whether or not
;;;2071     *       output channel 3 is supported by a timer instance.
;;;2072     * @rmtoll CCR3         CCR3          LL_TIM_OC_GetCompareCH3
;;;2073     * @param  TIMx Timer instance
;;;2074     * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
;;;2075     */
;;;2076   __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH3(TIM_TypeDef *TIMx)
;;;2077   {
;;;2078     return (uint32_t)(READ_REG(TIMx->CCR3));
;;;2079   }
;;;2080   
;;;2081   /**
;;;2082     * @brief  Get compare value (TIMx_CCR4) set for  output channel 4.
;;;2083     * @note Macro @ref IS_TIM_CC4_INSTANCE(TIMx) can be used to check whether or not
;;;2084     *       output channel 4 is supported by a timer instance.
;;;2085     * @rmtoll CCR4         CCR4          LL_TIM_OC_GetCompareCH4
;;;2086     * @param  TIMx Timer instance
;;;2087     * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
;;;2088     */
;;;2089   __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH4(TIM_TypeDef *TIMx)
;;;2090   {
;;;2091     return (uint32_t)(READ_REG(TIMx->CCR4));
;;;2092   }
;;;2093   
;;;2094   /**
;;;2095     * @}
;;;2096     */
;;;2097   
;;;2098   /** @defgroup TIM_LL_EF_Input_Channel Input channel configuration
;;;2099     * @{
;;;2100     */
;;;2101   /**
;;;2102     * @brief  Configure input channel.
;;;2103     * @rmtoll CCMR1        CC1S          LL_TIM_IC_Config\n
;;;2104     *         CCMR1        IC1PSC        LL_TIM_IC_Config\n
;;;2105     *         CCMR1        IC1F          LL_TIM_IC_Config\n
;;;2106     *         CCMR1        CC2S          LL_TIM_IC_Config\n
;;;2107     *         CCMR1        IC2PSC        LL_TIM_IC_Config\n
;;;2108     *         CCMR1        IC2F          LL_TIM_IC_Config\n
;;;2109     *         CCMR2        CC3S          LL_TIM_IC_Config\n
;;;2110     *         CCMR2        IC3PSC        LL_TIM_IC_Config\n
;;;2111     *         CCMR2        IC3F          LL_TIM_IC_Config\n
;;;2112     *         CCMR2        CC4S          LL_TIM_IC_Config\n
;;;2113     *         CCMR2        IC4PSC        LL_TIM_IC_Config\n
;;;2114     *         CCMR2        IC4F          LL_TIM_IC_Config\n
;;;2115     *         CCER         CC1P          LL_TIM_IC_Config\n
;;;2116     *         CCER         CC1NP         LL_TIM_IC_Config\n
;;;2117     *         CCER         CC2P          LL_TIM_IC_Config\n
;;;2118     *         CCER         CC2NP         LL_TIM_IC_Config\n
;;;2119     *         CCER         CC3P          LL_TIM_IC_Config\n
;;;2120     *         CCER         CC3NP         LL_TIM_IC_Config\n
;;;2121     *         CCER         CC4P          LL_TIM_IC_Config\n
;;;2122     * @param  TIMx Timer instance
;;;2123     * @param  Channel This parameter can be one of the following values:
;;;2124     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2125     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2126     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2127     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2128     * @param  Configuration This parameter must be a combination of all the following values:
;;;2129     *         @arg @ref LL_TIM_ACTIVEINPUT_DIRECTTI or @ref LL_TIM_ACTIVEINPUT_INDIRECTTI or @ref LL_TIM_ACTIVEINPUT_TRC
;;;2130     *         @arg @ref LL_TIM_ICPSC_DIV1 or ... or @ref LL_TIM_ICPSC_DIV8
;;;2131     *         @arg @ref LL_TIM_IC_FILTER_FDIV1 or ... or @ref LL_TIM_IC_FILTER_FDIV32_N8
;;;2132     *         @arg @ref LL_TIM_IC_POLARITY_RISING or @ref LL_TIM_IC_POLARITY_FALLING
;;;2133     * @retval None
;;;2134     */
;;;2135   __STATIC_INLINE void LL_TIM_IC_Config(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Configuration)
;;;2136   {
;;;2137     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2138     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2139     MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F | TIM_CCMR1_IC1PSC | TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]),
;;;2140                ((Configuration >> 16U) & (TIM_CCMR1_IC1F | TIM_CCMR1_IC1PSC | TIM_CCMR1_CC1S))  << SHIFT_TAB_ICxx[iChannel]);
;;;2141     MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
;;;2142                (Configuration & (TIM_CCER_CC1NP | TIM_CCER_CC1P)) << SHIFT_TAB_CCxP[iChannel]);
;;;2143   }
;;;2144   
;;;2145   /**
;;;2146     * @brief  Set the active input.
;;;2147     * @rmtoll CCMR1        CC1S          LL_TIM_IC_SetActiveInput\n
;;;2148     *         CCMR1        CC2S          LL_TIM_IC_SetActiveInput\n
;;;2149     *         CCMR2        CC3S          LL_TIM_IC_SetActiveInput\n
;;;2150     *         CCMR2        CC4S          LL_TIM_IC_SetActiveInput
;;;2151     * @param  TIMx Timer instance
;;;2152     * @param  Channel This parameter can be one of the following values:
;;;2153     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2154     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2155     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2156     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2157     * @param  ICActiveInput This parameter can be one of the following values:
;;;2158     *         @arg @ref LL_TIM_ACTIVEINPUT_DIRECTTI
;;;2159     *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
;;;2160     *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
;;;2161     * @retval None
;;;2162     */
;;;2163   __STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiveInput)
;;;2164   {
;;;2165     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2166     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2167     MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
;;;2168   }
;;;2169   
;;;2170   /**
;;;2171     * @brief  Get the current active input.
;;;2172     * @rmtoll CCMR1        CC1S          LL_TIM_IC_GetActiveInput\n
;;;2173     *         CCMR1        CC2S          LL_TIM_IC_GetActiveInput\n
;;;2174     *         CCMR2        CC3S          LL_TIM_IC_GetActiveInput\n
;;;2175     *         CCMR2        CC4S          LL_TIM_IC_GetActiveInput
;;;2176     * @param  TIMx Timer instance
;;;2177     * @param  Channel This parameter can be one of the following values:
;;;2178     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2179     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2180     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2181     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2182     * @retval Returned value can be one of the following values:
;;;2183     *         @arg @ref LL_TIM_ACTIVEINPUT_DIRECTTI
;;;2184     *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
;;;2185     *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
;;;2186     */
;;;2187   __STATIC_INLINE uint32_t LL_TIM_IC_GetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel)
;;;2188   {
;;;2189     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2190     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2191     return ((READ_BIT(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iChannel]) << 16U);
;;;2192   }
;;;2193   
;;;2194   /**
;;;2195     * @brief  Set the prescaler of input channel.
;;;2196     * @rmtoll CCMR1        IC1PSC        LL_TIM_IC_SetPrescaler\n
;;;2197     *         CCMR1        IC2PSC        LL_TIM_IC_SetPrescaler\n
;;;2198     *         CCMR2        IC3PSC        LL_TIM_IC_SetPrescaler\n
;;;2199     *         CCMR2        IC4PSC        LL_TIM_IC_SetPrescaler
;;;2200     * @param  TIMx Timer instance
;;;2201     * @param  Channel This parameter can be one of the following values:
;;;2202     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2203     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2204     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2205     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2206     * @param  ICPrescaler This parameter can be one of the following values:
;;;2207     *         @arg @ref LL_TIM_ICPSC_DIV1
;;;2208     *         @arg @ref LL_TIM_ICPSC_DIV2
;;;2209     *         @arg @ref LL_TIM_ICPSC_DIV4
;;;2210     *         @arg @ref LL_TIM_ICPSC_DIV8
;;;2211     * @retval None
;;;2212     */
;;;2213   __STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
;;;2214   {
;;;2215     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2216     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2217     MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
;;;2218   }
;;;2219   
;;;2220   /**
;;;2221     * @brief  Get the current prescaler value acting on an  input channel.
;;;2222     * @rmtoll CCMR1        IC1PSC        LL_TIM_IC_GetPrescaler\n
;;;2223     *         CCMR1        IC2PSC        LL_TIM_IC_GetPrescaler\n
;;;2224     *         CCMR2        IC3PSC        LL_TIM_IC_GetPrescaler\n
;;;2225     *         CCMR2        IC4PSC        LL_TIM_IC_GetPrescaler
;;;2226     * @param  TIMx Timer instance
;;;2227     * @param  Channel This parameter can be one of the following values:
;;;2228     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2229     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2230     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2231     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2232     * @retval Returned value can be one of the following values:
;;;2233     *         @arg @ref LL_TIM_ICPSC_DIV1
;;;2234     *         @arg @ref LL_TIM_ICPSC_DIV2
;;;2235     *         @arg @ref LL_TIM_ICPSC_DIV4
;;;2236     *         @arg @ref LL_TIM_ICPSC_DIV8
;;;2237     */
;;;2238   __STATIC_INLINE uint32_t LL_TIM_IC_GetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel)
;;;2239   {
;;;2240     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2241     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2242     return ((READ_BIT(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iChannel]) << 16U);
;;;2243   }
;;;2244   
;;;2245   /**
;;;2246     * @brief  Set the input filter duration.
;;;2247     * @rmtoll CCMR1        IC1F          LL_TIM_IC_SetFilter\n
;;;2248     *         CCMR1        IC2F          LL_TIM_IC_SetFilter\n
;;;2249     *         CCMR2        IC3F          LL_TIM_IC_SetFilter\n
;;;2250     *         CCMR2        IC4F          LL_TIM_IC_SetFilter
;;;2251     * @param  TIMx Timer instance
;;;2252     * @param  Channel This parameter can be one of the following values:
;;;2253     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2254     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2255     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2256     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2257     * @param  ICFilter This parameter can be one of the following values:
;;;2258     *         @arg @ref LL_TIM_IC_FILTER_FDIV1
;;;2259     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N2
;;;2260     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N4
;;;2261     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N8
;;;2262     *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N6
;;;2263     *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N8
;;;2264     *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N6
;;;2265     *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N8
;;;2266     *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N6
;;;2267     *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N8
;;;2268     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N5
;;;2269     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N6
;;;2270     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N8
;;;2271     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N5
;;;2272     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
;;;2273     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
;;;2274     * @retval None
;;;2275     */
;;;2276   __STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
;;;2277   {
;;;2278     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2279     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2280     MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
;;;2281   }
;;;2282   
;;;2283   /**
;;;2284     * @brief  Get the input filter duration.
;;;2285     * @rmtoll CCMR1        IC1F          LL_TIM_IC_GetFilter\n
;;;2286     *         CCMR1        IC2F          LL_TIM_IC_GetFilter\n
;;;2287     *         CCMR2        IC3F          LL_TIM_IC_GetFilter\n
;;;2288     *         CCMR2        IC4F          LL_TIM_IC_GetFilter
;;;2289     * @param  TIMx Timer instance
;;;2290     * @param  Channel This parameter can be one of the following values:
;;;2291     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2292     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2293     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2294     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2295     * @retval Returned value can be one of the following values:
;;;2296     *         @arg @ref LL_TIM_IC_FILTER_FDIV1
;;;2297     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N2
;;;2298     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N4
;;;2299     *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N8
;;;2300     *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N6
;;;2301     *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N8
;;;2302     *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N6
;;;2303     *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N8
;;;2304     *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N6
;;;2305     *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N8
;;;2306     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N5
;;;2307     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N6
;;;2308     *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N8
;;;2309     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N5
;;;2310     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
;;;2311     *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
;;;2312     */
;;;2313   __STATIC_INLINE uint32_t LL_TIM_IC_GetFilter(TIM_TypeDef *TIMx, uint32_t Channel)
;;;2314   {
;;;2315     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2316     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
;;;2317     return ((READ_BIT(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iChannel]) << 16U);
;;;2318   }
;;;2319   
;;;2320   /**
;;;2321     * @brief  Set the input channel polarity.
;;;2322     * @rmtoll CCER         CC1P          LL_TIM_IC_SetPolarity\n
;;;2323     *         CCER         CC1NP         LL_TIM_IC_SetPolarity\n
;;;2324     *         CCER         CC2P          LL_TIM_IC_SetPolarity\n
;;;2325     *         CCER         CC2NP         LL_TIM_IC_SetPolarity\n
;;;2326     *         CCER         CC3P          LL_TIM_IC_SetPolarity\n
;;;2327     *         CCER         CC3NP         LL_TIM_IC_SetPolarity\n
;;;2328     *         CCER         CC4P          LL_TIM_IC_SetPolarity\n
;;;2329     * @param  TIMx Timer instance
;;;2330     * @param  Channel This parameter can be one of the following values:
;;;2331     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2332     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2333     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2334     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2335     * @param  ICPolarity This parameter can be one of the following values:
;;;2336     *         @arg @ref LL_TIM_IC_POLARITY_RISING
;;;2337     *         @arg @ref LL_TIM_IC_POLARITY_FALLING
;;;2338     * @retval None
;;;2339     */
;;;2340   __STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
;;;2341   {
;;;2342     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2343     MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
;;;2344                ICPolarity << SHIFT_TAB_CCxP[iChannel]);
;;;2345   }
;;;2346   
;;;2347   /**
;;;2348     * @brief  Get the current input channel polarity.
;;;2349     * @rmtoll CCER         CC1P          LL_TIM_IC_GetPolarity\n
;;;2350     *         CCER         CC1NP         LL_TIM_IC_GetPolarity\n
;;;2351     *         CCER         CC2P          LL_TIM_IC_GetPolarity\n
;;;2352     *         CCER         CC2NP         LL_TIM_IC_GetPolarity\n
;;;2353     *         CCER         CC3P          LL_TIM_IC_GetPolarity\n
;;;2354     *         CCER         CC3NP         LL_TIM_IC_GetPolarity\n
;;;2355     *         CCER         CC4P          LL_TIM_IC_GetPolarity\n
;;;2356     * @param  TIMx Timer instance
;;;2357     * @param  Channel This parameter can be one of the following values:
;;;2358     *         @arg @ref LL_TIM_CHANNEL_CH1
;;;2359     *         @arg @ref LL_TIM_CHANNEL_CH2
;;;2360     *         @arg @ref LL_TIM_CHANNEL_CH3
;;;2361     *         @arg @ref LL_TIM_CHANNEL_CH4
;;;2362     * @retval Returned value can be one of the following values:
;;;2363     *         @arg @ref LL_TIM_IC_POLARITY_RISING
;;;2364     *         @arg @ref LL_TIM_IC_POLARITY_FALLING
;;;2365     */
;;;2366   __STATIC_INLINE uint32_t LL_TIM_IC_GetPolarity(TIM_TypeDef *TIMx, uint32_t Channel)
;;;2367   {
;;;2368     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
;;;2369     return (READ_BIT(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel])) >>
;;;2370             SHIFT_TAB_CCxP[iChannel]);
;;;2371   }
;;;2372   
;;;2373   /**
;;;2374     * @brief  Connect the TIMx_CH1, CH2 and CH3 pins  to the TI1 input (XOR combination).
;;;2375     * @note Macro @ref IS_TIM_XOR_INSTANCE(TIMx) can be used to check whether or not
;;;2376     *       a timer instance provides an XOR input.
;;;2377     * @rmtoll CR2          TI1S          LL_TIM_IC_EnableXORCombination
;;;2378     * @param  TIMx Timer instance
;;;2379     * @retval None
;;;2380     */
;;;2381   __STATIC_INLINE void LL_TIM_IC_EnableXORCombination(TIM_TypeDef *TIMx)
;;;2382   {
;;;2383     SET_BIT(TIMx->CR2, TIM_CR2_TI1S);
;;;2384   }
;;;2385   
;;;2386   /**
;;;2387     * @brief  Disconnect the TIMx_CH1, CH2 and CH3 pins  from the TI1 input.
;;;2388     * @note Macro @ref IS_TIM_XOR_INSTANCE(TIMx) can be used to check whether or not
;;;2389     *       a timer instance provides an XOR input.
;;;2390     * @rmtoll CR2          TI1S          LL_TIM_IC_DisableXORCombination
;;;2391     * @param  TIMx Timer instance
;;;2392     * @retval None
;;;2393     */
;;;2394   __STATIC_INLINE void LL_TIM_IC_DisableXORCombination(TIM_TypeDef *TIMx)
;;;2395   {
;;;2396     CLEAR_BIT(TIMx->CR2, TIM_CR2_TI1S);
;;;2397   }
;;;2398   
;;;2399   /**
;;;2400     * @brief  Indicates whether the TIMx_CH1, CH2 and CH3 pins are connectected to the TI1 input.
;;;2401     * @note Macro @ref IS_TIM_XOR_INSTANCE(TIMx) can be used to check whether or not
;;;2402     * a timer instance provides an XOR input.
;;;2403     * @rmtoll CR2          TI1S          LL_TIM_IC_IsEnabledXORCombination
;;;2404     * @param  TIMx Timer instance
;;;2405     * @retval State of bit (1 or 0).
;;;2406     */
;;;2407   __STATIC_INLINE uint32_t LL_TIM_IC_IsEnabledXORCombination(TIM_TypeDef *TIMx)
;;;2408   {
;;;2409     return (READ_BIT(TIMx->CR2, TIM_CR2_TI1S) == (TIM_CR2_TI1S));
;;;2410   }
;;;2411   
;;;2412   /**
;;;2413     * @brief  Get captured value for input channel 1.
;;;2414     * @note Macro @ref IS_TIM_CC1_INSTANCE(TIMx) can be used to check whether or not
;;;2415     *       input channel 1 is supported by a timer instance.
;;;2416     * @rmtoll CCR1         CCR1          LL_TIM_IC_GetCaptureCH1
;;;2417     * @param  TIMx Timer instance
;;;2418     * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
;;;2419     */
;;;2420   __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH1(TIM_TypeDef *TIMx)
;;;2421   {
;;;2422     return (uint32_t)(READ_REG(TIMx->CCR1));
;;;2423   }
;;;2424   
;;;2425   /**
;;;2426     * @brief  Get captured value for input channel 2.
;;;2427     * @note Macro @ref IS_TIM_CC2_INSTANCE(TIMx) can be used to check whether or not
;;;2428     *       input channel 2 is supported by a timer instance.
;;;2429     * @rmtoll CCR2         CCR2          LL_TIM_IC_GetCaptureCH2
;;;2430     * @param  TIMx Timer instance
;;;2431     * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
;;;2432     */
;;;2433   __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH2(TIM_TypeDef *TIMx)
;;;2434   {
;;;2435     return (uint32_t)(READ_REG(TIMx->CCR2));
;;;2436   }
;;;2437   
;;;2438   /**
;;;2439     * @brief  Get captured value for input channel 3.
;;;2440     * @note Macro @ref IS_TIM_CC3_INSTANCE(TIMx) can be used to check whether or not
;;;2441     *       input channel 3 is supported by a timer instance.
;;;2442     * @rmtoll CCR3         CCR3          LL_TIM_IC_GetCaptureCH3
;;;2443     * @param  TIMx Timer instance
;;;2444     * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
;;;2445     */
;;;2446   __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH3(TIM_TypeDef *TIMx)
;;;2447   {
;;;2448     return (uint32_t)(READ_REG(TIMx->CCR3));
;;;2449   }
;;;2450   
;;;2451   /**
;;;2452     * @brief  Get captured value for input channel 4.
;;;2453     * @note Macro @ref IS_TIM_CC4_INSTANCE(TIMx) can be used to check whether or not
;;;2454     *       input channel 4 is supported by a timer instance.
;;;2455     * @rmtoll CCR4         CCR4          LL_TIM_IC_GetCaptureCH4
;;;2456     * @param  TIMx Timer instance
;;;2457     * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
;;;2458     */
;;;2459   __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH4(TIM_TypeDef *TIMx)
;;;2460   {
;;;2461     return (uint32_t)(READ_REG(TIMx->CCR4));
;;;2462   }
;;;2463   
;;;2464   /**
;;;2465     * @}
;;;2466     */
;;;2467   
;;;2468   /** @defgroup TIM_LL_EF_Clock_Selection Counter clock selection
;;;2469     * @{
;;;2470     */
;;;2471   /**
;;;2472     * @brief  Enable external clock mode 2.
;;;2473     * @note When external clock mode 2 is enabled the counter is clocked by any active edge on the ETRF signal.
;;;2474     * @note Macro @ref IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
;;;2475     *       whether or not a timer instance supports external clock mode2.
;;;2476     * @rmtoll SMCR         ECE           LL_TIM_EnableExternalClock
;;;2477     * @param  TIMx Timer instance
;;;2478     * @retval None
;;;2479     */
;;;2480   __STATIC_INLINE void LL_TIM_EnableExternalClock(TIM_TypeDef *TIMx)
;;;2481   {
;;;2482     SET_BIT(TIMx->SMCR, TIM_SMCR_ECE);
;;;2483   }
;;;2484   
;;;2485   /**
;;;2486     * @brief  Disable external clock mode 2.
;;;2487     * @note Macro @ref IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
;;;2488     *       whether or not a timer instance supports external clock mode2.
;;;2489     * @rmtoll SMCR         ECE           LL_TIM_DisableExternalClock
;;;2490     * @param  TIMx Timer instance
;;;2491     * @retval None
;;;2492     */
;;;2493   __STATIC_INLINE void LL_TIM_DisableExternalClock(TIM_TypeDef *TIMx)
;;;2494   {
;;;2495     CLEAR_BIT(TIMx->SMCR, TIM_SMCR_ECE);
;;;2496   }
;;;2497   
;;;2498   /**
;;;2499     * @brief  Indicate whether external clock mode 2 is enabled.
;;;2500     * @note Macro @ref IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
;;;2501     *       whether or not a timer instance supports external clock mode2.
;;;2502     * @rmtoll SMCR         ECE           LL_TIM_IsEnabledExternalClock
;;;2503     * @param  TIMx Timer instance
;;;2504     * @retval State of bit (1 or 0).
;;;2505     */
;;;2506   __STATIC_INLINE uint32_t LL_TIM_IsEnabledExternalClock(TIM_TypeDef *TIMx)
;;;2507   {
;;;2508     return (READ_BIT(TIMx->SMCR, TIM_SMCR_ECE) == (TIM_SMCR_ECE));
;;;2509   }
;;;2510   
;;;2511   /**
;;;2512     * @brief  Set the clock source of the counter clock.
;;;2513     * @note when selected clock source is external clock mode 1, the timer input
;;;2514     *       the external clock is applied is selected by calling the @ref LL_TIM_SetTriggerInput()
;;;2515     *       function. This timer input must be configured by calling
;;;2516     *       the @ref LL_TIM_IC_Config() function.
;;;2517     * @note Macro @ref IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(TIMx) can be used to check
;;;2518     *       whether or not a timer instance supports external clock mode1.
;;;2519     * @note Macro @ref IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
;;;2520     *       whether or not a timer instance supports external clock mode2.
;;;2521     * @rmtoll SMCR         SMS           LL_TIM_SetClockSource\n
;;;2522     *         SMCR         ECE           LL_TIM_SetClockSource
;;;2523     * @param  TIMx Timer instance
;;;2524     * @param  ClockSource This parameter can be one of the following values:
;;;2525     *         @arg @ref LL_TIM_CLOCKSOURCE_INTERNAL
;;;2526     *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
;;;2527     *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
;;;2528     * @retval None
;;;2529     */
;;;2530   __STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
;;;2531   {
;;;2532     MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
        0x08000b6c:    6882        .h      LDR      r2,[r0,#8]
        0x08000b6e:    f2440307    D...    MOV      r3,#0x4007
        0x08000b72:    439a        .C      BICS     r2,r2,r3
        0x08000b74:    430a        .C      ORRS     r2,r2,r1
        0x08000b76:    6082        .`      STR      r2,[r0,#8]
;;;2533   }
        0x08000b78:    4770        pG      BX       lr
    i.LL_TIM_SetTriggerOutput
    LL_TIM_SetTriggerOutput
;;;2534   
;;;2535   /**
;;;2536     * @brief  Set the encoder interface mode.
;;;2537     * @note Macro @ref IS_TIM_ENCODER_INTERFACE_INSTANCE(TIMx) can be used to check
;;;2538     *       whether or not a timer instance supports the encoder mode.
;;;2539     * @rmtoll SMCR         SMS           LL_TIM_SetEncoderMode
;;;2540     * @param  TIMx Timer instance
;;;2541     * @param  EncoderMode This parameter can be one of the following values:
;;;2542     *         @arg @ref LL_TIM_ENCODERMODE_X2_TI1
;;;2543     *         @arg @ref LL_TIM_ENCODERMODE_X2_TI2
;;;2544     *         @arg @ref LL_TIM_ENCODERMODE_X4_TI12
;;;2545     * @retval None
;;;2546     */
;;;2547   __STATIC_INLINE void LL_TIM_SetEncoderMode(TIM_TypeDef *TIMx, uint32_t EncoderMode)
;;;2548   {
;;;2549     MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
;;;2550   }
;;;2551   
;;;2552   /**
;;;2553     * @}
;;;2554     */
;;;2555   
;;;2556   /** @defgroup TIM_LL_EF_Timer_Synchronization Timer synchronisation configuration
;;;2557     * @{
;;;2558     */
;;;2559   /**
;;;2560     * @brief  Set the trigger output (TRGO) used for timer synchronization .
;;;2561     * @note Macro @ref IS_TIM_MASTER_INSTANCE(TIMx) can be used to check
;;;2562     *       whether or not a timer instance can operate as a master timer.
;;;2563     * @rmtoll CR2          MMS           LL_TIM_SetTriggerOutput
;;;2564     * @param  TIMx Timer instance
;;;2565     * @param  TimerSynchronization This parameter can be one of the following values:
;;;2566     *         @arg @ref LL_TIM_TRGO_RESET
;;;2567     *         @arg @ref LL_TIM_TRGO_ENABLE
;;;2568     *         @arg @ref LL_TIM_TRGO_UPDATE
;;;2569     *         @arg @ref LL_TIM_TRGO_CC1IF
;;;2570     *         @arg @ref LL_TIM_TRGO_OC1REF
;;;2571     *         @arg @ref LL_TIM_TRGO_OC2REF
;;;2572     *         @arg @ref LL_TIM_TRGO_OC3REF
;;;2573     *         @arg @ref LL_TIM_TRGO_OC4REF
;;;2574     * @retval None
;;;2575     */
;;;2576   __STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
;;;2577   {
;;;2578     MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
        0x08000b7a:    6842        Bh      LDR      r2,[r0,#4]
        0x08000b7c:    f0220270    ".p.    BIC      r2,r2,#0x70
        0x08000b80:    430a        .C      ORRS     r2,r2,r1
        0x08000b82:    6042        B`      STR      r2,[r0,#4]
;;;2579   }
        0x08000b84:    4770        pG      BX       lr
        0x08000b86:    0000        ..      MOVS     r0,r0
    i.LL_USART_Init
    LL_USART_Init
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_usart.c
;;;212    {
        0x08000b88:    e92d41ff    -..A    PUSH     {r0-r8,lr}
        0x08000b8c:    4604        .F      MOV      r4,r0
        0x08000b8e:    460d        .F      MOV      r5,r1
;;;213      ErrorStatus status = ERROR;
        0x08000b90:    2700        .'      MOVS     r7,#0
;;;214      uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
        0x08000b92:    2600        .&      MOVS     r6,#0
;;;215      LL_RCC_ClocksTypeDef rcc_clocks;
;;;216    
;;;217      /* Check the parameters */
;;;218      assert_param(IS_UART_INSTANCE(USARTx));
;;;219      assert_param(IS_LL_USART_BAUDRATE(USART_InitStruct->BaudRate));
;;;220      assert_param(IS_LL_USART_DATAWIDTH(USART_InitStruct->DataWidth));
;;;221      assert_param(IS_LL_USART_STOPBITS(USART_InitStruct->StopBits));
;;;222      assert_param(IS_LL_USART_PARITY(USART_InitStruct->Parity));
;;;223      assert_param(IS_LL_USART_DIRECTION(USART_InitStruct->TransferDirection));
;;;224      assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
;;;225    #if defined(USART_CR1_OVER8)
;;;226      assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
;;;227    #endif /* USART_OverSampling_Feature */
;;;228    
;;;229      /* USART needs to be in disabled state, in order to be able to configure some bits in
;;;230         CRx registers */
;;;231      if (LL_USART_IsEnabled(USARTx) == 0U)
        0x08000b94:    4620         F      MOV      r0,r4
        0x08000b96:    f000f83f    ..?.    BL       LL_USART_IsEnabled ; 0x8000c18
        0x08000b9a:    2800        .(      CMP      r0,#0
        0x08000b9c:    d132        2.      BNE      0x8000c04 ; LL_USART_Init + 124
;;;232      {
;;;233        /*---------------------------- USART CR1 Configuration -----------------------
;;;234         * Configure USARTx CR1 (USART Word Length, Parity, Mode and Oversampling bits) with parameters:
;;;235         * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
;;;236         * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
;;;237         * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
;;;238         * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
;;;239         */
;;;240    #if defined(USART_CR1_OVER8)
;;;241        MODIFY_REG(USARTx->CR1,
;;;242                   (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
;;;243                    USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
;;;244                   (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
;;;245                    USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
;;;246    #else
;;;247        MODIFY_REG(USARTx->CR1,
        0x08000b9e:    68e9        .h      LDR      r1,[r5,#0xc]
        0x08000ba0:    6868        hh      LDR      r0,[r5,#4]
        0x08000ba2:    4308        .C      ORRS     r0,r0,r1
        0x08000ba4:    6929        )i      LDR      r1,[r5,#0x10]
        0x08000ba6:    4308        .C      ORRS     r0,r0,r1
        0x08000ba8:    68e1        .h      LDR      r1,[r4,#0xc]
        0x08000baa:    f241620c    A..b    MOV      r2,#0x160c
        0x08000bae:    4391        .C      BICS     r1,r1,r2
        0x08000bb0:    4308        .C      ORRS     r0,r0,r1
        0x08000bb2:    60e0        .`      STR      r0,[r4,#0xc]
;;;248                   (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
;;;249                    USART_CR1_TE | USART_CR1_RE),
;;;250                   (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
;;;251                    USART_InitStruct->TransferDirection));
;;;252    #endif /* USART_OverSampling_Feature */
;;;253    
;;;254        /*---------------------------- USART CR2 Configuration -----------------------
;;;255         * Configure USARTx CR2 (Stop bits) with parameters:
;;;256         * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
;;;257         * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
;;;258         */
;;;259        LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
        0x08000bb4:    68a8        .h      LDR      r0,[r5,#8]
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h
;;;828      MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
        0x08000bb6:    6921        !i      LDR      r1,[r4,#0x10]
        0x08000bb8:    f4215140    !.@Q    BIC      r1,r1,#0x3000
        0x08000bbc:    4301        .C      ORRS     r1,r1,r0
        0x08000bbe:    6121        !a      STR      r1,[r4,#0x10]
;;;829    }
        0x08000bc0:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_usart.c
;;;265        LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
        0x08000bc2:    6968        hi      LDR      r0,[r5,#0x14]
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h
;;;972      MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
        0x08000bc4:    6961        ai      LDR      r1,[r4,#0x14]
        0x08000bc6:    f4217140    !.@q    BIC      r1,r1,#0x300
        0x08000bca:    4301        .C      ORRS     r1,r1,r0
        0x08000bcc:    6161        aa      STR      r1,[r4,#0x14]
;;;973    }
        0x08000bce:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_usart.c
;;;270        LL_RCC_GetSystemClocksFreq(&rcc_clocks);
        0x08000bd0:    4668        hF      MOV      r0,sp
        0x08000bd2:    f7fffdb9    ....    BL       LL_RCC_GetSystemClocksFreq ; 0x8000748
;;;271        if (USARTx == USART1)
        0x08000bd6:    480d        .H      LDR      r0,[pc,#52] ; [0x8000c0c] = 0x40013800
        0x08000bd8:    4284        .B      CMP      r4,r0
        0x08000bda:    d101        ..      BNE      0x8000be0 ; LL_USART_Init + 88
;;;272        {
;;;273          periphclk = rcc_clocks.PCLK2_Frequency;
        0x08000bdc:    9e03        ..      LDR      r6,[sp,#0xc]
        0x08000bde:    e008        ..      B        0x8000bf2 ; LL_USART_Init + 106
;;;274        }
;;;275        else if (USARTx == USART2)
        0x08000be0:    480b        .H      LDR      r0,[pc,#44] ; [0x8000c10] = 0x40004400
        0x08000be2:    4284        .B      CMP      r4,r0
        0x08000be4:    d101        ..      BNE      0x8000bea ; LL_USART_Init + 98
;;;276        {
;;;277          periphclk = rcc_clocks.PCLK1_Frequency;
        0x08000be6:    9e02        ..      LDR      r6,[sp,#8]
        0x08000be8:    e003        ..      B        0x8000bf2 ; LL_USART_Init + 106
;;;278        }
;;;279    #if defined(USART3)
;;;280        else if (USARTx == USART3)
        0x08000bea:    480a        .H      LDR      r0,[pc,#40] ; [0x8000c14] = 0x40004800
        0x08000bec:    4284        .B      CMP      r4,r0
        0x08000bee:    d100        ..      BNE      0x8000bf2 ; LL_USART_Init + 106
;;;281        {
;;;282          periphclk = rcc_clocks.PCLK1_Frequency;
        0x08000bf0:    9e02        ..      LDR      r6,[sp,#8]
;;;283        }
;;;284    #endif /* USART3 */
;;;285    #if defined(UART4)
;;;286        else if (USARTx == UART4)
;;;287        {
;;;288          periphclk = rcc_clocks.PCLK1_Frequency;
;;;289        }
;;;290    #endif /* UART4 */
;;;291    #if defined(UART5)
;;;292        else if (USARTx == UART5)
;;;293        {
;;;294          periphclk = rcc_clocks.PCLK1_Frequency;
;;;295        }
;;;296    #endif /* UART5 */
;;;297        else
;;;298        {
;;;299          /* Nothing to do, as error code is already assigned to ERROR value */
;;;300        }
;;;301    
;;;302        /* Configure the USART Baud Rate :
;;;303           - valid baud rate value (different from 0) is required
;;;304           - Peripheral clock as returned by RCC service, should be valid (different from 0).
;;;305        */
;;;306        if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
        0x08000bf2:    b13e        >.      CBZ      r6,0x8000c04 ; LL_USART_Init + 124
;;;307            && (USART_InitStruct->BaudRate != 0U))
        0x08000bf4:    6828        (h      LDR      r0,[r5,#0]
        0x08000bf6:    b128        (.      CBZ      r0,0x8000c04 ; LL_USART_Init + 124
;;;308        {
;;;309          status = SUCCESS;
        0x08000bf8:    2701        .'      MOVS     r7,#1
;;;310    #if defined(USART_CR1_OVER8)
;;;311          LL_USART_SetBaudRate(USARTx,
;;;312                               periphclk,
;;;313                               USART_InitStruct->OverSampling,
;;;314                               USART_InitStruct->BaudRate);
;;;315    #else
;;;316          LL_USART_SetBaudRate(USARTx,
        0x08000bfa:    4631        1F      MOV      r1,r6
        0x08000bfc:    4620         F      MOV      r0,r4
        0x08000bfe:    682a        *h      LDR      r2,[r5,#0]
        0x08000c00:    f000f80f    ....    BL       LL_USART_SetBaudRate ; 0x8000c22
;;;317                               periphclk,
;;;318                               USART_InitStruct->BaudRate);
;;;319    #endif /* USART_OverSampling_Feature */
;;;320        }
;;;321      }
;;;322      /* Endif (=> USART not in Disabled state => return ERROR) */
;;;323    
;;;324      return (status);
        0x08000c04:    4638        8F      MOV      r0,r7
;;;325    }
        0x08000c06:    b004        ..      ADD      sp,sp,#0x10
        0x08000c08:    e8bd81f0    ....    POP      {r4-r8,pc}
    $d
        0x08000c0c:    40013800    .8.@    DCD    1073821696
        0x08000c10:    40004400    .D.@    DCD    1073759232
        0x08000c14:    40004800    .H.@    DCD    1073760256
    $t
    i.LL_USART_IsEnabled
    LL_USART_IsEnabled
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h
;;;455    {
        0x08000c18:    4601        .F      MOV      r1,r0
;;;456      return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
        0x08000c1a:    68c8        .h      LDR      r0,[r1,#0xc]
        0x08000c1c:    f3c03040    ..@0    UBFX     r0,r0,#13,#1
;;;457    }
        0x08000c20:    4770        pG      BX       lr
    i.LL_USART_SetBaudRate
    LL_USART_SetBaudRate
;;;458    
;;;459    /**
;;;460      * @brief  Receiver Enable (Receiver is enabled and begins searching for a start bit)
;;;461      * @rmtoll CR1          RE            LL_USART_EnableDirectionRx
;;;462      * @param  USARTx USART Instance
;;;463      * @retval None
;;;464      */
;;;465    __STATIC_INLINE void LL_USART_EnableDirectionRx(USART_TypeDef *USARTx)
;;;466    {
;;;467      SET_BIT(USARTx->CR1, USART_CR1_RE);
;;;468    }
;;;469    
;;;470    /**
;;;471      * @brief  Receiver Disable
;;;472      * @rmtoll CR1          RE            LL_USART_DisableDirectionRx
;;;473      * @param  USARTx USART Instance
;;;474      * @retval None
;;;475      */
;;;476    __STATIC_INLINE void LL_USART_DisableDirectionRx(USART_TypeDef *USARTx)
;;;477    {
;;;478      CLEAR_BIT(USARTx->CR1, USART_CR1_RE);
;;;479    }
;;;480    
;;;481    /**
;;;482      * @brief  Transmitter Enable
;;;483      * @rmtoll CR1          TE            LL_USART_EnableDirectionTx
;;;484      * @param  USARTx USART Instance
;;;485      * @retval None
;;;486      */
;;;487    __STATIC_INLINE void LL_USART_EnableDirectionTx(USART_TypeDef *USARTx)
;;;488    {
;;;489      SET_BIT(USARTx->CR1, USART_CR1_TE);
;;;490    }
;;;491    
;;;492    /**
;;;493      * @brief  Transmitter Disable
;;;494      * @rmtoll CR1          TE            LL_USART_DisableDirectionTx
;;;495      * @param  USARTx USART Instance
;;;496      * @retval None
;;;497      */
;;;498    __STATIC_INLINE void LL_USART_DisableDirectionTx(USART_TypeDef *USARTx)
;;;499    {
;;;500      CLEAR_BIT(USARTx->CR1, USART_CR1_TE);
;;;501    }
;;;502    
;;;503    /**
;;;504      * @brief  Configure simultaneously enabled/disabled states
;;;505      *         of Transmitter and Receiver
;;;506      * @rmtoll CR1          RE            LL_USART_SetTransferDirection\n
;;;507      *         CR1          TE            LL_USART_SetTransferDirection
;;;508      * @param  USARTx USART Instance
;;;509      * @param  TransferDirection This parameter can be one of the following values:
;;;510      *         @arg @ref LL_USART_DIRECTION_NONE
;;;511      *         @arg @ref LL_USART_DIRECTION_RX
;;;512      *         @arg @ref LL_USART_DIRECTION_TX
;;;513      *         @arg @ref LL_USART_DIRECTION_TX_RX
;;;514      * @retval None
;;;515      */
;;;516    __STATIC_INLINE void LL_USART_SetTransferDirection(USART_TypeDef *USARTx, uint32_t TransferDirection)
;;;517    {
;;;518      MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
;;;519    }
;;;520    
;;;521    /**
;;;522      * @brief  Return enabled/disabled states of Transmitter and Receiver
;;;523      * @rmtoll CR1          RE            LL_USART_GetTransferDirection\n
;;;524      *         CR1          TE            LL_USART_GetTransferDirection
;;;525      * @param  USARTx USART Instance
;;;526      * @retval Returned value can be one of the following values:
;;;527      *         @arg @ref LL_USART_DIRECTION_NONE
;;;528      *         @arg @ref LL_USART_DIRECTION_RX
;;;529      *         @arg @ref LL_USART_DIRECTION_TX
;;;530      *         @arg @ref LL_USART_DIRECTION_TX_RX
;;;531      */
;;;532    __STATIC_INLINE uint32_t LL_USART_GetTransferDirection(USART_TypeDef *USARTx)
;;;533    {
;;;534      return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_RE | USART_CR1_TE));
;;;535    }
;;;536    
;;;537    /**
;;;538      * @brief  Configure Parity (enabled/disabled and parity mode if enabled).
;;;539      * @note   This function selects if hardware parity control (generation and detection) is enabled or disabled.
;;;540      *         When the parity control is enabled (Odd or Even), computed parity bit is inserted at the MSB position
;;;541      *         (9th or 8th bit depending on data width) and parity is checked on the received data.
;;;542      * @rmtoll CR1          PS            LL_USART_SetParity\n
;;;543      *         CR1          PCE           LL_USART_SetParity
;;;544      * @param  USARTx USART Instance
;;;545      * @param  Parity This parameter can be one of the following values:
;;;546      *         @arg @ref LL_USART_PARITY_NONE
;;;547      *         @arg @ref LL_USART_PARITY_EVEN
;;;548      *         @arg @ref LL_USART_PARITY_ODD
;;;549      * @retval None
;;;550      */
;;;551    __STATIC_INLINE void LL_USART_SetParity(USART_TypeDef *USARTx, uint32_t Parity)
;;;552    {
;;;553      MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
;;;554    }
;;;555    
;;;556    /**
;;;557      * @brief  Return Parity configuration (enabled/disabled and parity mode if enabled)
;;;558      * @rmtoll CR1          PS            LL_USART_GetParity\n
;;;559      *         CR1          PCE           LL_USART_GetParity
;;;560      * @param  USARTx USART Instance
;;;561      * @retval Returned value can be one of the following values:
;;;562      *         @arg @ref LL_USART_PARITY_NONE
;;;563      *         @arg @ref LL_USART_PARITY_EVEN
;;;564      *         @arg @ref LL_USART_PARITY_ODD
;;;565      */
;;;566    __STATIC_INLINE uint32_t LL_USART_GetParity(USART_TypeDef *USARTx)
;;;567    {
;;;568      return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
;;;569    }
;;;570    
;;;571    /**
;;;572      * @brief  Set Receiver Wake Up method from Mute mode.
;;;573      * @rmtoll CR1          WAKE          LL_USART_SetWakeUpMethod
;;;574      * @param  USARTx USART Instance
;;;575      * @param  Method This parameter can be one of the following values:
;;;576      *         @arg @ref LL_USART_WAKEUP_IDLELINE
;;;577      *         @arg @ref LL_USART_WAKEUP_ADDRESSMARK
;;;578      * @retval None
;;;579      */
;;;580    __STATIC_INLINE void LL_USART_SetWakeUpMethod(USART_TypeDef *USARTx, uint32_t Method)
;;;581    {
;;;582      MODIFY_REG(USARTx->CR1, USART_CR1_WAKE, Method);
;;;583    }
;;;584    
;;;585    /**
;;;586      * @brief  Return Receiver Wake Up method from Mute mode
;;;587      * @rmtoll CR1          WAKE          LL_USART_GetWakeUpMethod
;;;588      * @param  USARTx USART Instance
;;;589      * @retval Returned value can be one of the following values:
;;;590      *         @arg @ref LL_USART_WAKEUP_IDLELINE
;;;591      *         @arg @ref LL_USART_WAKEUP_ADDRESSMARK
;;;592      */
;;;593    __STATIC_INLINE uint32_t LL_USART_GetWakeUpMethod(USART_TypeDef *USARTx)
;;;594    {
;;;595      return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_WAKE));
;;;596    }
;;;597    
;;;598    /**
;;;599      * @brief  Set Word length (i.e. nb of data bits, excluding start and stop bits)
;;;600      * @rmtoll CR1          M             LL_USART_SetDataWidth
;;;601      * @param  USARTx USART Instance
;;;602      * @param  DataWidth This parameter can be one of the following values:
;;;603      *         @arg @ref LL_USART_DATAWIDTH_8B
;;;604      *         @arg @ref LL_USART_DATAWIDTH_9B
;;;605      * @retval None
;;;606      */
;;;607    __STATIC_INLINE void LL_USART_SetDataWidth(USART_TypeDef *USARTx, uint32_t DataWidth)
;;;608    {
;;;609      MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
;;;610    }
;;;611    
;;;612    /**
;;;613      * @brief  Return Word length (i.e. nb of data bits, excluding start and stop bits)
;;;614      * @rmtoll CR1          M             LL_USART_GetDataWidth
;;;615      * @param  USARTx USART Instance
;;;616      * @retval Returned value can be one of the following values:
;;;617      *         @arg @ref LL_USART_DATAWIDTH_8B
;;;618      *         @arg @ref LL_USART_DATAWIDTH_9B
;;;619      */
;;;620    __STATIC_INLINE uint32_t LL_USART_GetDataWidth(USART_TypeDef *USARTx)
;;;621    {
;;;622      return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
;;;623    }
;;;624    
;;;625    #if defined(USART_CR1_OVER8)
;;;626    /**
;;;627      * @brief  Set Oversampling to 8-bit or 16-bit mode
;;;628      * @rmtoll CR1          OVER8         LL_USART_SetOverSampling
;;;629      * @param  USARTx USART Instance
;;;630      * @param  OverSampling This parameter can be one of the following values:
;;;631      *         @arg @ref LL_USART_OVERSAMPLING_16
;;;632      *         @arg @ref LL_USART_OVERSAMPLING_8
;;;633      * @retval None
;;;634      */
;;;635    __STATIC_INLINE void LL_USART_SetOverSampling(USART_TypeDef *USARTx, uint32_t OverSampling)
;;;636    {
;;;637      MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
;;;638    }
;;;639    
;;;640    /**
;;;641      * @brief  Return Oversampling mode
;;;642      * @rmtoll CR1          OVER8         LL_USART_GetOverSampling
;;;643      * @param  USARTx USART Instance
;;;644      * @retval Returned value can be one of the following values:
;;;645      *         @arg @ref LL_USART_OVERSAMPLING_16
;;;646      *         @arg @ref LL_USART_OVERSAMPLING_8
;;;647      */
;;;648    __STATIC_INLINE uint32_t LL_USART_GetOverSampling(USART_TypeDef *USARTx)
;;;649    {
;;;650      return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_OVER8));
;;;651    }
;;;652    
;;;653    #endif /* USART_OverSampling_Feature */
;;;654    /**
;;;655      * @brief  Configure if Clock pulse of the last data bit is output to the SCLK pin or not
;;;656      * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
;;;657      *         Synchronous mode is supported by the USARTx instance.
;;;658      * @rmtoll CR2          LBCL          LL_USART_SetLastClkPulseOutput
;;;659      * @param  USARTx USART Instance
;;;660      * @param  LastBitClockPulse This parameter can be one of the following values:
;;;661      *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
;;;662      *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
;;;663      * @retval None
;;;664      */
;;;665    __STATIC_INLINE void LL_USART_SetLastClkPulseOutput(USART_TypeDef *USARTx, uint32_t LastBitClockPulse)
;;;666    {
;;;667      MODIFY_REG(USARTx->CR2, USART_CR2_LBCL, LastBitClockPulse);
;;;668    }
;;;669    
;;;670    /**
;;;671      * @brief  Retrieve Clock pulse of the last data bit output configuration
;;;672      *         (Last bit Clock pulse output to the SCLK pin or not)
;;;673      * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
;;;674      *         Synchronous mode is supported by the USARTx instance.
;;;675      * @rmtoll CR2          LBCL          LL_USART_GetLastClkPulseOutput
;;;676      * @param  USARTx USART Instance
;;;677      * @retval Returned value can be one of the following values:
;;;678      *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
;;;679      *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
;;;680      */
;;;681    __STATIC_INLINE uint32_t LL_USART_GetLastClkPulseOutput(USART_TypeDef *USARTx)
;;;682    {
;;;683      return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_LBCL));
;;;684    }
;;;685    
;;;686    /**
;;;687      * @brief  Select the phase of the clock output on the SCLK pin in synchronous mode
;;;688      * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
;;;689      *         Synchronous mode is supported by the USARTx instance.
;;;690      * @rmtoll CR2          CPHA          LL_USART_SetClockPhase
;;;691      * @param  USARTx USART Instance
;;;692      * @param  ClockPhase This parameter can be one of the following values:
;;;693      *         @arg @ref LL_USART_PHASE_1EDGE
;;;694      *         @arg @ref LL_USART_PHASE_2EDGE
;;;695      * @retval None
;;;696      */
;;;697    __STATIC_INLINE void LL_USART_SetClockPhase(USART_TypeDef *USARTx, uint32_t ClockPhase)
;;;698    {
;;;699      MODIFY_REG(USARTx->CR2, USART_CR2_CPHA, ClockPhase);
;;;700    }
;;;701    
;;;702    /**
;;;703      * @brief  Return phase of the clock output on the SCLK pin in synchronous mode
;;;704      * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
;;;705      *         Synchronous mode is supported by the USARTx instance.
;;;706      * @rmtoll CR2          CPHA          LL_USART_GetClockPhase
;;;707      * @param  USARTx USART Instance
;;;708      * @retval Returned value can be one of the following values:
;;;709      *         @arg @ref LL_USART_PHASE_1EDGE
;;;710      *         @arg @ref LL_USART_PHASE_2EDGE
;;;711      */
;;;712    __STATIC_INLINE uint32_t LL_USART_GetClockPhase(USART_TypeDef *USARTx)
;;;713    {
;;;714      return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_CPHA));
;;;715    }
;;;716    
;;;717    /**
;;;718      * @brief  Select the polarity of the clock output on the SCLK pin in synchronous mode
;;;719      * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
;;;720      *         Synchronous mode is supported by the USARTx instance.
;;;721      * @rmtoll CR2          CPOL          LL_USART_SetClockPolarity
;;;722      * @param  USARTx USART Instance
;;;723      * @param  ClockPolarity This parameter can be one of the following values:
;;;724      *         @arg @ref LL_USART_POLARITY_LOW
;;;725      *         @arg @ref LL_USART_POLARITY_HIGH
;;;726      * @retval None
;;;727      */
;;;728    __STATIC_INLINE void LL_USART_SetClockPolarity(USART_TypeDef *USARTx, uint32_t ClockPolarity)
;;;729    {
;;;730      MODIFY_REG(USARTx->CR2, USART_CR2_CPOL, ClockPolarity);
;;;731    }
;;;732    
;;;733    /**
;;;734      * @brief  Return polarity of the clock output on the SCLK pin in synchronous mode
;;;735      * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
;;;736      *         Synchronous mode is supported by the USARTx instance.
;;;737      * @rmtoll CR2          CPOL          LL_USART_GetClockPolarity
;;;738      * @param  USARTx USART Instance
;;;739      * @retval Returned value can be one of the following values:
;;;740      *         @arg @ref LL_USART_POLARITY_LOW
;;;741      *         @arg @ref LL_USART_POLARITY_HIGH
;;;742      */
;;;743    __STATIC_INLINE uint32_t LL_USART_GetClockPolarity(USART_TypeDef *USARTx)
;;;744    {
;;;745      return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_CPOL));
;;;746    }
;;;747    
;;;748    /**
;;;749      * @brief  Configure Clock signal format (Phase Polarity and choice about output of last bit clock pulse)
;;;750      * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
;;;751      *         Synchronous mode is supported by the USARTx instance.
;;;752      * @note   Call of this function is equivalent to following function call sequence :
;;;753      *         - Clock Phase configuration using @ref LL_USART_SetClockPhase() function
;;;754      *         - Clock Polarity configuration using @ref LL_USART_SetClockPolarity() function
;;;755      *         - Output of Last bit Clock pulse configuration using @ref LL_USART_SetLastClkPulseOutput() function
;;;756      * @rmtoll CR2          CPHA          LL_USART_ConfigClock\n
;;;757      *         CR2          CPOL          LL_USART_ConfigClock\n
;;;758      *         CR2          LBCL          LL_USART_ConfigClock
;;;759      * @param  USARTx USART Instance
;;;760      * @param  Phase This parameter can be one of the following values:
;;;761      *         @arg @ref LL_USART_PHASE_1EDGE
;;;762      *         @arg @ref LL_USART_PHASE_2EDGE
;;;763      * @param  Polarity This parameter can be one of the following values:
;;;764      *         @arg @ref LL_USART_POLARITY_LOW
;;;765      *         @arg @ref LL_USART_POLARITY_HIGH
;;;766      * @param  LBCPOutput This parameter can be one of the following values:
;;;767      *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
;;;768      *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
;;;769      * @retval None
;;;770      */
;;;771    __STATIC_INLINE void LL_USART_ConfigClock(USART_TypeDef *USARTx, uint32_t Phase, uint32_t Polarity, uint32_t LBCPOutput)
;;;772    {
;;;773      MODIFY_REG(USARTx->CR2, USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_LBCL, Phase | Polarity | LBCPOutput);
;;;774    }
;;;775    
;;;776    /**
;;;777      * @brief  Enable Clock output on SCLK pin
;;;778      * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
;;;779      *         Synchronous mode is supported by the USARTx instance.
;;;780      * @rmtoll CR2          CLKEN         LL_USART_EnableSCLKOutput
;;;781      * @param  USARTx USART Instance
;;;782      * @retval None
;;;783      */
;;;784    __STATIC_INLINE void LL_USART_EnableSCLKOutput(USART_TypeDef *USARTx)
;;;785    {
;;;786      SET_BIT(USARTx->CR2, USART_CR2_CLKEN);
;;;787    }
;;;788    
;;;789    /**
;;;790      * @brief  Disable Clock output on SCLK pin
;;;791      * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
;;;792      *         Synchronous mode is supported by the USARTx instance.
;;;793      * @rmtoll CR2          CLKEN         LL_USART_DisableSCLKOutput
;;;794      * @param  USARTx USART Instance
;;;795      * @retval None
;;;796      */
;;;797    __STATIC_INLINE void LL_USART_DisableSCLKOutput(USART_TypeDef *USARTx)
;;;798    {
;;;799      CLEAR_BIT(USARTx->CR2, USART_CR2_CLKEN);
;;;800    }
;;;801    
;;;802    /**
;;;803      * @brief  Indicate if Clock output on SCLK pin is enabled
;;;804      * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
;;;805      *         Synchronous mode is supported by the USARTx instance.
;;;806      * @rmtoll CR2          CLKEN         LL_USART_IsEnabledSCLKOutput
;;;807      * @param  USARTx USART Instance
;;;808      * @retval State of bit (1 or 0).
;;;809      */
;;;810    __STATIC_INLINE uint32_t LL_USART_IsEnabledSCLKOutput(USART_TypeDef *USARTx)
;;;811    {
;;;812      return (READ_BIT(USARTx->CR2, USART_CR2_CLKEN) == (USART_CR2_CLKEN));
;;;813    }
;;;814    
;;;815    /**
;;;816      * @brief  Set the length of the stop bits
;;;817      * @rmtoll CR2          STOP          LL_USART_SetStopBitsLength
;;;818      * @param  USARTx USART Instance
;;;819      * @param  StopBits This parameter can be one of the following values:
;;;820      *         @arg @ref LL_USART_STOPBITS_0_5
;;;821      *         @arg @ref LL_USART_STOPBITS_1
;;;822      *         @arg @ref LL_USART_STOPBITS_1_5
;;;823      *         @arg @ref LL_USART_STOPBITS_2
;;;824      * @retval None
;;;825      */
;;;826    __STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
;;;827    {
;;;828      MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
;;;829    }
;;;830    
;;;831    /**
;;;832      * @brief  Retrieve the length of the stop bits
;;;833      * @rmtoll CR2          STOP          LL_USART_GetStopBitsLength
;;;834      * @param  USARTx USART Instance
;;;835      * @retval Returned value can be one of the following values:
;;;836      *         @arg @ref LL_USART_STOPBITS_0_5
;;;837      *         @arg @ref LL_USART_STOPBITS_1
;;;838      *         @arg @ref LL_USART_STOPBITS_1_5
;;;839      *         @arg @ref LL_USART_STOPBITS_2
;;;840      */
;;;841    __STATIC_INLINE uint32_t LL_USART_GetStopBitsLength(USART_TypeDef *USARTx)
;;;842    {
;;;843      return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
;;;844    }
;;;845    
;;;846    /**
;;;847      * @brief  Configure Character frame format (Datawidth, Parity control, Stop Bits)
;;;848      * @note   Call of this function is equivalent to following function call sequence :
;;;849      *         - Data Width configuration using @ref LL_USART_SetDataWidth() function
;;;850      *         - Parity Control and mode configuration using @ref LL_USART_SetParity() function
;;;851      *         - Stop bits configuration using @ref LL_USART_SetStopBitsLength() function
;;;852      * @rmtoll CR1          PS            LL_USART_ConfigCharacter\n
;;;853      *         CR1          PCE           LL_USART_ConfigCharacter\n
;;;854      *         CR1          M             LL_USART_ConfigCharacter\n
;;;855      *         CR2          STOP          LL_USART_ConfigCharacter
;;;856      * @param  USARTx USART Instance
;;;857      * @param  DataWidth This parameter can be one of the following values:
;;;858      *         @arg @ref LL_USART_DATAWIDTH_8B
;;;859      *         @arg @ref LL_USART_DATAWIDTH_9B
;;;860      * @param  Parity This parameter can be one of the following values:
;;;861      *         @arg @ref LL_USART_PARITY_NONE
;;;862      *         @arg @ref LL_USART_PARITY_EVEN
;;;863      *         @arg @ref LL_USART_PARITY_ODD
;;;864      * @param  StopBits This parameter can be one of the following values:
;;;865      *         @arg @ref LL_USART_STOPBITS_0_5
;;;866      *         @arg @ref LL_USART_STOPBITS_1
;;;867      *         @arg @ref LL_USART_STOPBITS_1_5
;;;868      *         @arg @ref LL_USART_STOPBITS_2
;;;869      * @retval None
;;;870      */
;;;871    __STATIC_INLINE void LL_USART_ConfigCharacter(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t Parity,
;;;872                                                  uint32_t StopBits)
;;;873    {
;;;874      MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
;;;875      MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
;;;876    }
;;;877    
;;;878    /**
;;;879      * @brief  Set Address of the USART node.
;;;880      * @note   This is used in multiprocessor communication during Mute mode or Stop mode,
;;;881      *         for wake up with address mark detection.
;;;882      * @rmtoll CR2          ADD           LL_USART_SetNodeAddress
;;;883      * @param  USARTx USART Instance
;;;884      * @param  NodeAddress 4 bit Address of the USART node.
;;;885      * @retval None
;;;886      */
;;;887    __STATIC_INLINE void LL_USART_SetNodeAddress(USART_TypeDef *USARTx, uint32_t NodeAddress)
;;;888    {
;;;889      MODIFY_REG(USARTx->CR2, USART_CR2_ADD, (NodeAddress & USART_CR2_ADD));
;;;890    }
;;;891    
;;;892    /**
;;;893      * @brief  Return 4 bit Address of the USART node as set in ADD field of CR2.
;;;894      * @note   only 4bits (b3-b0) of returned value are relevant (b31-b4 are not relevant)
;;;895      * @rmtoll CR2          ADD           LL_USART_GetNodeAddress
;;;896      * @param  USARTx USART Instance
;;;897      * @retval Address of the USART node (Value between Min_Data=0 and Max_Data=255)
;;;898      */
;;;899    __STATIC_INLINE uint32_t LL_USART_GetNodeAddress(USART_TypeDef *USARTx)
;;;900    {
;;;901      return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_ADD));
;;;902    }
;;;903    
;;;904    /**
;;;905      * @brief  Enable RTS HW Flow Control
;;;906      * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
;;;907      *         Hardware Flow control feature is supported by the USARTx instance.
;;;908      * @rmtoll CR3          RTSE          LL_USART_EnableRTSHWFlowCtrl
;;;909      * @param  USARTx USART Instance
;;;910      * @retval None
;;;911      */
;;;912    __STATIC_INLINE void LL_USART_EnableRTSHWFlowCtrl(USART_TypeDef *USARTx)
;;;913    {
;;;914      SET_BIT(USARTx->CR3, USART_CR3_RTSE);
;;;915    }
;;;916    
;;;917    /**
;;;918      * @brief  Disable RTS HW Flow Control
;;;919      * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
;;;920      *         Hardware Flow control feature is supported by the USARTx instance.
;;;921      * @rmtoll CR3          RTSE          LL_USART_DisableRTSHWFlowCtrl
;;;922      * @param  USARTx USART Instance
;;;923      * @retval None
;;;924      */
;;;925    __STATIC_INLINE void LL_USART_DisableRTSHWFlowCtrl(USART_TypeDef *USARTx)
;;;926    {
;;;927      CLEAR_BIT(USARTx->CR3, USART_CR3_RTSE);
;;;928    }
;;;929    
;;;930    /**
;;;931      * @brief  Enable CTS HW Flow Control
;;;932      * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
;;;933      *         Hardware Flow control feature is supported by the USARTx instance.
;;;934      * @rmtoll CR3          CTSE          LL_USART_EnableCTSHWFlowCtrl
;;;935      * @param  USARTx USART Instance
;;;936      * @retval None
;;;937      */
;;;938    __STATIC_INLINE void LL_USART_EnableCTSHWFlowCtrl(USART_TypeDef *USARTx)
;;;939    {
;;;940      SET_BIT(USARTx->CR3, USART_CR3_CTSE);
;;;941    }
;;;942    
;;;943    /**
;;;944      * @brief  Disable CTS HW Flow Control
;;;945      * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
;;;946      *         Hardware Flow control feature is supported by the USARTx instance.
;;;947      * @rmtoll CR3          CTSE          LL_USART_DisableCTSHWFlowCtrl
;;;948      * @param  USARTx USART Instance
;;;949      * @retval None
;;;950      */
;;;951    __STATIC_INLINE void LL_USART_DisableCTSHWFlowCtrl(USART_TypeDef *USARTx)
;;;952    {
;;;953      CLEAR_BIT(USARTx->CR3, USART_CR3_CTSE);
;;;954    }
;;;955    
;;;956    /**
;;;957      * @brief  Configure HW Flow Control mode (both CTS and RTS)
;;;958      * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
;;;959      *         Hardware Flow control feature is supported by the USARTx instance.
;;;960      * @rmtoll CR3          RTSE          LL_USART_SetHWFlowCtrl\n
;;;961      *         CR3          CTSE          LL_USART_SetHWFlowCtrl
;;;962      * @param  USARTx USART Instance
;;;963      * @param  HardwareFlowControl This parameter can be one of the following values:
;;;964      *         @arg @ref LL_USART_HWCONTROL_NONE
;;;965      *         @arg @ref LL_USART_HWCONTROL_RTS
;;;966      *         @arg @ref LL_USART_HWCONTROL_CTS
;;;967      *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
;;;968      * @retval None
;;;969      */
;;;970    __STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
;;;971    {
;;;972      MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
;;;973    }
;;;974    
;;;975    /**
;;;976      * @brief  Return HW Flow Control configuration (both CTS and RTS)
;;;977      * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
;;;978      *         Hardware Flow control feature is supported by the USARTx instance.
;;;979      * @rmtoll CR3          RTSE          LL_USART_GetHWFlowCtrl\n
;;;980      *         CR3          CTSE          LL_USART_GetHWFlowCtrl
;;;981      * @param  USARTx USART Instance
;;;982      * @retval Returned value can be one of the following values:
;;;983      *         @arg @ref LL_USART_HWCONTROL_NONE
;;;984      *         @arg @ref LL_USART_HWCONTROL_RTS
;;;985      *         @arg @ref LL_USART_HWCONTROL_CTS
;;;986      *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
;;;987      */
;;;988    __STATIC_INLINE uint32_t LL_USART_GetHWFlowCtrl(USART_TypeDef *USARTx)
;;;989    {
;;;990      return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
;;;991    }
;;;992    
;;;993    #if defined(USART_CR3_ONEBIT)
;;;994    /**
;;;995      * @brief  Enable One bit sampling method
;;;996      * @rmtoll CR3          ONEBIT        LL_USART_EnableOneBitSamp
;;;997      * @param  USARTx USART Instance
;;;998      * @retval None
;;;999      */
;;;1000   __STATIC_INLINE void LL_USART_EnableOneBitSamp(USART_TypeDef *USARTx)
;;;1001   {
;;;1002     SET_BIT(USARTx->CR3, USART_CR3_ONEBIT);
;;;1003   }
;;;1004   
;;;1005   /**
;;;1006     * @brief  Disable One bit sampling method
;;;1007     * @rmtoll CR3          ONEBIT        LL_USART_DisableOneBitSamp
;;;1008     * @param  USARTx USART Instance
;;;1009     * @retval None
;;;1010     */
;;;1011   __STATIC_INLINE void LL_USART_DisableOneBitSamp(USART_TypeDef *USARTx)
;;;1012   {
;;;1013     CLEAR_BIT(USARTx->CR3, USART_CR3_ONEBIT);
;;;1014   }
;;;1015   
;;;1016   /**
;;;1017     * @brief  Indicate if One bit sampling method is enabled
;;;1018     * @rmtoll CR3          ONEBIT        LL_USART_IsEnabledOneBitSamp
;;;1019     * @param  USARTx USART Instance
;;;1020     * @retval State of bit (1 or 0).
;;;1021     */
;;;1022   __STATIC_INLINE uint32_t LL_USART_IsEnabledOneBitSamp(USART_TypeDef *USARTx)
;;;1023   {
;;;1024     return (READ_BIT(USARTx->CR3, USART_CR3_ONEBIT) == (USART_CR3_ONEBIT));
;;;1025   }
;;;1026   #endif /* USART_OneBitSampling_Feature */
;;;1027   
;;;1028   #if defined(USART_CR1_OVER8)
;;;1029   /**
;;;1030     * @brief  Configure USART BRR register for achieving expected Baud Rate value.
;;;1031     * @note   Compute and set USARTDIV value in BRR Register (full BRR content)
;;;1032     *         according to used Peripheral Clock, Oversampling mode, and expected Baud Rate values
;;;1033     * @note   Peripheral clock and Baud rate values provided as function parameters should be valid
;;;1034     *         (Baud rate value != 0)
;;;1035     * @rmtoll BRR          BRR           LL_USART_SetBaudRate
;;;1036     * @param  USARTx USART Instance
;;;1037     * @param  PeriphClk Peripheral Clock
;;;1038     * @param  OverSampling This parameter can be one of the following values:
;;;1039     *         @arg @ref LL_USART_OVERSAMPLING_16
;;;1040     *         @arg @ref LL_USART_OVERSAMPLING_8
;;;1041     * @param  BaudRate Baud Rate
;;;1042     * @retval None
;;;1043     */
;;;1044   __STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
;;;1045                                             uint32_t BaudRate)
;;;1046   {
;;;1047     if (OverSampling == LL_USART_OVERSAMPLING_8)
;;;1048     {
;;;1049       USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
;;;1050     }
;;;1051     else
;;;1052     {
;;;1053       USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
;;;1054     }
;;;1055   }
;;;1056   
;;;1057   /**
;;;1058     * @brief  Return current Baud Rate value, according to USARTDIV present in BRR register
;;;1059     *         (full BRR content), and to used Peripheral Clock and Oversampling mode values
;;;1060     * @note   In case of non-initialized or invalid value stored in BRR register, value 0 will be returned.
;;;1061     * @rmtoll BRR          BRR           LL_USART_GetBaudRate
;;;1062     * @param  USARTx USART Instance
;;;1063     * @param  PeriphClk Peripheral Clock
;;;1064     * @param  OverSampling This parameter can be one of the following values:
;;;1065     *         @arg @ref LL_USART_OVERSAMPLING_16
;;;1066     *         @arg @ref LL_USART_OVERSAMPLING_8
;;;1067     * @retval Baud Rate
;;;1068     */
;;;1069   __STATIC_INLINE uint32_t LL_USART_GetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling)
;;;1070   {
;;;1071     register uint32_t usartdiv = 0x0U;
;;;1072     register uint32_t brrresult = 0x0U;
;;;1073   
;;;1074     usartdiv = USARTx->BRR;
;;;1075   
;;;1076     if (OverSampling == LL_USART_OVERSAMPLING_8)
;;;1077     {
;;;1078       if ((usartdiv & 0xFFF7U) != 0U)
;;;1079       {
;;;1080         usartdiv = (uint16_t)((usartdiv & 0xFFF0U) | ((usartdiv & 0x0007U) << 1U)) ;
;;;1081         brrresult = (PeriphClk * 2U) / usartdiv;
;;;1082       }
;;;1083     }
;;;1084     else
;;;1085     {
;;;1086       if ((usartdiv & 0xFFFFU) != 0U)
;;;1087       {
;;;1088         brrresult = PeriphClk / usartdiv;
;;;1089       }
;;;1090     }
;;;1091     return (brrresult);
;;;1092   }
;;;1093   #else
;;;1094   /**
;;;1095     * @brief  Configure USART BRR register for achieving expected Baud Rate value.
;;;1096     * @note   Compute and set USARTDIV value in BRR Register (full BRR content)
;;;1097     *         according to used Peripheral Clock, Oversampling mode, and expected Baud Rate values
;;;1098     * @note   Peripheral clock and Baud rate values provided as function parameters should be valid
;;;1099     *         (Baud rate value != 0)
;;;1100     * @rmtoll BRR          BRR           LL_USART_SetBaudRate
;;;1101     * @param  USARTx USART Instance
;;;1102     * @param  PeriphClk Peripheral Clock
;;;1103     * @param  BaudRate Baud Rate
;;;1104     * @retval None
;;;1105     */
;;;1106   __STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
;;;1107   {
        0x08000c22:    b570        p.      PUSH     {r4-r6,lr}
;;;1108       USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
        0x08000c24:    eb0103c1    ....    ADD      r3,r1,r1,LSL #3
        0x08000c28:    eb031301    ....    ADD      r3,r3,r1,LSL #4
        0x08000c2c:    0094        ..      LSLS     r4,r2,#2
        0x08000c2e:    fbb3f3f4    ....    UDIV     r3,r3,r4
        0x08000c32:    eb0104c1    ....    ADD      r4,r1,r1,LSL #3
        0x08000c36:    eb041401    ....    ADD      r4,r4,r1,LSL #4
        0x08000c3a:    0095        ..      LSLS     r5,r2,#2
        0x08000c3c:    fbb4f4f5    ....    UDIV     r4,r4,r5
        0x08000c40:    2564        d%      MOVS     r5,#0x64
        0x08000c42:    fbb4f4f5    ....    UDIV     r4,r4,r5
        0x08000c46:    eb0405c4    ....    ADD      r5,r4,r4,LSL #3
        0x08000c4a:    eb051404    ....    ADD      r4,r5,r4,LSL #4
        0x08000c4e:    eba30384    ....    SUB      r3,r3,r4,LSL #2
        0x08000c52:    2432        2$      MOVS     r4,#0x32
        0x08000c54:    eb041303    ....    ADD      r3,r4,r3,LSL #4
        0x08000c58:    2464        d$      MOVS     r4,#0x64
        0x08000c5a:    fbb3f3f4    ....    UDIV     r3,r3,r4
        0x08000c5e:    f00303f0    ....    AND      r3,r3,#0xf0
        0x08000c62:    eb0104c1    ....    ADD      r4,r1,r1,LSL #3
        0x08000c66:    eb041401    ....    ADD      r4,r4,r1,LSL #4
        0x08000c6a:    0095        ..      LSLS     r5,r2,#2
        0x08000c6c:    fbb4f4f5    ....    UDIV     r4,r4,r5
        0x08000c70:    2564        d%      MOVS     r5,#0x64
        0x08000c72:    fbb4f4f5    ....    UDIV     r4,r4,r5
        0x08000c76:    eb031404    ....    ADD      r4,r3,r4,LSL #4
        0x08000c7a:    eb0103c1    ....    ADD      r3,r1,r1,LSL #3
        0x08000c7e:    eb031301    ....    ADD      r3,r3,r1,LSL #4
        0x08000c82:    0095        ..      LSLS     r5,r2,#2
        0x08000c84:    fbb3f3f5    ....    UDIV     r3,r3,r5
        0x08000c88:    eb0105c1    ....    ADD      r5,r1,r1,LSL #3
        0x08000c8c:    eb051501    ....    ADD      r5,r5,r1,LSL #4
        0x08000c90:    0096        ..      LSLS     r6,r2,#2
        0x08000c92:    fbb5f5f6    ....    UDIV     r5,r5,r6
        0x08000c96:    2664        d&      MOVS     r6,#0x64
        0x08000c98:    fbb5f5f6    ....    UDIV     r5,r5,r6
        0x08000c9c:    eb0506c5    ....    ADD      r6,r5,r5,LSL #3
        0x08000ca0:    eb061505    ....    ADD      r5,r6,r5,LSL #4
        0x08000ca4:    eba30385    ....    SUB      r3,r3,r5,LSL #2
        0x08000ca8:    2532        2%      MOVS     r5,#0x32
        0x08000caa:    eb051303    ....    ADD      r3,r5,r3,LSL #4
        0x08000cae:    2564        d%      MOVS     r5,#0x64
        0x08000cb0:    fbb3f3f5    ....    UDIV     r3,r3,r5
        0x08000cb4:    f003030f    ....    AND      r3,r3,#0xf
        0x08000cb8:    4423        #D      ADD      r3,r3,r4
        0x08000cba:    b29b        ..      UXTH     r3,r3
        0x08000cbc:    6083        .`      STR      r3,[r0,#8]
;;;1109   }
        0x08000cbe:    bd70        p.      POP      {r4-r6,pc}
    i.LL_mDelay
    LL_mDelay
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_utils.c
;;;201    {
        0x08000cc0:    b508        ..      PUSH     {r3,lr}
;;;202      __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
        0x08000cc2:    f04f21e0    O..!    MOV      r1,#0xe000e000
        0x08000cc6:    6909        .i      LDR      r1,[r1,#0x10]
        0x08000cc8:    9100        ..      STR      r1,[sp,#0]
;;;203      /* Add this code to indicate that local variable is not used */
;;;204      ((void)tmp);
        0x08000cca:    bf00        ..      NOP      
;;;205    
;;;206      /* Add a period to guaranty minimum wait */
;;;207      if (Delay < LL_MAX_DELAY)
        0x08000ccc:    1c41        A.      ADDS     r1,r0,#1
        0x08000cce:    b101        ..      CBZ      r1,0x8000cd2 ; LL_mDelay + 18
;;;208      {
;;;209        Delay++;
        0x08000cd0:    1c40        @.      ADDS     r0,r0,#1
;;;210      }
;;;211    
;;;212      while (Delay)
        0x08000cd2:    e006        ..      B        0x8000ce2 ; LL_mDelay + 34
        0x08000cd4:    f04f21e0    O..!    MOV      r1,#0xe000e000
        0x08000cd8:    6909        .i      LDR      r1,[r1,#0x10]
        0x08000cda:    f4013180    ...1    AND      r1,r1,#0x10000
        0x08000cde:    b101        ..      CBZ      r1,0x8000ce2 ; LL_mDelay + 34
        0x08000ce0:    1e40        @.      SUBS     r0,r0,#1
        0x08000ce2:    2800        .(      CMP      r0,#0
        0x08000ce4:    d1f6        ..      BNE      0x8000cd4 ; LL_mDelay + 20
;;;213      {
;;;214        if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
;;;215        {
;;;216          Delay--;
;;;217        }
;;;218      }
;;;219    }
        0x08000ce6:    bd08        ..      POP      {r3,pc}
    i.MX_DMA_Init
    MX_DMA_Init
;;; .\../Src/main.c
;;;1063   {
        0x08000ce8:    b538        8.      PUSH     {r3-r5,lr}
;;;1064     /* Init with LL driver */
;;;1065     /* DMA controller clock enable */
;;;1066     LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
        0x08000cea:    2001        .       MOVS     r0,#1
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h
;;;288      SET_BIT(RCC->AHBENR, Periphs);
        0x08000cec:    4914        .I      LDR      r1,[pc,#80] ; [0x8000d40] = 0x40021000
        0x08000cee:    6949        Ii      LDR      r1,[r1,#0x14]
        0x08000cf0:    4301        .C      ORRS     r1,r1,r0
        0x08000cf2:    4a13        .J      LDR      r2,[pc,#76] ; [0x8000d40] = 0x40021000
        0x08000cf4:    6151        Qa      STR      r1,[r2,#0x14]
;;;289      /* Delay after an RCC peripheral clock enabling */
;;;290      tmpreg = READ_BIT(RCC->AHBENR, Periphs);
        0x08000cf6:    4611        .F      MOV      r1,r2
        0x08000cf8:    6949        Ii      LDR      r1,[r1,#0x14]
        0x08000cfa:    4001        .@      ANDS     r1,r1,r0
        0x08000cfc:    9100        ..      STR      r1,[sp,#0]
;;;291      (void)tmpreg;
        0x08000cfe:    bf00        ..      NOP      
;;;292    }
        0x08000d00:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;1070     NVIC_SetPriority(DMA1_Channel4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
        0x08000d02:    f000fc4f    ..O.    BL       NVIC_GetPriorityGrouping ; 0x80015a4
        0x08000d06:    4605        .F      MOV      r5,r0
        0x08000d08:    2200        ."      MOVS     r2,#0
        0x08000d0a:    2102        .!      MOVS     r1,#2
        0x08000d0c:    f000fc29    ..).    BL       NVIC_EncodePriority ; 0x8001562
        0x08000d10:    4604        .F      MOV      r4,r0
        0x08000d12:    4621        !F      MOV      r1,r4
        0x08000d14:    200e        .       MOVS     r0,#0xe
        0x08000d16:    f000fc4d    ..M.    BL       NVIC_SetPriority ; 0x80015b4
;;;1071     NVIC_EnableIRQ(DMA1_Channel4_IRQn);
        0x08000d1a:    200e        .       MOVS     r0,#0xe
        0x08000d1c:    f000fc16    ....    BL       NVIC_EnableIRQ ; 0x800154c
;;;1072     /* DMA1_Channel7_IRQn interrupt configuration */
;;;1073     NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
        0x08000d20:    f000fc40    ..@.    BL       NVIC_GetPriorityGrouping ; 0x80015a4
        0x08000d24:    4605        .F      MOV      r5,r0
        0x08000d26:    2200        ."      MOVS     r2,#0
        0x08000d28:    2102        .!      MOVS     r1,#2
        0x08000d2a:    f000fc1a    ....    BL       NVIC_EncodePriority ; 0x8001562
        0x08000d2e:    4604        .F      MOV      r4,r0
        0x08000d30:    4621        !F      MOV      r1,r4
        0x08000d32:    2011        .       MOVS     r0,#0x11
        0x08000d34:    f000fc3e    ..>.    BL       NVIC_SetPriority ; 0x80015b4
;;;1074     NVIC_EnableIRQ(DMA1_Channel7_IRQn);
        0x08000d38:    2011        .       MOVS     r0,#0x11
        0x08000d3a:    f000fc07    ....    BL       NVIC_EnableIRQ ; 0x800154c
;;;1075   
;;;1076   }
        0x08000d3e:    bd38        8.      POP      {r3-r5,pc}
    $d
        0x08000d40:    40021000    ...@    DCD    1073876992
    $t
    i.MX_GPIO_Init
    MX_GPIO_Init
;;;1077   
;;;1078   /**
;;;1079     * @brief GPIO Initialization Function
;;;1080     * @param None
;;;1081     * @retval None
;;;1082     */
;;;1083   static void MX_GPIO_Init(void)
;;;1084   {
        0x08000d44:    b500        ..      PUSH     {lr}
        0x08000d46:    b085        ..      SUB      sp,sp,#0x14
;;;1085     LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
        0x08000d48:    2114        .!      MOVS     r1,#0x14
        0x08000d4a:    4668        hF      MOV      r0,sp
        0x08000d4c:    f7fffa22    ..".    BL       __aeabi_memclr ; 0x8000194
;;;1086   
;;;1087     /* GPIO Ports Clock Enable */
;;;1088     LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
        0x08000d50:    2010        .       MOVS     r0,#0x10
        0x08000d52:    f7fffb39    ..9.    BL       LL_APB2_GRP1_EnableClock ; 0x80003c8
;;;1089     LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
        0x08000d56:    2020                MOVS     r0,#0x20
        0x08000d58:    f7fffb36    ..6.    BL       LL_APB2_GRP1_EnableClock ; 0x80003c8
;;;1090     LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
        0x08000d5c:    2004        .       MOVS     r0,#4
        0x08000d5e:    f7fffb33    ..3.    BL       LL_APB2_GRP1_EnableClock ; 0x80003c8
;;;1091     LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
        0x08000d62:    2008        .       MOVS     r0,#8
        0x08000d64:    f7fffb30    ..0.    BL       LL_APB2_GRP1_EnableClock ; 0x80003c8
;;;1092   
;;;1093     /**/
;;;1094     LL_GPIO_ResetOutputPin(GPIOC, LED_Pin|MOTOR_X_DIR_Pin);
        0x08000d68:    492b        +I      LDR      r1,[pc,#172] ; [0x8000e18] = 0x4a000a0
        0x08000d6a:    482c        ,H      LDR      r0,[pc,#176] ; [0x8000e1c] = 0x40011000
        0x08000d6c:    f7fffc48    ..H.    BL       LL_GPIO_ResetOutputPin ; 0x8000600
;;;1095   
;;;1096     /**/
;;;1097     LL_GPIO_ResetOutputPin(GPIOA, MOTOR_X_ENABLE_Pin|MOTOR_Z_DIR_Pin);
        0x08000d70:    f2482182    H..!    MOV      r1,#0x8282
        0x08000d74:    482a        *H      LDR      r0,[pc,#168] ; [0x8000e20] = 0x40010800
        0x08000d76:    f7fffc43    ..C.    BL       LL_GPIO_ResetOutputPin ; 0x8000600
;;;1098   
;;;1099     /**/
;;;1100     LL_GPIO_ResetOutputPin(MOTOR_Z_ENABLE_GPIO_Port, MOTOR_Z_ENABLE_Pin);
        0x08000d7a:    f2402102    @..!    MOV      r1,#0x202
        0x08000d7e:    4829        )H      LDR      r0,[pc,#164] ; [0x8000e24] = 0x40010c00
        0x08000d80:    f7fffc3e    ..>.    BL       LL_GPIO_ResetOutputPin ; 0x8000600
;;;1101   
;;;1102     /**/
;;;1103     GPIO_InitStruct.Pin = LED_Pin|MOTOR_X_DIR_Pin;
        0x08000d84:    4824        $H      LDR      r0,[pc,#144] ; [0x8000e18] = 0x4a000a0
        0x08000d86:    9000        ..      STR      r0,[sp,#0]
;;;1104     GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
        0x08000d88:    2001        .       MOVS     r0,#1
        0x08000d8a:    9001        ..      STR      r0,[sp,#4]
;;;1105     GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
        0x08000d8c:    2002        .       MOVS     r0,#2
        0x08000d8e:    9002        ..      STR      r0,[sp,#8]
;;;1106     GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
        0x08000d90:    2000        .       MOVS     r0,#0
        0x08000d92:    9003        ..      STR      r0,[sp,#0xc]
;;;1107     LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
        0x08000d94:    4669        iF      MOV      r1,sp
        0x08000d96:    4821        !H      LDR      r0,[pc,#132] ; [0x8000e1c] = 0x40011000
        0x08000d98:    f7fffb94    ....    BL       LL_GPIO_Init ; 0x80004c4
;;;1108   
;;;1109     /**/
;;;1110     GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
        0x08000d9c:    4822        "H      LDR      r0,[pc,#136] ; [0x8000e28] = 0x4400040
        0x08000d9e:    9000        ..      STR      r0,[sp,#0]
;;;1111     GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
        0x08000da0:    2000        .       MOVS     r0,#0
        0x08000da2:    9001        ..      STR      r0,[sp,#4]
;;;1112     LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
        0x08000da4:    4669        iF      MOV      r1,sp
        0x08000da6:    481d        .H      LDR      r0,[pc,#116] ; [0x8000e1c] = 0x40011000
        0x08000da8:    f7fffb8c    ....    BL       LL_GPIO_Init ; 0x80004c4
;;;1113   
;;;1114     /**/
;;;1115     GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_10 
        0x08000dac:    481f        .H      LDR      r0,[pc,#124] ; [0x8000e2c] = 0x49c31bd
        0x08000dae:    9000        ..      STR      r0,[sp,#0]
;;;1116                             |LL_GPIO_PIN_11|LL_GPIO_PIN_12|LL_GPIO_PIN_15;
;;;1117     GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
        0x08000db0:    2000        .       MOVS     r0,#0
        0x08000db2:    9001        ..      STR      r0,[sp,#4]
;;;1118     LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
        0x08000db4:    4669        iF      MOV      r1,sp
        0x08000db6:    481a        .H      LDR      r0,[pc,#104] ; [0x8000e20] = 0x40010800
        0x08000db8:    f7fffb84    ....    BL       LL_GPIO_Init ; 0x80004c4
;;;1119   
;;;1120     /**/
;;;1121     GPIO_InitStruct.Pin = MOTOR_X_ENABLE_Pin|MOTOR_Z_DIR_Pin;
        0x08000dbc:    f2482082    H..     MOV      r0,#0x8282
        0x08000dc0:    9000        ..      STR      r0,[sp,#0]
;;;1122     GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
        0x08000dc2:    2001        .       MOVS     r0,#1
        0x08000dc4:    9001        ..      STR      r0,[sp,#4]
;;;1123     GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
        0x08000dc6:    2002        .       MOVS     r0,#2
        0x08000dc8:    9002        ..      STR      r0,[sp,#8]
;;;1124     GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
        0x08000dca:    2000        .       MOVS     r0,#0
        0x08000dcc:    9003        ..      STR      r0,[sp,#0xc]
;;;1125     LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
        0x08000dce:    4669        iF      MOV      r1,sp
        0x08000dd0:    4813        .H      LDR      r0,[pc,#76] ; [0x8000e20] = 0x40010800
        0x08000dd2:    f7fffb77    ..w.    BL       LL_GPIO_Init ; 0x80004c4
;;;1126   
;;;1127     /**/
;;;1128     GPIO_InitStruct.Pin = MOTOR_Z_ENABLE_Pin;
        0x08000dd6:    f2402002    @..     MOV      r0,#0x202
        0x08000dda:    9000        ..      STR      r0,[sp,#0]
;;;1129     GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
        0x08000ddc:    2001        .       MOVS     r0,#1
        0x08000dde:    9001        ..      STR      r0,[sp,#4]
;;;1130     GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
        0x08000de0:    2002        .       MOVS     r0,#2
        0x08000de2:    9002        ..      STR      r0,[sp,#8]
;;;1131     GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
        0x08000de4:    2000        .       MOVS     r0,#0
        0x08000de6:    9003        ..      STR      r0,[sp,#0xc]
;;;1132     LL_GPIO_Init(MOTOR_Z_ENABLE_GPIO_Port, &GPIO_InitStruct);
        0x08000de8:    4669        iF      MOV      r1,sp
        0x08000dea:    480e        .H      LDR      r0,[pc,#56] ; [0x8000e24] = 0x40010c00
        0x08000dec:    f7fffb6a    ..j.    BL       LL_GPIO_Init ; 0x80004c4
;;;1133   
;;;1134     /**/
;;;1135     GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14 
        0x08000df0:    480f        .H      LDR      r0,[pc,#60] ; [0x8000e30] = 0x4f23cfe
        0x08000df2:    9000        ..      STR      r0,[sp,#0]
;;;1136                             |LL_GPIO_PIN_15|LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5 
;;;1137                             |LL_GPIO_PIN_9;
;;;1138     GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
        0x08000df4:    2000        .       MOVS     r0,#0
        0x08000df6:    9001        ..      STR      r0,[sp,#4]
;;;1139     LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
        0x08000df8:    4669        iF      MOV      r1,sp
        0x08000dfa:    480a        .H      LDR      r0,[pc,#40] ; [0x8000e24] = 0x40010c00
        0x08000dfc:    f7fffb62    ..b.    BL       LL_GPIO_Init ; 0x80004c4
;;;1140   
;;;1141     /**/
;;;1142     GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin;
        0x08000e00:    480c        .H      LDR      r0,[pc,#48] ; [0x8000e34] = 0x4030003
        0x08000e02:    9000        ..      STR      r0,[sp,#0]
;;;1143     GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
        0x08000e04:    2008        .       MOVS     r0,#8
        0x08000e06:    9001        ..      STR      r0,[sp,#4]
;;;1144     GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
        0x08000e08:    2001        .       MOVS     r0,#1
        0x08000e0a:    9004        ..      STR      r0,[sp,#0x10]
;;;1145     LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
        0x08000e0c:    4669        iF      MOV      r1,sp
        0x08000e0e:    4804        .H      LDR      r0,[pc,#16] ; [0x8000e20] = 0x40010800
        0x08000e10:    f7fffb58    ..X.    BL       LL_GPIO_Init ; 0x80004c4
;;;1146   
;;;1147   }
        0x08000e14:    b005        ..      ADD      sp,sp,#0x14
        0x08000e16:    bd00        ..      POP      {pc}
    $d
        0x08000e18:    04a000a0    ....    DCD    77594784
        0x08000e1c:    40011000    ...@    DCD    1073811456
        0x08000e20:    40010800    ...@    DCD    1073809408
        0x08000e24:    40010c00    ...@    DCD    1073810432
        0x08000e28:    04400040    @.@.    DCD    71303232
        0x08000e2c:    049c31bd    .1..    DCD    77345213
        0x08000e30:    04f23cfe    .<..    DCD    82984190
        0x08000e34:    04030003    ....    DCD    67305475
    $t
    i.MX_I2C2_Init
    MX_I2C2_Init
;;; .\../Src/main.c (655)
        0x08000e38:    b530        0.      PUSH     {r4,r5,lr}
        0x08000e3a:    b08b        ..      SUB      sp,sp,#0x2c
;;;656    
;;;657      /* USER CODE BEGIN I2C2_Init 0 */
;;;658    
;;;659      /* USER CODE END I2C2_Init 0 */
;;;660    
;;;661      LL_I2C_InitTypeDef I2C_InitStruct = {0};
        0x08000e3c:    2118        .!      MOVS     r1,#0x18
        0x08000e3e:    a805        ..      ADD      r0,sp,#0x14
        0x08000e40:    f7fff9a8    ....    BL       __aeabi_memclr ; 0x8000194
;;;662    
;;;663      LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
        0x08000e44:    2114        .!      MOVS     r1,#0x14
        0x08000e46:    4668        hF      MOV      r0,sp
        0x08000e48:    f7fff9a4    ....    BL       __aeabi_memclr ; 0x8000194
;;;664    
;;;665      LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
        0x08000e4c:    2008        .       MOVS     r0,#8
        0x08000e4e:    f7fffabb    ....    BL       LL_APB2_GRP1_EnableClock ; 0x80003c8
;;;666      /**I2C2 GPIO Configuration  
;;;667      PB10   ------> I2C2_SCL
;;;668      PB11   ------> I2C2_SDA 
;;;669      */
;;;670      GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
        0x08000e52:    4840        @H      LDR      r0,[pc,#256] ; [0x8000f54] = 0x40c000c
        0x08000e54:    9000        ..      STR      r0,[sp,#0]
;;;671      GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
        0x08000e56:    2009        .       MOVS     r0,#9
        0x08000e58:    9001        ..      STR      r0,[sp,#4]
;;;672      GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
        0x08000e5a:    2003        .       MOVS     r0,#3
        0x08000e5c:    9002        ..      STR      r0,[sp,#8]
;;;673      GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
        0x08000e5e:    2004        .       MOVS     r0,#4
        0x08000e60:    9003        ..      STR      r0,[sp,#0xc]
;;;674      LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
        0x08000e62:    4669        iF      MOV      r1,sp
        0x08000e64:    483c        <H      LDR      r0,[pc,#240] ; [0x8000f58] = 0x40010c00
        0x08000e66:    f7fffb2d    ..-.    BL       LL_GPIO_Init ; 0x80004c4
;;;675    
;;;676      /* Peripheral clock enable */
;;;677      LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
        0x08000e6a:    f44f0080    O...    MOV      r0,#0x400000
        0x08000e6e:    f7fffa9d    ....    BL       LL_APB1_GRP1_EnableClock ; 0x80003ac
;;;678    
;;;679      /* I2C2 DMA Init */
;;;680      
;;;681      /* I2C2_TX Init */
;;;682      LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_4, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
        0x08000e72:    2210        ."      MOVS     r2,#0x10
        0x08000e74:    2104        .!      MOVS     r1,#4
        0x08000e76:    4839        9H      LDR      r0,[pc,#228] ; [0x8000f5c] = 0x40020000
        0x08000e78:    f7fffac4    ....    BL       LL_DMA_SetDataTransferDirection ; 0x8000404
;;;683    
;;;684      LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PRIORITY_LOW);
        0x08000e7c:    2200        ."      MOVS     r2,#0
        0x08000e7e:    2104        .!      MOVS     r1,#4
        0x08000e80:    4836        6H      LDR      r0,[pc,#216] ; [0x8000f5c] = 0x40020000
        0x08000e82:    f7fffaaf    ....    BL       LL_DMA_SetChannelPriorityLevel ; 0x80003e4
;;;685    
;;;686      LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MODE_NORMAL);
        0x08000e86:    2200        ."      MOVS     r2,#0
        0x08000e88:    2104        .!      MOVS     r1,#4
        0x08000e8a:    4834        4H      LDR      r0,[pc,#208] ; [0x8000f5c] = 0x40020000
        0x08000e8c:    f7fffaea    ....    BL       LL_DMA_SetMode ; 0x8000464
;;;687    
;;;688      LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PERIPH_NOINCREMENT);
        0x08000e90:    2200        ."      MOVS     r2,#0
        0x08000e92:    2104        .!      MOVS     r1,#4
        0x08000e94:    4831        1H      LDR      r0,[pc,#196] ; [0x8000f5c] = 0x40020000
        0x08000e96:    f7fffaf5    ....    BL       LL_DMA_SetPeriphIncMode ; 0x8000484
;;;689    
;;;690      LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MEMORY_INCREMENT);
        0x08000e9a:    2280        ."      MOVS     r2,#0x80
        0x08000e9c:    2104        .!      MOVS     r1,#4
        0x08000e9e:    482f        /H      LDR      r0,[pc,#188] ; [0x8000f5c] = 0x40020000
        0x08000ea0:    f7fffac0    ....    BL       LL_DMA_SetMemoryIncMode ; 0x8000424
;;;691    
;;;692      LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PDATAALIGN_BYTE);
        0x08000ea4:    2200        ."      MOVS     r2,#0
        0x08000ea6:    2104        .!      MOVS     r1,#4
        0x08000ea8:    482c        ,H      LDR      r0,[pc,#176] ; [0x8000f5c] = 0x40020000
        0x08000eaa:    f7fffafb    ....    BL       LL_DMA_SetPeriphSize ; 0x80004a4
;;;693    
;;;694      LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MDATAALIGN_BYTE);
        0x08000eae:    2200        ."      MOVS     r2,#0
        0x08000eb0:    2104        .!      MOVS     r1,#4
        0x08000eb2:    482a        *H      LDR      r0,[pc,#168] ; [0x8000f5c] = 0x40020000
        0x08000eb4:    f7fffac6    ....    BL       LL_DMA_SetMemorySize ; 0x8000444
;;;695    
;;;696      /* I2C2 interrupt Init */
;;;697      NVIC_SetPriority(I2C2_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),3, 0));
        0x08000eb8:    f000fb74    ..t.    BL       NVIC_GetPriorityGrouping ; 0x80015a4
        0x08000ebc:    4605        .F      MOV      r5,r0
        0x08000ebe:    2200        ."      MOVS     r2,#0
        0x08000ec0:    2103        .!      MOVS     r1,#3
        0x08000ec2:    f000fb4e    ..N.    BL       NVIC_EncodePriority ; 0x8001562
        0x08000ec6:    4604        .F      MOV      r4,r0
        0x08000ec8:    4621        !F      MOV      r1,r4
        0x08000eca:    2021        !       MOVS     r0,#0x21
        0x08000ecc:    f000fb72    ..r.    BL       NVIC_SetPriority ; 0x80015b4
;;;698      NVIC_EnableIRQ(I2C2_EV_IRQn);
        0x08000ed0:    2021        !       MOVS     r0,#0x21
        0x08000ed2:    f000fb3b    ..;.    BL       NVIC_EnableIRQ ; 0x800154c
;;;699      NVIC_SetPriority(I2C2_ER_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),3, 0));
        0x08000ed6:    f000fb65    ..e.    BL       NVIC_GetPriorityGrouping ; 0x80015a4
        0x08000eda:    4605        .F      MOV      r5,r0
        0x08000edc:    2200        ."      MOVS     r2,#0
        0x08000ede:    2103        .!      MOVS     r1,#3
        0x08000ee0:    f000fb3f    ..?.    BL       NVIC_EncodePriority ; 0x8001562
        0x08000ee4:    4604        .F      MOV      r4,r0
        0x08000ee6:    4621        !F      MOV      r1,r4
        0x08000ee8:    2022        "       MOVS     r0,#0x22
        0x08000eea:    f000fb63    ..c.    BL       NVIC_SetPriority ; 0x80015b4
;;;700      NVIC_EnableIRQ(I2C2_ER_IRQn);
        0x08000eee:    2022        "       MOVS     r0,#0x22
        0x08000ef0:    f000fb2c    ..,.    BL       NVIC_EnableIRQ ; 0x800154c
;;;701    
;;;702      /* USER CODE BEGIN I2C2_Init 1 */
;;;703    
;;;704      /* USER CODE END I2C2_Init 1 */
;;;705      /**I2C Initialization 
;;;706      */
;;;707      LL_I2C_DisableOwnAddress2(I2C2);
        0x08000ef4:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;590      CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
        0x08000ef6:    481a        .H      LDR      r0,[pc,#104] ; [0x8000f60] = 0x40005800
        0x08000ef8:    68c0        .h      LDR      r0,[r0,#0xc]
        0x08000efa:    f0200001     ...    BIC      r0,r0,#1
        0x08000efe:    4918        .I      LDR      r1,[pc,#96] ; [0x8000f60] = 0x40005800
        0x08000f00:    60c8        .`      STR      r0,[r1,#0xc]
;;;591    }
        0x08000f02:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;708      LL_I2C_DisableGeneralCall(I2C2);
        0x08000f04:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;526      CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
        0x08000f06:    4608        .F      MOV      r0,r1
        0x08000f08:    6800        .h      LDR      r0,[r0,#0]
        0x08000f0a:    f0200040     .@.    BIC      r0,r0,#0x40
        0x08000f0e:    6008        .`      STR      r0,[r1,#0]
;;;527    }
        0x08000f10:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;709      LL_I2C_EnableClockStretching(I2C2);
        0x08000f12:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;479      CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
        0x08000f14:    4608        .F      MOV      r0,r1
        0x08000f16:    6800        .h      LDR      r0,[r0,#0]
        0x08000f18:    f0200080     ...    BIC      r0,r0,#0x80
        0x08000f1c:    6008        .`      STR      r0,[r1,#0]
;;;480    }
        0x08000f1e:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;710      I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
        0x08000f20:    2000        .       MOVS     r0,#0
        0x08000f22:    9005        ..      STR      r0,[sp,#0x14]
;;;711      I2C_InitStruct.ClockSpeed = 400000;
        0x08000f24:    480f        .H      LDR      r0,[pc,#60] ; [0x8000f64] = 0x61a80
        0x08000f26:    9006        ..      STR      r0,[sp,#0x18]
;;;712      I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
        0x08000f28:    2000        .       MOVS     r0,#0
        0x08000f2a:    9007        ..      STR      r0,[sp,#0x1c]
;;;713      I2C_InitStruct.OwnAddress1 = 0;
        0x08000f2c:    9008        ..      STR      r0,[sp,#0x20]
;;;714      I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
        0x08000f2e:    1508        ..      ASRS     r0,r1,#20
        0x08000f30:    9009        ..      STR      r0,[sp,#0x24]
;;;715      I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
        0x08000f32:    0100        ..      LSLS     r0,r0,#4
        0x08000f34:    900a        ..      STR      r0,[sp,#0x28]
;;;716      LL_I2C_Init(I2C2, &I2C_InitStruct);
        0x08000f36:    a905        ..      ADD      r1,sp,#0x14
        0x08000f38:    4809        .H      LDR      r0,[pc,#36] ; [0x8000f60] = 0x40005800
        0x08000f3a:    f7fffbc3    ....    BL       LL_I2C_Init ; 0x80006c4
;;;717      LL_I2C_SetOwnAddress2(I2C2, 0);
        0x08000f3e:    2000        .       MOVS     r0,#0
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;568      MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
        0x08000f40:    4907        .I      LDR      r1,[pc,#28] ; [0x8000f60] = 0x40005800
        0x08000f42:    68c9        .h      LDR      r1,[r1,#0xc]
        0x08000f44:    f02101fe    !...    BIC      r1,r1,#0xfe
        0x08000f48:    4301        .C      ORRS     r1,r1,r0
        0x08000f4a:    4a05        .J      LDR      r2,[pc,#20] ; [0x8000f60] = 0x40005800
        0x08000f4c:    60d1        .`      STR      r1,[r2,#0xc]
;;;569    }
        0x08000f4e:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;722    }
        0x08000f50:    b00b        ..      ADD      sp,sp,#0x2c
        0x08000f52:    bd30        0.      POP      {r4,r5,pc}
    $d
        0x08000f54:    040c000c    ....    DCD    67895308
        0x08000f58:    40010c00    ...@    DCD    1073810432
        0x08000f5c:    40020000    ...@    DCD    1073872896
        0x08000f60:    40005800    .X.@    DCD    1073764352
        0x08000f64:    00061a80    ....    DCD    400000
    $t
    i.MX_TIM1_Init
    MX_TIM1_Init
;;;723    
;;;724    /**
;;;725      * @brief TIM1 Initialization Function
;;;726      * @param None
;;;727      * @retval None
;;;728      */
;;;729    static void MX_TIM1_Init(void)
;;;730    {
        0x08000f68:    b530        0.      PUSH     {r4,r5,lr}
        0x08000f6a:    b093        ..      SUB      sp,sp,#0x4c
;;;731    
;;;732      /* USER CODE BEGIN TIM1_Init 0 */
;;;733    
;;;734      /* USER CODE END TIM1_Init 0 */
;;;735    
;;;736      LL_TIM_InitTypeDef TIM_InitStruct = {0};
        0x08000f6c:    2114        .!      MOVS     r1,#0x14
        0x08000f6e:    a80e        ..      ADD      r0,sp,#0x38
        0x08000f70:    f7fff910    ....    BL       __aeabi_memclr ; 0x8000194
;;;737      LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
        0x08000f74:    2120         !      MOVS     r1,#0x20
        0x08000f76:    a806        ..      ADD      r0,sp,#0x18
        0x08000f78:    f7fff90c    ....    BL       __aeabi_memclr ; 0x8000194
;;;738      LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
        0x08000f7c:    2118        .!      MOVS     r1,#0x18
        0x08000f7e:    4668        hF      MOV      r0,sp
        0x08000f80:    f7fff908    ....    BL       __aeabi_memclr ; 0x8000194
;;;739    
;;;740      /* Peripheral clock enable */
;;;741      LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
        0x08000f84:    f44f6000    O..`    MOV      r0,#0x800
        0x08000f88:    f7fffa1e    ....    BL       LL_APB2_GRP1_EnableClock ; 0x80003c8
;;;742    
;;;743      /* TIM1 interrupt Init */
;;;744      NVIC_SetPriority(TIM1_UP_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
        0x08000f8c:    f000fb0a    ....    BL       NVIC_GetPriorityGrouping ; 0x80015a4
        0x08000f90:    4605        .F      MOV      r5,r0
        0x08000f92:    2200        ."      MOVS     r2,#0
        0x08000f94:    210f        .!      MOVS     r1,#0xf
        0x08000f96:    f000fae4    ....    BL       NVIC_EncodePriority ; 0x8001562
        0x08000f9a:    4604        .F      MOV      r4,r0
        0x08000f9c:    4621        !F      MOV      r1,r4
        0x08000f9e:    2019        .       MOVS     r0,#0x19
        0x08000fa0:    f000fb08    ....    BL       NVIC_SetPriority ; 0x80015b4
;;;745      NVIC_EnableIRQ(TIM1_UP_IRQn);
        0x08000fa4:    2019        .       MOVS     r0,#0x19
        0x08000fa6:    f000fad1    ....    BL       NVIC_EnableIRQ ; 0x800154c
;;;746    
;;;747      /* USER CODE BEGIN TIM1_Init 1 */
;;;748    
;;;749      /* USER CODE END TIM1_Init 1 */
;;;750      TIM_InitStruct.Prescaler = 720;
        0x08000faa:    f44f7034    O.4p    MOV      r0,#0x2d0
        0x08000fae:    f8ad0038    ..8.    STRH     r0,[sp,#0x38]
;;;751      TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
        0x08000fb2:    2000        .       MOVS     r0,#0
        0x08000fb4:    900f        ..      STR      r0,[sp,#0x3c]
;;;752      TIM_InitStruct.Autoreload = 0;
        0x08000fb6:    9010        ..      STR      r0,[sp,#0x40]
;;;753      TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
        0x08000fb8:    9011        ..      STR      r0,[sp,#0x44]
;;;754      TIM_InitStruct.RepetitionCounter = 0;
        0x08000fba:    f88d0048    ..H.    STRB     r0,[sp,#0x48]
;;;755      LL_TIM_Init(TIM1, &TIM_InitStruct);
        0x08000fbe:    a90e        ..      ADD      r1,sp,#0x38
        0x08000fc0:    481d        .H      LDR      r0,[pc,#116] ; [0x8001038] = 0x40012c00
        0x08000fc2:    f7fffcfb    ....    BL       LL_TIM_Init ; 0x80009bc
;;;756      LL_TIM_DisableARRPreload(TIM1);
        0x08000fc6:    481c        .H      LDR      r0,[pc,#112] ; [0x8001038] = 0x40012c00
        0x08000fc8:    f7fffc0b    ....    BL       LL_TIM_DisableARRPreload ; 0x80007e2
;;;757      LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
        0x08000fcc:    2100        .!      MOVS     r1,#0
        0x08000fce:    481a        .H      LDR      r0,[pc,#104] ; [0x8001038] = 0x40012c00
        0x08000fd0:    f7fffdcc    ....    BL       LL_TIM_SetClockSource ; 0x8000b6c
;;;758      LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
        0x08000fd4:    2101        .!      MOVS     r1,#1
        0x08000fd6:    4818        .H      LDR      r0,[pc,#96] ; [0x8001038] = 0x40012c00
        0x08000fd8:    f7fffd68    ..h.    BL       LL_TIM_OC_EnablePreload ; 0x8000aac
;;;759      TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
        0x08000fdc:    2060        `       MOVS     r0,#0x60
        0x08000fde:    9006        ..      STR      r0,[sp,#0x18]
;;;760      TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
        0x08000fe0:    2000        .       MOVS     r0,#0
        0x08000fe2:    9007        ..      STR      r0,[sp,#0x1c]
;;;761      TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
        0x08000fe4:    9008        ..      STR      r0,[sp,#0x20]
;;;762      TIM_OC_InitStruct.CompareValue = 0;
        0x08000fe6:    9009        ..      STR      r0,[sp,#0x24]
;;;763      TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
        0x08000fe8:    900a        ..      STR      r0,[sp,#0x28]
;;;764      TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
        0x08000fea:    900b        ..      STR      r0,[sp,#0x2c]
;;;765      TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
        0x08000fec:    900c        ..      STR      r0,[sp,#0x30]
;;;766      TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
        0x08000fee:    900d        ..      STR      r0,[sp,#0x34]
;;;767      LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
        0x08000ff0:    aa06        ..      ADD      r2,sp,#0x18
        0x08000ff2:    2101        .!      MOVS     r1,#1
        0x08000ff4:    4810        .H      LDR      r0,[pc,#64] ; [0x8001038] = 0x40012c00
        0x08000ff6:    f7fffd89    ....    BL       LL_TIM_OC_Init ; 0x8000b0c
;;;768      LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
        0x08000ffa:    2101        .!      MOVS     r1,#1
        0x08000ffc:    480e        .H      LDR      r0,[pc,#56] ; [0x8001038] = 0x40012c00
        0x08000ffe:    f7fffd25    ..%.    BL       LL_TIM_OC_DisableFast ; 0x8000a4c
;;;769      LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
        0x08001002:    2100        .!      MOVS     r1,#0
        0x08001004:    480c        .H      LDR      r0,[pc,#48] ; [0x8001038] = 0x40012c00
        0x08001006:    f7fffdb8    ....    BL       LL_TIM_SetTriggerOutput ; 0x8000b7a
;;;770      LL_TIM_DisableMasterSlaveMode(TIM1);
        0x0800100a:    480b        .H      LDR      r0,[pc,#44] ; [0x8001038] = 0x40012c00
        0x0800100c:    f7fffbee    ....    BL       LL_TIM_DisableMasterSlaveMode ; 0x80007ec
;;;771      TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
        0x08001010:    2000        .       MOVS     r0,#0
        0x08001012:    9000        ..      STR      r0,[sp,#0]
;;;772      TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
        0x08001014:    9001        ..      STR      r0,[sp,#4]
;;;773      TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
        0x08001016:    9002        ..      STR      r0,[sp,#8]
;;;774      TIM_BDTRInitStruct.DeadTime = 0;
        0x08001018:    f88d000c    ....    STRB     r0,[sp,#0xc]
;;;775      TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
        0x0800101c:    f8ad000e    ....    STRH     r0,[sp,#0xe]
;;;776      TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
        0x08001020:    f44f5000    O..P    MOV      r0,#0x2000
        0x08001024:    9004        ..      STR      r0,[sp,#0x10]
;;;777      TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
        0x08001026:    2000        .       MOVS     r0,#0
        0x08001028:    9005        ..      STR      r0,[sp,#0x14]
;;;778      LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
        0x0800102a:    4669        iF      MOV      r1,sp
        0x0800102c:    4802        .H      LDR      r0,[pc,#8] ; [0x8001038] = 0x40012c00
        0x0800102e:    f7fffba3    ....    BL       LL_TIM_BDTR_Init ; 0x8000778
;;;779      /* USER CODE BEGIN TIM1_Init 2 */
;;;780    
;;;781      /* USER CODE END TIM1_Init 2 */
;;;782    
;;;783    }
        0x08001032:    b013        ..      ADD      sp,sp,#0x4c
        0x08001034:    bd30        0.      POP      {r4,r5,pc}
    $d
        0x08001036:    0000        ..      DCW    0
        0x08001038:    40012c00    .,.@    DCD    1073818624
    $t
    i.MX_TIM2_Init
    MX_TIM2_Init
;;;784    
;;;785    /**
;;;786      * @brief TIM2 Initialization Function
;;;787      * @param None
;;;788      * @retval None
;;;789      */
;;;790    static void MX_TIM2_Init(void)
;;;791    {
        0x0800103c:    b530        0.      PUSH     {r4,r5,lr}
        0x0800103e:    b08d        ..      SUB      sp,sp,#0x34
;;;792    
;;;793      /* USER CODE BEGIN TIM2_Init 0 */
;;;794    
;;;795      /* USER CODE END TIM2_Init 0 */
;;;796    
;;;797      LL_TIM_InitTypeDef TIM_InitStruct = {0};
        0x08001040:    2114        .!      MOVS     r1,#0x14
        0x08001042:    a808        ..      ADD      r0,sp,#0x20
        0x08001044:    f7fff8a6    ....    BL       __aeabi_memclr ; 0x8000194
;;;798      LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
        0x08001048:    2120         !      MOVS     r1,#0x20
        0x0800104a:    4668        hF      MOV      r0,sp
        0x0800104c:    f7fff8a2    ....    BL       __aeabi_memclr ; 0x8000194
;;;799    
;;;800      /* Peripheral clock enable */
;;;801      LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
        0x08001050:    2001        .       MOVS     r0,#1
        0x08001052:    f7fff9ab    ....    BL       LL_APB1_GRP1_EnableClock ; 0x80003ac
;;;802    
;;;803      /* TIM2 interrupt Init */
;;;804      NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
        0x08001056:    f000faa5    ....    BL       NVIC_GetPriorityGrouping ; 0x80015a4
        0x0800105a:    4605        .F      MOV      r5,r0
        0x0800105c:    2200        ."      MOVS     r2,#0
        0x0800105e:    2101        .!      MOVS     r1,#1
        0x08001060:    f000fa7f    ....    BL       NVIC_EncodePriority ; 0x8001562
        0x08001064:    4604        .F      MOV      r4,r0
        0x08001066:    4621        !F      MOV      r1,r4
        0x08001068:    201c        .       MOVS     r0,#0x1c
        0x0800106a:    f000faa3    ....    BL       NVIC_SetPriority ; 0x80015b4
;;;805      NVIC_EnableIRQ(TIM2_IRQn);
        0x0800106e:    201c        .       MOVS     r0,#0x1c
        0x08001070:    f000fa6c    ..l.    BL       NVIC_EnableIRQ ; 0x800154c
;;;806    
;;;807      /* USER CODE BEGIN TIM2_Init 1 */
;;;808    
;;;809      /* USER CODE END TIM2_Init 1 */
;;;810      TIM_InitStruct.Prescaler = 720;
        0x08001074:    f44f7034    O.4p    MOV      r0,#0x2d0
        0x08001078:    f8ad0020    .. .    STRH     r0,[sp,#0x20]
;;;811      TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
        0x0800107c:    2000        .       MOVS     r0,#0
        0x0800107e:    9009        ..      STR      r0,[sp,#0x24]
;;;812      TIM_InitStruct.Autoreload = 50;
        0x08001080:    2032        2       MOVS     r0,#0x32
        0x08001082:    900a        ..      STR      r0,[sp,#0x28]
;;;813      TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
        0x08001084:    2000        .       MOVS     r0,#0
        0x08001086:    900b        ..      STR      r0,[sp,#0x2c]
;;;814      LL_TIM_Init(TIM2, &TIM_InitStruct);
        0x08001088:    a908        ..      ADD      r1,sp,#0x20
        0x0800108a:    f04f4080    O..@    MOV      r0,#0x40000000
        0x0800108e:    f7fffc95    ....    BL       LL_TIM_Init ; 0x80009bc
;;;815      LL_TIM_EnableARRPreload(TIM2);
        0x08001092:    f04f4080    O..@    MOV      r0,#0x40000000
        0x08001096:    f7fffbae    ....    BL       LL_TIM_EnableARRPreload ; 0x80007f6
;;;816      LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
        0x0800109a:    2100        .!      MOVS     r1,#0
        0x0800109c:    f04f4080    O..@    MOV      r0,#0x40000000
        0x080010a0:    f7fffd64    ..d.    BL       LL_TIM_SetClockSource ; 0x8000b6c
;;;817      LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
        0x080010a4:    2101        .!      MOVS     r1,#1
        0x080010a6:    0788        ..      LSLS     r0,r1,#30
        0x080010a8:    f7fffd00    ....    BL       LL_TIM_OC_EnablePreload ; 0x8000aac
;;;818      TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM2;
        0x080010ac:    2070        p       MOVS     r0,#0x70
        0x080010ae:    9000        ..      STR      r0,[sp,#0]
;;;819      TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
        0x080010b0:    2000        .       MOVS     r0,#0
        0x080010b2:    9001        ..      STR      r0,[sp,#4]
;;;820      TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
        0x080010b4:    9002        ..      STR      r0,[sp,#8]
;;;821      TIM_OC_InitStruct.CompareValue = 48;
        0x080010b6:    2030        0       MOVS     r0,#0x30
        0x080010b8:    9003        ..      STR      r0,[sp,#0xc]
;;;822      TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
        0x080010ba:    2000        .       MOVS     r0,#0
        0x080010bc:    9004        ..      STR      r0,[sp,#0x10]
;;;823      LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
        0x080010be:    466a        jF      MOV      r2,sp
        0x080010c0:    2101        .!      MOVS     r1,#1
        0x080010c2:    0788        ..      LSLS     r0,r1,#30
        0x080010c4:    f7fffd22    ..".    BL       LL_TIM_OC_Init ; 0x8000b0c
;;;824      LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
        0x080010c8:    2101        .!      MOVS     r1,#1
        0x080010ca:    0788        ..      LSLS     r0,r1,#30
        0x080010cc:    f7fffcbe    ....    BL       LL_TIM_OC_DisableFast ; 0x8000a4c
;;;825      LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
        0x080010d0:    2120         !      MOVS     r1,#0x20
        0x080010d2:    0648        H.      LSLS     r0,r1,#25
        0x080010d4:    f7fffd51    ..Q.    BL       LL_TIM_SetTriggerOutput ; 0x8000b7a
;;;826      LL_TIM_EnableMasterSlaveMode(TIM2);
        0x080010d8:    f04f4080    O..@    MOV      r0,#0x40000000
        0x080010dc:    f7fffb95    ....    BL       LL_TIM_EnableMasterSlaveMode ; 0x800080a
;;;827      /* USER CODE BEGIN TIM2_Init 2 */
;;;828    
;;;829      /* USER CODE END TIM2_Init 2 */
;;;830    
;;;831    }
        0x080010e0:    b00d        ..      ADD      sp,sp,#0x34
        0x080010e2:    bd30        0.      POP      {r4,r5,pc}
    i.MX_TIM3_Init
    MX_TIM3_Init
;;;832    
;;;833    /**
;;;834      * @brief TIM3 Initialization Function
;;;835      * @param None
;;;836      * @retval None
;;;837      */
;;;838    static void MX_TIM3_Init(void)
;;;839    {
        0x080010e4:    b530        0.      PUSH     {r4,r5,lr}
        0x080010e6:    b093        ..      SUB      sp,sp,#0x4c
;;;840    
;;;841      /* USER CODE BEGIN TIM3_Init 0 */
;;;842    
;;;843      /* USER CODE END TIM3_Init 0 */
;;;844    
;;;845      LL_TIM_InitTypeDef TIM_InitStruct = {0};
        0x080010e8:    2114        .!      MOVS     r1,#0x14
        0x080010ea:    a80e        ..      ADD      r0,sp,#0x38
        0x080010ec:    f7fff852    ..R.    BL       __aeabi_memclr ; 0x8000194
;;;846      LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
        0x080010f0:    2120         !      MOVS     r1,#0x20
        0x080010f2:    a806        ..      ADD      r0,sp,#0x18
        0x080010f4:    f7fff84e    ..N.    BL       __aeabi_memclr ; 0x8000194
;;;847    
;;;848      LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
        0x080010f8:    2114        .!      MOVS     r1,#0x14
        0x080010fa:    a801        ..      ADD      r0,sp,#4
        0x080010fc:    f7fff84a    ..J.    BL       __aeabi_memclr ; 0x8000194
;;;849    
;;;850      /* Peripheral clock enable */
;;;851      LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
        0x08001100:    2002        .       MOVS     r0,#2
        0x08001102:    f7fff953    ..S.    BL       LL_APB1_GRP1_EnableClock ; 0x80003ac
;;;852    
;;;853      /* TIM3 interrupt Init */
;;;854      NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
        0x08001106:    f000fa4d    ..M.    BL       NVIC_GetPriorityGrouping ; 0x80015a4
        0x0800110a:    4605        .F      MOV      r5,r0
        0x0800110c:    2200        ."      MOVS     r2,#0
        0x0800110e:    4611        .F      MOV      r1,r2
        0x08001110:    f000fa27    ..'.    BL       NVIC_EncodePriority ; 0x8001562
        0x08001114:    4604        .F      MOV      r4,r0
        0x08001116:    4621        !F      MOV      r1,r4
        0x08001118:    201d        .       MOVS     r0,#0x1d
        0x0800111a:    f000fa4b    ..K.    BL       NVIC_SetPriority ; 0x80015b4
;;;855      NVIC_EnableIRQ(TIM3_IRQn);
        0x0800111e:    201d        .       MOVS     r0,#0x1d
        0x08001120:    f000fa14    ....    BL       NVIC_EnableIRQ ; 0x800154c
;;;856    
;;;857      /* USER CODE BEGIN TIM3_Init 1 */
;;;858      NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
        0x08001124:    f000fa3e    ..>.    BL       NVIC_GetPriorityGrouping ; 0x80015a4
        0x08001128:    4605        .F      MOV      r5,r0
        0x0800112a:    2200        ."      MOVS     r2,#0
        0x0800112c:    2101        .!      MOVS     r1,#1
        0x0800112e:    f000fa18    ....    BL       NVIC_EncodePriority ; 0x8001562
        0x08001132:    4604        .F      MOV      r4,r0
        0x08001134:    4621        !F      MOV      r1,r4
        0x08001136:    201d        .       MOVS     r0,#0x1d
        0x08001138:    f000fa3c    ..<.    BL       NVIC_SetPriority ; 0x80015b4
;;;859      NVIC_EnableIRQ(TIM3_IRQn);
        0x0800113c:    201d        .       MOVS     r0,#0x1d
        0x0800113e:    f000fa05    ....    BL       NVIC_EnableIRQ ; 0x800154c
;;;860    
;;;861      /* USER CODE END TIM3_Init 1 */
;;;862      TIM_InitStruct.Prescaler = 0;
        0x08001142:    2000        .       MOVS     r0,#0
        0x08001144:    f8ad0038    ..8.    STRH     r0,[sp,#0x38]
;;;863      TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
        0x08001148:    900f        ..      STR      r0,[sp,#0x3c]
;;;864      TIM_InitStruct.Autoreload = min_pulse;
        0x0800114a:    f24020d5    @..     MOV      r0,#0x2d5
        0x0800114e:    9010        ..      STR      r0,[sp,#0x40]
;;;865      TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
        0x08001150:    2000        .       MOVS     r0,#0
        0x08001152:    9011        ..      STR      r0,[sp,#0x44]
;;;866      LL_TIM_Init(TIM3, &TIM_InitStruct);
        0x08001154:    a90e        ..      ADD      r1,sp,#0x38
        0x08001156:    4842        BH      LDR      r0,[pc,#264] ; [0x8001260] = 0x40000400
        0x08001158:    f7fffc30    ..0.    BL       LL_TIM_Init ; 0x80009bc
;;;867      LL_TIM_EnableARRPreload(TIM3);
        0x0800115c:    4840        @H      LDR      r0,[pc,#256] ; [0x8001260] = 0x40000400
        0x0800115e:    f7fffb4a    ..J.    BL       LL_TIM_EnableARRPreload ; 0x80007f6
;;;868      LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
        0x08001162:    2100        .!      MOVS     r1,#0
        0x08001164:    483e        >H      LDR      r0,[pc,#248] ; [0x8001260] = 0x40000400
        0x08001166:    f7fffd01    ....    BL       LL_TIM_SetClockSource ; 0x8000b6c
;;;869      LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH1);
        0x0800116a:    2101        .!      MOVS     r1,#1
        0x0800116c:    483c        <H      LDR      r0,[pc,#240] ; [0x8001260] = 0x40000400
        0x0800116e:    f7fffc9d    ....    BL       LL_TIM_OC_EnablePreload ; 0x8000aac
;;;870      TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM2;
        0x08001172:    2070        p       MOVS     r0,#0x70
        0x08001174:    9006        ..      STR      r0,[sp,#0x18]
;;;871      TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
        0x08001176:    2000        .       MOVS     r0,#0
        0x08001178:    9007        ..      STR      r0,[sp,#0x1c]
;;;872      TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
        0x0800117a:    9008        ..      STR      r0,[sp,#0x20]
;;;873      TIM_OC_InitStruct.CompareValue = 1;
        0x0800117c:    2001        .       MOVS     r0,#1
        0x0800117e:    9009        ..      STR      r0,[sp,#0x24]
;;;874      TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
        0x08001180:    2000        .       MOVS     r0,#0
        0x08001182:    900a        ..      STR      r0,[sp,#0x28]
;;;875      LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
        0x08001184:    aa06        ..      ADD      r2,sp,#0x18
        0x08001186:    2101        .!      MOVS     r1,#1
        0x08001188:    4835        5H      LDR      r0,[pc,#212] ; [0x8001260] = 0x40000400
        0x0800118a:    f7fffcbf    ....    BL       LL_TIM_OC_Init ; 0x8000b0c
;;;876      LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
        0x0800118e:    2101        .!      MOVS     r1,#1
        0x08001190:    4833        3H      LDR      r0,[pc,#204] ; [0x8001260] = 0x40000400
        0x08001192:    f7fffc5b    ..[.    BL       LL_TIM_OC_DisableFast ; 0x8000a4c
;;;877      LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH3);
        0x08001196:    f44f7180    O..q    MOV      r1,#0x100
        0x0800119a:    4831        1H      LDR      r0,[pc,#196] ; [0x8001260] = 0x40000400
        0x0800119c:    f7fffc86    ....    BL       LL_TIM_OC_EnablePreload ; 0x8000aac
;;;878      TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
        0x080011a0:    2000        .       MOVS     r0,#0
        0x080011a2:    9007        ..      STR      r0,[sp,#0x1c]
;;;879      TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
        0x080011a4:    9008        ..      STR      r0,[sp,#0x20]
;;;880      LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
        0x080011a6:    aa06        ..      ADD      r2,sp,#0x18
        0x080011a8:    f44f7180    O..q    MOV      r1,#0x100
        0x080011ac:    482c        ,H      LDR      r0,[pc,#176] ; [0x8001260] = 0x40000400
        0x080011ae:    f7fffcad    ....    BL       LL_TIM_OC_Init ; 0x8000b0c
;;;881      LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH3);
        0x080011b2:    f44f7180    O..q    MOV      r1,#0x100
        0x080011b6:    482a        *H      LDR      r0,[pc,#168] ; [0x8001260] = 0x40000400
        0x080011b8:    f7fffc48    ..H.    BL       LL_TIM_OC_DisableFast ; 0x8000a4c
;;;882      LL_TIM_SetOnePulseMode(TIM3, LL_TIM_ONEPULSEMODE_SINGLE);
        0x080011bc:    2008        .       MOVS     r0,#8
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;1130     MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
        0x080011be:    4928        (I      LDR      r1,[pc,#160] ; [0x8001260] = 0x40000400
        0x080011c0:    6809        .h      LDR      r1,[r1,#0]
        0x080011c2:    f0210108    !...    BIC      r1,r1,#8
        0x080011c6:    4301        .C      ORRS     r1,r1,r0
        0x080011c8:    4a25        %J      LDR      r2,[pc,#148] ; [0x8001260] = 0x40000400
        0x080011ca:    6011        .`      STR      r1,[r2,#0]
;;;1131   }
        0x080011cc:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;883      LL_TIM_SetTriggerInput(TIM3, LL_TIM_TS_ITR1);
        0x080011ce:    2010        .       MOVS     r0,#0x10
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;2618     MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
        0x080011d0:    4611        .F      MOV      r1,r2
        0x080011d2:    6889        .h      LDR      r1,[r1,#8]
        0x080011d4:    f0210170    !.p.    BIC      r1,r1,#0x70
        0x080011d8:    4301        .C      ORRS     r1,r1,r0
        0x080011da:    6091        .`      STR      r1,[r2,#8]
;;;2619   }
        0x080011dc:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;884      LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_TRIGGER);
        0x080011de:    2006        .       MOVS     r0,#6
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;2596     MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
        0x080011e0:    4611        .F      MOV      r1,r2
        0x080011e2:    6889        .h      LDR      r1,[r1,#8]
        0x080011e4:    f0210107    !...    BIC      r1,r1,#7
        0x080011e8:    4301        .C      ORRS     r1,r1,r0
        0x080011ea:    6091        .`      STR      r1,[r2,#8]
;;;2597   }
        0x080011ec:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;885      LL_TIM_DisableIT_TRIG(TIM3);
        0x080011ee:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;3412     CLEAR_BIT(TIMx->DIER, TIM_DIER_TIE);
        0x080011f0:    4610        .F      MOV      r0,r2
        0x080011f2:    68c0        .h      LDR      r0,[r0,#0xc]
        0x080011f4:    f0200040     .@.    BIC      r0,r0,#0x40
        0x080011f8:    4611        .F      MOV      r1,r2
        0x080011fa:    60c8        .`      STR      r0,[r1,#0xc]
;;;3413   }
        0x080011fc:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;886      LL_TIM_DisableDMAReq_TRIG(TIM3);
        0x080011fe:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;3683     CLEAR_BIT(TIMx->DIER, TIM_DIER_TDE);
        0x08001200:    4608        .F      MOV      r0,r1
        0x08001202:    68c0        .h      LDR      r0,[r0,#0xc]
        0x08001204:    f4204080     ..@    BIC      r0,r0,#0x4000
        0x08001208:    60c8        .`      STR      r0,[r1,#0xc]
;;;3684   }
        0x0800120a:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;887      LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
        0x0800120c:    2100        .!      MOVS     r1,#0
        0x0800120e:    4610        .F      MOV      r0,r2
        0x08001210:    f7fffcb3    ....    BL       LL_TIM_SetTriggerOutput ; 0x8000b7a
;;;888      LL_TIM_DisableMasterSlaveMode(TIM3);
        0x08001214:    4812        .H      LDR      r0,[pc,#72] ; [0x8001260] = 0x40000400
        0x08001216:    f7fffae9    ....    BL       LL_TIM_DisableMasterSlaveMode ; 0x80007ec
;;;889      /* USER CODE BEGIN TIM3_Init 2 */
;;;890    
;;;891      /* USER CODE END TIM3_Init 2 */
;;;892      LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
        0x0800121a:    2004        .       MOVS     r0,#4
        0x0800121c:    f7fff8d4    ....    BL       LL_APB2_GRP1_EnableClock ; 0x80003c8
;;;893      LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
        0x08001220:    2008        .       MOVS     r0,#8
        0x08001222:    f7fff8d1    ....    BL       LL_APB2_GRP1_EnableClock ; 0x80003c8
;;;894      /**TIM3 GPIO Configuration  
;;;895      PA6   ------> TIM3_CH1
;;;896      PB0   ------> TIM3_CH3 
;;;897      */
;;;898      GPIO_InitStruct.Pin = MOTOR_X_STEP_Pin;
        0x08001226:    f2440040    D.@.    MOV      r0,#0x4040
        0x0800122a:    9001        ..      STR      r0,[sp,#4]
;;;899      GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
        0x0800122c:    2009        .       MOVS     r0,#9
        0x0800122e:    9002        ..      STR      r0,[sp,#8]
;;;900      GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
        0x08001230:    2003        .       MOVS     r0,#3
        0x08001232:    9003        ..      STR      r0,[sp,#0xc]
;;;901      GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
        0x08001234:    2000        .       MOVS     r0,#0
        0x08001236:    9004        ..      STR      r0,[sp,#0x10]
;;;902      LL_GPIO_Init(MOTOR_X_STEP_GPIO_Port, &GPIO_InitStruct);
        0x08001238:    a901        ..      ADD      r1,sp,#4
        0x0800123a:    480a        .H      LDR      r0,[pc,#40] ; [0x8001264] = 0x40010800
        0x0800123c:    f7fff942    ..B.    BL       LL_GPIO_Init ; 0x80004c4
;;;903    
;;;904      GPIO_InitStruct.Pin = MOTOR_Z_STEP_Pin;
        0x08001240:    f2401001    @...    MOV      r0,#0x101
        0x08001244:    9001        ..      STR      r0,[sp,#4]
;;;905      GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
        0x08001246:    2009        .       MOVS     r0,#9
        0x08001248:    9002        ..      STR      r0,[sp,#8]
;;;906      GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
        0x0800124a:    2003        .       MOVS     r0,#3
        0x0800124c:    9003        ..      STR      r0,[sp,#0xc]
;;;907      GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
        0x0800124e:    2000        .       MOVS     r0,#0
        0x08001250:    9004        ..      STR      r0,[sp,#0x10]
;;;908      LL_GPIO_Init(MOTOR_Z_STEP_GPIO_Port, &GPIO_InitStruct);
        0x08001252:    a901        ..      ADD      r1,sp,#4
        0x08001254:    4804        .H      LDR      r0,[pc,#16] ; [0x8001268] = 0x40010c00
        0x08001256:    f7fff935    ..5.    BL       LL_GPIO_Init ; 0x80004c4
;;;909    
;;;910    }
        0x0800125a:    b013        ..      ADD      sp,sp,#0x4c
        0x0800125c:    bd30        0.      POP      {r4,r5,pc}
    $d
        0x0800125e:    0000        ..      DCW    0
        0x08001260:    40000400    ...@    DCD    1073742848
        0x08001264:    40010800    ...@    DCD    1073809408
        0x08001268:    40010c00    ...@    DCD    1073810432
    $t
    i.MX_TIM4_Init
    MX_TIM4_Init
;;;911    
;;;912    /**
;;;913      * @brief TIM4 Initialization Function
;;;914      * @param None
;;;915      * @retval None
;;;916      */
;;;917    static void MX_TIM4_Init(void)
;;;918    {
        0x0800126c:    b530        0.      PUSH     {r4,r5,lr}
        0x0800126e:    b08b        ..      SUB      sp,sp,#0x2c
;;;919    
;;;920      /* USER CODE BEGIN TIM4_Init 0 */
;;;921    
;;;922      /* USER CODE END TIM4_Init 0 */
;;;923    
;;;924      LL_TIM_InitTypeDef TIM_InitStruct = {0};
        0x08001270:    2114        .!      MOVS     r1,#0x14
        0x08001272:    a806        ..      ADD      r0,sp,#0x18
        0x08001274:    f7feff8e    ....    BL       __aeabi_memclr ; 0x8000194
;;;925    
;;;926      LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
        0x08001278:    2114        .!      MOVS     r1,#0x14
        0x0800127a:    a801        ..      ADD      r0,sp,#4
        0x0800127c:    f7feff8a    ....    BL       __aeabi_memclr ; 0x8000194
;;;927    
;;;928      /* Peripheral clock enable */
;;;929      LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
        0x08001280:    2004        .       MOVS     r0,#4
        0x08001282:    f7fff893    ....    BL       LL_APB1_GRP1_EnableClock ; 0x80003ac
;;;930      
;;;931      LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
        0x08001286:    2008        .       MOVS     r0,#8
        0x08001288:    f7fff89e    ....    BL       LL_APB2_GRP1_EnableClock ; 0x80003c8
;;;932      /**TIM4 GPIO Configuration  
;;;933      PB6   ------> TIM4_CH1
;;;934      PB7   ------> TIM4_CH2
;;;935      PB8   ------> TIM4_CH3 
;;;936      */
;;;937      GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin|ENC_ZERO_Pin;
        0x0800128c:    483e        >H      LDR      r0,[pc,#248] ; [0x8001388] = 0x401c0c1
        0x0800128e:    9001        ..      STR      r0,[sp,#4]
;;;938      GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
        0x08001290:    2008        .       MOVS     r0,#8
        0x08001292:    9002        ..      STR      r0,[sp,#8]
;;;939      GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
        0x08001294:    2001        .       MOVS     r0,#1
        0x08001296:    9005        ..      STR      r0,[sp,#0x14]
;;;940      LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
        0x08001298:    a901        ..      ADD      r1,sp,#4
        0x0800129a:    483c        <H      LDR      r0,[pc,#240] ; [0x800138c] = 0x40010c00
        0x0800129c:    f7fff912    ....    BL       LL_GPIO_Init ; 0x80004c4
;;;941    
;;;942      /* TIM4 interrupt Init */
;;;943      NVIC_SetPriority(TIM4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
        0x080012a0:    f000f980    ....    BL       NVIC_GetPriorityGrouping ; 0x80015a4
        0x080012a4:    4605        .F      MOV      r5,r0
        0x080012a6:    2200        ."      MOVS     r2,#0
        0x080012a8:    4611        .F      MOV      r1,r2
        0x080012aa:    f000f95a    ..Z.    BL       NVIC_EncodePriority ; 0x8001562
        0x080012ae:    4604        .F      MOV      r4,r0
        0x080012b0:    4621        !F      MOV      r1,r4
        0x080012b2:    201e        .       MOVS     r0,#0x1e
        0x080012b4:    f000f97e    ..~.    BL       NVIC_SetPriority ; 0x80015b4
;;;944      NVIC_EnableIRQ(TIM4_IRQn);
        0x080012b8:    201e        .       MOVS     r0,#0x1e
        0x080012ba:    f000f947    ..G.    BL       NVIC_EnableIRQ ; 0x800154c
;;;945    
;;;946      /* USER CODE BEGIN TIM4_Init 1 */
;;;947    
;;;948      /* USER CODE END TIM4_Init 1 */
;;;949      TIM_InitStruct.Prescaler = 0;
        0x080012be:    2000        .       MOVS     r0,#0
        0x080012c0:    f8ad0018    ....    STRH     r0,[sp,#0x18]
;;;950      TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
        0x080012c4:    9007        ..      STR      r0,[sp,#0x1c]
;;;951      TIM_InitStruct.Autoreload = 8;
        0x080012c6:    2008        .       MOVS     r0,#8
        0x080012c8:    9008        ..      STR      r0,[sp,#0x20]
;;;952      TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
        0x080012ca:    2000        .       MOVS     r0,#0
        0x080012cc:    9009        ..      STR      r0,[sp,#0x24]
;;;953      LL_TIM_Init(TIM4, &TIM_InitStruct);
        0x080012ce:    a906        ..      ADD      r1,sp,#0x18
        0x080012d0:    482f        /H      LDR      r0,[pc,#188] ; [0x8001390] = 0x40000800
        0x080012d2:    f7fffb73    ..s.    BL       LL_TIM_Init ; 0x80009bc
;;;954      LL_TIM_DisableARRPreload(TIM4);
        0x080012d6:    482e        .H      LDR      r0,[pc,#184] ; [0x8001390] = 0x40000800
        0x080012d8:    f7fffa83    ....    BL       LL_TIM_DisableARRPreload ; 0x80007e2
;;;955      LL_TIM_SetEncoderMode(TIM4, LL_TIM_ENCODERMODE_X2_TI1);
        0x080012dc:    2001        .       MOVS     r0,#1
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;2549     MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
        0x080012de:    492c        ,I      LDR      r1,[pc,#176] ; [0x8001390] = 0x40000800
        0x080012e0:    6889        .h      LDR      r1,[r1,#8]
        0x080012e2:    f0210107    !...    BIC      r1,r1,#7
        0x080012e6:    4301        .C      ORRS     r1,r1,r0
        0x080012e8:    4a29        )J      LDR      r2,[pc,#164] ; [0x8001390] = 0x40000800
        0x080012ea:    6091        .`      STR      r1,[r2,#8]
;;;2550   }
        0x080012ec:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;956      LL_TIM_IC_SetActiveInput(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
        0x080012ee:    0402        ..      LSLS     r2,r0,#16
        0x080012f0:    2101        .!      MOVS     r1,#1
        0x080012f2:    4827        'H      LDR      r0,[pc,#156] ; [0x8001390] = 0x40000800
        0x080012f4:    f7fffa94    ....    BL       LL_TIM_IC_SetActiveInput ; 0x8000820
;;;957      LL_TIM_IC_SetPrescaler(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
        0x080012f8:    2200        ."      MOVS     r2,#0
        0x080012fa:    2101        .!      MOVS     r1,#1
        0x080012fc:    4824        $H      LDR      r0,[pc,#144] ; [0x8001390] = 0x40000800
        0x080012fe:    f7fffb27    ..'.    BL       LL_TIM_IC_SetPrescaler ; 0x8000950
;;;958      LL_TIM_IC_SetFilter(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV32_N8);
        0x08001302:    f44f0270    O.p.    MOV      r2,#0xf00000
        0x08001306:    2101        .!      MOVS     r1,#1
        0x08001308:    4821        !H      LDR      r0,[pc,#132] ; [0x8001390] = 0x40000800
        0x0800130a:    f7fffabf    ....    BL       LL_TIM_IC_SetFilter ; 0x800088c
;;;959      LL_TIM_IC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
        0x0800130e:    2200        ."      MOVS     r2,#0
        0x08001310:    2101        .!      MOVS     r1,#1
        0x08001312:    481f        .H      LDR      r0,[pc,#124] ; [0x8001390] = 0x40000800
        0x08001314:    f7fffaf0    ....    BL       LL_TIM_IC_SetPolarity ; 0x80008f8
;;;960      LL_TIM_IC_SetActiveInput(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
        0x08001318:    f44f3280    O..2    MOV      r2,#0x10000
        0x0800131c:    2110        .!      MOVS     r1,#0x10
        0x0800131e:    481c        .H      LDR      r0,[pc,#112] ; [0x8001390] = 0x40000800
        0x08001320:    f7fffa7e    ..~.    BL       LL_TIM_IC_SetActiveInput ; 0x8000820
;;;961      LL_TIM_IC_SetPrescaler(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
        0x08001324:    2200        ."      MOVS     r2,#0
        0x08001326:    2110        .!      MOVS     r1,#0x10
        0x08001328:    4819        .H      LDR      r0,[pc,#100] ; [0x8001390] = 0x40000800
        0x0800132a:    f7fffb11    ....    BL       LL_TIM_IC_SetPrescaler ; 0x8000950
;;;962      LL_TIM_IC_SetFilter(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV32_N8);
        0x0800132e:    f44f0270    O.p.    MOV      r2,#0xf00000
        0x08001332:    2110        .!      MOVS     r1,#0x10
        0x08001334:    4816        .H      LDR      r0,[pc,#88] ; [0x8001390] = 0x40000800
        0x08001336:    f7fffaa9    ....    BL       LL_TIM_IC_SetFilter ; 0x800088c
;;;963      LL_TIM_IC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
        0x0800133a:    2200        ."      MOVS     r2,#0
        0x0800133c:    2110        .!      MOVS     r1,#0x10
        0x0800133e:    4814        .H      LDR      r0,[pc,#80] ; [0x8001390] = 0x40000800
        0x08001340:    f7fffada    ....    BL       LL_TIM_IC_SetPolarity ; 0x80008f8
;;;964      LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_UPDATE);
        0x08001344:    2120         !      MOVS     r1,#0x20
        0x08001346:    4812        .H      LDR      r0,[pc,#72] ; [0x8001390] = 0x40000800
        0x08001348:    f7fffc17    ....    BL       LL_TIM_SetTriggerOutput ; 0x8000b7a
;;;965      LL_TIM_EnableMasterSlaveMode(TIM4);
        0x0800134c:    4810        .H      LDR      r0,[pc,#64] ; [0x8001390] = 0x40000800
        0x0800134e:    f7fffa5c    ..\.    BL       LL_TIM_EnableMasterSlaveMode ; 0x800080a
;;;966      LL_TIM_IC_SetActiveInput(TIM4, LL_TIM_CHANNEL_CH3, LL_TIM_ACTIVEINPUT_DIRECTTI);
        0x08001352:    f44f3280    O..2    MOV      r2,#0x10000
        0x08001356:    1211        ..      ASRS     r1,r2,#8
        0x08001358:    480d        .H      LDR      r0,[pc,#52] ; [0x8001390] = 0x40000800
        0x0800135a:    f7fffa61    ..a.    BL       LL_TIM_IC_SetActiveInput ; 0x8000820
;;;967      LL_TIM_IC_SetPrescaler(TIM4, LL_TIM_CHANNEL_CH3, LL_TIM_ICPSC_DIV1);
        0x0800135e:    2200        ."      MOVS     r2,#0
        0x08001360:    f44f7180    O..q    MOV      r1,#0x100
        0x08001364:    480a        .H      LDR      r0,[pc,#40] ; [0x8001390] = 0x40000800
        0x08001366:    f7fffaf3    ....    BL       LL_TIM_IC_SetPrescaler ; 0x8000950
;;;968      LL_TIM_IC_SetFilter(TIM4, LL_TIM_CHANNEL_CH3, LL_TIM_IC_FILTER_FDIV32_N8);
        0x0800136a:    f44f0270    O.p.    MOV      r2,#0xf00000
        0x0800136e:    f44f7180    O..q    MOV      r1,#0x100
        0x08001372:    4807        .H      LDR      r0,[pc,#28] ; [0x8001390] = 0x40000800
        0x08001374:    f7fffa8a    ....    BL       LL_TIM_IC_SetFilter ; 0x800088c
;;;969      LL_TIM_IC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH3, LL_TIM_IC_POLARITY_RISING);
        0x08001378:    2200        ."      MOVS     r2,#0
        0x0800137a:    f44f7180    O..q    MOV      r1,#0x100
        0x0800137e:    4804        .H      LDR      r0,[pc,#16] ; [0x8001390] = 0x40000800
        0x08001380:    f7fffaba    ....    BL       LL_TIM_IC_SetPolarity ; 0x80008f8
;;;970      /* USER CODE BEGIN TIM4_Init 2 */
;;;971    
;;;972      /* USER CODE END TIM4_Init 2 */
;;;973    
;;;974    }
        0x08001384:    b00b        ..      ADD      sp,sp,#0x2c
        0x08001386:    bd30        0.      POP      {r4,r5,pc}
    $d
        0x08001388:    0401c0c1    ....    DCD    67223745
        0x0800138c:    40010c00    ...@    DCD    1073810432
        0x08001390:    40000800    ...@    DCD    1073743872
    $t
    i.MX_USART2_UART_Init
    MX_USART2_UART_Init
;;;975    
;;;976    /**
;;;977      * @brief USART2 Initialization Function
;;;978      * @param None
;;;979      * @retval None
;;;980      */
;;;981    static void MX_USART2_UART_Init(void)
;;;982    {
        0x08001394:    b5f0        ..      PUSH     {r4-r7,lr}
        0x08001396:    b08b        ..      SUB      sp,sp,#0x2c
;;;983    
;;;984      /* USER CODE BEGIN USART2_Init 0 */
;;;985      pBufferReadyForReception = aRXBufferA;
        0x08001398:    4860        `H      LDR      r0,[pc,#384] ; [0x800151c] = 0x200007ac
        0x0800139a:    4961        aI      LDR      r1,[pc,#388] ; [0x8001520] = 0x200004e8
        0x0800139c:    6008        .`      STR      r0,[r1,#0]
;;;986      pBufferReadyForUser      = aRXBufferB;
        0x0800139e:    4861        aH      LDR      r0,[pc,#388] ; [0x8001524] = 0x200007b8
        0x080013a0:    4961        aI      LDR      r1,[pc,#388] ; [0x8001528] = 0x200004e4
        0x080013a2:    6008        .`      STR      r0,[r1,#0]
;;;987      uwNbReceivedChars = 0;
        0x080013a4:    2000        .       MOVS     r0,#0
        0x080013a6:    4961        aI      LDR      r1,[pc,#388] ; [0x800152c] = 0x200004dc
        0x080013a8:    6008        .`      STR      r0,[r1,#0]
;;;988      ubUART2ReceptionComplete = 0;
        0x080013aa:    4961        aI      LDR      r1,[pc,#388] ; [0x8001530] = 0x200004ec
        0x080013ac:    7008        .p      STRB     r0,[r1,#0]
;;;989      /* USER CODE END USART2_Init 0 */
;;;990    
;;;991      LL_USART_InitTypeDef USART_InitStruct = {0};
        0x080013ae:    2118        .!      MOVS     r1,#0x18
        0x080013b0:    a805        ..      ADD      r0,sp,#0x14
        0x080013b2:    f7fefeef    ....    BL       __aeabi_memclr ; 0x8000194
;;;992    
;;;993      LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
        0x080013b6:    2114        .!      MOVS     r1,#0x14
        0x080013b8:    4668        hF      MOV      r0,sp
        0x080013ba:    f7fefeeb    ....    BL       __aeabi_memclr ; 0x8000194
;;;994    
;;;995      /* Peripheral clock enable */
;;;996      LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
        0x080013be:    f44f3000    O..0    MOV      r0,#0x20000
        0x080013c2:    f7fefff3    ....    BL       LL_APB1_GRP1_EnableClock ; 0x80003ac
;;;997      
;;;998      LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
        0x080013c6:    2004        .       MOVS     r0,#4
        0x080013c8:    f7fefffe    ....    BL       LL_APB2_GRP1_EnableClock ; 0x80003c8
;;;999      /**USART2 GPIO Configuration  
;;;1000     PA2   ------> USART2_TX
;;;1001     PA3   ------> USART2_RX 
;;;1002     */
;;;1003     GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
        0x080013cc:    f2404004    @..@    MOV      r0,#0x404
        0x080013d0:    9000        ..      STR      r0,[sp,#0]
;;;1004     GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
        0x080013d2:    2009        .       MOVS     r0,#9
        0x080013d4:    9001        ..      STR      r0,[sp,#4]
;;;1005     GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
        0x080013d6:    2003        .       MOVS     r0,#3
        0x080013d8:    9002        ..      STR      r0,[sp,#8]
;;;1006     GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
        0x080013da:    2000        .       MOVS     r0,#0
        0x080013dc:    9003        ..      STR      r0,[sp,#0xc]
;;;1007     LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
        0x080013de:    4669        iF      MOV      r1,sp
        0x080013e0:    4854        TH      LDR      r0,[pc,#336] ; [0x8001534] = 0x40010800
        0x080013e2:    f7fff86f    ..o.    BL       LL_GPIO_Init ; 0x80004c4
;;;1008   
;;;1009     GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
        0x080013e6:    f6400008    @...    MOV      r0,#0x808
        0x080013ea:    9000        ..      STR      r0,[sp,#0]
;;;1010     GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
        0x080013ec:    2004        .       MOVS     r0,#4
        0x080013ee:    9001        ..      STR      r0,[sp,#4]
;;;1011     LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
        0x080013f0:    4669        iF      MOV      r1,sp
        0x080013f2:    4850        PH      LDR      r0,[pc,#320] ; [0x8001534] = 0x40010800
        0x080013f4:    f7fff866    ..f.    BL       LL_GPIO_Init ; 0x80004c4
;;;1012   
;;;1013     /* USART2 DMA Init */
;;;1014     
;;;1015     /* USART2_TX Init */
;;;1016     LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
        0x080013f8:    2210        ."      MOVS     r2,#0x10
        0x080013fa:    2107        .!      MOVS     r1,#7
        0x080013fc:    484e        NH      LDR      r0,[pc,#312] ; [0x8001538] = 0x40020000
        0x080013fe:    f7fff801    ....    BL       LL_DMA_SetDataTransferDirection ; 0x8000404
;;;1017   
;;;1018     LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_LOW);
        0x08001402:    2200        ."      MOVS     r2,#0
        0x08001404:    2107        .!      MOVS     r1,#7
        0x08001406:    484c        LH      LDR      r0,[pc,#304] ; [0x8001538] = 0x40020000
        0x08001408:    f7feffec    ....    BL       LL_DMA_SetChannelPriorityLevel ; 0x80003e4
;;;1019   
;;;1020     LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
        0x0800140c:    2200        ."      MOVS     r2,#0
        0x0800140e:    2107        .!      MOVS     r1,#7
        0x08001410:    4849        IH      LDR      r0,[pc,#292] ; [0x8001538] = 0x40020000
        0x08001412:    f7fff827    ..'.    BL       LL_DMA_SetMode ; 0x8000464
;;;1021   
;;;1022     LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
        0x08001416:    2200        ."      MOVS     r2,#0
        0x08001418:    2107        .!      MOVS     r1,#7
        0x0800141a:    4847        GH      LDR      r0,[pc,#284] ; [0x8001538] = 0x40020000
        0x0800141c:    f7fff832    ..2.    BL       LL_DMA_SetPeriphIncMode ; 0x8000484
;;;1023   
;;;1024     LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
        0x08001420:    2280        ."      MOVS     r2,#0x80
        0x08001422:    2107        .!      MOVS     r1,#7
        0x08001424:    4844        DH      LDR      r0,[pc,#272] ; [0x8001538] = 0x40020000
        0x08001426:    f7fefffd    ....    BL       LL_DMA_SetMemoryIncMode ; 0x8000424
;;;1025   
;;;1026     LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
        0x0800142a:    2200        ."      MOVS     r2,#0
        0x0800142c:    2107        .!      MOVS     r1,#7
        0x0800142e:    4842        BH      LDR      r0,[pc,#264] ; [0x8001538] = 0x40020000
        0x08001430:    f7fff838    ..8.    BL       LL_DMA_SetPeriphSize ; 0x80004a4
;;;1027   
;;;1028     LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
        0x08001434:    2200        ."      MOVS     r2,#0
        0x08001436:    2107        .!      MOVS     r1,#7
        0x08001438:    483f        ?H      LDR      r0,[pc,#252] ; [0x8001538] = 0x40020000
        0x0800143a:    f7fff803    ....    BL       LL_DMA_SetMemorySize ; 0x8000444
;;;1029   
;;;1030     /* USART2 interrupt Init */
;;;1031     NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
        0x0800143e:    f000f8b1    ....    BL       NVIC_GetPriorityGrouping ; 0x80015a4
        0x08001442:    4605        .F      MOV      r5,r0
        0x08001444:    2200        ."      MOVS     r2,#0
        0x08001446:    2102        .!      MOVS     r1,#2
        0x08001448:    f000f88b    ....    BL       NVIC_EncodePriority ; 0x8001562
        0x0800144c:    4604        .F      MOV      r4,r0
        0x0800144e:    4621        !F      MOV      r1,r4
        0x08001450:    2026        &       MOVS     r0,#0x26
        0x08001452:    f000f8af    ....    BL       NVIC_SetPriority ; 0x80015b4
;;;1032     NVIC_EnableIRQ(USART2_IRQn);
        0x08001456:    2026        &       MOVS     r0,#0x26
        0x08001458:    f000f878    ..x.    BL       NVIC_EnableIRQ ; 0x800154c
;;;1033   
;;;1034     /* USER CODE BEGIN USART2_Init 1 */
;;;1035   
;;;1036     LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_7,
        0x0800145c:    4836        6H      LDR      r0,[pc,#216] ; [0x8001538] = 0x40020000
        0x0800145e:    2107        .!      MOVS     r1,#7
        0x08001460:    4a36        6J      LDR      r2,[pc,#216] ; [0x800153c] = 0x80028e8
        0x08001462:    4d37        7M      LDR      r5,[pc,#220] ; [0x8001540] = 0x40004400
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h
;;;2451     return ((uint32_t) &(USARTx->DR));
        0x08001464:    1d2b        +.      ADDS     r3,r5,#4
        0x08001466:    4605        .F      MOV      r5,r0
        0x08001468:    2607        .&      MOVS     r6,#7
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h
;;;595      return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
        0x0800146a:    1e77        w.      SUBS     r7,r6,#1
        0x0800146c:    f8dfc0d4    ....    LDR      r12,[pc,#212] ; [0x8001544] = 0x80028b0
        0x08001470:    f81c7007    ...p    LDRB     r7,[r12,r7]
        0x08001474:    59ef        .Y      LDR      r7,[r5,r7]
        0x08001476:    f2440c10    D...    MOV      r12,#0x4010
        0x0800147a:    ea07040c    ....    AND      r4,r7,r12
        0x0800147e:    bf00        ..      NOP      
;;;596                       DMA_CCR_DIR | DMA_CCR_MEM2MEM));
;;;597    }
;;;598    
;;;599    /**
;;;600      * @brief  Set DMA mode circular or normal.
;;;601      * @note The circular buffer mode cannot be used if the memory-to-memory
;;;602      * data transfer is configured on the selected Channel.
;;;603      * @rmtoll CCR          CIRC          LL_DMA_SetMode
;;;604      * @param  DMAx DMAx Instance
;;;605      * @param  Channel This parameter can be one of the following values:
;;;606      *         @arg @ref LL_DMA_CHANNEL_1
;;;607      *         @arg @ref LL_DMA_CHANNEL_2
;;;608      *         @arg @ref LL_DMA_CHANNEL_3
;;;609      *         @arg @ref LL_DMA_CHANNEL_4
;;;610      *         @arg @ref LL_DMA_CHANNEL_5
;;;611      *         @arg @ref LL_DMA_CHANNEL_6
;;;612      *         @arg @ref LL_DMA_CHANNEL_7
;;;613      * @param  Mode This parameter can be one of the following values:
;;;614      *         @arg @ref LL_DMA_MODE_NORMAL
;;;615      *         @arg @ref LL_DMA_MODE_CIRCULAR
;;;616      * @retval None
;;;617      */
;;;618    __STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
;;;619    {
;;;620      MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
;;;621                 Mode);
;;;622    }
;;;623    
;;;624    /**
;;;625      * @brief  Get DMA mode circular or normal.
;;;626      * @rmtoll CCR          CIRC          LL_DMA_GetMode
;;;627      * @param  DMAx DMAx Instance
;;;628      * @param  Channel This parameter can be one of the following values:
;;;629      *         @arg @ref LL_DMA_CHANNEL_1
;;;630      *         @arg @ref LL_DMA_CHANNEL_2
;;;631      *         @arg @ref LL_DMA_CHANNEL_3
;;;632      *         @arg @ref LL_DMA_CHANNEL_4
;;;633      *         @arg @ref LL_DMA_CHANNEL_5
;;;634      *         @arg @ref LL_DMA_CHANNEL_6
;;;635      *         @arg @ref LL_DMA_CHANNEL_7
;;;636      * @retval Returned value can be one of the following values:
;;;637      *         @arg @ref LL_DMA_MODE_NORMAL
;;;638      *         @arg @ref LL_DMA_MODE_CIRCULAR
;;;639      */
;;;640    __STATIC_INLINE uint32_t LL_DMA_GetMode(DMA_TypeDef *DMAx, uint32_t Channel)
;;;641    {
;;;642      return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
;;;643                       DMA_CCR_CIRC));
;;;644    }
;;;645    
;;;646    /**
;;;647      * @brief  Set Peripheral increment mode.
;;;648      * @rmtoll CCR          PINC          LL_DMA_SetPeriphIncMode
;;;649      * @param  DMAx DMAx Instance
;;;650      * @param  Channel This parameter can be one of the following values:
;;;651      *         @arg @ref LL_DMA_CHANNEL_1
;;;652      *         @arg @ref LL_DMA_CHANNEL_2
;;;653      *         @arg @ref LL_DMA_CHANNEL_3
;;;654      *         @arg @ref LL_DMA_CHANNEL_4
;;;655      *         @arg @ref LL_DMA_CHANNEL_5
;;;656      *         @arg @ref LL_DMA_CHANNEL_6
;;;657      *         @arg @ref LL_DMA_CHANNEL_7
;;;658      * @param  PeriphOrM2MSrcIncMode This parameter can be one of the following values:
;;;659      *         @arg @ref LL_DMA_PERIPH_INCREMENT
;;;660      *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
;;;661      * @retval None
;;;662      */
;;;663    __STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
;;;664    {
;;;665      MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
;;;666                 PeriphOrM2MSrcIncMode);
;;;667    }
;;;668    
;;;669    /**
;;;670      * @brief  Get Peripheral increment mode.
;;;671      * @rmtoll CCR          PINC          LL_DMA_GetPeriphIncMode
;;;672      * @param  DMAx DMAx Instance
;;;673      * @param  Channel This parameter can be one of the following values:
;;;674      *         @arg @ref LL_DMA_CHANNEL_1
;;;675      *         @arg @ref LL_DMA_CHANNEL_2
;;;676      *         @arg @ref LL_DMA_CHANNEL_3
;;;677      *         @arg @ref LL_DMA_CHANNEL_4
;;;678      *         @arg @ref LL_DMA_CHANNEL_5
;;;679      *         @arg @ref LL_DMA_CHANNEL_6
;;;680      *         @arg @ref LL_DMA_CHANNEL_7
;;;681      * @retval Returned value can be one of the following values:
;;;682      *         @arg @ref LL_DMA_PERIPH_INCREMENT
;;;683      *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
;;;684      */
;;;685    __STATIC_INLINE uint32_t LL_DMA_GetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel)
;;;686    {
;;;687      return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
;;;688                       DMA_CCR_PINC));
;;;689    }
;;;690    
;;;691    /**
;;;692      * @brief  Set Memory increment mode.
;;;693      * @rmtoll CCR          MINC          LL_DMA_SetMemoryIncMode
;;;694      * @param  DMAx DMAx Instance
;;;695      * @param  Channel This parameter can be one of the following values:
;;;696      *         @arg @ref LL_DMA_CHANNEL_1
;;;697      *         @arg @ref LL_DMA_CHANNEL_2
;;;698      *         @arg @ref LL_DMA_CHANNEL_3
;;;699      *         @arg @ref LL_DMA_CHANNEL_4
;;;700      *         @arg @ref LL_DMA_CHANNEL_5
;;;701      *         @arg @ref LL_DMA_CHANNEL_6
;;;702      *         @arg @ref LL_DMA_CHANNEL_7
;;;703      * @param  MemoryOrM2MDstIncMode This parameter can be one of the following values:
;;;704      *         @arg @ref LL_DMA_MEMORY_INCREMENT
;;;705      *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
;;;706      * @retval None
;;;707      */
;;;708    __STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
;;;709    {
;;;710      MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
;;;711                 MemoryOrM2MDstIncMode);
;;;712    }
;;;713    
;;;714    /**
;;;715      * @brief  Get Memory increment mode.
;;;716      * @rmtoll CCR          MINC          LL_DMA_GetMemoryIncMode
;;;717      * @param  DMAx DMAx Instance
;;;718      * @param  Channel This parameter can be one of the following values:
;;;719      *         @arg @ref LL_DMA_CHANNEL_1
;;;720      *         @arg @ref LL_DMA_CHANNEL_2
;;;721      *         @arg @ref LL_DMA_CHANNEL_3
;;;722      *         @arg @ref LL_DMA_CHANNEL_4
;;;723      *         @arg @ref LL_DMA_CHANNEL_5
;;;724      *         @arg @ref LL_DMA_CHANNEL_6
;;;725      *         @arg @ref LL_DMA_CHANNEL_7
;;;726      * @retval Returned value can be one of the following values:
;;;727      *         @arg @ref LL_DMA_MEMORY_INCREMENT
;;;728      *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
;;;729      */
;;;730    __STATIC_INLINE uint32_t LL_DMA_GetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel)
;;;731    {
;;;732      return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
;;;733                       DMA_CCR_MINC));
;;;734    }
;;;735    
;;;736    /**
;;;737      * @brief  Set Peripheral size.
;;;738      * @rmtoll CCR          PSIZE         LL_DMA_SetPeriphSize
;;;739      * @param  DMAx DMAx Instance
;;;740      * @param  Channel This parameter can be one of the following values:
;;;741      *         @arg @ref LL_DMA_CHANNEL_1
;;;742      *         @arg @ref LL_DMA_CHANNEL_2
;;;743      *         @arg @ref LL_DMA_CHANNEL_3
;;;744      *         @arg @ref LL_DMA_CHANNEL_4
;;;745      *         @arg @ref LL_DMA_CHANNEL_5
;;;746      *         @arg @ref LL_DMA_CHANNEL_6
;;;747      *         @arg @ref LL_DMA_CHANNEL_7
;;;748      * @param  PeriphOrM2MSrcDataSize This parameter can be one of the following values:
;;;749      *         @arg @ref LL_DMA_PDATAALIGN_BYTE
;;;750      *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
;;;751      *         @arg @ref LL_DMA_PDATAALIGN_WORD
;;;752      * @retval None
;;;753      */
;;;754    __STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
;;;755    {
;;;756      MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
;;;757                 PeriphOrM2MSrcDataSize);
;;;758    }
;;;759    
;;;760    /**
;;;761      * @brief  Get Peripheral size.
;;;762      * @rmtoll CCR          PSIZE         LL_DMA_GetPeriphSize
;;;763      * @param  DMAx DMAx Instance
;;;764      * @param  Channel This parameter can be one of the following values:
;;;765      *         @arg @ref LL_DMA_CHANNEL_1
;;;766      *         @arg @ref LL_DMA_CHANNEL_2
;;;767      *         @arg @ref LL_DMA_CHANNEL_3
;;;768      *         @arg @ref LL_DMA_CHANNEL_4
;;;769      *         @arg @ref LL_DMA_CHANNEL_5
;;;770      *         @arg @ref LL_DMA_CHANNEL_6
;;;771      *         @arg @ref LL_DMA_CHANNEL_7
;;;772      * @retval Returned value can be one of the following values:
;;;773      *         @arg @ref LL_DMA_PDATAALIGN_BYTE
;;;774      *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
;;;775      *         @arg @ref LL_DMA_PDATAALIGN_WORD
;;;776      */
;;;777    __STATIC_INLINE uint32_t LL_DMA_GetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel)
;;;778    {
;;;779      return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
;;;780                       DMA_CCR_PSIZE));
;;;781    }
;;;782    
;;;783    /**
;;;784      * @brief  Set Memory size.
;;;785      * @rmtoll CCR          MSIZE         LL_DMA_SetMemorySize
;;;786      * @param  DMAx DMAx Instance
;;;787      * @param  Channel This parameter can be one of the following values:
;;;788      *         @arg @ref LL_DMA_CHANNEL_1
;;;789      *         @arg @ref LL_DMA_CHANNEL_2
;;;790      *         @arg @ref LL_DMA_CHANNEL_3
;;;791      *         @arg @ref LL_DMA_CHANNEL_4
;;;792      *         @arg @ref LL_DMA_CHANNEL_5
;;;793      *         @arg @ref LL_DMA_CHANNEL_6
;;;794      *         @arg @ref LL_DMA_CHANNEL_7
;;;795      * @param  MemoryOrM2MDstDataSize This parameter can be one of the following values:
;;;796      *         @arg @ref LL_DMA_MDATAALIGN_BYTE
;;;797      *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
;;;798      *         @arg @ref LL_DMA_MDATAALIGN_WORD
;;;799      * @retval None
;;;800      */
;;;801    __STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
;;;802    {
;;;803      MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
;;;804                 MemoryOrM2MDstDataSize);
;;;805    }
;;;806    
;;;807    /**
;;;808      * @brief  Get Memory size.
;;;809      * @rmtoll CCR          MSIZE         LL_DMA_GetMemorySize
;;;810      * @param  DMAx DMAx Instance
;;;811      * @param  Channel This parameter can be one of the following values:
;;;812      *         @arg @ref LL_DMA_CHANNEL_1
;;;813      *         @arg @ref LL_DMA_CHANNEL_2
;;;814      *         @arg @ref LL_DMA_CHANNEL_3
;;;815      *         @arg @ref LL_DMA_CHANNEL_4
;;;816      *         @arg @ref LL_DMA_CHANNEL_5
;;;817      *         @arg @ref LL_DMA_CHANNEL_6
;;;818      *         @arg @ref LL_DMA_CHANNEL_7
;;;819      * @retval Returned value can be one of the following values:
;;;820      *         @arg @ref LL_DMA_MDATAALIGN_BYTE
;;;821      *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
;;;822      *         @arg @ref LL_DMA_MDATAALIGN_WORD
;;;823      */
;;;824    __STATIC_INLINE uint32_t LL_DMA_GetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel)
;;;825    {
;;;826      return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
;;;827                       DMA_CCR_MSIZE));
;;;828    }
;;;829    
;;;830    /**
;;;831      * @brief  Set Channel priority level.
;;;832      * @rmtoll CCR          PL            LL_DMA_SetChannelPriorityLevel
;;;833      * @param  DMAx DMAx Instance
;;;834      * @param  Channel This parameter can be one of the following values:
;;;835      *         @arg @ref LL_DMA_CHANNEL_1
;;;836      *         @arg @ref LL_DMA_CHANNEL_2
;;;837      *         @arg @ref LL_DMA_CHANNEL_3
;;;838      *         @arg @ref LL_DMA_CHANNEL_4
;;;839      *         @arg @ref LL_DMA_CHANNEL_5
;;;840      *         @arg @ref LL_DMA_CHANNEL_6
;;;841      *         @arg @ref LL_DMA_CHANNEL_7
;;;842      * @param  Priority This parameter can be one of the following values:
;;;843      *         @arg @ref LL_DMA_PRIORITY_LOW
;;;844      *         @arg @ref LL_DMA_PRIORITY_MEDIUM
;;;845      *         @arg @ref LL_DMA_PRIORITY_HIGH
;;;846      *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
;;;847      * @retval None
;;;848      */
;;;849    __STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
;;;850    {
;;;851      MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
;;;852                 Priority);
;;;853    }
;;;854    
;;;855    /**
;;;856      * @brief  Get Channel priority level.
;;;857      * @rmtoll CCR          PL            LL_DMA_GetChannelPriorityLevel
;;;858      * @param  DMAx DMAx Instance
;;;859      * @param  Channel This parameter can be one of the following values:
;;;860      *         @arg @ref LL_DMA_CHANNEL_1
;;;861      *         @arg @ref LL_DMA_CHANNEL_2
;;;862      *         @arg @ref LL_DMA_CHANNEL_3
;;;863      *         @arg @ref LL_DMA_CHANNEL_4
;;;864      *         @arg @ref LL_DMA_CHANNEL_5
;;;865      *         @arg @ref LL_DMA_CHANNEL_6
;;;866      *         @arg @ref LL_DMA_CHANNEL_7
;;;867      * @retval Returned value can be one of the following values:
;;;868      *         @arg @ref LL_DMA_PRIORITY_LOW
;;;869      *         @arg @ref LL_DMA_PRIORITY_MEDIUM
;;;870      *         @arg @ref LL_DMA_PRIORITY_HIGH
;;;871      *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
;;;872      */
;;;873    __STATIC_INLINE uint32_t LL_DMA_GetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel)
;;;874    {
;;;875      return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
;;;876                       DMA_CCR_PL));
;;;877    }
;;;878    
;;;879    /**
;;;880      * @brief  Set Number of data to transfer.
;;;881      * @note   This action has no effect if
;;;882      *         channel is enabled.
;;;883      * @rmtoll CNDTR        NDT           LL_DMA_SetDataLength
;;;884      * @param  DMAx DMAx Instance
;;;885      * @param  Channel This parameter can be one of the following values:
;;;886      *         @arg @ref LL_DMA_CHANNEL_1
;;;887      *         @arg @ref LL_DMA_CHANNEL_2
;;;888      *         @arg @ref LL_DMA_CHANNEL_3
;;;889      *         @arg @ref LL_DMA_CHANNEL_4
;;;890      *         @arg @ref LL_DMA_CHANNEL_5
;;;891      *         @arg @ref LL_DMA_CHANNEL_6
;;;892      *         @arg @ref LL_DMA_CHANNEL_7
;;;893      * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
;;;894      * @retval None
;;;895      */
;;;896    __STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
;;;897    {
;;;898      MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
;;;899                 DMA_CNDTR_NDT, NbData);
;;;900    }
;;;901    
;;;902    /**
;;;903      * @brief  Get Number of data to transfer.
;;;904      * @note   Once the channel is enabled, the return value indicate the
;;;905      *         remaining bytes to be transmitted.
;;;906      * @rmtoll CNDTR        NDT           LL_DMA_GetDataLength
;;;907      * @param  DMAx DMAx Instance
;;;908      * @param  Channel This parameter can be one of the following values:
;;;909      *         @arg @ref LL_DMA_CHANNEL_1
;;;910      *         @arg @ref LL_DMA_CHANNEL_2
;;;911      *         @arg @ref LL_DMA_CHANNEL_3
;;;912      *         @arg @ref LL_DMA_CHANNEL_4
;;;913      *         @arg @ref LL_DMA_CHANNEL_5
;;;914      *         @arg @ref LL_DMA_CHANNEL_6
;;;915      *         @arg @ref LL_DMA_CHANNEL_7
;;;916      * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
;;;917      */
;;;918    __STATIC_INLINE uint32_t LL_DMA_GetDataLength(DMA_TypeDef *DMAx, uint32_t Channel)
;;;919    {
;;;920      return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
;;;921                       DMA_CNDTR_NDT));
;;;922    }
;;;923    
;;;924    /**
;;;925      * @brief  Configure the Source and Destination addresses.
;;;926      * @note   This API must not be called when the DMA channel is enabled.
;;;927      * @note   Each IP using DMA provides an API to get directly the register adress (LL_PPP_DMA_GetRegAddr).
;;;928      * @rmtoll CPAR         PA            LL_DMA_ConfigAddresses\n
;;;929      *         CMAR         MA            LL_DMA_ConfigAddresses
;;;930      * @param  DMAx DMAx Instance
;;;931      * @param  Channel This parameter can be one of the following values:
;;;932      *         @arg @ref LL_DMA_CHANNEL_1
;;;933      *         @arg @ref LL_DMA_CHANNEL_2
;;;934      *         @arg @ref LL_DMA_CHANNEL_3
;;;935      *         @arg @ref LL_DMA_CHANNEL_4
;;;936      *         @arg @ref LL_DMA_CHANNEL_5
;;;937      *         @arg @ref LL_DMA_CHANNEL_6
;;;938      *         @arg @ref LL_DMA_CHANNEL_7
;;;939      * @param  SrcAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
;;;940      * @param  DstAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
;;;941      * @param  Direction This parameter can be one of the following values:
;;;942      *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
;;;943      *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
;;;944      *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
;;;945      * @retval None
;;;946      */
;;;947    __STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
;;;948                                                uint32_t DstAddress, uint32_t Direction)
;;;949    {
;;;950      /* Direction Memory to Periph */
;;;951      if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
        0x08001480:    2c10        .,      CMP      r4,#0x10
        0x08001482:    d109        ..      BNE      0x8001498 ; MX_USART2_UART_Init + 260
;;;952      {
;;;953        WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
        0x08001484:    1e4d        M.      SUBS     r5,r1,#1
        0x08001486:    4e2f        /N      LDR      r6,[pc,#188] ; [0x8001544] = 0x80028b0
        0x08001488:    5d75        u]      LDRB     r5,[r6,r5]
        0x0800148a:    4405        .D      ADD      r5,r5,r0
        0x0800148c:    60ea        .`      STR      r2,[r5,#0xc]
;;;954        WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
        0x0800148e:    1e4d        M.      SUBS     r5,r1,#1
        0x08001490:    5d75        u]      LDRB     r5,[r6,r5]
        0x08001492:    4405        .D      ADD      r5,r5,r0
        0x08001494:    60ab        .`      STR      r3,[r5,#8]
        0x08001496:    e008        ..      B        0x80014aa ; MX_USART2_UART_Init + 278
;;;955      }
;;;956      /* Direction Periph to Memory and Memory to Memory */
;;;957      else
;;;958      {
;;;959        WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
        0x08001498:    1e4d        M.      SUBS     r5,r1,#1
        0x0800149a:    4e2a        *N      LDR      r6,[pc,#168] ; [0x8001544] = 0x80028b0
        0x0800149c:    5d75        u]      LDRB     r5,[r6,r5]
        0x0800149e:    4405        .D      ADD      r5,r5,r0
        0x080014a0:    60aa        .`      STR      r2,[r5,#8]
;;;960        WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
        0x080014a2:    1e4d        M.      SUBS     r5,r1,#1
        0x080014a4:    5d75        u]      LDRB     r5,[r6,r5]
        0x080014a6:    4405        .D      ADD      r5,r5,r0
        0x080014a8:    60eb        .`      STR      r3,[r5,#0xc]
;;;961      }
;;;962    }
        0x080014aa:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;1040     LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, ubNbDataToTransmit);
        0x080014ac:    4822        "H      LDR      r0,[pc,#136] ; [0x8001538] = 0x40020000
        0x080014ae:    2107        .!      MOVS     r1,#7
        0x080014b0:    4b25        %K      LDR      r3,[pc,#148] ; [0x8001548] = 0x200004ed
        0x080014b2:    781a        .x      LDRB     r2,[r3,#0]
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h
;;;898      MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
        0x080014b4:    1e4b        K.      SUBS     r3,r1,#1
        0x080014b6:    4c23        #L      LDR      r4,[pc,#140] ; [0x8001544] = 0x80028b0
        0x080014b8:    5ce3        .\      LDRB     r3,[r4,r3]
        0x080014ba:    4403        .D      ADD      r3,r3,r0
        0x080014bc:    685b        [h      LDR      r3,[r3,#4]
        0x080014be:    f36f030f    o...    BFC      r3,#0,#16
        0x080014c2:    4313        .C      ORRS     r3,r3,r2
        0x080014c4:    1e4c        L.      SUBS     r4,r1,#1
        0x080014c6:    4d1f        .M      LDR      r5,[pc,#124] ; [0x8001544] = 0x80028b0
        0x080014c8:    5d2c        ,]      LDRB     r4,[r5,r4]
        0x080014ca:    4404        .D      ADD      r4,r4,r0
        0x080014cc:    6063        c`      STR      r3,[r4,#4]
;;;899                 DMA_CNDTR_NDT, NbData);
;;;900    }
        0x080014ce:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;1044     USART_InitStruct.BaudRate = 115200;
        0x080014d0:    f44f30e1    O..0    MOV      r0,#0x1c200
        0x080014d4:    9005        ..      STR      r0,[sp,#0x14]
;;;1045     USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
        0x080014d6:    2000        .       MOVS     r0,#0
        0x080014d8:    9006        ..      STR      r0,[sp,#0x18]
;;;1046     USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
        0x080014da:    9007        ..      STR      r0,[sp,#0x1c]
;;;1047     USART_InitStruct.Parity = LL_USART_PARITY_NONE;
        0x080014dc:    9008        ..      STR      r0,[sp,#0x20]
;;;1048     USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
        0x080014de:    200c        .       MOVS     r0,#0xc
        0x080014e0:    9009        ..      STR      r0,[sp,#0x24]
;;;1049     USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
        0x080014e2:    2000        .       MOVS     r0,#0
        0x080014e4:    900a        ..      STR      r0,[sp,#0x28]
;;;1050     LL_USART_Init(USART2, &USART_InitStruct);
        0x080014e6:    a905        ..      ADD      r1,sp,#0x14
        0x080014e8:    4815        .H      LDR      r0,[pc,#84] ; [0x8001540] = 0x40004400
        0x080014ea:    f7fffb4d    ..M.    BL       LL_USART_Init ; 0x8000b88
;;;1051     LL_USART_ConfigAsyncMode(USART2);
        0x080014ee:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h
;;;1549     CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
        0x080014f0:    4813        .H      LDR      r0,[pc,#76] ; [0x8001540] = 0x40004400
        0x080014f2:    6900        .i      LDR      r0,[r0,#0x10]
        0x080014f4:    f4204090     ..@    BIC      r0,r0,#0x4800
        0x080014f8:    4911        .I      LDR      r1,[pc,#68] ; [0x8001540] = 0x40004400
        0x080014fa:    6108        .a      STR      r0,[r1,#0x10]
;;;1550     CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
        0x080014fc:    4608        .F      MOV      r0,r1
        0x080014fe:    6940        @i      LDR      r0,[r0,#0x14]
        0x08001500:    f020002a     .*.    BIC      r0,r0,#0x2a
        0x08001504:    6148        Ha      STR      r0,[r1,#0x14]
;;;1551   }
        0x08001506:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;1052     LL_USART_Enable(USART2);
        0x08001508:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h
;;;431      SET_BIT(USARTx->CR1, USART_CR1_UE);
        0x0800150a:    4608        .F      MOV      r0,r1
        0x0800150c:    68c0        .h      LDR      r0,[r0,#0xc]
        0x0800150e:    f4405000    @..P    ORR      r0,r0,#0x2000
        0x08001512:    60c8        .`      STR      r0,[r1,#0xc]
;;;432    }
        0x08001514:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;1057   }
        0x08001516:    b00b        ..      ADD      sp,sp,#0x2c
        0x08001518:    bdf0        ..      POP      {r4-r7,pc}
    $d
        0x0800151a:    0000        ..      DCW    0
        0x0800151c:    200007ac    ...     DCD    536872876
        0x08001520:    200004e8    ...     DCD    536872168
        0x08001524:    200007b8    ...     DCD    536872888
        0x08001528:    200004e4    ...     DCD    536872164
        0x0800152c:    200004dc    ...     DCD    536872156
        0x08001530:    200004ec    ...     DCD    536872172
        0x08001534:    40010800    ...@    DCD    1073809408
        0x08001538:    40020000    ...@    DCD    1073872896
        0x0800153c:    080028e8    .(..    DCD    134228200
        0x08001540:    40004400    .D.@    DCD    1073759232
        0x08001544:    080028b0    .(..    DCD    134228144
        0x08001548:    200004ed    ...     DCD    536872173
    $t
    i.NVIC_EnableIRQ
    NVIC_EnableIRQ
;;; ../Drivers/CMSIS/Include/core_cm3.h
;;;1454     NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
        0x0800154c:    f000021f    ....    AND      r2,r0,#0x1f
        0x08001550:    2101        .!      MOVS     r1,#1
        0x08001552:    4091        .@      LSLS     r1,r1,r2
        0x08001554:    0942        B.      LSRS     r2,r0,#5
        0x08001556:    0092        ..      LSLS     r2,r2,#2
        0x08001558:    f10222e0    ..."    ADD      r2,r2,#0xe000e000
        0x0800155c:    f8c21100    ....    STR      r1,[r2,#0x100]
;;;1455   }
        0x08001560:    4770        pG      BX       lr
    i.NVIC_EncodePriority
    NVIC_EncodePriority
;;;1456   
;;;1457   
;;;1458   /**
;;;1459     \brief   Disable External Interrupt
;;;1460     \details Disables a device-specific interrupt in the NVIC interrupt controller.
;;;1461     \param [in]      IRQn  External interrupt number. Value cannot be negative.
;;;1462    */
;;;1463   __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
;;;1464   {
;;;1465     NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
;;;1466   }
;;;1467   
;;;1468   
;;;1469   /**
;;;1470     \brief   Get Pending Interrupt
;;;1471     \details Reads the pending register in the NVIC and returns the pending bit for the specified interrupt.
;;;1472     \param [in]      IRQn  Interrupt number.
;;;1473     \return             0  Interrupt status is not pending.
;;;1474     \return             1  Interrupt status is pending.
;;;1475    */
;;;1476   __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
;;;1477   {
;;;1478     return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
;;;1479   }
;;;1480   
;;;1481   
;;;1482   /**
;;;1483     \brief   Set Pending Interrupt
;;;1484     \details Sets the pending bit of an external interrupt.
;;;1485     \param [in]      IRQn  Interrupt number. Value cannot be negative.
;;;1486    */
;;;1487   __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
;;;1488   {
;;;1489     NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
;;;1490   }
;;;1491   
;;;1492   
;;;1493   /**
;;;1494     \brief   Clear Pending Interrupt
;;;1495     \details Clears the pending bit of an external interrupt.
;;;1496     \param [in]      IRQn  External interrupt number. Value cannot be negative.
;;;1497    */
;;;1498   __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
;;;1499   {
;;;1500     NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
;;;1501   }
;;;1502   
;;;1503   
;;;1504   /**
;;;1505     \brief   Get Active Interrupt
;;;1506     \details Reads the active register in NVIC and returns the active bit.
;;;1507     \param [in]      IRQn  Interrupt number.
;;;1508     \return             0  Interrupt status is not active.
;;;1509     \return             1  Interrupt status is active.
;;;1510    */
;;;1511   __STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
;;;1512   {
;;;1513     return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
;;;1514   }
;;;1515   
;;;1516   
;;;1517   /**
;;;1518     \brief   Set Interrupt Priority
;;;1519     \details Sets the priority of an interrupt.
;;;1520     \note    The priority cannot be set for every core interrupt.
;;;1521     \param [in]      IRQn  Interrupt number.
;;;1522     \param [in]  priority  Priority to set.
;;;1523    */
;;;1524   __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
;;;1525   {
;;;1526     if ((int32_t)(IRQn) < 0)
;;;1527     {
;;;1528       SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
;;;1529     }
;;;1530     else
;;;1531     {
;;;1532       NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
;;;1533     }
;;;1534   }
;;;1535   
;;;1536   
;;;1537   /**
;;;1538     \brief   Get Interrupt Priority
;;;1539     \details Reads the priority of an interrupt.
;;;1540              The interrupt number can be positive to specify an external (device specific) interrupt,
;;;1541              or negative to specify an internal (core) interrupt.
;;;1542     \param [in]   IRQn  Interrupt number.
;;;1543     \return             Interrupt Priority.
;;;1544                         Value is aligned automatically to the implemented priority bits of the microcontroller.
;;;1545    */
;;;1546   __STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
;;;1547   {
;;;1548   
;;;1549     if ((int32_t)(IRQn) < 0)
;;;1550     {
;;;1551       return(((uint32_t)SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
;;;1552     }
;;;1553     else
;;;1554     {
;;;1555       return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
;;;1556     }
;;;1557   }
;;;1558   
;;;1559   
;;;1560   /**
;;;1561     \brief   Encode Priority
;;;1562     \details Encodes the priority for an interrupt with the given priority group,
;;;1563              preemptive priority value, and subpriority value.
;;;1564              In case of a conflict between priority grouping and available
;;;1565              priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
;;;1566     \param [in]     PriorityGroup  Used priority group.
;;;1567     \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
;;;1568     \param [in]       SubPriority  Subpriority value (starting from 0).
;;;1569     \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
;;;1570    */
;;;1571   __STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
;;;1572   {
        0x08001562:    b5f0        ..      PUSH     {r4-r7,lr}
        0x08001564:    4603        .F      MOV      r3,r0
        0x08001566:    460c        .F      MOV      r4,r1
;;;1573     uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
        0x08001568:    f0030107    ....    AND      r1,r3,#7
;;;1574     uint32_t PreemptPriorityBits;
;;;1575     uint32_t SubPriorityBits;
;;;1576   
;;;1577     PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
        0x0800156c:    f1c10007    ....    RSB      r0,r1,#7
        0x08001570:    2804        .(      CMP      r0,#4
        0x08001572:    d901        ..      BLS      0x8001578 ; NVIC_EncodePriority + 22
        0x08001574:    2004        .       MOVS     r0,#4
        0x08001576:    e001        ..      B        0x800157c ; NVIC_EncodePriority + 26
        0x08001578:    f1c10007    ....    RSB      r0,r1,#7
        0x0800157c:    4606        .F      MOV      r6,r0
;;;1578     SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
        0x0800157e:    1d08        ..      ADDS     r0,r1,#4
        0x08001580:    2807        .(      CMP      r0,#7
        0x08001582:    d201        ..      BCS      0x8001588 ; NVIC_EncodePriority + 38
        0x08001584:    2000        .       MOVS     r0,#0
        0x08001586:    e000        ..      B        0x800158a ; NVIC_EncodePriority + 40
        0x08001588:    1ec8        ..      SUBS     r0,r1,#3
        0x0800158a:    4605        .F      MOV      r5,r0
;;;1579   
;;;1580     return (
        0x0800158c:    2001        .       MOVS     r0,#1
        0x0800158e:    40b0        .@      LSLS     r0,r0,r6
        0x08001590:    1e40        @.      SUBS     r0,r0,#1
        0x08001592:    4020         @      ANDS     r0,r0,r4
        0x08001594:    40a8        .@      LSLS     r0,r0,r5
        0x08001596:    2701        .'      MOVS     r7,#1
        0x08001598:    40af        .@      LSLS     r7,r7,r5
        0x0800159a:    1e7f        ..      SUBS     r7,r7,#1
        0x0800159c:    4017        .@      ANDS     r7,r7,r2
        0x0800159e:    4338        8C      ORRS     r0,r0,r7
;;;1581              ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
;;;1582              ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
;;;1583            );
;;;1584   }
        0x080015a0:    bdf0        ..      POP      {r4-r7,pc}
        0x080015a2:    0000        ..      MOVS     r0,r0
    i.NVIC_GetPriorityGrouping
    NVIC_GetPriorityGrouping
;;; ../Drivers/CMSIS/Include/core_cm3.h (1443)
        0x080015a4:    4802        .H      LDR      r0,[pc,#8] ; [0x80015b0] = 0xe000ed0c
        0x080015a6:    6800        .h      LDR      r0,[r0,#0]
        0x080015a8:    f3c02002    ...     UBFX     r0,r0,#8,#3
;;;1444   }
        0x080015ac:    4770        pG      BX       lr
    $d
        0x080015ae:    0000        ..      DCW    0
        0x080015b0:    e000ed0c    ....    DCD    3758157068
    $t
    i.NVIC_SetPriority
    NVIC_SetPriority
;;;1445   
;;;1446   
;;;1447   /**
;;;1448     \brief   Enable External Interrupt
;;;1449     \details Enables a device-specific interrupt in the NVIC interrupt controller.
;;;1450     \param [in]      IRQn  External interrupt number. Value cannot be negative.
;;;1451    */
;;;1452   __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
;;;1453   {
;;;1454     NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
;;;1455   }
;;;1456   
;;;1457   
;;;1458   /**
;;;1459     \brief   Disable External Interrupt
;;;1460     \details Disables a device-specific interrupt in the NVIC interrupt controller.
;;;1461     \param [in]      IRQn  External interrupt number. Value cannot be negative.
;;;1462    */
;;;1463   __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
;;;1464   {
;;;1465     NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
;;;1466   }
;;;1467   
;;;1468   
;;;1469   /**
;;;1470     \brief   Get Pending Interrupt
;;;1471     \details Reads the pending register in the NVIC and returns the pending bit for the specified interrupt.
;;;1472     \param [in]      IRQn  Interrupt number.
;;;1473     \return             0  Interrupt status is not pending.
;;;1474     \return             1  Interrupt status is pending.
;;;1475    */
;;;1476   __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
;;;1477   {
;;;1478     return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
;;;1479   }
;;;1480   
;;;1481   
;;;1482   /**
;;;1483     \brief   Set Pending Interrupt
;;;1484     \details Sets the pending bit of an external interrupt.
;;;1485     \param [in]      IRQn  Interrupt number. Value cannot be negative.
;;;1486    */
;;;1487   __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
;;;1488   {
;;;1489     NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
;;;1490   }
;;;1491   
;;;1492   
;;;1493   /**
;;;1494     \brief   Clear Pending Interrupt
;;;1495     \details Clears the pending bit of an external interrupt.
;;;1496     \param [in]      IRQn  External interrupt number. Value cannot be negative.
;;;1497    */
;;;1498   __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
;;;1499   {
;;;1500     NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
;;;1501   }
;;;1502   
;;;1503   
;;;1504   /**
;;;1505     \brief   Get Active Interrupt
;;;1506     \details Reads the active register in NVIC and returns the active bit.
;;;1507     \param [in]      IRQn  Interrupt number.
;;;1508     \return             0  Interrupt status is not active.
;;;1509     \return             1  Interrupt status is active.
;;;1510    */
;;;1511   __STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
;;;1512   {
;;;1513     return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
;;;1514   }
;;;1515   
;;;1516   
;;;1517   /**
;;;1518     \brief   Set Interrupt Priority
;;;1519     \details Sets the priority of an interrupt.
;;;1520     \note    The priority cannot be set for every core interrupt.
;;;1521     \param [in]      IRQn  Interrupt number.
;;;1522     \param [in]  priority  Priority to set.
;;;1523    */
;;;1524   __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
;;;1525   {
        0x080015b4:    b510        ..      PUSH     {r4,lr}
;;;1526     if ((int32_t)(IRQn) < 0)
        0x080015b6:    2800        .(      CMP      r0,#0
        0x080015b8:    da07        ..      BGE      0x80015ca ; NVIC_SetPriority + 22
;;;1527     {
;;;1528       SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
        0x080015ba:    070a        ..      LSLS     r2,r1,#28
        0x080015bc:    0e14        ..      LSRS     r4,r2,#24
        0x080015be:    4a05        .J      LDR      r2,[pc,#20] ; [0x80015d4] = 0xe000ed18
        0x080015c0:    f000030f    ....    AND      r3,r0,#0xf
        0x080015c4:    1f1b        ..      SUBS     r3,r3,#4
        0x080015c6:    54d4        .T      STRB     r4,[r2,r3]
        0x080015c8:    e003        ..      B        0x80015d2 ; NVIC_SetPriority + 30
;;;1529     }
;;;1530     else
;;;1531     {
;;;1532       NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
        0x080015ca:    070a        ..      LSLS     r2,r1,#28
        0x080015cc:    0e13        ..      LSRS     r3,r2,#24
        0x080015ce:    4a02        .J      LDR      r2,[pc,#8] ; [0x80015d8] = 0xe000e400
        0x080015d0:    5413        .T      STRB     r3,[r2,r0]
;;;1533     }
;;;1534   }
        0x080015d2:    bd10        ..      POP      {r4,pc}
    $d
        0x080015d4:    e000ed18    ....    DCD    3758157080
        0x080015d8:    e000e400    ....    DCD    3758154752
    $t
    i.OC1Config
    OC1Config
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_tim.c
;;;766    {
        0x080015dc:    b570        p.      PUSH     {r4-r6,lr}
        0x080015de:    4602        .F      MOV      r2,r0
;;;767      uint32_t tmpccmr1 = 0U;
        0x080015e0:    2400        .$      MOVS     r4,#0
;;;768      uint32_t tmpccer = 0U;
        0x080015e2:    2300        .#      MOVS     r3,#0
;;;769      uint32_t tmpcr2 = 0U;
        0x080015e4:    2500        .%      MOVS     r5,#0
;;;770    
;;;771      /* Check the parameters */
;;;772      assert_param(IS_TIM_CC1_INSTANCE(TIMx));
;;;773      assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
;;;774      assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
;;;775      assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
;;;776      assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
;;;777      assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
;;;778    
;;;779      /* Disable the Channel 1: Reset the CC1E Bit */
;;;780      CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
        0x080015e6:    6a10        .j      LDR      r0,[r2,#0x20]
        0x080015e8:    f0200001     ...    BIC      r0,r0,#1
        0x080015ec:    6210        .b      STR      r0,[r2,#0x20]
;;;781    
;;;782      /* Get the TIMx CCER register value */
;;;783      tmpccer = LL_TIM_ReadReg(TIMx, CCER);
        0x080015ee:    6a13        .j      LDR      r3,[r2,#0x20]
;;;784    
;;;785      /* Get the TIMx CR2 register value */
;;;786      tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
        0x080015f0:    6855        Uh      LDR      r5,[r2,#4]
;;;787    
;;;788      /* Get the TIMx CCMR1 register value */
;;;789      tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
        0x080015f2:    6994        .i      LDR      r4,[r2,#0x18]
;;;790    
;;;791      /* Reset Capture/Compare selection Bits */
;;;792      CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
        0x080015f4:    f0240403    $...    BIC      r4,r4,#3
;;;793    
;;;794      /* Set the Output Compare Mode */
;;;795      MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
        0x080015f8:    f0240070    $.p.    BIC      r0,r4,#0x70
        0x080015fc:    680e        .h      LDR      r6,[r1,#0]
        0x080015fe:    ea400406    @...    ORR      r4,r0,r6
;;;796    
;;;797      /* Set the Output Compare Polarity */
;;;798      MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
        0x08001602:    f0230002    #...    BIC      r0,r3,#2
        0x08001606:    690e        .i      LDR      r6,[r1,#0x10]
        0x08001608:    ea400306    @...    ORR      r3,r0,r6
;;;799    
;;;800      /* Set the Output State */
;;;801      MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
        0x0800160c:    f0230001    #...    BIC      r0,r3,#1
        0x08001610:    684e        Nh      LDR      r6,[r1,#4]
        0x08001612:    ea400306    @...    ORR      r3,r0,r6
;;;802    
;;;803      if (IS_TIM_BREAK_INSTANCE(TIMx))
        0x08001616:    480f        .H      LDR      r0,[pc,#60] ; [0x8001654] = 0x40012c00
        0x08001618:    4282        .B      CMP      r2,r0
        0x0800161a:    d113        ..      BNE      0x8001644 ; OC1Config + 104
;;;804      {
;;;805        assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
;;;806        assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));
;;;807    
;;;808        /* Set the complementary output Polarity */
;;;809        MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
        0x0800161c:    f0230008    #...    BIC      r0,r3,#8
        0x08001620:    694e        Ni      LDR      r6,[r1,#0x14]
        0x08001622:    ea400386    @...    ORR      r3,r0,r6,LSL #2
;;;810    
;;;811        /* Set the complementary output State */
;;;812        MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
        0x08001626:    f0230004    #...    BIC      r0,r3,#4
        0x0800162a:    688e        .h      LDR      r6,[r1,#8]
        0x0800162c:    ea400386    @...    ORR      r3,r0,r6,LSL #2
;;;813    
;;;814        /* Set the Output Idle state */
;;;815        MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
        0x08001630:    f4257080    %..p    BIC      r0,r5,#0x100
        0x08001634:    698e        .i      LDR      r6,[r1,#0x18]
        0x08001636:    ea400506    @...    ORR      r5,r0,r6
;;;816    
;;;817        /* Set the complementary output Idle state */
;;;818        MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
        0x0800163a:    f4257000    %..p    BIC      r0,r5,#0x200
        0x0800163e:    69ce        .i      LDR      r6,[r1,#0x1c]
        0x08001640:    ea400546    @.F.    ORR      r5,r0,r6,LSL #1
;;;819      }
;;;820    
;;;821      /* Write to TIMx CR2 */
;;;822      LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
        0x08001644:    6055        U`      STR      r5,[r2,#4]
;;;823    
;;;824      /* Write to TIMx CCMR1 */
;;;825      LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
        0x08001646:    6194        .a      STR      r4,[r2,#0x18]
;;;826    
;;;827      /* Set the Capture Compare Register value */
;;;828      LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
        0x08001648:    68c8        .h      LDR      r0,[r1,#0xc]
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;1997     WRITE_REG(TIMx->CCR1, CompareValue);
        0x0800164a:    6350        Pc      STR      r0,[r2,#0x34]
;;;1998   }
        0x0800164c:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_tim.c
;;;831      LL_TIM_WriteReg(TIMx, CCER, tmpccer);
        0x0800164e:    6213        .b      STR      r3,[r2,#0x20]
;;;832    
;;;833      return SUCCESS;
        0x08001650:    2001        .       MOVS     r0,#1
;;;834    }
        0x08001652:    bd70        p.      POP      {r4-r6,pc}
    $d
        0x08001654:    40012c00    .,.@    DCD    1073818624
    $t
    i.OC2Config
    OC2Config
;;;835    
;;;836    /**
;;;837      * @brief  Configure the TIMx output channel 2.
;;;838      * @param  TIMx Timer Instance
;;;839      * @param  TIM_OCInitStruct pointer to the the TIMx output channel 2 configuration data structure
;;;840      * @retval An ErrorStatus enumeration value:
;;;841      *          - SUCCESS: TIMx registers are de-initialized
;;;842      *          - ERROR: not applicable
;;;843      */
;;;844    static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
;;;845    {
        0x08001658:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x0800165c:    4604        .F      MOV      r4,r0
        0x0800165e:    460d        .F      MOV      r5,r1
;;;846      uint32_t tmpccmr1 = 0U;
        0x08001660:    2700        .'      MOVS     r7,#0
;;;847      uint32_t tmpccer = 0U;
        0x08001662:    2600        .&      MOVS     r6,#0
;;;848      uint32_t tmpcr2 = 0U;
        0x08001664:    46b0        .F      MOV      r8,r6
;;;849    
;;;850      /* Check the parameters */
;;;851      assert_param(IS_TIM_CC2_INSTANCE(TIMx));
;;;852      assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
;;;853      assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
;;;854      assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
;;;855      assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
;;;856      assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
;;;857    
;;;858      /* Disable the Channel 2: Reset the CC2E Bit */
;;;859      CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
        0x08001666:    6a20         j      LDR      r0,[r4,#0x20]
        0x08001668:    f0200010     ...    BIC      r0,r0,#0x10
        0x0800166c:    6220         b      STR      r0,[r4,#0x20]
;;;860    
;;;861      /* Get the TIMx CCER register value */
;;;862      tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
        0x0800166e:    6a26        &j      LDR      r6,[r4,#0x20]
;;;863    
;;;864      /* Get the TIMx CR2 register value */
;;;865      tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
        0x08001670:    f8d48004    ....    LDR      r8,[r4,#4]
;;;866    
;;;867      /* Get the TIMx CCMR1 register value */
;;;868      tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
        0x08001674:    69a7        .i      LDR      r7,[r4,#0x18]
;;;869    
;;;870      /* Reset Capture/Compare selection Bits */
;;;871      CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
        0x08001676:    f4277740    '.@w    BIC      r7,r7,#0x300
;;;872    
;;;873      /* Select the Output Compare Mode */
;;;874      MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
        0x0800167a:    f42740e0    '..@    BIC      r0,r7,#0x7000
        0x0800167e:    6829        )h      LDR      r1,[r5,#0]
        0x08001680:    ea402701    @..'    ORR      r7,r0,r1,LSL #8
;;;875    
;;;876      /* Set the Output Compare Polarity */
;;;877      MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
        0x08001684:    f0260020    &. .    BIC      r0,r6,#0x20
        0x08001688:    6929        )i      LDR      r1,[r5,#0x10]
        0x0800168a:    ea401601    @...    ORR      r6,r0,r1,LSL #4
;;;878    
;;;879      /* Set the Output State */
;;;880      MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
        0x0800168e:    f0260010    &...    BIC      r0,r6,#0x10
        0x08001692:    6869        ih      LDR      r1,[r5,#4]
        0x08001694:    ea401601    @...    ORR      r6,r0,r1,LSL #4
;;;881    
;;;882      if (IS_TIM_BREAK_INSTANCE(TIMx))
        0x08001698:    4810        .H      LDR      r0,[pc,#64] ; [0x80016dc] = 0x40012c00
        0x0800169a:    4284        .B      CMP      r4,r0
        0x0800169c:    d113        ..      BNE      0x80016c6 ; OC2Config + 110
;;;883      {
;;;884        assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
;;;885        assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));
;;;886    
;;;887        /* Set the complementary output Polarity */
;;;888        MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
        0x0800169e:    f0260080    &...    BIC      r0,r6,#0x80
        0x080016a2:    6969        ii      LDR      r1,[r5,#0x14]
        0x080016a4:    ea401681    @...    ORR      r6,r0,r1,LSL #6
;;;889    
;;;890        /* Set the complementary output State */
;;;891        MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
        0x080016a8:    f0260040    &.@.    BIC      r0,r6,#0x40
        0x080016ac:    68a9        .h      LDR      r1,[r5,#8]
        0x080016ae:    ea401681    @...    ORR      r6,r0,r1,LSL #6
;;;892    
;;;893        /* Set the Output Idle state */
;;;894        MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
        0x080016b2:    f4286080    (..`    BIC      r0,r8,#0x400
        0x080016b6:    69a9        .i      LDR      r1,[r5,#0x18]
        0x080016b8:    ea400881    @...    ORR      r8,r0,r1,LSL #2
;;;895    
;;;896        /* Set the complementary output Idle state */
;;;897        MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
        0x080016bc:    f4286000    (..`    BIC      r0,r8,#0x800
        0x080016c0:    69e9        .i      LDR      r1,[r5,#0x1c]
        0x080016c2:    ea4008c1    @...    ORR      r8,r0,r1,LSL #3
;;;898      }
;;;899    
;;;900      /* Write to TIMx CR2 */
;;;901      LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
        0x080016c6:    f8c48004    ....    STR      r8,[r4,#4]
;;;902    
;;;903      /* Write to TIMx CCMR1 */
;;;904      LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
        0x080016ca:    61a7        .a      STR      r7,[r4,#0x18]
;;;905    
;;;906      /* Set the Capture Compare Register value */
;;;907      LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
        0x080016cc:    4620         F      MOV      r0,r4
        0x080016ce:    68e9        .h      LDR      r1,[r5,#0xc]
        0x080016d0:    f7fffa4a    ..J.    BL       LL_TIM_OC_SetCompareCH2 ; 0x8000b68
;;;908    
;;;909      /* Write to TIMx CCER */
;;;910      LL_TIM_WriteReg(TIMx, CCER, tmpccer);
        0x080016d4:    6226        &b      STR      r6,[r4,#0x20]
;;;911    
;;;912      return SUCCESS;
        0x080016d6:    2001        .       MOVS     r0,#1
;;;913    }
        0x080016d8:    e8bd81f0    ....    POP      {r4-r8,pc}
    $d
        0x080016dc:    40012c00    .,.@    DCD    1073818624
    $t
    i.OC3Config
    OC3Config
;;;914    
;;;915    /**
;;;916      * @brief  Configure the TIMx output channel 3.
;;;917      * @param  TIMx Timer Instance
;;;918      * @param  TIM_OCInitStruct pointer to the the TIMx output channel 3 configuration data structure
;;;919      * @retval An ErrorStatus enumeration value:
;;;920      *          - SUCCESS: TIMx registers are de-initialized
;;;921      *          - ERROR: not applicable
;;;922      */
;;;923    static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
;;;924    {
        0x080016e0:    b570        p.      PUSH     {r4-r6,lr}
        0x080016e2:    4602        .F      MOV      r2,r0
;;;925      uint32_t tmpccmr2 = 0U;
        0x080016e4:    2400        .$      MOVS     r4,#0
;;;926      uint32_t tmpccer = 0U;
        0x080016e6:    2300        .#      MOVS     r3,#0
;;;927      uint32_t tmpcr2 = 0U;
        0x080016e8:    2500        .%      MOVS     r5,#0
;;;928    
;;;929      /* Check the parameters */
;;;930      assert_param(IS_TIM_CC3_INSTANCE(TIMx));
;;;931      assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
;;;932      assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
;;;933      assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
;;;934      assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
;;;935      assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
;;;936    
;;;937      /* Disable the Channel 3: Reset the CC3E Bit */
;;;938      CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
        0x080016ea:    6a10        .j      LDR      r0,[r2,#0x20]
        0x080016ec:    f4207080     ..p    BIC      r0,r0,#0x100
        0x080016f0:    6210        .b      STR      r0,[r2,#0x20]
;;;939    
;;;940      /* Get the TIMx CCER register value */
;;;941      tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
        0x080016f2:    6a13        .j      LDR      r3,[r2,#0x20]
;;;942    
;;;943      /* Get the TIMx CR2 register value */
;;;944      tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
        0x080016f4:    6855        Uh      LDR      r5,[r2,#4]
;;;945    
;;;946      /* Get the TIMx CCMR2 register value */
;;;947      tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
        0x080016f6:    69d4        .i      LDR      r4,[r2,#0x1c]
;;;948    
;;;949      /* Reset Capture/Compare selection Bits */
;;;950      CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
        0x080016f8:    f0240403    $...    BIC      r4,r4,#3
;;;951    
;;;952      /* Select the Output Compare Mode */
;;;953      MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
        0x080016fc:    f0240070    $.p.    BIC      r0,r4,#0x70
        0x08001700:    680e        .h      LDR      r6,[r1,#0]
        0x08001702:    ea400406    @...    ORR      r4,r0,r6
;;;954    
;;;955      /* Set the Output Compare Polarity */
;;;956      MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
        0x08001706:    f4237000    #..p    BIC      r0,r3,#0x200
        0x0800170a:    690e        .i      LDR      r6,[r1,#0x10]
        0x0800170c:    ea402306    @..#    ORR      r3,r0,r6,LSL #8
;;;957    
;;;958      /* Set the Output State */
;;;959      MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
        0x08001710:    f4237080    #..p    BIC      r0,r3,#0x100
        0x08001714:    684e        Nh      LDR      r6,[r1,#4]
        0x08001716:    ea402306    @..#    ORR      r3,r0,r6,LSL #8
;;;960    
;;;961      if (IS_TIM_BREAK_INSTANCE(TIMx))
        0x0800171a:    480f        .H      LDR      r0,[pc,#60] ; [0x8001758] = 0x40012c00
        0x0800171c:    4282        .B      CMP      r2,r0
        0x0800171e:    d113        ..      BNE      0x8001748 ; OC3Config + 104
;;;962      {
;;;963        assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
;;;964        assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));
;;;965    
;;;966        /* Set the complementary output Polarity */
;;;967        MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
        0x08001720:    f4236000    #..`    BIC      r0,r3,#0x800
        0x08001724:    694e        Ni      LDR      r6,[r1,#0x14]
        0x08001726:    ea402386    @..#    ORR      r3,r0,r6,LSL #10
;;;968    
;;;969        /* Set the complementary output State */
;;;970        MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
        0x0800172a:    f4236080    #..`    BIC      r0,r3,#0x400
        0x0800172e:    688e        .h      LDR      r6,[r1,#8]
        0x08001730:    ea402386    @..#    ORR      r3,r0,r6,LSL #10
;;;971    
;;;972        /* Set the Output Idle state */
;;;973        MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
        0x08001734:    f4255080    %..P    BIC      r0,r5,#0x1000
        0x08001738:    698e        .i      LDR      r6,[r1,#0x18]
        0x0800173a:    ea401506    @...    ORR      r5,r0,r6,LSL #4
;;;974    
;;;975        /* Set the complementary output Idle state */
;;;976        MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
        0x0800173e:    f4255000    %..P    BIC      r0,r5,#0x2000
        0x08001742:    69ce        .i      LDR      r6,[r1,#0x1c]
        0x08001744:    ea401546    @.F.    ORR      r5,r0,r6,LSL #5
;;;977      }
;;;978    
;;;979      /* Write to TIMx CR2 */
;;;980      LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
        0x08001748:    6055        U`      STR      r5,[r2,#4]
;;;981    
;;;982      /* Write to TIMx CCMR2 */
;;;983      LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
        0x0800174a:    61d4        .a      STR      r4,[r2,#0x1c]
;;;984    
;;;985      /* Set the Capture Compare Register value */
;;;986      LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
        0x0800174c:    68c8        .h      LDR      r0,[r1,#0xc]
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;2025     WRITE_REG(TIMx->CCR3, CompareValue);
        0x0800174e:    63d0        .c      STR      r0,[r2,#0x3c]
;;;2026   }
        0x08001750:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_tim.c
;;;989      LL_TIM_WriteReg(TIMx, CCER, tmpccer);
        0x08001752:    6213        .b      STR      r3,[r2,#0x20]
;;;990    
;;;991      return SUCCESS;
        0x08001754:    2001        .       MOVS     r0,#1
;;;992    }
        0x08001756:    bd70        p.      POP      {r4-r6,pc}
    $d
        0x08001758:    40012c00    .,.@    DCD    1073818624
    $t
    i.OC4Config
    OC4Config
;;;993    
;;;994    /**
;;;995      * @brief  Configure the TIMx output channel 4.
;;;996      * @param  TIMx Timer Instance
;;;997      * @param  TIM_OCInitStruct pointer to the the TIMx output channel 4 configuration data structure
;;;998      * @retval An ErrorStatus enumeration value:
;;;999      *          - SUCCESS: TIMx registers are de-initialized
;;;1000     *          - ERROR: not applicable
;;;1001     */
;;;1002   static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
;;;1003   {
        0x0800175c:    b570        p.      PUSH     {r4-r6,lr}
        0x0800175e:    4602        .F      MOV      r2,r0
;;;1004     uint32_t tmpccmr2 = 0U;
        0x08001760:    2300        .#      MOVS     r3,#0
;;;1005     uint32_t tmpccer = 0U;
        0x08001762:    2400        .$      MOVS     r4,#0
;;;1006     uint32_t tmpcr2 = 0U;
        0x08001764:    2500        .%      MOVS     r5,#0
;;;1007   
;;;1008     /* Check the parameters */
;;;1009     assert_param(IS_TIM_CC4_INSTANCE(TIMx));
;;;1010     assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
;;;1011     assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
;;;1012     assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
;;;1013     assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
;;;1014     assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
;;;1015   
;;;1016     /* Disable the Channel 4: Reset the CC4E Bit */
;;;1017     CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
        0x08001766:    6a10        .j      LDR      r0,[r2,#0x20]
        0x08001768:    f4205080     ..P    BIC      r0,r0,#0x1000
        0x0800176c:    6210        .b      STR      r0,[r2,#0x20]
;;;1018   
;;;1019     /* Get the TIMx CCER register value */
;;;1020     tmpccer = LL_TIM_ReadReg(TIMx, CCER);
        0x0800176e:    6a14        .j      LDR      r4,[r2,#0x20]
;;;1021   
;;;1022     /* Get the TIMx CR2 register value */
;;;1023     tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
        0x08001770:    6855        Uh      LDR      r5,[r2,#4]
;;;1024   
;;;1025     /* Get the TIMx CCMR2 register value */
;;;1026     tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
        0x08001772:    69d3        .i      LDR      r3,[r2,#0x1c]
;;;1027   
;;;1028     /* Reset Capture/Compare selection Bits */
;;;1029     CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
        0x08001774:    f4237340    #.@s    BIC      r3,r3,#0x300
;;;1030   
;;;1031     /* Select the Output Compare Mode */
;;;1032     MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
        0x08001778:    f42340e0    #..@    BIC      r0,r3,#0x7000
        0x0800177c:    680e        .h      LDR      r6,[r1,#0]
        0x0800177e:    ea402306    @..#    ORR      r3,r0,r6,LSL #8
;;;1033   
;;;1034     /* Set the Output Compare Polarity */
;;;1035     MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
        0x08001782:    f4245000    $..P    BIC      r0,r4,#0x2000
        0x08001786:    690e        .i      LDR      r6,[r1,#0x10]
        0x08001788:    ea403406    @..4    ORR      r4,r0,r6,LSL #12
;;;1036   
;;;1037     /* Set the Output State */
;;;1038     MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
        0x0800178c:    f4245080    $..P    BIC      r0,r4,#0x1000
        0x08001790:    684e        Nh      LDR      r6,[r1,#4]
        0x08001792:    ea403406    @..4    ORR      r4,r0,r6,LSL #12
;;;1039   
;;;1040     if (IS_TIM_BREAK_INSTANCE(TIMx))
        0x08001796:    4808        .H      LDR      r0,[pc,#32] ; [0x80017b8] = 0x40012c00
        0x08001798:    4282        .B      CMP      r2,r0
        0x0800179a:    d104        ..      BNE      0x80017a6 ; OC4Config + 74
;;;1041     {
;;;1042       assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
;;;1043       assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));
;;;1044   
;;;1045       /* Set the Output Idle state */
;;;1046       MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
        0x0800179c:    f4254080    %..@    BIC      r0,r5,#0x4000
        0x080017a0:    698e        .i      LDR      r6,[r1,#0x18]
        0x080017a2:    ea401586    @...    ORR      r5,r0,r6,LSL #6
;;;1047     }
;;;1048   
;;;1049     /* Write to TIMx CR2 */
;;;1050     LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
        0x080017a6:    6055        U`      STR      r5,[r2,#4]
;;;1051   
;;;1052     /* Write to TIMx CCMR2 */
;;;1053     LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
        0x080017a8:    61d3        .a      STR      r3,[r2,#0x1c]
;;;1054   
;;;1055     /* Set the Capture Compare Register value */
;;;1056     LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
        0x080017aa:    68c8        .h      LDR      r0,[r1,#0xc]
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;2039     WRITE_REG(TIMx->CCR4, CompareValue);
        0x080017ac:    6410        .d      STR      r0,[r2,#0x40]
;;;2040   }
        0x080017ae:    bf00        ..      NOP      
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_tim.c
;;;1059     LL_TIM_WriteReg(TIMx, CCER, tmpccer);
        0x080017b0:    6214        .b      STR      r4,[r2,#0x20]
;;;1060   
;;;1061     return SUCCESS;
        0x080017b2:    2001        .       MOVS     r0,#1
;;;1062   }
        0x080017b4:    bd70        p.      POP      {r4-r6,pc}
    $d
        0x080017b6:    0000        ..      DCW    0
        0x080017b8:    40012c00    .,.@    DCD    1073818624
    $t
    i.PendSV_Handler
    PendSV_Handler
;;; .\../Src/stm32f1xx_it.c
;;;146    }
        0x080017bc:    4770        pG      BX       lr
        0x080017be:    0000        ..      MOVS     r0,r0
    i.RCC_GetHCLKClockFreq
    RCC_GetHCLKClockFreq
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_rcc.c
;;;388    {
        0x080017c0:    4601        .F      MOV      r1,r0
;;;389      /* HCLK clock frequency */
;;;390      return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
        0x080017c2:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;1116     return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
        0x080017c4:    4804        .H      LDR      r0,[pc,#16] ; [0x80017d8] = 0x40021000
        0x080017c6:    6840        @h      LDR      r0,[r0,#4]
        0x080017c8:    f00000f0    ....    AND      r0,r0,#0xf0
        0x080017cc:    0900        ..      LSRS     r0,r0,#4
        0x080017ce:    4a03        .J      LDR      r2,[pc,#12] ; [0x80017dc] = 0x8002868
        0x080017d0:    5c12        .\      LDRB     r2,[r2,r0]
        0x080017d2:    fa21f002    !...    LSR      r0,r1,r2
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_rcc.c
;;;391    }
        0x080017d6:    4770        pG      BX       lr
    $d
        0x080017d8:    40021000    ...@    DCD    1073876992
        0x080017dc:    08002868    h(..    DCD    134228072
    $t
    i.RCC_GetPCLK1ClockFreq
    RCC_GetPCLK1ClockFreq
;;;392    
;;;393    /**
;;;394      * @brief  Return PCLK1 clock frequency
;;;395      * @param  HCLK_Frequency HCLK clock frequency
;;;396      * @retval PCLK1 clock frequency (in Hz)
;;;397      */
;;;398    uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
;;;399    {
        0x080017e0:    4601        .F      MOV      r1,r0
;;;400      /* PCLK1 clock frequency */
;;;401      return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
        0x080017e2:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;1131     return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
        0x080017e4:    4805        .H      LDR      r0,[pc,#20] ; [0x80017fc] = 0x40021000
        0x080017e6:    6840        @h      LDR      r0,[r0,#4]
        0x080017e8:    f40060e0    ...`    AND      r0,r0,#0x700
        0x080017ec:    4a04        .J      LDR      r2,[pc,#16] ; [0x8001800] = 0x8002878
        0x080017ee:    eb022010    ...     ADD      r0,r2,r0,LSR #8
        0x080017f2:    7802        .x      LDRB     r2,[r0,#0]
        0x080017f4:    fa21f002    !...    LSR      r0,r1,r2
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_rcc.c
;;;402    }
        0x080017f8:    4770        pG      BX       lr
    $d
        0x080017fa:    0000        ..      DCW    0
        0x080017fc:    40021000    ...@    DCD    1073876992
        0x08001800:    08002878    x(..    DCD    134228088
    $t
    i.RCC_GetPCLK2ClockFreq
    RCC_GetPCLK2ClockFreq
;;;403    
;;;404    /**
;;;405      * @brief  Return PCLK2 clock frequency
;;;406      * @param  HCLK_Frequency HCLK clock frequency
;;;407      * @retval PCLK2 clock frequency (in Hz)
;;;408      */
;;;409    uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
;;;410    {
        0x08001804:    4601        .F      MOV      r1,r0
;;;411      /* PCLK2 clock frequency */
;;;412      return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
        0x08001806:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;1146     return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
        0x08001808:    4805        .H      LDR      r0,[pc,#20] ; [0x8001820] = 0x40021000
        0x0800180a:    6840        @h      LDR      r0,[r0,#4]
        0x0800180c:    f4005060    ..`P    AND      r0,r0,#0x3800
        0x08001810:    4a04        .J      LDR      r2,[pc,#16] ; [0x8001824] = 0x8002878
        0x08001812:    eb0220d0    ...     ADD      r0,r2,r0,LSR #11
        0x08001816:    7802        .x      LDRB     r2,[r0,#0]
        0x08001818:    fa21f002    !...    LSR      r0,r1,r2
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_rcc.c
;;;413    }
        0x0800181c:    4770        pG      BX       lr
    $d
        0x0800181e:    0000        ..      DCW    0
        0x08001820:    40021000    ...@    DCD    1073876992
        0x08001824:    08002878    x(..    DCD    134228088
    $t
    i.RCC_GetSystemClockFreq
    RCC_GetSystemClockFreq
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_rcc.c (356)
        0x08001828:    b510        ..      PUSH     {r4,lr}
;;;357      uint32_t frequency = 0U;
        0x0800182a:    2400        .$      MOVS     r4,#0
;;;358    
;;;359      /* Get SYSCLK source -------------------------------------------------------*/
;;;360      switch (LL_RCC_GetSysClkSource())
        0x0800182c:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;1045     return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
        0x0800182e:    480b        .H      LDR      r0,[pc,#44] ; [0x800185c] = 0x40021000
        0x08001830:    6840        @h      LDR      r0,[r0,#4]
        0x08001832:    f000000c    ....    AND      r0,r0,#0xc
        0x08001836:    b120         .      CBZ      r0,0x8001842 ; RCC_GetSystemClockFreq + 26
        0x08001838:    2804        .(      CMP      r0,#4
        0x0800183a:    d004        ..      BEQ      0x8001846 ; RCC_GetSystemClockFreq + 30
        0x0800183c:    2808        .(      CMP      r0,#8
        0x0800183e:    d108        ..      BNE      0x8001852 ; RCC_GetSystemClockFreq + 42
        0x08001840:    e003        ..      B        0x800184a ; RCC_GetSystemClockFreq + 34
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_rcc.c
;;;363          frequency = HSI_VALUE;
        0x08001842:    4c07        .L      LDR      r4,[pc,#28] ; [0x8001860] = 0x7a1200
;;;364          break;
        0x08001844:    e007        ..      B        0x8001856 ; RCC_GetSystemClockFreq + 46
;;;365    
;;;366        case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
;;;367          frequency = HSE_VALUE;
        0x08001846:    4c06        .L      LDR      r4,[pc,#24] ; [0x8001860] = 0x7a1200
;;;368          break;
        0x08001848:    e005        ..      B        0x8001856 ; RCC_GetSystemClockFreq + 46
;;;369    
;;;370        case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
;;;371          frequency = RCC_PLL_GetFreqDomain_SYS();
        0x0800184a:    f000f80b    ....    BL       RCC_PLL_GetFreqDomain_SYS ; 0x8001864
        0x0800184e:    4604        .F      MOV      r4,r0
;;;372          break;
        0x08001850:    e001        ..      B        0x8001856 ; RCC_GetSystemClockFreq + 46
;;;373    
;;;374        default:
;;;375          frequency = HSI_VALUE;
        0x08001852:    4c03        .L      LDR      r4,[pc,#12] ; [0x8001860] = 0x7a1200
;;;376          break;
        0x08001854:    bf00        ..      NOP      
        0x08001856:    bf00        ..      NOP      
;;;377      }
;;;378    
;;;379      return frequency;
        0x08001858:    4620         F      MOV      r0,r4
;;;380    }
        0x0800185a:    bd10        ..      POP      {r4,pc}
    $d
        0x0800185c:    40021000    ...@    DCD    1073876992
        0x08001860:    007a1200    ..z.    DCD    8000000
    $t
    i.RCC_PLL_GetFreqDomain_SYS
    RCC_PLL_GetFreqDomain_SYS
;;;381    
;;;382    /**
;;;383      * @brief  Return HCLK clock frequency
;;;384      * @param  SYSCLK_Frequency SYSCLK clock frequency
;;;385      * @retval HCLK clock frequency (in Hz)
;;;386      */
;;;387    uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
;;;388    {
;;;389      /* HCLK clock frequency */
;;;390      return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
;;;391    }
;;;392    
;;;393    /**
;;;394      * @brief  Return PCLK1 clock frequency
;;;395      * @param  HCLK_Frequency HCLK clock frequency
;;;396      * @retval PCLK1 clock frequency (in Hz)
;;;397      */
;;;398    uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
;;;399    {
;;;400      /* PCLK1 clock frequency */
;;;401      return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
;;;402    }
;;;403    
;;;404    /**
;;;405      * @brief  Return PCLK2 clock frequency
;;;406      * @param  HCLK_Frequency HCLK clock frequency
;;;407      * @retval PCLK2 clock frequency (in Hz)
;;;408      */
;;;409    uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
;;;410    {
;;;411      /* PCLK2 clock frequency */
;;;412      return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
;;;413    }
;;;414    
;;;415    /**
;;;416      * @brief  Return PLL clock frequency used for system domain
;;;417      * @retval PLL clock frequency (in Hz)
;;;418      */
;;;419    uint32_t RCC_PLL_GetFreqDomain_SYS(void)
;;;420    {
;;;421      uint32_t pllinputfreq = 0U, pllsource = 0U;
        0x08001864:    2100        .!      MOVS     r1,#0
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_rcc.c (421)
        0x08001866:    2200        ."      MOVS     r2,#0
;;;422    
;;;423      /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */
;;;424    
;;;425      /* Get PLL source */
;;;426      pllsource = LL_RCC_PLL_GetMainSource();
        0x08001868:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;1543     return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
        0x0800186a:    4811        .H      LDR      r0,[pc,#68] ; [0x80018b0] = 0x40021000
        0x0800186c:    6840        @h      LDR      r0,[r0,#4]
        0x0800186e:    f4003080    ...0    AND      r0,r0,#0x10000
        0x08001872:    4602        .F      MOV      r2,r0
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_rcc.c
;;;428      switch (pllsource)
        0x08001874:    b11a        ..      CBZ      r2,0x800187e ; RCC_PLL_GetFreqDomain_SYS + 26
        0x08001876:    f5b23f80    ...?    CMP      r2,#0x10000
        0x0800187a:    d10c        ..      BNE      0x8001896 ; RCC_PLL_GetFreqDomain_SYS + 50
        0x0800187c:    e001        ..      B        0x8001882 ; RCC_PLL_GetFreqDomain_SYS + 30
;;;429      {
;;;430        case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
;;;431          pllinputfreq = HSI_VALUE / 2U;
        0x0800187e:    490d        .I      LDR      r1,[pc,#52] ; [0x80018b4] = 0x3d0900
;;;432          break;
        0x08001880:    e00b        ..      B        0x800189a ; RCC_PLL_GetFreqDomain_SYS + 54
;;;433    
;;;434        case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
;;;435          pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
        0x08001882:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;1605     return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
        0x08001884:    480a        .H      LDR      r0,[pc,#40] ; [0x80018b0] = 0x40021000
        0x08001886:    6840        @h      LDR      r0,[r0,#4]
        0x08001888:    f3c04040    ..@@    UBFX     r0,r0,#17,#1
        0x0800188c:    1c40        @.      ADDS     r0,r0,#1
        0x0800188e:    4b0a        .K      LDR      r3,[pc,#40] ; [0x80018b8] = 0x7a1200
        0x08001890:    fbb3f1f0    ....    UDIV     r1,r3,r0
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_rcc.c
;;;436          break;
        0x08001894:    e001        ..      B        0x800189a ; RCC_PLL_GetFreqDomain_SYS + 54
;;;437    
;;;438    #if defined(RCC_PLL2_SUPPORT)
;;;439        case LL_RCC_PLLSOURCE_PLL2:       /* PLL2 used as PLL clock source */
;;;440          pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
;;;441          break;
;;;442    #endif /* RCC_PLL2_SUPPORT */
;;;443    
;;;444        default:
;;;445          pllinputfreq = HSI_VALUE / 2U;
        0x08001896:    4907        .I      LDR      r1,[pc,#28] ; [0x80018b4] = 0x3d0900
;;;446          break;
        0x08001898:    bf00        ..      NOP      
        0x0800189a:    bf00        ..      NOP      
;;;447      }
;;;448      return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
        0x0800189c:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;1572     return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
        0x0800189e:    4804        .H      LDR      r0,[pc,#16] ; [0x80018b0] = 0x40021000
        0x080018a0:    6840        @h      LDR      r0,[r0,#4]
        0x080018a2:    f4001070    ..p.    AND      r0,r0,#0x3c0000
        0x080018a6:    2302        .#      MOVS     r3,#2
        0x080018a8:    eb034090    ...@    ADD      r0,r3,r0,LSR #18
        0x080018ac:    4348        HC      MULS     r0,r1,r0
;;; .\../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_rcc.c
;;;449    }
        0x080018ae:    4770        pG      BX       lr
    $d
        0x080018b0:    40021000    ...@    DCD    1073876992
        0x080018b4:    003d0900    ..=.    DCD    4000000
        0x080018b8:    007a1200    ..z.    DCD    8000000
    $t
    i.SVC_Handler
    SVC_Handler
;;; .\../Src/stm32f1xx_it.c
;;;133    }
        0x080018bc:    4770        pG      BX       lr
        0x080018be:    0000        ..      MOVS     r0,r0
    i.SysTick_Handler
    SysTick_Handler
;;;134    
;;;135    /**
;;;136      * @brief This function handles Pendable request for system service.
;;;137      */
;;;138    void PendSV_Handler(void)
;;;139    {
;;;140      /* USER CODE BEGIN PendSV_IRQn 0 */
;;;141    
;;;142      /* USER CODE END PendSV_IRQn 0 */
;;;143      /* USER CODE BEGIN PendSV_IRQn 1 */
;;;144    
;;;145      /* USER CODE END PendSV_IRQn 1 */
;;;146    }
;;;147    
;;;148    /**
;;;149      * @brief This function handles System tick timer.
;;;150      */
;;;151    void SysTick_Handler(void)
;;;152    {
;;;153      /* USER CODE BEGIN SysTick_IRQn 0 */
;;;154    
;;;155      /* USER CODE END SysTick_IRQn 0 */
;;;156      
;;;157      /* USER CODE BEGIN SysTick_IRQn 1 */
;;;158    
;;;159    /*
;;;160    #if  defined ( _SIMU )
;;;161    
;;;162    //simulate spindle
;;;163    	if(++tacho_cnt == 1800 ) {
;;;164    		tacho_debug = 1;
;;;165    		tacho_cnt = 0;
;;;166    		TIM4_IRQHandler();
;;;167    	}
;;;168    	if(++TIM4->CNT > TIM4->ARR) {
;;;169    		TIM4->CNT = 0; // overflow emulation
;;;170    		encoder = true;
;;;171    		TIM4_IRQHandler();
;;;172    	}
;;;173    #endif
;;;174    */
;;;175    //      if(auto_mode_delay > 0)
;;;176    //              auto_mode_delay--;
;;;177    	for(int a = 0; a<BT_TOTAL;a++){
        0x080018c0:    2000        .       MOVS     r0,#0
;;; .\../Src/stm32f1xx_it.c (177)
        0x080018c2:    e00e        ..      B        0x80018e2 ; SysTick_Handler + 34
        0x080018c4:    4908        .I      LDR      r1,[pc,#32] ; [0x80018e8] = 0x200004f0
        0x080018c6:    eb011140    ..@.    ADD      r1,r1,r0,LSL #5
        0x080018ca:    6909        .i      LDR      r1,[r1,#0x10]
        0x080018cc:    b141        A.      CBZ      r1,0x80018e0 ; SysTick_Handler + 32
        0x080018ce:    4906        .I      LDR      r1,[pc,#24] ; [0x80018e8] = 0x200004f0
        0x080018d0:    eb011140    ..@.    ADD      r1,r1,r0,LSL #5
        0x080018d4:    6909        .i      LDR      r1,[r1,#0x10]
        0x080018d6:    1c49        I.      ADDS     r1,r1,#1
        0x080018d8:    4a03        .J      LDR      r2,[pc,#12] ; [0x80018e8] = 0x200004f0
        0x080018da:    eb021240    ..@.    ADD      r2,r2,r0,LSL #5
        0x080018de:    6111        .a      STR      r1,[r2,#0x10]
        0x080018e0:    1c40        @.      ADDS     r0,r0,#1
        0x080018e2:    2801        .(      CMP      r0,#1
        0x080018e4:    dbee        ..      BLT      0x80018c4 ; SysTick_Handler + 4
;;;178    		if( bt[a].buttons_mstick > 0 )
;;;179    			bt[a].buttons_mstick++;
;;;180    	}
;;;181      /* USER CODE END SysTick_IRQn 1 */
;;;182    }
        0x080018e6:    4770        pG      BX       lr
    $d
        0x080018e8:    200004f0    ...     DCD    536872176
    $t
    i.SystemClock_Config
    SystemClock_Config
;;; .\../Src/main.c
;;;612    {
        0x080018ec:    b510        ..      PUSH     {r4,lr}
;;;613      LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
        0x080018ee:    2002        .       MOVS     r0,#2
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_system.h
;;;488      MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
        0x080018f0:    4942        BI      LDR      r1,[pc,#264] ; [0x80019fc] = 0x40022000
        0x080018f2:    6809        .h      LDR      r1,[r1,#0]
        0x080018f4:    f0210107    !...    BIC      r1,r1,#7
        0x080018f8:    4301        .C      ORRS     r1,r1,r0
        0x080018fa:    4a40        @J      LDR      r2,[pc,#256] ; [0x80019fc] = 0x40022000
        0x080018fc:    6011        .`      STR      r1,[r2,#0]
;;;489    }
        0x080018fe:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;615       if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2)
        0x08001900:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_system.h
;;;501      return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
        0x08001902:    4610        .F      MOV      r0,r2
        0x08001904:    6800        .h      LDR      r0,[r0,#0]
        0x08001906:    f0000007    ....    AND      r0,r0,#7
        0x0800190a:    2802        .(      CMP      r0,#2
        0x0800190c:    d001        ..      BEQ      0x8001912 ; SystemClock_Config + 38
;;; .\../Src/main.c
;;;617        Error_Handler();  
        0x0800190e:    f7fefcc6    ....    BL       Error_Handler ; 0x800029e
;;;618      }
;;;619      LL_RCC_HSE_Enable();
        0x08001912:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;792      SET_BIT(RCC->CR, RCC_CR_HSEON);
        0x08001914:    483a        :H      LDR      r0,[pc,#232] ; [0x8001a00] = 0x40021000
        0x08001916:    6800        .h      LDR      r0,[r0,#0]
        0x08001918:    f4403080    @..0    ORR      r0,r0,#0x10000
        0x0800191c:    4938        8I      LDR      r1,[pc,#224] ; [0x8001a00] = 0x40021000
        0x0800191e:    6008        .`      STR      r0,[r1,#0]
;;;793    }
        0x08001920:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;622      while(LL_RCC_HSE_IsReady() != 1)
        0x08001922:    bf00        ..      NOP      
        0x08001924:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;812      return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
        0x08001926:    4836        6H      LDR      r0,[pc,#216] ; [0x8001a00] = 0x40021000
        0x08001928:    6800        .h      LDR      r0,[r0,#0]
        0x0800192a:    f3c04040    ..@@    UBFX     r0,r0,#17,#1
        0x0800192e:    2800        .(      CMP      r0,#0
        0x08001930:    d0f8        ..      BEQ      0x8001924 ; SystemClock_Config + 56
;;; .\../Src/main.c
;;;626      LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
        0x08001932:    f44f3080    O..0    MOV      r0,#0x10000
        0x08001936:    f44f11e0    O...    MOV      r1,#0x1c0000
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;1495     MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
        0x0800193a:    4a31        1J      LDR      r2,[pc,#196] ; [0x8001a00] = 0x40021000
        0x0800193c:    6852        Rh      LDR      r2,[r2,#4]
        0x0800193e:    f422127c    ".|.    BIC      r2,r2,#0x3f0000
        0x08001942:    f4003340    ..@3    AND      r3,r0,#0x30000
        0x08001946:    430b        .C      ORRS     r3,r3,r1
        0x08001948:    431a        .C      ORRS     r2,r2,r3
        0x0800194a:    4b2d        -K      LDR      r3,[pc,#180] ; [0x8001a00] = 0x40021000
        0x0800194c:    605a        Z`      STR      r2,[r3,#4]
;;;1496                (Source & (RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE)) | PLLMul);
;;;1497   #if defined(RCC_CFGR2_PREDIV1)
;;;1498   #if defined(RCC_CFGR2_PREDIV1SRC)
;;;1499     MODIFY_REG(RCC->CFGR2, (RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC),
;;;1500                (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
;;;1501   #else
;;;1502     MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
;;;1503   #endif /*RCC_CFGR2_PREDIV1SRC*/
;;;1504   #endif /*RCC_CFGR2_PREDIV1*/
;;;1505   }
        0x0800194e:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;627      LL_RCC_PLL_Enable();
        0x08001950:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;1405     SET_BIT(RCC->CR, RCC_CR_PLLON);
        0x08001952:    4618        .F      MOV      r0,r3
        0x08001954:    6800        .h      LDR      r0,[r0,#0]
        0x08001956:    f0407080    @..p    ORR      r0,r0,#0x1000000
        0x0800195a:    4619        .F      MOV      r1,r3
        0x0800195c:    6008        .`      STR      r0,[r1,#0]
;;;1406   }
        0x0800195e:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;630      while(LL_RCC_PLL_IsReady() != 1)
        0x08001960:    bf00        ..      NOP      
        0x08001962:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;1426     return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
        0x08001964:    4826        &H      LDR      r0,[pc,#152] ; [0x8001a00] = 0x40021000
        0x08001966:    6800        .h      LDR      r0,[r0,#0]
        0x08001968:    f3c06040    ..@`    UBFX     r0,r0,#25,#1
        0x0800196c:    2800        .(      CMP      r0,#0
        0x0800196e:    d0f8        ..      BEQ      0x8001962 ; SystemClock_Config + 118
;;; .\../Src/main.c
;;;634      LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
        0x08001970:    2000        .       MOVS     r0,#0
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;1065     MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
        0x08001972:    4923        #I      LDR      r1,[pc,#140] ; [0x8001a00] = 0x40021000
        0x08001974:    6849        Ih      LDR      r1,[r1,#4]
        0x08001976:    f02101f0    !...    BIC      r1,r1,#0xf0
        0x0800197a:    4301        .C      ORRS     r1,r1,r0
        0x0800197c:    4a20         J      LDR      r2,[pc,#128] ; [0x8001a00] = 0x40021000
        0x0800197e:    6051        Q`      STR      r1,[r2,#4]
;;;1066   }
        0x08001980:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;635      LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
        0x08001982:    1510        ..      ASRS     r0,r2,#20
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;1081     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
        0x08001984:    4611        .F      MOV      r1,r2
        0x08001986:    6849        Ih      LDR      r1,[r1,#4]
        0x08001988:    f42161e0    !..a    BIC      r1,r1,#0x700
        0x0800198c:    4301        .C      ORRS     r1,r1,r0
        0x0800198e:    6051        Q`      STR      r1,[r2,#4]
;;;1082   }
        0x08001990:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;636      LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
        0x08001992:    2000        .       MOVS     r0,#0
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;1097     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
        0x08001994:    4611        .F      MOV      r1,r2
        0x08001996:    6849        Ih      LDR      r1,[r1,#4]
        0x08001998:    f4215160    !.`Q    BIC      r1,r1,#0x3800
        0x0800199c:    4301        .C      ORRS     r1,r1,r0
        0x0800199e:    6051        Q`      STR      r1,[r2,#4]
;;;1098   }
        0x080019a0:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;637      LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
        0x080019a2:    2002        .       MOVS     r0,#2
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;1032     MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
        0x080019a4:    4611        .F      MOV      r1,r2
        0x080019a6:    6849        Ih      LDR      r1,[r1,#4]
        0x080019a8:    f0210103    !...    BIC      r1,r1,#3
        0x080019ac:    4301        .C      ORRS     r1,r1,r0
        0x080019ae:    6051        Q`      STR      r1,[r2,#4]
;;;1033   }
        0x080019b0:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;640      while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
        0x080019b2:    bf00        ..      NOP      
        0x080019b4:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
;;;1045     return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
        0x080019b6:    4812        .H      LDR      r0,[pc,#72] ; [0x8001a00] = 0x40021000
        0x080019b8:    6840        @h      LDR      r0,[r0,#4]
        0x080019ba:    f000000c    ....    AND      r0,r0,#0xc
        0x080019be:    2808        .(      CMP      r0,#8
        0x080019c0:    d1f8        ..      BNE      0x80019b4 ; SystemClock_Config + 200
;;; .\../Src/main.c
;;;644      LL_Init1msTick(72000000);
        0x080019c2:    4810        .H      LDR      r0,[pc,#64] ; [0x8001a04] = 0x44aa200
        0x080019c4:    f7fefeb2    ....    BL       LL_Init1msTick ; 0x800072c
;;;645      LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
        0x080019c8:    2004        .       MOVS     r0,#4
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_cortex.h
;;;262      if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
        0x080019ca:    2804        .(      CMP      r0,#4
        0x080019cc:    d108        ..      BNE      0x80019e0 ; SystemClock_Config + 244
;;;263      {
;;;264        SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
        0x080019ce:    f04f21e0    O..!    MOV      r1,#0xe000e000
        0x080019d2:    6909        .i      LDR      r1,[r1,#0x10]
        0x080019d4:    f0410104    A...    ORR      r1,r1,#4
        0x080019d8:    f04f22e0    O.."    MOV      r2,#0xe000e000
        0x080019dc:    6111        .a      STR      r1,[r2,#0x10]
        0x080019de:    e007        ..      B        0x80019f0 ; SystemClock_Config + 260
;;;265      }
;;;266      else
;;;267      {
;;;268        CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
        0x080019e0:    f04f21e0    O..!    MOV      r1,#0xe000e000
        0x080019e4:    6909        .i      LDR      r1,[r1,#0x10]
        0x080019e6:    f0210104    !...    BIC      r1,r1,#4
        0x080019ea:    f04f22e0    O.."    MOV      r2,#0xe000e000
        0x080019ee:    6111        .a      STR      r1,[r2,#0x10]
;;;269      }
;;;270    }
        0x080019f0:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;646      LL_SetSystemCoreClock(72000000);
        0x080019f2:    4804        .H      LDR      r0,[pc,#16] ; [0x8001a04] = 0x44aa200
        0x080019f4:    f7fefeba    ....    BL       LL_SetSystemCoreClock ; 0x800076c
;;;647    }
        0x080019f8:    bd10        ..      POP      {r4,pc}
    $d
        0x080019fa:    0000        ..      DCW    0
        0x080019fc:    40022000    . .@    DCD    1073881088
        0x08001a00:    40021000    ...@    DCD    1073876992
        0x08001a04:    044aa200    ..J.    DCD    72000000
    $t
    i.SystemInit
    SystemInit
;;; .\../Src/system_stm32f1xx.c
;;;179      RCC->CR |= 0x00000001U;
        0x08001a08:    4811        .H      LDR      r0,[pc,#68] ; [0x8001a50] = 0x40021000
        0x08001a0a:    6800        .h      LDR      r0,[r0,#0]
        0x08001a0c:    f0400001    @...    ORR      r0,r0,#1
        0x08001a10:    490f        .I      LDR      r1,[pc,#60] ; [0x8001a50] = 0x40021000
        0x08001a12:    6008        .`      STR      r0,[r1,#0]
;;;180    
;;;181      /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
;;;182    #if !defined(STM32F105xC) && !defined(STM32F107xC)
;;;183      RCC->CFGR &= 0xF8FF0000U;
        0x08001a14:    4608        .F      MOV      r0,r1
        0x08001a16:    6840        @h      LDR      r0,[r0,#4]
        0x08001a18:    490e        .I      LDR      r1,[pc,#56] ; [0x8001a54] = 0xf8ff0000
        0x08001a1a:    4008        .@      ANDS     r0,r0,r1
        0x08001a1c:    490c        .I      LDR      r1,[pc,#48] ; [0x8001a50] = 0x40021000
        0x08001a1e:    6048        H`      STR      r0,[r1,#4]
;;;184    #else
;;;185      RCC->CFGR &= 0xF0FF0000U;
;;;186    #endif /* STM32F105xC */   
;;;187      
;;;188      /* Reset HSEON, CSSON and PLLON bits */
;;;189      RCC->CR &= 0xFEF6FFFFU;
        0x08001a20:    4608        .F      MOV      r0,r1
        0x08001a22:    6800        .h      LDR      r0,[r0,#0]
        0x08001a24:    490c        .I      LDR      r1,[pc,#48] ; [0x8001a58] = 0xfef6ffff
        0x08001a26:    4008        .@      ANDS     r0,r0,r1
        0x08001a28:    4909        .I      LDR      r1,[pc,#36] ; [0x8001a50] = 0x40021000
        0x08001a2a:    6008        .`      STR      r0,[r1,#0]
;;;190    
;;;191      /* Reset HSEBYP bit */
;;;192      RCC->CR &= 0xFFFBFFFFU;
        0x08001a2c:    4608        .F      MOV      r0,r1
        0x08001a2e:    6800        .h      LDR      r0,[r0,#0]
        0x08001a30:    f4202080     ..     BIC      r0,r0,#0x40000
        0x08001a34:    6008        .`      STR      r0,[r1,#0]
;;;193    
;;;194      /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
;;;195      RCC->CFGR &= 0xFF80FFFFU;
        0x08001a36:    4608        .F      MOV      r0,r1
        0x08001a38:    6840        @h      LDR      r0,[r0,#4]
        0x08001a3a:    f42000fe     ...    BIC      r0,r0,#0x7f0000
        0x08001a3e:    6048        H`      STR      r0,[r1,#4]
;;;196    
;;;197    #if defined(STM32F105xC) || defined(STM32F107xC)
;;;198      /* Reset PLL2ON and PLL3ON bits */
;;;199      RCC->CR &= 0xEBFFFFFFU;
;;;200    
;;;201      /* Disable all interrupts and clear pending bits  */
;;;202      RCC->CIR = 0x00FF0000U;
;;;203    
;;;204      /* Reset CFGR2 register */
;;;205      RCC->CFGR2 = 0x00000000U;
;;;206    #elif defined(STM32F100xB) || defined(STM32F100xE)
;;;207      /* Disable all interrupts and clear pending bits  */
;;;208      RCC->CIR = 0x009F0000U;
;;;209    
;;;210      /* Reset CFGR2 register */
;;;211      RCC->CFGR2 = 0x00000000U;      
;;;212    #else
;;;213      /* Disable all interrupts and clear pending bits  */
;;;214      RCC->CIR = 0x009F0000U;
        0x08001a40:    f44f001f    O...    MOV      r0,#0x9f0000
        0x08001a44:    6088        .`      STR      r0,[r1,#8]
;;;215    #endif /* STM32F105xC */
;;;216        
;;;217    #if defined(STM32F100xE) || defined(STM32F101xE) || defined(STM32F101xG) || defined(STM32F103xE) || defined(STM32F103xG)
;;;218      #ifdef DATA_IN_ExtSRAM
;;;219        SystemInit_ExtMemCtl(); 
;;;220      #endif /* DATA_IN_ExtSRAM */
;;;221    #endif 
;;;222    
;;;223    #ifdef VECT_TAB_SRAM
;;;224      SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
;;;225    #else
;;;226      SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
        0x08001a46:    03c8        ..      LSLS     r0,r1,#15
        0x08001a48:    4904        .I      LDR      r1,[pc,#16] ; [0x8001a5c] = 0xe000ed08
        0x08001a4a:    6008        .`      STR      r0,[r1,#0]
;;;227    #endif 
;;;228    }
        0x08001a4c:    4770        pG      BX       lr
    $d
        0x08001a4e:    0000        ..      DCW    0
        0x08001a50:    40021000    ...@    DCD    1073876992
        0x08001a54:    f8ff0000    ....    DCD    4177461248
        0x08001a58:    fef6ffff    ....    DCD    4277600255
        0x08001a5c:    e000ed08    ....    DCD    3758157064
    $t
    i.TIM1_UP_IRQHandler
    TIM1_UP_IRQHandler
;;; .\../Src/stm32f1xx_it.c
;;;233    {
        0x08001a60:    b510        ..      PUSH     {r4,lr}
;;;234      /* USER CODE BEGIN TIM1_UP_IRQn 0 */
;;;235    
;;;236      /* USER CODE END TIM1_UP_IRQn 0 */
;;;237      /* USER CODE BEGIN TIM1_UP_IRQn 1 */
;;;238      if(LL_TIM_IsActiveFlag_UPDATE(TIM1) == 1)
        0x08001a62:    4806        .H      LDR      r0,[pc,#24] ; [0x8001a7c] = 0x40012c00
        0x08001a64:    f7feffec    ....    BL       LL_TIM_IsActiveFlag_UPDATE ; 0x8000a40
        0x08001a68:    2801        .(      CMP      r0,#1
        0x08001a6a:    d105        ..      BNE      0x8001a78 ; TIM1_UP_IRQHandler + 24
;;;239      {
;;;240        /* Clear the update interrupt flag*/
;;;241        LL_TIM_ClearFlag_UPDATE(TIM1);
        0x08001a6c:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;2932     WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
        0x08001a6e:    1ec0        ..      SUBS     r0,r0,#3
        0x08001a70:    4902        .I      LDR      r1,[pc,#8] ; [0x8001a7c] = 0x40012c00
        0x08001a72:    6108        .a      STR      r0,[r1,#0x10]
;;;2933   }
        0x08001a74:    bf00        ..      NOP      
        0x08001a76:    bf00        ..      NOP      
;;; .\../Src/stm32f1xx_it.c
;;;245    }
        0x08001a78:    bd10        ..      POP      {r4,pc}
    $d
        0x08001a7a:    0000        ..      DCW    0
        0x08001a7c:    40012c00    .,.@    DCD    1073818624
    $t
    i.TIM2_IRQHandler
    TIM2_IRQHandler
;;;246    
;;;247    /**
;;;248      * @brief This function handles TIM2 global interrupt.
;;;249      */
;;;250    void TIM2_IRQHandler(void)
;;;251    {
        0x08001a80:    b510        ..      PUSH     {r4,lr}
;;;252      /* USER CODE BEGIN TIM2_IRQn 0 */
;;;253    // prescaler=((((speed=72000000)/((period=20000)/(1/hz=1)))+0,5)-1)
;;;254    //	if ( async_z == 1) {
;;;255    	if(TIM3->SMCR == 0x16) { // TIM3 connected to TIM2 as SLAVE
        0x08001a82:    480f        .H      LDR      r0,[pc,#60] ; [0x8001ac0] = 0x40000408
        0x08001a84:    6800        .h      LDR      r0,[r0,#0]
        0x08001a86:    2816        .(      CMP      r0,#0x16
        0x08001a88:    d10c        ..      BNE      0x8001aa4 ; TIM2_IRQHandler + 36
;;;256    //	if ( state.async_z == 1) {
;;;257    //		state.f_encoder = encoder;
;;;258    //		state.f_tacho = t4sr[TIM_SR_CC3IF_Pos];
;;;259    //		LED_GPIO_Port->BSRR = LED_Pin;   // led off
;;;260    //		LED_GPIO_Port->BRR = LED_Pin;
;;;261    //    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
;;;262    //    LL_GPIO_TogglePin( LED_GPIO_Port, LED_Pin);
;;;263    
;;;264    		state.function(&state);
        0x08001a8a:    480e        .H      LDR      r0,[pc,#56] ; [0x8001ac4] = 0x20000044
        0x08001a8c:    6801        .h      LDR      r1,[r0,#0]
        0x08001a8e:    4788        .G      BLX      r1
;;;265    
;;;266    		TIM2->ARR = state.z_period;
        0x08001a90:    480c        .H      LDR      r0,[pc,#48] ; [0x8001ac4] = 0x20000044
        0x08001a92:    7b00        .{      LDRB     r0,[r0,#0xc]
        0x08001a94:    f04f4180    O..A    MOV      r1,#0x40000000
        0x08001a98:    62c8        .b      STR      r0,[r1,#0x2c]
;;;267    		TIM2->EGR |= TIM_EGR_UG;
        0x08001a9a:    4608        .F      MOV      r0,r1
        0x08001a9c:    6940        @i      LDR      r0,[r0,#0x14]
        0x08001a9e:    f0400001    @...    ORR      r0,r0,#1
        0x08001aa2:    6148        Ha      STR      r0,[r1,#0x14]
;;;268    
;;;269    //		state.set_pulse_function(&state);
;;;270    //		text_buffer[tbc++] = TIM2->ARR;
;;;271    	}
;;;272    
;;;273      /* USER CODE END TIM2_IRQn 0 */
;;;274      /* USER CODE BEGIN TIM2_IRQn 1 */
;;;275      /* Check whether update interrupt is pending */
;;;276      if(LL_TIM_IsActiveFlag_UPDATE(TIM2) == 1)
        0x08001aa4:    f04f4080    O..@    MOV      r0,#0x40000000
        0x08001aa8:    f7feffca    ....    BL       LL_TIM_IsActiveFlag_UPDATE ; 0x8000a40
        0x08001aac:    2801        .(      CMP      r0,#1
        0x08001aae:    d106        ..      BNE      0x8001abe ; TIM2_IRQHandler + 62
;;;277      {
;;;278        /* Clear the update interrupt flag*/
;;;279        LL_TIM_ClearFlag_UPDATE(TIM2);
        0x08001ab0:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;2932     WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
        0x08001ab2:    1ec0        ..      SUBS     r0,r0,#3
        0x08001ab4:    f04f4180    O..A    MOV      r1,#0x40000000
        0x08001ab8:    6108        .a      STR      r0,[r1,#0x10]
;;;2933   }
        0x08001aba:    bf00        ..      NOP      
        0x08001abc:    bf00        ..      NOP      
;;; .\../Src/stm32f1xx_it.c
;;;282    }
        0x08001abe:    bd10        ..      POP      {r4,pc}
    $d
        0x08001ac0:    40000408    ...@    DCD    1073742856
        0x08001ac4:    20000044    D..     DCD    536870980
    $t
    i.TIM3_IRQHandler
    TIM3_IRQHandler
;;;283    
;;;284    /**
;;;285      * @brief This function handles TIM3 global interrupt.
;;;286      */
;;;287    void TIM3_IRQHandler(void)
;;;288    {
        0x08001ac8:    b510        ..      PUSH     {r4,lr}
;;;289      /* USER CODE BEGIN TIM3_IRQn 0 */
;;;290    	if(TIM3->SMCR == 0x16) { // TIM3 connected to TIM2 as SLAVE
        0x08001aca:    481c        .H      LDR      r0,[pc,#112] ; [0x8001b3c] = 0x40000408
        0x08001acc:    6800        .h      LDR      r0,[r0,#0]
        0x08001ace:    2816        .(      CMP      r0,#0x16
        0x08001ad0:    d12f        /.      BNE      0x8001b32 ; TIM3_IRQHandler + 106
;;;291    		dxdz_callback(&state);
        0x08001ad2:    bf00        ..      NOP      
;;; ../Inc/fsm.h
;;;95     	TIM3->CCER = 0;	//	LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH1 | LL_TIM_CHANNEL_CH3);
        0x08001ad4:    2000        .       MOVS     r0,#0
        0x08001ad6:    4919        .I      LDR      r1,[pc,#100] ; [0x8001b3c] = 0x40000408
        0x08001ad8:    3118        .1      ADDS     r1,r1,#0x18
        0x08001ada:    6008        .`      STR      r0,[r1,#0]
;;;96     	s->e2 = s->err;
        0x08001adc:    4818        .H      LDR      r0,[pc,#96] ; [0x8001b40] = 0x20000044
        0x08001ade:    6c40        @l      LDR      r0,[r0,#0x44]
        0x08001ae0:    4917        .I      LDR      r1,[pc,#92] ; [0x8001b40] = 0x20000044
        0x08001ae2:    6488        .d      STR      r0,[r1,#0x48]
;;;97     	if (s->e2 > -s->dx)	{ 
        0x08001ae4:    4608        .F      MOV      r0,r1
        0x08001ae6:    6c80        .l      LDR      r0,[r0,#0x48]
        0x08001ae8:    6a89        .j      LDR      r1,[r1,#0x28]
        0x08001aea:    4249        IB      RSBS     r1,r1,#0
        0x08001aec:    4288        .B      CMP      r0,r1
        0x08001aee:    dd0b        ..      BLE      0x8001b08 ; TIM3_IRQHandler + 64
;;;98     		s->err -= s->dz; 
        0x08001af0:    4813        .H      LDR      r0,[pc,#76] ; [0x8001b40] = 0x20000044
        0x08001af2:    6c40        @l      LDR      r0,[r0,#0x44]
        0x08001af4:    4912        .I      LDR      r1,[pc,#72] ; [0x8001b40] = 0x20000044
        0x08001af6:    6ac9        .j      LDR      r1,[r1,#0x2c]
        0x08001af8:    1a40        @.      SUBS     r0,r0,r1
        0x08001afa:    4911        .I      LDR      r1,[pc,#68] ; [0x8001b40] = 0x20000044
        0x08001afc:    6448        Hd      STR      r0,[r1,#0x44]
;;;99     		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH1); 
        0x08001afe:    2101        .!      MOVS     r1,#1
        0x08001b00:    480e        .H      LDR      r0,[pc,#56] ; [0x8001b3c] = 0x40000408
        0x08001b02:    3808        .8      SUBS     r0,r0,#8
        0x08001b04:    f7fefe69    ..i.    BL       LL_TIM_CC_EnableChannel ; 0x80007da
;;;100    	}
;;;101    	if (s->e2 < s->dz)	{ 
        0x08001b08:    480d        .H      LDR      r0,[pc,#52] ; [0x8001b40] = 0x20000044
        0x08001b0a:    6c80        .l      LDR      r0,[r0,#0x48]
        0x08001b0c:    490c        .I      LDR      r1,[pc,#48] ; [0x8001b40] = 0x20000044
        0x08001b0e:    6ac9        .j      LDR      r1,[r1,#0x2c]
        0x08001b10:    4288        .B      CMP      r0,r1
        0x08001b12:    da0c        ..      BGE      0x8001b2e ; TIM3_IRQHandler + 102
;;;102    		s->err += s->dx; 
        0x08001b14:    480a        .H      LDR      r0,[pc,#40] ; [0x8001b40] = 0x20000044
        0x08001b16:    6c40        @l      LDR      r0,[r0,#0x44]
        0x08001b18:    4909        .I      LDR      r1,[pc,#36] ; [0x8001b40] = 0x20000044
        0x08001b1a:    6a89        .j      LDR      r1,[r1,#0x28]
        0x08001b1c:    4408        .D      ADD      r0,r0,r1
        0x08001b1e:    4908        .I      LDR      r1,[pc,#32] ; [0x8001b40] = 0x20000044
        0x08001b20:    6448        Hd      STR      r0,[r1,#0x44]
;;;103    		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH3); 
        0x08001b22:    f44f7180    O..q    MOV      r1,#0x100
        0x08001b26:    4805        .H      LDR      r0,[pc,#20] ; [0x8001b3c] = 0x40000408
        0x08001b28:    3808        .8      SUBS     r0,r0,#8
        0x08001b2a:    f7fefe56    ..V.    BL       LL_TIM_CC_EnableChannel ; 0x80007da
;;;104    	}
;;;105    }
        0x08001b2e:    bf00        ..      NOP      
        0x08001b30:    bf00        ..      NOP      
;;; .\../Src/stm32f1xx_it.c
;;;293    	TIM3->SR = 0;
        0x08001b32:    2000        .       MOVS     r0,#0
        0x08001b34:    4901        .I      LDR      r1,[pc,#4] ; [0x8001b3c] = 0x40000408
        0x08001b36:    3108        .1      ADDS     r1,r1,#8
        0x08001b38:    6008        .`      STR      r0,[r1,#0]
;;;294    	
;;;295      /* USER CODE END TIM3_IRQn 0 */
;;;296      /* USER CODE BEGIN TIM3_IRQn 1 */
;;;297    
;;;298      /* USER CODE END TIM3_IRQn 1 */
;;;299    }
        0x08001b3a:    bd10        ..      POP      {r4,pc}
    $d
        0x08001b3c:    40000408    ...@    DCD    1073742856
        0x08001b40:    20000044    D..     DCD    536870980
    $t
    i.TIM4_IRQHandler
    TIM4_IRQHandler
;;;300    
;;;301    /**
;;;302      * @brief This function handles TIM4 global interrupt.
;;;303      */
;;;304    void TIM4_IRQHandler(void)
;;;305    {
        0x08001b44:    b510        ..      PUSH     {r4,lr}
;;;306      /* USER CODE BEGIN TIM4_IRQn 0 */
;;;307    //	_Bool dir = t4cr1[TIM_CR1_DIR_Pos];
;;;308    //	if(t4sr[TIM_SR_CC3IF_Pos]){
;;;309    //		do_fsm_wait_tacho(&state);
;;;310    //	}
;;;311    	if (state.sync == true) {
        0x08001b46:    480d        .H      LDR      r0,[pc,#52] ; [0x8001b7c] = 0x20000044
        0x08001b48:    7c00        .|      LDRB     r0,[r0,#0x10]
        0x08001b4a:    2801        .(      CMP      r0,#1
        0x08001b4c:    d112        ..      BNE      0x8001b74 ; TIM4_IRQHandler + 48
;;;312    		state.spindle_dir = t4cr1[TIM_CR1_DIR_Pos];
        0x08001b4e:    480c        .H      LDR      r0,[pc,#48] ; [0x8001b80] = 0x42010000
        0x08001b50:    6900        .i      LDR      r0,[r0,#0x10]
        0x08001b52:    b108        ..      CBZ      r0,0x8001b58 ; TIM4_IRQHandler + 20
        0x08001b54:    2001        .       MOVS     r0,#1
        0x08001b56:    e000        ..      B        0x8001b5a ; TIM4_IRQHandler + 22
        0x08001b58:    2000        .       MOVS     r0,#0
        0x08001b5a:    4908        .I      LDR      r1,[pc,#32] ; [0x8001b7c] = 0x20000044
        0x08001b5c:    73c8        .s      STRB     r0,[r1,#0xf]
;;;313    //		state.f_encoder = encoder;
;;;314    		state.f_tacho = t4sr[TIM_SR_CC3IF_Pos];
        0x08001b5e:    4809        .H      LDR      r0,[pc,#36] ; [0x8001b84] = 0x4201020c
        0x08001b60:    6800        .h      LDR      r0,[r0,#0]
        0x08001b62:    b108        ..      CBZ      r0,0x8001b68 ; TIM4_IRQHandler + 36
        0x08001b64:    2001        .       MOVS     r0,#1
        0x08001b66:    e000        ..      B        0x8001b6a ; TIM4_IRQHandler + 38
        0x08001b68:    2000        .       MOVS     r0,#0
        0x08001b6a:    4904        .I      LDR      r1,[pc,#16] ; [0x8001b7c] = 0x20000044
        0x08001b6c:    7388        .s      STRB     r0,[r1,#0xe]
;;;315    		state.function(&state);
        0x08001b6e:    4608        .F      MOV      r0,r1
        0x08001b70:    6801        .h      LDR      r1,[r0,#0]
        0x08001b72:    4788        .G      BLX      r1
;;;316    	}
;;;317    //	TIM4->SR &= ~TIM_SR_UIF; //Сбрасываем бит вызова прерывания. 
;;;318    
;;;319      /* USER CODE END TIM4_IRQn 0 */
;;;320      /* USER CODE BEGIN TIM4_IRQn 1 */
;;;321      /* Check whether update interrupt is pending */
;;;322    //	if(LL_TIM_IsActiveFlag_CC2OVR(TIM4) == 1){
;;;323    //		TIM4->SR = 0;
;;;324    //	}
;;;325    	TIM4->SR = 0;
        0x08001b74:    2000        .       MOVS     r0,#0
        0x08001b76:    4904        .I      LDR      r1,[pc,#16] ; [0x8001b88] = 0x40000810
        0x08001b78:    6008        .`      STR      r0,[r1,#0]
;;;326    /*
;;;327    	if(LL_TIM_IsActiveFlag_CC2(TIM4) == 1)
;;;328        LL_TIM_ClearFlag_CC2(TIM4);
;;;329    	if(LL_TIM_IsActiveFlag_CC3(TIM4) == 1)
;;;330        LL_TIM_ClearFlag_CC3(TIM4);
;;;331    	if(LL_TIM_IsActiveFlag_UPDATE(TIM4) == 1)
;;;332      {
;;;333        LL_TIM_ClearFlag_UPDATE(TIM4); //Clear the update interrupt flag
;;;334      }
;;;335    */
;;;336      /* USER CODE END TIM4_IRQn 1 */
;;;337    }
        0x08001b7a:    bd10        ..      POP      {r4,pc}
    $d
        0x08001b7c:    20000044    D..     DCD    536870980
        0x08001b80:    42010000    ...B    DCD    1107361792
        0x08001b84:    4201020c    ...B    DCD    1107362316
        0x08001b88:    40000810    ...@    DCD    1073743888
    $t
    i.Transfer_Complete_Callback
    Transfer_Complete_Callback
;;; .\..\Src\i2c_interface.c
;;;321    {
        0x08001b8c:    b510        ..      PUSH     {r4,lr}
;;;322      /* Generate Stop condition */
;;;323    	while(!LL_I2C_IsActiveFlag_BTF(I2C2))
        0x08001b8e:    bf00        ..      NOP      
        0x08001b90:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;1160     return (READ_BIT(I2Cx->SR1, I2C_SR1_BTF) == (I2C_SR1_BTF));
        0x08001b92:    480f        .H      LDR      r0,[pc,#60] ; [0x8001bd0] = 0x40005800
        0x08001b94:    6940        @i      LDR      r0,[r0,#0x14]
        0x08001b96:    f3c00080    ....    UBFX     r0,r0,#2,#1
        0x08001b9a:    2800        .(      CMP      r0,#0
        0x08001b9c:    d0f8        ..      BEQ      0x8001b90 ; Transfer_Complete_Callback + 4
;;; .\..\Src\i2c_interface.c
;;;326      LL_I2C_GenerateStopCondition(I2C2);
        0x08001b9e:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
;;;1596     SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
        0x08001ba0:    480b        .H      LDR      r0,[pc,#44] ; [0x8001bd0] = 0x40005800
        0x08001ba2:    6800        .h      LDR      r0,[r0,#0]
        0x08001ba4:    f4407000    @..p    ORR      r0,r0,#0x200
        0x08001ba8:    4909        .I      LDR      r1,[pc,#36] ; [0x8001bd0] = 0x40005800
        0x08001baa:    6008        .`      STR      r0,[r1,#0]
;;;1597   }
        0x08001bac:    bf00        ..      NOP      
;;; .\..\Src\i2c_interface.c
;;;327      LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_4);
        0x08001bae:    4809        .H      LDR      r0,[pc,#36] ; [0x8001bd4] = 0x40020000
        0x08001bb0:    2104        .!      MOVS     r1,#4
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h
;;;491      CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
        0x08001bb2:    1e4a        J.      SUBS     r2,r1,#1
        0x08001bb4:    4b08        .K      LDR      r3,[pc,#32] ; [0x8001bd8] = 0x8002880
        0x08001bb6:    5c9a        .\      LDRB     r2,[r3,r2]
        0x08001bb8:    5882        .X      LDR      r2,[r0,r2]
        0x08001bba:    f0220301    "...    BIC      r3,r2,#1
        0x08001bbe:    1e4a        J.      SUBS     r2,r1,#1
        0x08001bc0:    4c05        .L      LDR      r4,[pc,#20] ; [0x8001bd8] = 0x8002880
        0x08001bc2:    5ca2        .\      LDRB     r2,[r4,r2]
        0x08001bc4:    5083        .P      STR      r3,[r0,r2]
;;;492    }
        0x08001bc6:    bf00        ..      NOP      
;;; .\..\Src\i2c_interface.c
;;;329      ubTransferComplete = 1;
        0x08001bc8:    2001        .       MOVS     r0,#1
        0x08001bca:    4904        .I      LDR      r1,[pc,#16] ; [0x8001bdc] = 0x20000017
        0x08001bcc:    7008        .p      STRB     r0,[r1,#0]
;;;330    }
        0x08001bce:    bd10        ..      POP      {r4,pc}
    $d
        0x08001bd0:    40005800    .X.@    DCD    1073764352
        0x08001bd4:    40020000    ...@    DCD    1073872896
        0x08001bd8:    08002880    .(..    DCD    134228096
        0x08001bdc:    20000017    ...     DCD    536870935
    $t
    i.Transfer_Error_Callback
    Transfer_Error_Callback
;;;331    
;;;332    /**
;;;333      * @brief  DMA transfer error callback
;;;334      * @note   This function is executed when the transfer error interrupt
;;;335      *         is generated during DMA transfer
;;;336      * @retval None
;;;337      */
;;;338    void Transfer_Error_Callback()
;;;339    {
;;;340      /* Disable DMA1_Channel4_IRQn */
;;;341      NVIC_DisableIRQ(DMA1_Channel4_IRQn);
        0x08001be0:    200e        .       MOVS     r0,#0xe
;;; ../Drivers/CMSIS/Include/core_cm3.h
;;;1465     NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
        0x08001be2:    2101        .!      MOVS     r1,#1
        0x08001be4:    4081        .@      LSLS     r1,r1,r0
        0x08001be6:    4a03        .J      LDR      r2,[pc,#12] ; [0x8001bf4] = 0xe000e180
        0x08001be8:    0943        C.      LSRS     r3,r0,#5
        0x08001bea:    f8421023    B.#.    STR      r1,[r2,r3,LSL #2]
;;;1466   }
        0x08001bee:    bf00        ..      NOP      
;;; .\..\Src\i2c_interface.c
;;;343      while(1){};
        0x08001bf0:    bf00        ..      NOP      
;;; .\..\Src\i2c_interface.c (343)
        0x08001bf2:    e7fe        ..      B        0x8001bf2 ; Transfer_Error_Callback + 18
    $d
        0x08001bf4:    e000e180    ....    DCD    3758154112
    $t
    i.USART2_IRQHandler
    USART2_IRQHandler
;;; .\../Src/stm32f1xx_it.c
;;;388    {
        0x08001bf8:    b510        ..      PUSH     {r4,lr}
;;;389      /* USER CODE BEGIN USART2_IRQn 0 */
;;;390      if(LL_USART_IsActiveFlag_RXNE(USART2) && LL_USART_IsEnabledIT_RXNE(USART2))
        0x08001bfa:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h
;;;1859     return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
        0x08001bfc:    4806        .H      LDR      r0,[pc,#24] ; [0x8001c18] = 0x40004400
        0x08001bfe:    6800        .h      LDR      r0,[r0,#0]
        0x08001c00:    f3c01040    ..@.    UBFX     r0,r0,#5,#1
        0x08001c04:    b138        8.      CBZ      r0,0x8001c16 ; USART2_IRQHandler + 30
        0x08001c06:    bf00        ..      NOP      
;;;1860   }
;;;1861   
;;;1862   /**
;;;1863     * @brief  Check if the USART Transmission Complete Flag is set or not
;;;1864     * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
;;;1865     * @param  USARTx USART Instance
;;;1866     * @retval State of bit (1 or 0).
;;;1867     */
;;;1868   __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
;;;1869   {
;;;1870     return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
;;;1871   }
;;;1872   
;;;1873   /**
;;;1874     * @brief  Check if the USART Transmit Data Register Empty Flag is set or not
;;;1875     * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
;;;1876     * @param  USARTx USART Instance
;;;1877     * @retval State of bit (1 or 0).
;;;1878     */
;;;1879   __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
;;;1880   {
;;;1881     return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
;;;1882   }
;;;1883   
;;;1884   /**
;;;1885     * @brief  Check if the USART LIN Break Detection Flag is set or not
;;;1886     * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
;;;1887     *         LIN feature is supported by the USARTx instance.
;;;1888     * @rmtoll SR           LBD           LL_USART_IsActiveFlag_LBD
;;;1889     * @param  USARTx USART Instance
;;;1890     * @retval State of bit (1 or 0).
;;;1891     */
;;;1892   __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_LBD(USART_TypeDef *USARTx)
;;;1893   {
;;;1894     return (READ_BIT(USARTx->SR, USART_SR_LBD) == (USART_SR_LBD));
;;;1895   }
;;;1896   
;;;1897   /**
;;;1898     * @brief  Check if the USART CTS Flag is set or not
;;;1899     * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
;;;1900     *         Hardware Flow control feature is supported by the USARTx instance.
;;;1901     * @rmtoll SR           CTS           LL_USART_IsActiveFlag_nCTS
;;;1902     * @param  USARTx USART Instance
;;;1903     * @retval State of bit (1 or 0).
;;;1904     */
;;;1905   __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_nCTS(USART_TypeDef *USARTx)
;;;1906   {
;;;1907     return (READ_BIT(USARTx->SR, USART_SR_CTS) == (USART_SR_CTS));
;;;1908   }
;;;1909   
;;;1910   /**
;;;1911     * @brief  Check if the USART Send Break Flag is set or not
;;;1912     * @rmtoll CR1          SBK           LL_USART_IsActiveFlag_SBK
;;;1913     * @param  USARTx USART Instance
;;;1914     * @retval State of bit (1 or 0).
;;;1915     */
;;;1916   __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_SBK(USART_TypeDef *USARTx)
;;;1917   {
;;;1918     return (READ_BIT(USARTx->CR1, USART_CR1_SBK) == (USART_CR1_SBK));
;;;1919   }
;;;1920   
;;;1921   /**
;;;1922     * @brief  Check if the USART Receive Wake Up from mute mode Flag is set or not
;;;1923     * @rmtoll CR1          RWU           LL_USART_IsActiveFlag_RWU
;;;1924     * @param  USARTx USART Instance
;;;1925     * @retval State of bit (1 or 0).
;;;1926     */
;;;1927   __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RWU(USART_TypeDef *USARTx)
;;;1928   {
;;;1929     return (READ_BIT(USARTx->CR1, USART_CR1_RWU) == (USART_CR1_RWU));
;;;1930   }
;;;1931   
;;;1932   /**
;;;1933     * @brief  Clear Parity Error Flag
;;;1934     * @note   Clearing this flag is done by a read access to the USARTx_SR
;;;1935     *         register followed by a read access to the USARTx_DR register.
;;;1936     * @note   Please also consider that when clearing this flag, other flags as 
;;;1937     *         NE, FE, ORE, IDLE would also be cleared.
;;;1938     * @rmtoll SR           PE            LL_USART_ClearFlag_PE
;;;1939     * @param  USARTx USART Instance
;;;1940     * @retval None
;;;1941     */
;;;1942   __STATIC_INLINE void LL_USART_ClearFlag_PE(USART_TypeDef *USARTx)
;;;1943   {
;;;1944     __IO uint32_t tmpreg;
;;;1945     tmpreg = USARTx->SR;
;;;1946     (void) tmpreg;
;;;1947     tmpreg = USARTx->DR;
;;;1948     (void) tmpreg;
;;;1949   }
;;;1950   
;;;1951   /**
;;;1952     * @brief  Clear Framing Error Flag
;;;1953     * @note   Clearing this flag is done by a read access to the USARTx_SR
;;;1954     *         register followed by a read access to the USARTx_DR register.
;;;1955     * @note   Please also consider that when clearing this flag, other flags as 
;;;1956     *         PE, NE, ORE, IDLE would also be cleared.
;;;1957     * @rmtoll SR           FE            LL_USART_ClearFlag_FE
;;;1958     * @param  USARTx USART Instance
;;;1959     * @retval None
;;;1960     */
;;;1961   __STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
;;;1962   {
;;;1963     __IO uint32_t tmpreg;
;;;1964     tmpreg = USARTx->SR;
;;;1965     (void) tmpreg;
;;;1966     tmpreg = USARTx->DR;
;;;1967     (void) tmpreg;
;;;1968   }
;;;1969   
;;;1970   /**
;;;1971     * @brief  Clear Noise detected Flag
;;;1972     * @note   Clearing this flag is done by a read access to the USARTx_SR
;;;1973     *         register followed by a read access to the USARTx_DR register.
;;;1974     * @note   Please also consider that when clearing this flag, other flags as 
;;;1975     *         PE, FE, ORE, IDLE would also be cleared.
;;;1976     * @rmtoll SR           NF            LL_USART_ClearFlag_NE
;;;1977     * @param  USARTx USART Instance
;;;1978     * @retval None
;;;1979     */
;;;1980   __STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
;;;1981   {
;;;1982     __IO uint32_t tmpreg;
;;;1983     tmpreg = USARTx->SR;
;;;1984     (void) tmpreg;
;;;1985     tmpreg = USARTx->DR;
;;;1986     (void) tmpreg;
;;;1987   }
;;;1988   
;;;1989   /**
;;;1990     * @brief  Clear OverRun Error Flag
;;;1991     * @note   Clearing this flag is done by a read access to the USARTx_SR
;;;1992     *         register followed by a read access to the USARTx_DR register.
;;;1993     * @note   Please also consider that when clearing this flag, other flags as 
;;;1994     *         PE, NE, FE, IDLE would also be cleared.
;;;1995     * @rmtoll SR           ORE           LL_USART_ClearFlag_ORE
;;;1996     * @param  USARTx USART Instance
;;;1997     * @retval None
;;;1998     */
;;;1999   __STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
;;;2000   {
;;;2001     __IO uint32_t tmpreg;
;;;2002     tmpreg = USARTx->SR;
;;;2003     (void) tmpreg;
;;;2004     tmpreg = USARTx->DR;
;;;2005     (void) tmpreg;
;;;2006   }
;;;2007   
;;;2008   /**
;;;2009     * @brief  Clear IDLE line detected Flag
;;;2010     * @note   Clearing this flag is done by a read access to the USARTx_SR
;;;2011     *         register followed by a read access to the USARTx_DR register.
;;;2012     * @note   Please also consider that when clearing this flag, other flags as 
;;;2013     *         PE, NE, FE, ORE would also be cleared.
;;;2014     * @rmtoll SR           IDLE          LL_USART_ClearFlag_IDLE
;;;2015     * @param  USARTx USART Instance
;;;2016     * @retval None
;;;2017     */
;;;2018   __STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
;;;2019   {
;;;2020     __IO uint32_t tmpreg;
;;;2021     tmpreg = USARTx->SR;
;;;2022     (void) tmpreg;
;;;2023     tmpreg = USARTx->DR;
;;;2024     (void) tmpreg;
;;;2025   }
;;;2026   
;;;2027   /**
;;;2028     * @brief  Clear Transmission Complete Flag
;;;2029     * @rmtoll SR           TC            LL_USART_ClearFlag_TC
;;;2030     * @param  USARTx USART Instance
;;;2031     * @retval None
;;;2032     */
;;;2033   __STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
;;;2034   {
;;;2035     WRITE_REG(USARTx->SR , ~(USART_SR_TC));
;;;2036   }
;;;2037   
;;;2038   /**
;;;2039     * @brief  Clear RX Not Empty Flag
;;;2040     * @rmtoll SR           RXNE          LL_USART_ClearFlag_RXNE
;;;2041     * @param  USARTx USART Instance
;;;2042     * @retval None
;;;2043     */
;;;2044   __STATIC_INLINE void LL_USART_ClearFlag_RXNE(USART_TypeDef *USARTx)
;;;2045   {
;;;2046     WRITE_REG(USARTx->SR , ~(USART_SR_RXNE));
;;;2047   }
;;;2048   
;;;2049   /**
;;;2050     * @brief  Clear LIN Break Detection Flag
;;;2051     * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
;;;2052     *         LIN feature is supported by the USARTx instance.
;;;2053     * @rmtoll SR           LBD           LL_USART_ClearFlag_LBD
;;;2054     * @param  USARTx USART Instance
;;;2055     * @retval None
;;;2056     */
;;;2057   __STATIC_INLINE void LL_USART_ClearFlag_LBD(USART_TypeDef *USARTx)
;;;2058   {
;;;2059     WRITE_REG(USARTx->SR , ~(USART_SR_LBD));
;;;2060   }
;;;2061   
;;;2062   /**
;;;2063     * @brief  Clear CTS Interrupt Flag
;;;2064     * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
;;;2065     *         Hardware Flow control feature is supported by the USARTx instance.
;;;2066     * @rmtoll SR           CTS           LL_USART_ClearFlag_nCTS
;;;2067     * @param  USARTx USART Instance
;;;2068     * @retval None
;;;2069     */
;;;2070   __STATIC_INLINE void LL_USART_ClearFlag_nCTS(USART_TypeDef *USARTx)
;;;2071   {
;;;2072     WRITE_REG(USARTx->SR , ~(USART_SR_CTS));
;;;2073   }
;;;2074   
;;;2075   /**
;;;2076     * @}
;;;2077     */
;;;2078   
;;;2079   /** @defgroup USART_LL_EF_IT_Management IT_Management
;;;2080     * @{
;;;2081     */
;;;2082   
;;;2083   /**
;;;2084     * @brief  Enable IDLE Interrupt
;;;2085     * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
;;;2086     * @param  USARTx USART Instance
;;;2087     * @retval None
;;;2088     */
;;;2089   __STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
;;;2090   {
;;;2091     SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
;;;2092   }
;;;2093   
;;;2094   /**
;;;2095     * @brief  Enable RX Not Empty Interrupt
;;;2096     * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
;;;2097     * @param  USARTx USART Instance
;;;2098     * @retval None
;;;2099     */
;;;2100   __STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
;;;2101   {
;;;2102     SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
;;;2103   }
;;;2104   
;;;2105   /**
;;;2106     * @brief  Enable Transmission Complete Interrupt
;;;2107     * @rmtoll CR1          TCIE          LL_USART_EnableIT_TC
;;;2108     * @param  USARTx USART Instance
;;;2109     * @retval None
;;;2110     */
;;;2111   __STATIC_INLINE void LL_USART_EnableIT_TC(USART_TypeDef *USARTx)
;;;2112   {
;;;2113     SET_BIT(USARTx->CR1, USART_CR1_TCIE);
;;;2114   }
;;;2115   
;;;2116   /**
;;;2117     * @brief  Enable TX Empty Interrupt
;;;2118     * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
;;;2119     * @param  USARTx USART Instance
;;;2120     * @retval None
;;;2121     */
;;;2122   __STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
;;;2123   {
;;;2124     SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
;;;2125   }
;;;2126   
;;;2127   /**
;;;2128     * @brief  Enable Parity Error Interrupt
;;;2129     * @rmtoll CR1          PEIE          LL_USART_EnableIT_PE
;;;2130     * @param  USARTx USART Instance
;;;2131     * @retval None
;;;2132     */
;;;2133   __STATIC_INLINE void LL_USART_EnableIT_PE(USART_TypeDef *USARTx)
;;;2134   {
;;;2135     SET_BIT(USARTx->CR1, USART_CR1_PEIE);
;;;2136   }
;;;2137   
;;;2138   /**
;;;2139     * @brief  Enable LIN Break Detection Interrupt
;;;2140     * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
;;;2141     *         LIN feature is supported by the USARTx instance.
;;;2142     * @rmtoll CR2          LBDIE         LL_USART_EnableIT_LBD
;;;2143     * @param  USARTx USART Instance
;;;2144     * @retval None
;;;2145     */
;;;2146   __STATIC_INLINE void LL_USART_EnableIT_LBD(USART_TypeDef *USARTx)
;;;2147   {
;;;2148     SET_BIT(USARTx->CR2, USART_CR2_LBDIE);
;;;2149   }
;;;2150   
;;;2151   /**
;;;2152     * @brief  Enable Error Interrupt
;;;2153     * @note   When set, Error Interrupt Enable Bit is enabling interrupt generation in case of a framing
;;;2154     *         error, overrun error or noise flag (FE=1 or ORE=1 or NF=1 in the USARTx_SR register).
;;;2155     *           0: Interrupt is inhibited
;;;2156     *           1: An interrupt is generated when FE=1 or ORE=1 or NF=1 in the USARTx_SR register.
;;;2157     * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
;;;2158     * @param  USARTx USART Instance
;;;2159     * @retval None
;;;2160     */
;;;2161   __STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
;;;2162   {
;;;2163     SET_BIT(USARTx->CR3, USART_CR3_EIE);
;;;2164   }
;;;2165   
;;;2166   /**
;;;2167     * @brief  Enable CTS Interrupt
;;;2168     * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
;;;2169     *         Hardware Flow control feature is supported by the USARTx instance.
;;;2170     * @rmtoll CR3          CTSIE         LL_USART_EnableIT_CTS
;;;2171     * @param  USARTx USART Instance
;;;2172     * @retval None
;;;2173     */
;;;2174   __STATIC_INLINE void LL_USART_EnableIT_CTS(USART_TypeDef *USARTx)
;;;2175   {
;;;2176     SET_BIT(USARTx->CR3, USART_CR3_CTSIE);
;;;2177   }
;;;2178   
;;;2179   /**
;;;2180     * @brief  Disable IDLE Interrupt
;;;2181     * @rmtoll CR1          IDLEIE        LL_USART_DisableIT_IDLE
;;;2182     * @param  USARTx USART Instance
;;;2183     * @retval None
;;;2184     */
;;;2185   __STATIC_INLINE void LL_USART_DisableIT_IDLE(USART_TypeDef *USARTx)
;;;2186   {
;;;2187     CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
;;;2188   }
;;;2189   
;;;2190   /**
;;;2191     * @brief  Disable RX Not Empty Interrupt
;;;2192     * @rmtoll CR1          RXNEIE        LL_USART_DisableIT_RXNE
;;;2193     * @param  USARTx USART Instance
;;;2194     * @retval None
;;;2195     */
;;;2196   __STATIC_INLINE void LL_USART_DisableIT_RXNE(USART_TypeDef *USARTx)
;;;2197   {
;;;2198     CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
;;;2199   }
;;;2200   
;;;2201   /**
;;;2202     * @brief  Disable Transmission Complete Interrupt
;;;2203     * @rmtoll CR1          TCIE          LL_USART_DisableIT_TC
;;;2204     * @param  USARTx USART Instance
;;;2205     * @retval None
;;;2206     */
;;;2207   __STATIC_INLINE void LL_USART_DisableIT_TC(USART_TypeDef *USARTx)
;;;2208   {
;;;2209     CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
;;;2210   }
;;;2211   
;;;2212   /**
;;;2213     * @brief  Disable TX Empty Interrupt
;;;2214     * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
;;;2215     * @param  USARTx USART Instance
;;;2216     * @retval None
;;;2217     */
;;;2218   __STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
;;;2219   {
;;;2220     CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
;;;2221   }
;;;2222   
;;;2223   /**
;;;2224     * @brief  Disable Parity Error Interrupt
;;;2225     * @rmtoll CR1          PEIE          LL_USART_DisableIT_PE
;;;2226     * @param  USARTx USART Instance
;;;2227     * @retval None
;;;2228     */
;;;2229   __STATIC_INLINE void LL_USART_DisableIT_PE(USART_TypeDef *USARTx)
;;;2230   {
;;;2231     CLEAR_BIT(USARTx->CR1, USART_CR1_PEIE);
;;;2232   }
;;;2233   
;;;2234   /**
;;;2235     * @brief  Disable LIN Break Detection Interrupt
;;;2236     * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
;;;2237     *         LIN feature is supported by the USARTx instance.
;;;2238     * @rmtoll CR2          LBDIE         LL_USART_DisableIT_LBD
;;;2239     * @param  USARTx USART Instance
;;;2240     * @retval None
;;;2241     */
;;;2242   __STATIC_INLINE void LL_USART_DisableIT_LBD(USART_TypeDef *USARTx)
;;;2243   {
;;;2244     CLEAR_BIT(USARTx->CR2, USART_CR2_LBDIE);
;;;2245   }
;;;2246   
;;;2247   /**
;;;2248     * @brief  Disable Error Interrupt
;;;2249     * @note   When set, Error Interrupt Enable Bit is enabling interrupt generation in case of a framing
;;;2250     *         error, overrun error or noise flag (FE=1 or ORE=1 or NF=1 in the USARTx_SR register).
;;;2251     *           0: Interrupt is inhibited
;;;2252     *           1: An interrupt is generated when FE=1 or ORE=1 or NF=1 in the USARTx_SR register.
;;;2253     * @rmtoll CR3          EIE           LL_USART_DisableIT_ERROR
;;;2254     * @param  USARTx USART Instance
;;;2255     * @retval None
;;;2256     */
;;;2257   __STATIC_INLINE void LL_USART_DisableIT_ERROR(USART_TypeDef *USARTx)
;;;2258   {
;;;2259     CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
;;;2260   }
;;;2261   
;;;2262   /**
;;;2263     * @brief  Disable CTS Interrupt
;;;2264     * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
;;;2265     *         Hardware Flow control feature is supported by the USARTx instance.
;;;2266     * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
;;;2267     * @param  USARTx USART Instance
;;;2268     * @retval None
;;;2269     */
;;;2270   __STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
;;;2271   {
;;;2272     CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
;;;2273   }
;;;2274   
;;;2275   /**
;;;2276     * @brief  Check if the USART IDLE Interrupt  source is enabled or disabled.
;;;2277     * @rmtoll CR1          IDLEIE        LL_USART_IsEnabledIT_IDLE
;;;2278     * @param  USARTx USART Instance
;;;2279     * @retval State of bit (1 or 0).
;;;2280     */
;;;2281   __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_IDLE(USART_TypeDef *USARTx)
;;;2282   {
;;;2283     return (READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE));
;;;2284   }
;;;2285   
;;;2286   /**
;;;2287     * @brief  Check if the USART RX Not Empty Interrupt is enabled or disabled.
;;;2288     * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
;;;2289     * @param  USARTx USART Instance
;;;2290     * @retval State of bit (1 or 0).
;;;2291     */
;;;2292   __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(USART_TypeDef *USARTx)
;;;2293   {
;;;2294     return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
        0x08001c08:    4803        .H      LDR      r0,[pc,#12] ; [0x8001c18] = 0x40004400
        0x08001c0a:    68c0        .h      LDR      r0,[r0,#0xc]
        0x08001c0c:    f3c01040    ..@.    UBFX     r0,r0,#5,#1
        0x08001c10:    b108        ..      CBZ      r0,0x8001c16 ; USART2_IRQHandler + 30
;;; .\../Src/stm32f1xx_it.c
;;;394        USART_CharReception_Callback();
        0x08001c12:    f000f803    ....    BL       USART_CharReception_Callback ; 0x8001c1c
;;;395      }
;;;396      /* USER CODE END USART2_IRQn 0 */
;;;397      /* USER CODE BEGIN USART2_IRQn 1 */
;;;398    
;;;399      /* USER CODE END USART2_IRQn 1 */
;;;400    }
        0x08001c16:    bd10        ..      POP      {r4,pc}
    $d
        0x08001c18:    40004400    .D.@    DCD    1073759232
    $t
    i.USART_CharReception_Callback
    USART_CharReception_Callback
;;; .\../Src/main.c
;;;327    {
        0x08001c1c:    b510        ..      PUSH     {r4,lr}
;;;328    	uint8_t *ptemp;
;;;329      /* Read Received character. RXNE flag is cleared by reading of DR register */
;;;330    	uint8_t symbol = LL_USART_ReceiveData8(USART2);
        0x08001c1e:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h
;;;2470     return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
        0x08001c20:    4a0f        .J      LDR      r2,[pc,#60] ; [0x8001c60] = 0x40004400
        0x08001c22:    6852        Rh      LDR      r2,[r2,#4]
        0x08001c24:    b2d2        ..      UXTB     r2,r2
        0x08001c26:    4610        .F      MOV      r0,r2
;;; .\../Src/main.c
;;;331    	if(symbol == '\n' || symbol == '\r'){
        0x08001c28:    280a        .(      CMP      r0,#0xa
        0x08001c2a:    d001        ..      BEQ      0x8001c30 ; USART_CharReception_Callback + 20
        0x08001c2c:    280d        .(      CMP      r0,#0xd
        0x08001c2e:    d10e        ..      BNE      0x8001c4e ; USART_CharReception_Callback + 50
;;;332        /* Set Buffer swap indication */
;;;333    		ubUART2ReceptionComplete = 1;
        0x08001c30:    2201        ."      MOVS     r2,#1
        0x08001c32:    4b0c        .K      LDR      r3,[pc,#48] ; [0x8001c64] = 0x200004ec
        0x08001c34:    701a        .p      STRB     r2,[r3,#0]
;;;334    
;;;335        /* Swap buffers for next bytes to be received */
;;;336        ptemp = pBufferReadyForUser;
        0x08001c36:    4a0c        .J      LDR      r2,[pc,#48] ; [0x8001c68] = 0x200004e4
        0x08001c38:    6811        .h      LDR      r1,[r2,#0]
;;;337        pBufferReadyForUser = pBufferReadyForReception;
        0x08001c3a:    4a0c        .J      LDR      r2,[pc,#48] ; [0x8001c6c] = 0x200004e8
        0x08001c3c:    6812        .h      LDR      r2,[r2,#0]
        0x08001c3e:    4b0a        .K      LDR      r3,[pc,#40] ; [0x8001c68] = 0x200004e4
        0x08001c40:    601a        .`      STR      r2,[r3,#0]
;;;338        pBufferReadyForReception = ptemp;
        0x08001c42:    4a0a        .J      LDR      r2,[pc,#40] ; [0x8001c6c] = 0x200004e8
        0x08001c44:    6011        .`      STR      r1,[r2,#0]
;;;339        uwNbReceivedChars = 0;
        0x08001c46:    2200        ."      MOVS     r2,#0
        0x08001c48:    4b09        .K      LDR      r3,[pc,#36] ; [0x8001c70] = 0x200004dc
        0x08001c4a:    601a        .`      STR      r2,[r3,#0]
        0x08001c4c:    e007        ..      B        0x8001c5e ; USART_CharReception_Callback + 66
;;;340    	} else {
;;;341    		pBufferReadyForReception[uwNbReceivedChars++] = symbol;
        0x08001c4e:    4b08        .K      LDR      r3,[pc,#32] ; [0x8001c70] = 0x200004dc
        0x08001c50:    681a        .h      LDR      r2,[r3,#0]
        0x08001c52:    1c53        S.      ADDS     r3,r2,#1
        0x08001c54:    4c06        .L      LDR      r4,[pc,#24] ; [0x8001c70] = 0x200004dc
        0x08001c56:    6023        #`      STR      r3,[r4,#0]
        0x08001c58:    4b04        .K      LDR      r3,[pc,#16] ; [0x8001c6c] = 0x200004e8
        0x08001c5a:    681b        .h      LDR      r3,[r3,#0]
        0x08001c5c:    5498        .T      STRB     r0,[r3,r2]
;;;342    	}
;;;343    }
        0x08001c5e:    bd10        ..      POP      {r4,pc}
    $d
        0x08001c60:    40004400    .D.@    DCD    1073759232
        0x08001c64:    200004ec    ...     DCD    536872172
        0x08001c68:    200004e4    ...     DCD    536872164
        0x08001c6c:    200004e8    ...     DCD    536872168
        0x08001c70:    200004dc    ...     DCD    536872156
    $t
    i.__scatterload_copy
    __scatterload_copy
        0x08001c74:    e002        ..      B        0x8001c7c ; __scatterload_copy + 8
        0x08001c76:    c808        ..      LDM      r0!,{r3}
        0x08001c78:    1f12        ..      SUBS     r2,r2,#4
        0x08001c7a:    c108        ..      STM      r1!,{r3}
        0x08001c7c:    2a00        .*      CMP      r2,#0
        0x08001c7e:    d1fa        ..      BNE      0x8001c76 ; __scatterload_copy + 2
        0x08001c80:    4770        pG      BX       lr
    i.__scatterload_null
    __scatterload_null
        0x08001c82:    4770        pG      BX       lr
    i.__scatterload_zeroinit
    __scatterload_zeroinit
        0x08001c84:    2000        .       MOVS     r0,#0
        0x08001c86:    e001        ..      B        0x8001c8c ; __scatterload_zeroinit + 8
        0x08001c88:    c101        ..      STM      r1!,{r0}
        0x08001c8a:    1f12        ..      SUBS     r2,r2,#4
        0x08001c8c:    2a00        .*      CMP      r2,#0
        0x08001c8e:    d1fb        ..      BNE      0x8001c88 ; __scatterload_zeroinit + 4
        0x08001c90:    4770        pG      BX       lr
        0x08001c92:    0000        ..      MOVS     r0,r0
    i.do_fsm_menu
    do_fsm_menu
;;; .\..\Src\fsm.c
;;;69     {
        0x08001c94:    b570        p.      PUSH     {r4-r6,lr}
        0x08001c96:    4604        .F      MOV      r4,r0
;;;70     	uint8_t level = Thread_Info[Menu_Step].level;
        0x08001c98:    4875        uH      LDR      r0,[pc,#468] ; [0x8001e70] = 0x200000b4
        0x08001c9a:    4976        vI      LDR      r1,[pc,#472] ; [0x8001e74] = 0x200004d4
        0x08001c9c:    7809        .x      LDRB     r1,[r1,#0]
        0x08001c9e:    eb001041    ..A.    ADD      r0,r0,r1,LSL #5
        0x08001ca2:    7c45        E|      LDRB     r5,[r0,#0x11]
;;;71     #ifdef _SIMU
;;;72     	buttons_flag_set = long_press_start_Msk;
        0x08001ca4:    2001        .       MOVS     r0,#1
        0x08001ca6:    4974        tI      LDR      r1,[pc,#464] ; [0x8001e78] = 0x200005dc
        0x08001ca8:    6008        .`      STR      r0,[r1,#0]
;;;73     #endif	
;;;74     	switch(buttons_flag_set) {
        0x08001caa:    4608        .F      MOV      r0,r1
        0x08001cac:    6800        .h      LDR      r0,[r0,#0]
        0x08001cae:    2808        .(      CMP      r0,#8
        0x08001cb0:    d077        w.      BEQ      0x8001da2 ; do_fsm_menu + 270
        0x08001cb2:    dc06        ..      BGT      0x8001cc2 ; do_fsm_menu + 46
        0x08001cb4:    2801        .(      CMP      r0,#1
        0x08001cb6:    d07f        ..      BEQ      0x8001db8 ; do_fsm_menu + 292
        0x08001cb8:    2802        .(      CMP      r0,#2
        0x08001cba:    d070        p.      BEQ      0x8001d9e ; do_fsm_menu + 266
        0x08001cbc:    2804        .(      CMP      r0,#4
        0x08001cbe:    d110        ..      BNE      0x8001ce2 ; do_fsm_menu + 78
        0x08001cc0:    e01a        ..      B        0x8001cf8 ; do_fsm_menu + 100
        0x08001cc2:    2811        .(      CMP      r0,#0x11
        0x08001cc4:    d077        w.      BEQ      0x8001db6 ; do_fsm_menu + 290
        0x08001cc6:    2840        @(      CMP      r0,#0x40
        0x08001cc8:    d00c        ..      BEQ      0x8001ce4 ; do_fsm_menu + 80
        0x08001cca:    f5b06f80    ...o    CMP      r0,#0x400
        0x08001cce:    d1f6        ..      BNE      0x8001cbe ; do_fsm_menu + 42
;;;75     	case single_click_Msk3: {
;;;76     		feed_direction = feed_direction == feed_direction_left ? feed_direction_right : feed_direction_left;
        0x08001cd0:    486a        jH      LDR      r0,[pc,#424] ; [0x8001e7c] = 0x200000a1
        0x08001cd2:    7800        .x      LDRB     r0,[r0,#0]
        0x08001cd4:    f0800001    ....    EOR      r0,r0,#1
        0x08001cd8:    4968        hI      LDR      r1,[pc,#416] ; [0x8001e7c] = 0x200000a1
        0x08001cda:    7008        .p      STRB     r0,[r1,#0]
;;;77     		menu_changed = 1;
        0x08001cdc:    2001        .       MOVS     r0,#1
        0x08001cde:    4968        hI      LDR      r1,[pc,#416] ; [0x8001e80] = 0x200000a4
        0x08001ce0:    6008        .`      STR      r0,[r1,#0]
;;;78     		break;
        0x08001ce2:    e0c3        ..      B        0x8001e6c ; do_fsm_menu + 472
;;;79     	}
;;;80     	case single_click_Msk2: {
;;;81     		feed_direction = feed_direction == feed_direction_left ? feed_direction_right : feed_direction_left;
        0x08001ce4:    4865        eH      LDR      r0,[pc,#404] ; [0x8001e7c] = 0x200000a1
        0x08001ce6:    7800        .x      LDRB     r0,[r0,#0]
        0x08001ce8:    f0800001    ....    EOR      r0,r0,#1
        0x08001cec:    4963        cI      LDR      r1,[pc,#396] ; [0x8001e7c] = 0x200000a1
        0x08001cee:    7008        .p      STRB     r0,[r1,#0]
;;;82     		menu_changed = 1;
        0x08001cf0:    2001        .       MOVS     r0,#1
        0x08001cf2:    4963        cI      LDR      r1,[pc,#396] ; [0x8001e80] = 0x200000a4
        0x08001cf4:    6008        .`      STR      r0,[r1,#0]
;;;83     		break;
        0x08001cf6:    e0b9        ..      B        0x8001e6c ; do_fsm_menu + 472
;;;84     	}
;;;85     	case single_click_Msk: {
;;;86     		if(z_axis.end_pos != 0) {
        0x08001cf8:    4862        bH      LDR      r0,[pc,#392] ; [0x8001e84] = 0x200005e0
        0x08001cfa:    6840        @h      LDR      r0,[r0,#4]
        0x08001cfc:    b1e0        ..      CBZ      r0,0x8001d38 ; do_fsm_menu + 164
;;;87     			// first pass of thread cut was complete, so just use single click
;;;88     			//	to switch between modes to process all other cuts
;;;89     
;;;90     //			z_move(feed_direction, z_axis.end_pos, s->main_feed_direction == feed_direction ? true : false, true);
;;;91     			if(demo)
        0x08001cfe:    4862        bH      LDR      r0,[pc,#392] ; [0x8001e88] = 0x20000041
        0x08001d00:    7800        .x      LDRB     r0,[r0,#0]
        0x08001d02:    b140        @.      CBZ      r0,0x8001d16 ; do_fsm_menu + 130
;;;92     				z_move(feed_direction, z_axis.end_pos, false, true); //test case, always async
        0x08001d04:    485f        _H      LDR      r0,[pc,#380] ; [0x8001e84] = 0x200005e0
        0x08001d06:    2301        .#      MOVS     r3,#1
        0x08001d08:    2200        ."      MOVS     r2,#0
        0x08001d0a:    6841        Ah      LDR      r1,[r0,#4]
        0x08001d0c:    485b        [H      LDR      r0,[pc,#364] ; [0x8001e7c] = 0x200000a1
        0x08001d0e:    7800        .x      LDRB     r0,[r0,#0]
        0x08001d10:    f000fd5a    ..Z.    BL       z_move ; 0x80027c8
        0x08001d14:    e040        @.      B        0x8001d98 ; do_fsm_menu + 260
;;;93     			else
;;;94     				z_move(feed_direction, z_axis.end_pos, s->main_feed_direction == feed_direction ? true : false, true);
        0x08001d16:    7c60        `|      LDRB     r0,[r4,#0x11]
        0x08001d18:    4b58        XK      LDR      r3,[pc,#352] ; [0x8001e7c] = 0x200000a1
        0x08001d1a:    781b        .x      LDRB     r3,[r3,#0]
        0x08001d1c:    4298        .B      CMP      r0,r3
        0x08001d1e:    d101        ..      BNE      0x8001d24 ; do_fsm_menu + 144
        0x08001d20:    2001        .       MOVS     r0,#1
        0x08001d22:    e000        ..      B        0x8001d26 ; do_fsm_menu + 146
        0x08001d24:    2000        .       MOVS     r0,#0
        0x08001d26:    4602        .F      MOV      r2,r0
        0x08001d28:    4856        VH      LDR      r0,[pc,#344] ; [0x8001e84] = 0x200005e0
        0x08001d2a:    2301        .#      MOVS     r3,#1
        0x08001d2c:    6841        Ah      LDR      r1,[r0,#4]
        0x08001d2e:    4853        SH      LDR      r0,[pc,#332] ; [0x8001e7c] = 0x200000a1
        0x08001d30:    7800        .x      LDRB     r0,[r0,#0]
        0x08001d32:    f000fd49    ..I.    BL       z_move ; 0x80027c8
        0x08001d36:    e02f        /.      B        0x8001d98 ; do_fsm_menu + 260
;;;95     //			z_move(feed_direction, 400*2, false, true);
;;;96     		} else { // controller in initial state, scroll menu
;;;97     			s->function = do_fsm_menu_lps;
        0x08001d38:    4854        TH      LDR      r0,[pc,#336] ; [0x8001e8c] = 0x8001ea5
        0x08001d3a:    6020         `      STR      r0,[r4,#0]
;;;98     			for (int a = Menu_Step+1; a<Menu_size; a++) {
        0x08001d3c:    494d        MI      LDR      r1,[pc,#308] ; [0x8001e74] = 0x200004d4
        0x08001d3e:    7809        .x      LDRB     r1,[r1,#0]
        0x08001d40:    1c48        H.      ADDS     r0,r1,#1
        0x08001d42:    e00c        ..      B        0x8001d5e ; do_fsm_menu + 202
;;;99     				if(Thread_Info[a].level == level) {
        0x08001d44:    494a        JI      LDR      r1,[pc,#296] ; [0x8001e70] = 0x200000b4
        0x08001d46:    eb011140    ..@.    ADD      r1,r1,r0,LSL #5
        0x08001d4a:    7c49        I|      LDRB     r1,[r1,#0x11]
        0x08001d4c:    42a9        .B      CMP      r1,r5
        0x08001d4e:    d105        ..      BNE      0x8001d5c ; do_fsm_menu + 200
;;;100    					Menu_Step = a;
        0x08001d50:    4a48        HJ      LDR      r2,[pc,#288] ; [0x8001e74] = 0x200004d4
        0x08001d52:    7010        .p      STRB     r0,[r2,#0]
;;;101    					menu_changed = 1;
        0x08001d54:    2101        .!      MOVS     r1,#1
        0x08001d56:    4a4a        JJ      LDR      r2,[pc,#296] ; [0x8001e80] = 0x200000a4
        0x08001d58:    6011        .`      STR      r1,[r2,#0]
;;;102    					break;
        0x08001d5a:    e004        ..      B        0x8001d66 ; do_fsm_menu + 210
        0x08001d5c:    1c40        @.      ADDS     r0,r0,#1
        0x08001d5e:    494c        LI      LDR      r1,[pc,#304] ; [0x8001e90] = 0x80028da
        0x08001d60:    7809        .x      LDRB     r1,[r1,#0]
        0x08001d62:    4288        .B      CMP      r0,r1
        0x08001d64:    dbee        ..      BLT      0x8001d44 ; do_fsm_menu + 176
        0x08001d66:    bf00        ..      NOP      
;;;103    				}
;;;104    			}
;;;105    			if(menu_changed != 1) {
        0x08001d68:    4845        EH      LDR      r0,[pc,#276] ; [0x8001e80] = 0x200000a4
        0x08001d6a:    6800        .h      LDR      r0,[r0,#0]
        0x08001d6c:    2801        .(      CMP      r0,#1
        0x08001d6e:    d013        ..      BEQ      0x8001d98 ; do_fsm_menu + 260
;;;106    				for (int a = 0; a<Menu_Step; a++) {
        0x08001d70:    2000        .       MOVS     r0,#0
        0x08001d72:    e00c        ..      B        0x8001d8e ; do_fsm_menu + 250
;;;107    					if(Thread_Info[a].level == level) {
        0x08001d74:    493e        >I      LDR      r1,[pc,#248] ; [0x8001e70] = 0x200000b4
        0x08001d76:    eb011140    ..@.    ADD      r1,r1,r0,LSL #5
        0x08001d7a:    7c49        I|      LDRB     r1,[r1,#0x11]
        0x08001d7c:    42a9        .B      CMP      r1,r5
        0x08001d7e:    d105        ..      BNE      0x8001d8c ; do_fsm_menu + 248
;;;108    						Menu_Step = a;
        0x08001d80:    4a3c        <J      LDR      r2,[pc,#240] ; [0x8001e74] = 0x200004d4
        0x08001d82:    7010        .p      STRB     r0,[r2,#0]
;;;109    						menu_changed = 1;
        0x08001d84:    2101        .!      MOVS     r1,#1
        0x08001d86:    4a3e        >J      LDR      r2,[pc,#248] ; [0x8001e80] = 0x200000a4
        0x08001d88:    6011        .`      STR      r1,[r2,#0]
;;;110    						break;
        0x08001d8a:    e004        ..      B        0x8001d96 ; do_fsm_menu + 258
        0x08001d8c:    1c40        @.      ADDS     r0,r0,#1
        0x08001d8e:    4939        9I      LDR      r1,[pc,#228] ; [0x8001e74] = 0x200004d4
        0x08001d90:    7809        .x      LDRB     r1,[r1,#0]
        0x08001d92:    4288        .B      CMP      r0,r1
        0x08001d94:    dbee        ..      BLT      0x8001d74 ; do_fsm_menu + 224
        0x08001d96:    bf00        ..      NOP      
;;;111    					}
;;;112    				}
;;;113    			}
;;;114    		}
;;;115    		break;
        0x08001d98:    e068        h.      B        0x8001e6c ; do_fsm_menu + 472
        0x08001d9a:    e002        ..      B        0x8001da2 ; do_fsm_menu + 270
        0x08001d9c:    e00c        ..      B        0x8001db8 ; do_fsm_menu + 292
        0x08001d9e:    e05e        ^.      B        0x8001e5e ; do_fsm_menu + 458
        0x08001da0:    e009        ..      B        0x8001db6 ; do_fsm_menu + 290
;;;116    	}
;;;117    	case double_click_Msk: {
;;;118    		feed_direction = feed_direction == feed_direction_left ? feed_direction_right : feed_direction_left;
        0x08001da2:    4836        6H      LDR      r0,[pc,#216] ; [0x8001e7c] = 0x200000a1
        0x08001da4:    7800        .x      LDRB     r0,[r0,#0]
        0x08001da6:    f0800001    ....    EOR      r0,r0,#1
        0x08001daa:    4934        4I      LDR      r1,[pc,#208] ; [0x8001e7c] = 0x200000a1
        0x08001dac:    7008        .p      STRB     r0,[r1,#0]
;;;119    		menu_changed = 1;
        0x08001dae:    2001        .       MOVS     r0,#1
        0x08001db0:    4933        3I      LDR      r1,[pc,#204] ; [0x8001e80] = 0x200000a4
        0x08001db2:    6008        .`      STR      r0,[r1,#0]
;;;120    		break;
        0x08001db4:    e05a        Z.      B        0x8001e6c ; do_fsm_menu + 472
;;;121    	}
;;;122    	case (long_press_start_Msk | long_press_start_Msk2): { // two buttons long pressed same time
;;;123    		// todo check if it work
;;;124    		break;
        0x08001db6:    e059        Y.      B        0x8001e6c ; do_fsm_menu + 472
;;;125    	}
;;;126    	case long_press_start_Msk: {
;;;127    		if(s->function == do_fsm_menu_lps){
        0x08001db8:    4934        4I      LDR      r1,[pc,#208] ; [0x8001e8c] = 0x8001ea5
        0x08001dba:    6820         h      LDR      r0,[r4,#0]
        0x08001dbc:    4288        .B      CMP      r0,r1
        0x08001dbe:    d14d        M.      BNE      0x8001e5c ; do_fsm_menu + 456
;;;128    			if(Thread_Info[Menu_Step].Q824 != 0) { // long press detected, start new thread from current position
        0x08001dc0:    482b        +H      LDR      r0,[pc,#172] ; [0x8001e70] = 0x200000b4
        0x08001dc2:    492c        ,I      LDR      r1,[pc,#176] ; [0x8001e74] = 0x200004d4
        0x08001dc4:    7809        .x      LDRB     r1,[r1,#0]
        0x08001dc6:    eb001041    ..A.    ADD      r0,r0,r1,LSL #5
        0x08001dca:    6800        .h      LDR      r0,[r0,#0]
        0x08001dcc:    b360        `.      CBZ      r0,0x8001e28 ; do_fsm_menu + 404
;;;129    
;;;130    				z_axis.Q824set = Thread_Info[Menu_Step].Q824;
        0x08001dce:    4828        (H      LDR      r0,[pc,#160] ; [0x8001e70] = 0x200000b4
        0x08001dd0:    4928        (I      LDR      r1,[pc,#160] ; [0x8001e74] = 0x200004d4
        0x08001dd2:    7809        .x      LDRB     r1,[r1,#0]
        0x08001dd4:    eb001041    ..A.    ADD      r0,r0,r1,LSL #5
        0x08001dd8:    6800        .h      LDR      r0,[r0,#0]
        0x08001dda:    492a        *I      LDR      r1,[pc,#168] ; [0x8001e84] = 0x200005e0
        0x08001ddc:    60c8        .`      STR      r0,[r1,#0xc]
;;;131    				const uint64_t upl = (uint64_t)3600 << 48; //calculate some constants for prolong mode
        0x08001dde:    bf00        ..      NOP      
;;;132    				z_axis.prolong_addSteps = upl / (fixedptud)z_axis.Q824set;
        0x08001de0:    4608        .F      MOV      r0,r1
        0x08001de2:    68c6        .h      LDR      r6,[r0,#0xc]
        0x08001de4:    4632        2F      MOV      r2,r6
        0x08001de6:    2300        .#      MOVS     r3,#0
        0x08001de8:    4618        .F      MOV      r0,r3
        0x08001dea:    f04f6161    O.aa    MOV      r1,#0xe100000
        0x08001dee:    f7fef999    ....    BL       __aeabi_uldivmod ; 0x8000124
        0x08001df2:    4a24        $J      LDR      r2,[pc,#144] ; [0x8001e84] = 0x200005e0
        0x08001df4:    e9c20106    ....    STRD     r0,r1,[r2,#0x18]
;;;133    				// 200*step_divider*z_feed_screw(mm)*len(mm) = desired length in steps, in my case its 200*2*1*x
;;;134    
;;;135    				
;;;136    				MOTOR_X_Enable();
        0x08001df8:    f2402002    @..     MOV      r0,#0x202
        0x08001dfc:    4925        %I      LDR      r1,[pc,#148] ; [0x8001e94] = 0x40010810
        0x08001dfe:    6008        .`      STR      r0,[r1,#0]
;;;137    				MOTOR_Z_Enable(); // time to wakeup motor from sleep is quite high(1.7ms), so enable it as soon as possible
        0x08001e00:    4925        %I      LDR      r1,[pc,#148] ; [0x8001e98] = 0x40010c10
        0x08001e02:    6008        .`      STR      r0,[r1,#0]
;;;138    //				LL_mDelay(2);
;;;139    				if(demo){
        0x08001e04:    4820         H      LDR      r0,[pc,#128] ; [0x8001e88] = 0x20000041
        0x08001e06:    7800        .x      LDRB     r0,[r0,#0]
        0x08001e08:    b130        0.      CBZ      r0,0x8001e18 ; do_fsm_menu + 388
;;;140    					G01(steps_x,steps_z,0);
        0x08001e0a:    2200        ."      MOVS     r2,#0
        0x08001e0c:    f44f7196    O..q    MOV      r1,#0x12c
        0x08001e10:    2001        .       MOVS     r0,#1
        0x08001e12:    f7fefa47    ..G.    BL       G01 ; 0x80002a4
        0x08001e16:    e006        ..      B        0x8001e26 ; do_fsm_menu + 402
;;;141    //					z_move(feed_direction, steps, false, true); //test case, move async 10mm
;;;142    //					z_move(feed_direction, 31, false, true); //test case, move async 10mm
;;;143    				}
;;;144    				else
;;;145    					z_move(feed_direction, 0, true, true);
        0x08001e18:    2301        .#      MOVS     r3,#1
        0x08001e1a:    461a        .F      MOV      r2,r3
        0x08001e1c:    2100        .!      MOVS     r1,#0
        0x08001e1e:    4817        .H      LDR      r0,[pc,#92] ; [0x8001e7c] = 0x200000a1
        0x08001e20:    7800        .x      LDRB     r0,[r0,#0]
        0x08001e22:    f000fcd1    ....    BL       z_move ; 0x80027c8
;;;146    
;;;147    				//do_fsm_move_start
;;;148    			} else { // goto submenu
        0x08001e26:    e019        ..      B        0x8001e5c ; do_fsm_menu + 456
;;;149    				for (int a = 0; a<Menu_size; a++) {
        0x08001e28:    2000        .       MOVS     r0,#0
        0x08001e2a:    e012        ..      B        0x8001e52 ; do_fsm_menu + 446
;;;150    					if(Thread_Info[a].level == Thread_Info[Menu_Step].submenu) {
        0x08001e2c:    4910        .I      LDR      r1,[pc,#64] ; [0x8001e70] = 0x200000b4
        0x08001e2e:    eb011140    ..@.    ADD      r1,r1,r0,LSL #5
        0x08001e32:    7c49        I|      LDRB     r1,[r1,#0x11]
        0x08001e34:    4a0e        .J      LDR      r2,[pc,#56] ; [0x8001e70] = 0x200000b4
        0x08001e36:    4b0f        .K      LDR      r3,[pc,#60] ; [0x8001e74] = 0x200004d4
        0x08001e38:    781b        .x      LDRB     r3,[r3,#0]
        0x08001e3a:    eb021243    ..C.    ADD      r2,r2,r3,LSL #5
        0x08001e3e:    7912        .y      LDRB     r2,[r2,#4]
        0x08001e40:    4291        .B      CMP      r1,r2
        0x08001e42:    d105        ..      BNE      0x8001e50 ; do_fsm_menu + 444
;;;151    						Menu_Step = a;
        0x08001e44:    4a0b        .J      LDR      r2,[pc,#44] ; [0x8001e74] = 0x200004d4
        0x08001e46:    7010        .p      STRB     r0,[r2,#0]
;;;152    						menu_changed = 1;
        0x08001e48:    2101        .!      MOVS     r1,#1
        0x08001e4a:    4a0d        .J      LDR      r2,[pc,#52] ; [0x8001e80] = 0x200000a4
        0x08001e4c:    6011        .`      STR      r1,[r2,#0]
;;;153    						break;
        0x08001e4e:    e004        ..      B        0x8001e5a ; do_fsm_menu + 454
        0x08001e50:    1c40        @.      ADDS     r0,r0,#1
        0x08001e52:    490f        .I      LDR      r1,[pc,#60] ; [0x8001e90] = 0x80028da
        0x08001e54:    7809        .x      LDRB     r1,[r1,#0]
        0x08001e56:    4288        .B      CMP      r0,r1
        0x08001e58:    dbe8        ..      BLT      0x8001e2c ; do_fsm_menu + 408
        0x08001e5a:    bf00        ..      NOP      
;;;154    					}
;;;155    				}
;;;156    			}
;;;157    		} 
;;;158    /* todo prolong
;;;159    		else if(s->function == do_fsm_main_cut_back){
;;;160    			s->function = do_fsm_main_cut_back_prolong; // go to 48 mode to add threads until long_press end
;;;161    		}
;;;162    */
;;;163    		break;
        0x08001e5c:    e006        ..      B        0x8001e6c ; do_fsm_menu + 472
;;;164    	}
;;;165    	case long_press_end_Msk: {
;;;166    		if(s->function == do_fsm_move)
        0x08001e5e:    490f        .I      LDR      r1,[pc,#60] ; [0x8001e9c] = 0x8001ea9
        0x08001e60:    6820         h      LDR      r0,[r4,#0]
        0x08001e62:    4288        .B      CMP      r0,r1
        0x08001e64:    d101        ..      BNE      0x8001e6a ; do_fsm_menu + 470
;;;167    			s->function = do_long_press_end_callback;
        0x08001e66:    480e        .H      LDR      r0,[pc,#56] ; [0x8001ea0] = 0x8002199
        0x08001e68:    6020         `      STR      r0,[r4,#0]
;;;168    		break;
        0x08001e6a:    bf00        ..      NOP      
        0x08001e6c:    bf00        ..      NOP      
;;;169    	}
;;;170    	}
;;;171    }
        0x08001e6e:    bd70        p.      POP      {r4-r6,pc}
    $d
        0x08001e70:    200000b4    ...     DCD    536871092
        0x08001e74:    200004d4    ...     DCD    536872148
        0x08001e78:    200005dc    ...     DCD    536872412
        0x08001e7c:    200000a1    ...     DCD    536871073
        0x08001e80:    200000a4    ...     DCD    536871076
        0x08001e84:    200005e0    ...     DCD    536872416
        0x08001e88:    20000041    A..     DCD    536870977
        0x08001e8c:    08001ea5    ....    DCD    134225573
        0x08001e90:    080028da    .(..    DCD    134228186
        0x08001e94:    40010810    ...@    DCD    1073809424
        0x08001e98:    40010c10    ...@    DCD    1073810448
        0x08001e9c:    08001ea9    ....    DCD    134225577
        0x08001ea0:    08002199    .!..    DCD    134226329
    $t
    i.do_fsm_menu_lps
    do_fsm_menu_lps
;;;172    
;;;173    void do_fsm_menu_lps(state_t* s)
;;;174    {
;;;175    }
        0x08001ea4:    4770        pG      BX       lr
        0x08001ea6:    0000        ..      MOVS     r0,r0
    i.do_fsm_move
    do_fsm_move
;;;176    
;;;177    /*
;;;178    void do_fsm_main_cut_back_prolong(state_t* s)   // reverse movement: main part with prolong activated. todo split it with 46 mode?
;;;179    {
;;;180    	MOTOR_Z_SetPulse();
;;;181    	--z_axis.current_pos;
;;;182    	if(z_axis.current_pos == z_axis.ramp_step) { // we reach end of main path and have long_pressed key, so just add additional thread full turn to shift initial start point
;;;183    		z_axis.prolong_fract += z_axis.prolong_addSteps; // fract part from prev step
;;;184    		uint32_t prolong_fixpart = z_axis.prolong_fract >> 24;
;;;185    		z_axis.current_pos += prolong_fixpart; // add fixed part
;;;186    		z_axis.end_pos += prolong_fixpart;
;;;187    		z_axis.prolong_fract &= FIXEDPT_FMASK; // leave fract part to accumulate with next dividing cycle
;;;188    		// when long_press end, get back to 46 mode to proceed
;;;189    	}
;;;190    }
;;;191    */
;;;192    
;;;193    void do_fsm_wait_sclick(state_t* s)
;;;194    {
;;;195    }
;;;196    
;;;197    void z_move(uint32_t direction, uint32_t length, bool sync, bool autostart){
;;;198    	MOTOR_X_Enable();
;;;199    	MOTOR_Z_Enable(); // time to wakeup motor from sleep is quite high(1.7ms), so enable it as soon as possible
;;;200    
;;;201    	if(direction == feed_direction_left) {
;;;202    		feed_direction = feed_direction_left;
;;;203    		MOTOR_Z_Reverse();
;;;204    		MOTOR_X_Reverse();
;;;205    	} else {
;;;206    		feed_direction = feed_direction_right;
;;;207    		MOTOR_Z_Forward();
;;;208    		MOTOR_X_Forward();
;;;209    	}
;;;210    	LL_mDelay(2);
;;;211    
;;;212    	state.sync = sync;
;;;213    	if(sync){
;;;214    		state.main_feed_direction = feed_direction;
;;;215    	}
;;;216    
;;;217    	z_axis.current_pos = 0;
;;;218    	z_axis.end_pos = length;
;;;219    	if(z_axis.end_pos > 0){
;;;220    		z_axis.end_pos &= 0xFFFFFFFF - step_divider + 1;
;;;221    //		z_axis.end_pos |= step_divider; // to make sure that we'll not stop between full steps
;;;222    
;;;223    	} else {
;;;224    		state.sync = true;
;;;225    	}
;;;226    
;;;227    	do_fsm_move_start(&state);
;;;228    }
;;;229    
;;;230    //---------------------------------------------------------------------------------------------
;;;231    void do_fsm_move_start(state_t* s){
;;;232    	if(s->sync && !s->f_tacho){
;;;233    		s->function = do_fsm_move_start;// return here from interrupt when TACHO event
;;;234    		// enable and wait tacho event on spindle encoder
;;;235    		LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH3);	// configure TACHO events on channel 3
;;;236    		return;
;;;237    	}
;;;238    
;;;239    	if(s->f_tacho || !s->sync) { // if tacho event or we going to start back feed to initial position with async clock
;;;240    //		LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_DISABLED);
;;;241    		if(s->sync && s->f_tacho) {
;;;242    			s->function = do_fsm_ramp_up;
;;;243    			s->async_z = 0;
;;;244    			s->syncbase = TIM4; 									// sync with spindle
;;;245    
;;;246    			LL_TIM_SetTriggerInput(TIM3, LL_TIM_TS_ITR3); 				//trigger by spindle encoder timer TIM4(sync mode)
;;;247    
;;;248    // disable TACHO events, we dont need'em until next start			
;;;249    			LL_TIM_CC_DisableChannel(TIM4, LL_TIM_CHANNEL_CH3);	// configure TACHO events on channel 3
;;;250    			enable_encoder_ticks(); 									// enable thread specific interrupt controlled by Q824set
;;;251    		} else {
;;;252    			s->function = do_fsm_ramp_up_async;
;;;253    //			s->async_z = 1;
;;;254    			s->syncbase = TIM2; 									// sync with internal clock source(virtual spindle, "async" to main spindle)
;;;255    
;;;256    //			s->set_pulse_function(s);
;;;257    //			dxdz_callback(s);
;;;258    //			LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_DISABLED);
;;;259    			TIM3->ARR = min_pulse*5;
;;;260    			LL_TIM_GenerateEvent_UPDATE(TIM3);
;;;261    //			LL_TIM_EnableCounter(TIM3);
;;;262    //			LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_TRIGGER);
;;;263    //			LL_GPIO_TogglePin(MOTOR_Z_ENABLE_GPIO_Port, MOTOR_Z_ENABLE_Pin);
;;;264    
;;;265    //			TIM3->SR = 0;
;;;266    //			LL_TIM_EnableCounter(TIM3);
;;;267    //			LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_DISABLED);
;;;268    //			LL_TIM_SetTriggerInput(TIM3, LL_TIM_TS_ITR1); 				//trigger by TIM2(async mode)
;;;269    
;;;270    			
;;;271    //			LL_TIM_EnableCounter(TIM2); /* Enable counter */
;;;272    
;;;273    //			MOTOR_Z_AllowPulse();
;;;274    //			MOTOR_X_AllowPulse();
;;;275    //			LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_TRIGGER);
;;;276    
;;;277    			TIM2->ARR = 10;
;;;278    //			LL_TIM_GenerateEvent_UPDATE(TIM2); // start first step on motor
;;;279    			LL_TIM_EnableCounter(TIM2);
;;;280    
;;;281    
;;;282    //			TIM2->ARR = 1;
;;;283    //			LL_TIM_EnableCounter(TIM2);
;;;284    
;;;285    //		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH1 | LL_TIM_CHANNEL_CH3);
;;;286    //			TIM3->SR = 0;
;;;287    //			LL_TIM_EnableCounter(TIM3);
;;;288    //			LL_TIM_GenerateEvent_TRIG(TIM2); // start first step on motor
;;;289    	//		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH3);
;;;290    //			s->syncbase->ARR = 1; 					// start stepper motor ramp up procedure immediately after tacho event
;;;291    			s->async_z = 1;
;;;292    //			TIM2->CNT = 0;
;;;293    //			LL_TIM_GenerateEvent_UPDATE(TIM2); /* Force update generation */
;;;294    
;;;295    		}
;;;296    
;;;297    //		LL_mDelay(20);
;;;298    	}	
;;;299    }
;;;300    
;;;301    void do_fsm_ramp_up(state_t* s)
;;;302    {
;;;303    	z_axis.current_pos++;
;;;304    	if(z_axis_ramp_up2(s)) {
;;;305    		s->function = do_fsm_move;
;;;306    	}
;;;307    }
;;;308    
;;;309    void do_fsm_move(state_t* s)
;;;310    {
        0x08001ea8:    b510        ..      PUSH     {r4,lr}
        0x08001eaa:    4604        .F      MOV      r4,r0
;;;311    //	if(s->spindle_dir)	z_axis.current_pos++;
;;;312    //	else z_axis.current_pos--;
;;;313    	if( ++z_axis.current_pos <= ( z_axis.end_pos - z_axis.ramp_step ) ) { // when end_pos is zero, end_pos-ramp_step= 4294967296 - ramp_step, so it will be much more lager then current_pos
        0x08001eac:    4811        .H      LDR      r0,[pc,#68] ; [0x8001ef4] = 0x200005e0
        0x08001eae:    6840        @h      LDR      r0,[r0,#4]
        0x08001eb0:    4910        .I      LDR      r1,[pc,#64] ; [0x8001ef4] = 0x200005e0
        0x08001eb2:    f8911028    ..(.    LDRB     r1,[r1,#0x28]
        0x08001eb6:    1a41        A.      SUBS     r1,r0,r1
        0x08001eb8:    480e        .H      LDR      r0,[pc,#56] ; [0x8001ef4] = 0x200005e0
        0x08001eba:    6800        .h      LDR      r0,[r0,#0]
        0x08001ebc:    1c40        @.      ADDS     r0,r0,#1
        0x08001ebe:    4a0d        .J      LDR      r2,[pc,#52] ; [0x8001ef4] = 0x200005e0
        0x08001ec0:    6010        .`      STR      r0,[r2,#0]
        0x08001ec2:    4281        .B      CMP      r1,r0
        0x08001ec4:    d303        ..      BCC      0x8001ece ; do_fsm_move + 38
;;;314    		z_axis_move2(s);
        0x08001ec6:    4620         F      MOV      r0,r4
        0x08001ec8:    f000fc12    ....    BL       z_axis_move2 ; 0x80026f0
        0x08001ecc:    e011        ..      B        0x8001ef2 ; do_fsm_move + 74
;;;315    	} else {
;;;316    		if(z_axis_ramp_down2(s)) {
        0x08001ece:    4620         F      MOV      r0,r4
        0x08001ed0:    f000fc28    ..(.    BL       z_axis_ramp_down2 ; 0x8002724
        0x08001ed4:    b158        X.      CBZ      r0,0x8001eee ; do_fsm_move + 70
;;;317    			if(z_axis.end_pos != z_axis.current_pos) {
        0x08001ed6:    4807        .H      LDR      r0,[pc,#28] ; [0x8001ef4] = 0x200005e0
        0x08001ed8:    6840        @h      LDR      r0,[r0,#4]
        0x08001eda:    4906        .I      LDR      r1,[pc,#24] ; [0x8001ef4] = 0x200005e0
        0x08001edc:    6809        .h      LDR      r1,[r1,#0]
        0x08001ede:    4288        .B      CMP      r0,r1
        0x08001ee0:    d003        ..      BEQ      0x8001eea ; do_fsm_move + 66
;;;318    				z_axis.end_pos = z_axis.current_pos;
        0x08001ee2:    4804        .H      LDR      r0,[pc,#16] ; [0x8001ef4] = 0x200005e0
        0x08001ee4:    6800        .h      LDR      r0,[r0,#0]
        0x08001ee6:    4903        .I      LDR      r1,[pc,#12] ; [0x8001ef4] = 0x200005e0
        0x08001ee8:    6048        H`      STR      r0,[r1,#4]
;;;319    			}
;;;320    			s->function = do_fsm_move_end;
        0x08001eea:    4803        .H      LDR      r0,[pc,#12] ; [0x8001ef8] = 0x8001f31
        0x08001eec:    6020         `      STR      r0,[r4,#0]
;;;321    		}
;;;322    		s->function = do_fsm_ramp_down;
        0x08001eee:    4803        .H      LDR      r0,[pc,#12] ; [0x8001efc] = 0x8002079
        0x08001ef0:    6020         `      STR      r0,[r4,#0]
;;;323    	}
;;;324    }
        0x08001ef2:    bd10        ..      POP      {r4,pc}
    $d
        0x08001ef4:    200005e0    ...     DCD    536872416
        0x08001ef8:    08001f31    1...    DCD    134225713
        0x08001efc:    08002079    y ..    DCD    134226041
    $t
    i.do_fsm_move_async
    do_fsm_move_async
;;;325    
;;;326    void do_long_press_end_callback(state_t* s)          // direct movement: first pass, thread recording: long press release callback
;;;327    {
;;;328    	// для 1/2 микрошага нужно что бы общее количество шагов в цикле резьбы было кратно 2,(для 1/4 кратно 4 и тп).
;;;329    	// это нужно для того что бы в конце шаговый мотор остановился на одном из двухсот устойчивых шагов,
;;;330    	// не перескакивая на соседние шаги при потере питания.
;;;331    	if(z_axis.end_pos == 0) //s->sync?
;;;332    		z_axis.end_pos = ( z_axis.ramp_step + z_axis.current_pos ) | (step_divider - 1);
;;;333    	s->function = do_fsm_move;
;;;334    	do_fsm_move(s);
;;;335    }
;;;336    
;;;337    
;;;338    void do_fsm_ramp_down(state_t* s)
;;;339    {
;;;340    //	if(s->spindle_dir)	
;;;341    		z_axis.current_pos++;
;;;342    //	else 
;;;343    //		z_axis.current_pos--;
;;;344    	if(z_axis_ramp_down2(s)) {
;;;345    		if(z_axis.end_pos != z_axis.current_pos) {
;;;346    			z_axis.end_pos = z_axis.current_pos;
;;;347    		}
;;;348    		s->function = do_fsm_move_end;
;;;349    	}
;;;350    }
;;;351    
;;;352    void do_fsm_move_end(state_t* s){
;;;353    	s->async_z = 0;
;;;354      LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_DISABLED);
;;;355    
;;;356    	//	MOTOR_Z_BlockPulse();
;;;357    	if (s->sync) {
;;;358    		disable_encoder_ticks(); 										//reset interrupt for encoder ticks, only tacho todo async mode not compatible now
;;;359    		LL_TIM_CC_DisableChannel(TIM4, LL_TIM_CHANNEL_CH3);	// configure TACHO events on channel 3
;;;360    	} else {
;;;361    		LL_TIM_DisableCounter(TIM2); // pause async timer
;;;362    //		LL_TIM_DisableIT_UPDATE(TIM2);
;;;363    	}
;;;364    	s->syncbase = 0; // reset syncbase to stop calling it from timer interrupt
;;;365    
;;;366    //	LL_GPIO_TogglePin(MOTOR_Z_ENABLE_GPIO_Port, MOTOR_Z_ENABLE_Pin); //debug
;;;367    	LL_mDelay(2);
;;;368      MOTOR_Z_Disable();
;;;369      MOTOR_X_Disable();
;;;370    //	feed_direction = feed_direction == feed_direction_left ? feed_direction_right : feed_direction_left;
;;;371    	feed_direction = !feed_direction; 					//autochange feed direction
;;;372    	menu_changed = 1; 													//update menu
;;;373    	s->function = do_fsm_wait_sclick;
;;;374    
;;;375    //	z_axis.current_pos = 0;
;;;376    }
;;;377    
;;;378    
;;;379    _Bool z_axis_ramp_up2(state_t* s)
;;;380    {
;;;381    	const fixedptu  set_with_fract = sync_ramp_profile[z_axis.ramp_step] << 24;
;;;382    	if(z_axis.Q824set > set_with_fract || z_axis.ramp_step == sync_ramp_profile_len) { 	// reach desired speed or end of ramp map
;;;383    		s->syncbase->ARR = fixedpt_toint(z_axis.Q824set) - 1; 			// update register ARR
;;;384    //		s->syncbase->EGR |= TIM_EGR_UG;
;;;385    		z_axis.fract_part = fixedpt_fracpart(z_axis.Q824set); 								// save fract part for future use on next step
;;;386    //		z_axis.end_minus_ramp_delta =
;;;387    		return true;
;;;388    	} else {
;;;389    		z_axis.ramp_step++;
;;;390    		s->syncbase->ARR = fixedpt_toint(set_with_fract) - 1; 			// update register ARR
;;;391    //		s->syncbase->EGR |= TIM_EGR_UG;
;;;392    //		z_axis.fract_part = fixedpt_fracpart( set_with_fract ); 						// save fract part for future use on next step
;;;393    	}
;;;394    	return false;
;;;395    }
;;;396    
;;;397    _Bool z_axis_ramp_down2(state_t* s)
;;;398    {
;;;399    	if (z_axis.ramp_step == 0)
;;;400    		return true;
;;;401    //	const fixedptu set_with_fract = ramp2[--z_axis.ramp_step] << 24;
;;;402    //	s->syncbase->ARR = fixedpt_toint(set_with_fract) - 1; // update register ARR
;;;403    
;;;404    	s->syncbase->ARR = sync_ramp_profile[--z_axis.ramp_step];
;;;405    	//	s->syncbase->EGR |= TIM_EGR_UG;
;;;406    //	z_axis.fract_part = fixedpt_fracpart( set_with_fract ); // save fract part for future use on next step
;;;407    	if(z_axis.ramp_step == 0)
;;;408    		return true;
;;;409    	return false;
;;;410    }
;;;411    
;;;412    void z_axis_move2(state_t* s)
;;;413    {
;;;414    	const fixedptu set_with_fract = fixedpt_add(z_axis.Q824set, z_axis.fract_part); // calculate new step delay with fract from previous step
;;;415    	s->syncbase->ARR = fixedpt_toint(set_with_fract) - 1; // update register ARR
;;;416    	s->syncbase->CNT = 0;
;;;417    	s->syncbase->EGR |= TIM_EGR_UG;
;;;418    	z_axis.fract_part = fixedpt_fracpart( set_with_fract ); // save fract part for future use on next step
;;;419    }
;;;420    
;;;421    
;;;422    
;;;423    
;;;424    
;;;425    //------------------------------------ ASYNC block -----------------------------------
;;;426    //------------------------------------ ASYNC block -----------------------------------
;;;427    //------------------------------------ ASYNC block -----------------------------------
;;;428    void do_fsm_ramp_up_async(state_t* s)
;;;429    {
;;;430    //	LL_GPIO_TogglePin(MOTOR_Z_ENABLE_GPIO_Port, MOTOR_Z_ENABLE_Pin); //debug
;;;431    //	MOTOR_Z_SetPulse();
;;;432    	z_axis.current_pos++;
;;;433    	const uint8_t z_arr = async_ramp_profile[z_axis.ramp_step++];
;;;434    	const uint16_t rs2 = z_axis.ramp_step << 1;
;;;435    	if(z_arr < slew_speed_period || rs2 >= z_axis.end_pos  ) { 	// reach desired speed
;;;436    		if( rs2 < z_axis.end_pos) {
;;;437    			s->z_period = slew_speed_period;
;;;438    			s->function = do_fsm_move_async;
;;;439    		}
;;;440    		else {
;;;441    			s->z_period = z_arr;
;;;442    			s->function = do_fsm_ramp_down_async;
;;;443    			z_axis.ramp_step--;
;;;444    		}
;;;445    	} else {
;;;446    //		z_axis.ramp_step++;
;;;447    		s->z_period = z_arr;
;;;448    	}
;;;449    }
;;;450    
;;;451    void do_fsm_move_async(state_t* s)
;;;452    {
;;;453    //	LL_GPIO_TogglePin(MOTOR_Z_ENABLE_GPIO_Port, MOTOR_Z_ENABLE_Pin); //debug
;;;454    	// todo precalculate delta: z_axis.end_pos - z_axis.ramp_step
;;;455    	uint32_t pre = z_axis.end_pos - z_axis.ramp_step - 1;
        0x08001f00:    4a09        .J      LDR      r2,[pc,#36] ; [0x8001f28] = 0x200005e0
        0x08001f02:    6852        Rh      LDR      r2,[r2,#4]
        0x08001f04:    4b08        .K      LDR      r3,[pc,#32] ; [0x8001f28] = 0x200005e0
        0x08001f06:    f8933028    ..(0    LDRB     r3,[r3,#0x28]
        0x08001f0a:    1ad2        ..      SUBS     r2,r2,r3
        0x08001f0c:    1e51        Q.      SUBS     r1,r2,#1
;;;456    	if( ++z_axis.current_pos < pre ) { // when end_pos is zero, end_pos-ramp_step= 4294967296 - ramp_step, so it will be much more lager then current_pos
        0x08001f0e:    4a06        .J      LDR      r2,[pc,#24] ; [0x8001f28] = 0x200005e0
        0x08001f10:    6812        .h      LDR      r2,[r2,#0]
        0x08001f12:    1c52        R.      ADDS     r2,r2,#1
        0x08001f14:    4b04        .K      LDR      r3,[pc,#16] ; [0x8001f28] = 0x200005e0
        0x08001f16:    601a        .`      STR      r2,[r3,#0]
        0x08001f18:    428a        .B      CMP      r2,r1
        0x08001f1a:    d202        ..      BCS      0x8001f22 ; do_fsm_move_async + 34
;;;457    		s->z_period = slew_speed_period;
        0x08001f1c:    2232        2"      MOVS     r2,#0x32
        0x08001f1e:    7302        .s      STRB     r2,[r0,#0xc]
        0x08001f20:    e001        ..      B        0x8001f26 ; do_fsm_move_async + 38
;;;458    	} else {
;;;459    		s->function = do_fsm_ramp_down_async;
        0x08001f22:    4a02        .J      LDR      r2,[pc,#8] ; [0x8001f2c] = 0x80020b1
        0x08001f24:    6002        .`      STR      r2,[r0,#0]
;;;460    	}
;;;461    }
        0x08001f26:    4770        pG      BX       lr
    $d
        0x08001f28:    200005e0    ...     DCD    536872416
        0x08001f2c:    080020b1    . ..    DCD    134226097
    $t
    i.do_fsm_move_end
    do_fsm_move_end
;;; .\..\Src\fsm.c (352)
        0x08001f30:    b510        ..      PUSH     {r4,lr}
        0x08001f32:    4604        .F      MOV      r4,r0
;;;353    	s->async_z = 0;
        0x08001f34:    2000        .       MOVS     r0,#0
        0x08001f36:    6060        ``      STR      r0,[r4,#4]
;;;354      LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_DISABLED);
        0x08001f38:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;2596     MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
        0x08001f3a:    491a        .I      LDR      r1,[pc,#104] ; [0x8001fa4] = 0x40000400
        0x08001f3c:    6889        .h      LDR      r1,[r1,#8]
        0x08001f3e:    f0210107    !...    BIC      r1,r1,#7
        0x08001f42:    4301        .C      ORRS     r1,r1,r0
        0x08001f44:    4a17        .J      LDR      r2,[pc,#92] ; [0x8001fa4] = 0x40000400
        0x08001f46:    6091        .`      STR      r1,[r2,#8]
;;;2597   }
        0x08001f48:    bf00        ..      NOP      
;;; .\..\Src\fsm.c
;;;357    	if (s->sync) {
        0x08001f4a:    7c20         |      LDRB     r0,[r4,#0x10]
        0x08001f4c:    b138        8.      CBZ      r0,0x8001f5e ; do_fsm_move_end + 46
;;;358    		disable_encoder_ticks(); 										//reset interrupt for encoder ticks, only tacho todo async mode not compatible now
        0x08001f4e:    2000        .       MOVS     r0,#0
        0x08001f50:    4915        .I      LDR      r1,[pc,#84] ; [0x8001fa8] = 0x42010180
        0x08001f52:    6008        .`      STR      r0,[r1,#0]
;;;359    		LL_TIM_CC_DisableChannel(TIM4, LL_TIM_CHANNEL_CH3);	// configure TACHO events on channel 3
        0x08001f54:    1591        ..      ASRS     r1,r2,#22
        0x08001f56:    4815        .H      LDR      r0,[pc,#84] ; [0x8001fac] = 0x40000800
        0x08001f58:    f7fefc37    ..7.    BL       LL_TIM_CC_DisableChannel ; 0x80007ca
        0x08001f5c:    e00a        ..      B        0x8001f74 ; do_fsm_move_end + 68
;;;360    	} else {
;;;361    		LL_TIM_DisableCounter(TIM2); // pause async timer
        0x08001f5e:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;1038     CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
        0x08001f60:    f04f4080    O..@    MOV      r0,#0x40000000
        0x08001f64:    6800        .h      LDR      r0,[r0,#0]
        0x08001f66:    f0200001     ...    BIC      r0,r0,#1
        0x08001f6a:    f04f4180    O..A    MOV      r1,#0x40000000
        0x08001f6e:    6008        .`      STR      r0,[r1,#0]
;;;1039   }
        0x08001f70:    bf00        ..      NOP      
        0x08001f72:    bf00        ..      NOP      
;;; .\..\Src\fsm.c
;;;364    	s->syncbase = 0; // reset syncbase to stop calling it from timer interrupt
        0x08001f74:    2000        .       MOVS     r0,#0
        0x08001f76:    6160        `a      STR      r0,[r4,#0x14]
;;;365    
;;;366    //	LL_GPIO_TogglePin(MOTOR_Z_ENABLE_GPIO_Port, MOTOR_Z_ENABLE_Pin); //debug
;;;367    	LL_mDelay(2);
        0x08001f78:    2002        .       MOVS     r0,#2
        0x08001f7a:    f7fefea1    ....    BL       LL_mDelay ; 0x8000cc0
;;;368      MOTOR_Z_Disable();
        0x08001f7e:    f2402002    @..     MOV      r0,#0x202
        0x08001f82:    490b        .I      LDR      r1,[pc,#44] ; [0x8001fb0] = 0x40010c14
        0x08001f84:    6008        .`      STR      r0,[r1,#0]
;;;369      MOTOR_X_Disable();
        0x08001f86:    490b        .I      LDR      r1,[pc,#44] ; [0x8001fb4] = 0x40010814
        0x08001f88:    6008        .`      STR      r0,[r1,#0]
;;;370    //	feed_direction = feed_direction == feed_direction_left ? feed_direction_right : feed_direction_left;
;;;371    	feed_direction = !feed_direction; 					//autochange feed direction
        0x08001f8a:    480b        .H      LDR      r0,[pc,#44] ; [0x8001fb8] = 0x200000a1
        0x08001f8c:    7800        .x      LDRB     r0,[r0,#0]
        0x08001f8e:    f0800001    ....    EOR      r0,r0,#1
        0x08001f92:    4909        .I      LDR      r1,[pc,#36] ; [0x8001fb8] = 0x200000a1
        0x08001f94:    7008        .p      STRB     r0,[r1,#0]
;;;372    	menu_changed = 1; 													//update menu
        0x08001f96:    2001        .       MOVS     r0,#1
        0x08001f98:    4908        .I      LDR      r1,[pc,#32] ; [0x8001fbc] = 0x200000a4
        0x08001f9a:    6008        .`      STR      r0,[r1,#0]
;;;373    	s->function = do_fsm_wait_sclick;
        0x08001f9c:    4808        .H      LDR      r0,[pc,#32] ; [0x8001fc0] = 0x8002195
        0x08001f9e:    6020         `      STR      r0,[r4,#0]
;;;374    
;;;375    //	z_axis.current_pos = 0;
;;;376    }
        0x08001fa0:    bd10        ..      POP      {r4,pc}
    $d
        0x08001fa2:    0000        ..      DCW    0
        0x08001fa4:    40000400    ...@    DCD    1073742848
        0x08001fa8:    42010180    ...B    DCD    1107362176
        0x08001fac:    40000800    ...@    DCD    1073743872
        0x08001fb0:    40010c14    ...@    DCD    1073810452
        0x08001fb4:    40010814    ...@    DCD    1073809428
        0x08001fb8:    200000a1    ...     DCD    536871073
        0x08001fbc:    200000a4    ...     DCD    536871076
        0x08001fc0:    08002195    .!..    DCD    134226325
    $t
    i.do_fsm_move_start
    do_fsm_move_start
;;; .\..\Src\fsm.c (231)
        0x08001fc4:    b510        ..      PUSH     {r4,lr}
        0x08001fc6:    4604        .F      MOV      r4,r0
;;;232    	if(s->sync && !s->f_tacho){
        0x08001fc8:    7c20         |      LDRB     r0,[r4,#0x10]
        0x08001fca:    b150        P.      CBZ      r0,0x8001fe2 ; do_fsm_move_start + 30
        0x08001fcc:    7ba0        .{      LDRB     r0,[r4,#0xe]
        0x08001fce:    b940        @.      CBNZ     r0,0x8001fe2 ; do_fsm_move_start + 30
;;;233    		s->function = do_fsm_move_start;// return here from interrupt when TACHO event
        0x08001fd0:    f2af000f    ....    ADR      r0,{pc}-0xb ; 0x8001fc5
        0x08001fd4:    6020         `      STR      r0,[r4,#0]
;;;234    		// enable and wait tacho event on spindle encoder
;;;235    		LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH3);	// configure TACHO events on channel 3
        0x08001fd6:    f44f7180    O..q    MOV      r1,#0x100
        0x08001fda:    4822        "H      LDR      r0,[pc,#136] ; [0x8002064] = 0x40000800
        0x08001fdc:    f7fefbf9    ....    BL       LL_TIM_CC_EnableChannel ; 0x80007d2
        0x08001fe0:    bd10        ..      POP      {r4,pc}
;;;236    		return;
;;;237    	}
;;;238    
;;;239    	if(s->f_tacho || !s->sync) { // if tacho event or we going to start back feed to initial position with async clock
        0x08001fe2:    7ba0        .{      LDRB     r0,[r4,#0xe]
        0x08001fe4:    b910        ..      CBNZ     r0,0x8001fec ; do_fsm_move_start + 40
        0x08001fe6:    7c20         |      LDRB     r0,[r4,#0x10]
        0x08001fe8:    2800        .(      CMP      r0,#0
        0x08001fea:    d138        8.      BNE      0x800205e ; do_fsm_move_start + 154
;;;240    //		LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_DISABLED);
;;;241    		if(s->sync && s->f_tacho) {
        0x08001fec:    7c20         |      LDRB     r0,[r4,#0x10]
        0x08001fee:    b1c0        ..      CBZ      r0,0x8002022 ; do_fsm_move_start + 94
        0x08001ff0:    7ba0        .{      LDRB     r0,[r4,#0xe]
        0x08001ff2:    b1b0        ..      CBZ      r0,0x8002022 ; do_fsm_move_start + 94
;;;242    			s->function = do_fsm_ramp_up;
        0x08001ff4:    481c        .H      LDR      r0,[pc,#112] ; [0x8002068] = 0x80020fd
        0x08001ff6:    6020         `      STR      r0,[r4,#0]
;;;243    			s->async_z = 0;
        0x08001ff8:    2000        .       MOVS     r0,#0
        0x08001ffa:    6060        ``      STR      r0,[r4,#4]
;;;244    			s->syncbase = TIM4; 									// sync with spindle
        0x08001ffc:    4819        .H      LDR      r0,[pc,#100] ; [0x8002064] = 0x40000800
        0x08001ffe:    6160        `a      STR      r0,[r4,#0x14]
;;;245    
;;;246    			LL_TIM_SetTriggerInput(TIM3, LL_TIM_TS_ITR3); 				//trigger by spindle encoder timer TIM4(sync mode)
        0x08002000:    2030        0       MOVS     r0,#0x30
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;2618     MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
        0x08002002:    491a        .I      LDR      r1,[pc,#104] ; [0x800206c] = 0x40000400
        0x08002004:    6889        .h      LDR      r1,[r1,#8]
        0x08002006:    f0210170    !.p.    BIC      r1,r1,#0x70
        0x0800200a:    4301        .C      ORRS     r1,r1,r0
        0x0800200c:    4a17        .J      LDR      r2,[pc,#92] ; [0x800206c] = 0x40000400
        0x0800200e:    6091        .`      STR      r1,[r2,#8]
;;;2619   }
        0x08002010:    bf00        ..      NOP      
;;; .\..\Src\fsm.c
;;;249    			LL_TIM_CC_DisableChannel(TIM4, LL_TIM_CHANNEL_CH3);	// configure TACHO events on channel 3
        0x08002012:    1591        ..      ASRS     r1,r2,#22
        0x08002014:    4813        .H      LDR      r0,[pc,#76] ; [0x8002064] = 0x40000800
        0x08002016:    f7fefbd8    ....    BL       LL_TIM_CC_DisableChannel ; 0x80007ca
;;;250    			enable_encoder_ticks(); 									// enable thread specific interrupt controlled by Q824set
        0x0800201a:    2001        .       MOVS     r0,#1
        0x0800201c:    4914        .I      LDR      r1,[pc,#80] ; [0x8002070] = 0x42010180
        0x0800201e:    6008        .`      STR      r0,[r1,#0]
        0x08002020:    e01d        ..      B        0x800205e ; do_fsm_move_start + 154
;;;251    		} else {
;;;252    			s->function = do_fsm_ramp_up_async;
        0x08002022:    4814        .H      LDR      r0,[pc,#80] ; [0x8002074] = 0x8002121
        0x08002024:    6020         `      STR      r0,[r4,#0]
;;;253    //			s->async_z = 1;
;;;254    			s->syncbase = TIM2; 									// sync with internal clock source(virtual spindle, "async" to main spindle)
        0x08002026:    f04f4080    O..@    MOV      r0,#0x40000000
        0x0800202a:    6160        `a      STR      r0,[r4,#0x14]
;;;255    
;;;256    //			s->set_pulse_function(s);
;;;257    //			dxdz_callback(s);
;;;258    //			LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_DISABLED);
;;;259    			TIM3->ARR = min_pulse*5;
        0x0800202c:    f6406029    @.)`    MOV      r0,#0xe29
        0x08002030:    490e        .I      LDR      r1,[pc,#56] ; [0x800206c] = 0x40000400
        0x08002032:    312c        ,1      ADDS     r1,r1,#0x2c
        0x08002034:    6008        .`      STR      r0,[r1,#0]
;;;260    			LL_TIM_GenerateEvent_UPDATE(TIM3);
        0x08002036:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;3712     SET_BIT(TIMx->EGR, TIM_EGR_UG);
        0x08002038:    480c        .H      LDR      r0,[pc,#48] ; [0x800206c] = 0x40000400
        0x0800203a:    6940        @i      LDR      r0,[r0,#0x14]
        0x0800203c:    f0400001    @...    ORR      r0,r0,#1
        0x08002040:    490a        .I      LDR      r1,[pc,#40] ; [0x800206c] = 0x40000400
        0x08002042:    6148        Ha      STR      r0,[r1,#0x14]
;;;3713   }
        0x08002044:    bf00        ..      NOP      
;;; .\..\Src\fsm.c
;;;277    			TIM2->ARR = 10;
        0x08002046:    200a        .       MOVS     r0,#0xa
        0x08002048:    0741        A.      LSLS     r1,r0,#29
        0x0800204a:    62c8        .b      STR      r0,[r1,#0x2c]
;;;278    //			LL_TIM_GenerateEvent_UPDATE(TIM2); // start first step on motor
;;;279    			LL_TIM_EnableCounter(TIM2);
        0x0800204c:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;1027     SET_BIT(TIMx->CR1, TIM_CR1_CEN);
        0x0800204e:    0740        @.      LSLS     r0,r0,#29
        0x08002050:    6800        .h      LDR      r0,[r0,#0]
        0x08002052:    f0400001    @...    ORR      r0,r0,#1
        0x08002056:    6008        .`      STR      r0,[r1,#0]
;;;1028   }
        0x08002058:    bf00        ..      NOP      
;;; .\..\Src\fsm.c
;;;291    			s->async_z = 1;
        0x0800205a:    2001        .       MOVS     r0,#1
        0x0800205c:    6060        ``      STR      r0,[r4,#4]
;;;292    //			TIM2->CNT = 0;
;;;293    //			LL_TIM_GenerateEvent_UPDATE(TIM2); /* Force update generation */
;;;294    
;;;295    		}
;;;296    
;;;297    //		LL_mDelay(20);
;;;298    	}	
;;;299    }
        0x0800205e:    bf00        ..      NOP      
        0x08002060:    e7be        ..      B        0x8001fe0 ; do_fsm_move_start + 28
    $d
        0x08002062:    0000        ..      DCW    0
        0x08002064:    40000800    ...@    DCD    1073743872
        0x08002068:    080020fd    . ..    DCD    134226173
        0x0800206c:    40000400    ...@    DCD    1073742848
        0x08002070:    42010180    ...B    DCD    1107362176
        0x08002074:    08002121    !!..    DCD    134226209
    $t
    i.do_fsm_ramp_down
    do_fsm_ramp_down
;;;300    
;;;301    void do_fsm_ramp_up(state_t* s)
;;;302    {
;;;303    	z_axis.current_pos++;
;;;304    	if(z_axis_ramp_up2(s)) {
;;;305    		s->function = do_fsm_move;
;;;306    	}
;;;307    }
;;;308    
;;;309    void do_fsm_move(state_t* s)
;;;310    {
;;;311    //	if(s->spindle_dir)	z_axis.current_pos++;
;;;312    //	else z_axis.current_pos--;
;;;313    	if( ++z_axis.current_pos <= ( z_axis.end_pos - z_axis.ramp_step ) ) { // when end_pos is zero, end_pos-ramp_step= 4294967296 - ramp_step, so it will be much more lager then current_pos
;;;314    		z_axis_move2(s);
;;;315    	} else {
;;;316    		if(z_axis_ramp_down2(s)) {
;;;317    			if(z_axis.end_pos != z_axis.current_pos) {
;;;318    				z_axis.end_pos = z_axis.current_pos;
;;;319    			}
;;;320    			s->function = do_fsm_move_end;
;;;321    		}
;;;322    		s->function = do_fsm_ramp_down;
;;;323    	}
;;;324    }
;;;325    
;;;326    void do_long_press_end_callback(state_t* s)          // direct movement: first pass, thread recording: long press release callback
;;;327    {
;;;328    	// для 1/2 микрошага нужно что бы общее количество шагов в цикле резьбы было кратно 2,(для 1/4 кратно 4 и тп).
;;;329    	// это нужно для того что бы в конце шаговый мотор остановился на одном из двухсот устойчивых шагов,
;;;330    	// не перескакивая на соседние шаги при потере питания.
;;;331    	if(z_axis.end_pos == 0) //s->sync?
;;;332    		z_axis.end_pos = ( z_axis.ramp_step + z_axis.current_pos ) | (step_divider - 1);
;;;333    	s->function = do_fsm_move;
;;;334    	do_fsm_move(s);
;;;335    }
;;;336    
;;;337    
;;;338    void do_fsm_ramp_down(state_t* s)
;;;339    {
        0x08002078:    b500        ..      PUSH     {lr}
        0x0800207a:    4603        .F      MOV      r3,r0
;;;340    //	if(s->spindle_dir)	
;;;341    		z_axis.current_pos++;
        0x0800207c:    480a        .H      LDR      r0,[pc,#40] ; [0x80020a8] = 0x200005e0
        0x0800207e:    6800        .h      LDR      r0,[r0,#0]
        0x08002080:    1c40        @.      ADDS     r0,r0,#1
        0x08002082:    4909        .I      LDR      r1,[pc,#36] ; [0x80020a8] = 0x200005e0
        0x08002084:    6008        .`      STR      r0,[r1,#0]
;;;342    //	else 
;;;343    //		z_axis.current_pos--;
;;;344    	if(z_axis_ramp_down2(s)) {
        0x08002086:    4618        .F      MOV      r0,r3
        0x08002088:    f000fb4c    ..L.    BL       z_axis_ramp_down2 ; 0x8002724
        0x0800208c:    b158        X.      CBZ      r0,0x80020a6 ; do_fsm_ramp_down + 46
;;;345    		if(z_axis.end_pos != z_axis.current_pos) {
        0x0800208e:    4806        .H      LDR      r0,[pc,#24] ; [0x80020a8] = 0x200005e0
        0x08002090:    6840        @h      LDR      r0,[r0,#4]
        0x08002092:    4905        .I      LDR      r1,[pc,#20] ; [0x80020a8] = 0x200005e0
        0x08002094:    6809        .h      LDR      r1,[r1,#0]
        0x08002096:    4288        .B      CMP      r0,r1
        0x08002098:    d003        ..      BEQ      0x80020a2 ; do_fsm_ramp_down + 42
;;;346    			z_axis.end_pos = z_axis.current_pos;
        0x0800209a:    4803        .H      LDR      r0,[pc,#12] ; [0x80020a8] = 0x200005e0
        0x0800209c:    6800        .h      LDR      r0,[r0,#0]
        0x0800209e:    4902        .I      LDR      r1,[pc,#8] ; [0x80020a8] = 0x200005e0
        0x080020a0:    6048        H`      STR      r0,[r1,#4]
;;;347    		}
;;;348    		s->function = do_fsm_move_end;
        0x080020a2:    4802        .H      LDR      r0,[pc,#8] ; [0x80020ac] = 0x8001f31
        0x080020a4:    6018        .`      STR      r0,[r3,#0]
;;;349    	}
;;;350    }
        0x080020a6:    bd00        ..      POP      {pc}
    $d
        0x080020a8:    200005e0    ...     DCD    536872416
        0x080020ac:    08001f31    1...    DCD    134225713
    $t
    i.do_fsm_ramp_down_async
    do_fsm_ramp_down_async
;;;351    
;;;352    void do_fsm_move_end(state_t* s){
;;;353    	s->async_z = 0;
;;;354      LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_DISABLED);
;;;355    
;;;356    	//	MOTOR_Z_BlockPulse();
;;;357    	if (s->sync) {
;;;358    		disable_encoder_ticks(); 										//reset interrupt for encoder ticks, only tacho todo async mode not compatible now
;;;359    		LL_TIM_CC_DisableChannel(TIM4, LL_TIM_CHANNEL_CH3);	// configure TACHO events on channel 3
;;;360    	} else {
;;;361    		LL_TIM_DisableCounter(TIM2); // pause async timer
;;;362    //		LL_TIM_DisableIT_UPDATE(TIM2);
;;;363    	}
;;;364    	s->syncbase = 0; // reset syncbase to stop calling it from timer interrupt
;;;365    
;;;366    //	LL_GPIO_TogglePin(MOTOR_Z_ENABLE_GPIO_Port, MOTOR_Z_ENABLE_Pin); //debug
;;;367    	LL_mDelay(2);
;;;368      MOTOR_Z_Disable();
;;;369      MOTOR_X_Disable();
;;;370    //	feed_direction = feed_direction == feed_direction_left ? feed_direction_right : feed_direction_left;
;;;371    	feed_direction = !feed_direction; 					//autochange feed direction
;;;372    	menu_changed = 1; 													//update menu
;;;373    	s->function = do_fsm_wait_sclick;
;;;374    
;;;375    //	z_axis.current_pos = 0;
;;;376    }
;;;377    
;;;378    
;;;379    _Bool z_axis_ramp_up2(state_t* s)
;;;380    {
;;;381    	const fixedptu  set_with_fract = sync_ramp_profile[z_axis.ramp_step] << 24;
;;;382    	if(z_axis.Q824set > set_with_fract || z_axis.ramp_step == sync_ramp_profile_len) { 	// reach desired speed or end of ramp map
;;;383    		s->syncbase->ARR = fixedpt_toint(z_axis.Q824set) - 1; 			// update register ARR
;;;384    //		s->syncbase->EGR |= TIM_EGR_UG;
;;;385    		z_axis.fract_part = fixedpt_fracpart(z_axis.Q824set); 								// save fract part for future use on next step
;;;386    //		z_axis.end_minus_ramp_delta =
;;;387    		return true;
;;;388    	} else {
;;;389    		z_axis.ramp_step++;
;;;390    		s->syncbase->ARR = fixedpt_toint(set_with_fract) - 1; 			// update register ARR
;;;391    //		s->syncbase->EGR |= TIM_EGR_UG;
;;;392    //		z_axis.fract_part = fixedpt_fracpart( set_with_fract ); 						// save fract part for future use on next step
;;;393    	}
;;;394    	return false;
;;;395    }
;;;396    
;;;397    _Bool z_axis_ramp_down2(state_t* s)
;;;398    {
;;;399    	if (z_axis.ramp_step == 0)
;;;400    		return true;
;;;401    //	const fixedptu set_with_fract = ramp2[--z_axis.ramp_step] << 24;
;;;402    //	s->syncbase->ARR = fixedpt_toint(set_with_fract) - 1; // update register ARR
;;;403    
;;;404    	s->syncbase->ARR = sync_ramp_profile[--z_axis.ramp_step];
;;;405    	//	s->syncbase->EGR |= TIM_EGR_UG;
;;;406    //	z_axis.fract_part = fixedpt_fracpart( set_with_fract ); // save fract part for future use on next step
;;;407    	if(z_axis.ramp_step == 0)
;;;408    		return true;
;;;409    	return false;
;;;410    }
;;;411    
;;;412    void z_axis_move2(state_t* s)
;;;413    {
;;;414    	const fixedptu set_with_fract = fixedpt_add(z_axis.Q824set, z_axis.fract_part); // calculate new step delay with fract from previous step
;;;415    	s->syncbase->ARR = fixedpt_toint(set_with_fract) - 1; // update register ARR
;;;416    	s->syncbase->CNT = 0;
;;;417    	s->syncbase->EGR |= TIM_EGR_UG;
;;;418    	z_axis.fract_part = fixedpt_fracpart( set_with_fract ); // save fract part for future use on next step
;;;419    }
;;;420    
;;;421    
;;;422    
;;;423    
;;;424    
;;;425    //------------------------------------ ASYNC block -----------------------------------
;;;426    //------------------------------------ ASYNC block -----------------------------------
;;;427    //------------------------------------ ASYNC block -----------------------------------
;;;428    void do_fsm_ramp_up_async(state_t* s)
;;;429    {
;;;430    //	LL_GPIO_TogglePin(MOTOR_Z_ENABLE_GPIO_Port, MOTOR_Z_ENABLE_Pin); //debug
;;;431    //	MOTOR_Z_SetPulse();
;;;432    	z_axis.current_pos++;
;;;433    	const uint8_t z_arr = async_ramp_profile[z_axis.ramp_step++];
;;;434    	const uint16_t rs2 = z_axis.ramp_step << 1;
;;;435    	if(z_arr < slew_speed_period || rs2 >= z_axis.end_pos  ) { 	// reach desired speed
;;;436    		if( rs2 < z_axis.end_pos) {
;;;437    			s->z_period = slew_speed_period;
;;;438    			s->function = do_fsm_move_async;
;;;439    		}
;;;440    		else {
;;;441    			s->z_period = z_arr;
;;;442    			s->function = do_fsm_ramp_down_async;
;;;443    			z_axis.ramp_step--;
;;;444    		}
;;;445    	} else {
;;;446    //		z_axis.ramp_step++;
;;;447    		s->z_period = z_arr;
;;;448    	}
;;;449    }
;;;450    
;;;451    void do_fsm_move_async(state_t* s)
;;;452    {
;;;453    //	LL_GPIO_TogglePin(MOTOR_Z_ENABLE_GPIO_Port, MOTOR_Z_ENABLE_Pin); //debug
;;;454    	// todo precalculate delta: z_axis.end_pos - z_axis.ramp_step
;;;455    	uint32_t pre = z_axis.end_pos - z_axis.ramp_step - 1;
;;;456    	if( ++z_axis.current_pos < pre ) { // when end_pos is zero, end_pos-ramp_step= 4294967296 - ramp_step, so it will be much more lager then current_pos
;;;457    		s->z_period = slew_speed_period;
;;;458    	} else {
;;;459    		s->function = do_fsm_ramp_down_async;
;;;460    	}
;;;461    }
;;;462    
;;;463    void do_fsm_ramp_down_async(state_t* s)
;;;464    {
;;;465    	z_axis.current_pos++;
        0x080020b0:    490f        .I      LDR      r1,[pc,#60] ; [0x80020f0] = 0x200005e0
        0x080020b2:    6809        .h      LDR      r1,[r1,#0]
        0x080020b4:    1c49        I.      ADDS     r1,r1,#1
        0x080020b6:    4a0e        .J      LDR      r2,[pc,#56] ; [0x80020f0] = 0x200005e0
        0x080020b8:    6011        .`      STR      r1,[r2,#0]
;;;466    
;;;467    	s->z_period = async_ramp_profile[--z_axis.ramp_step];
        0x080020ba:    4611        .F      MOV      r1,r2
        0x080020bc:    f8911028    ..(.    LDRB     r1,[r1,#0x28]
        0x080020c0:    1e49        I.      SUBS     r1,r1,#1
        0x080020c2:    b2c9        ..      UXTB     r1,r1
        0x080020c4:    f8821028    ..(.    STRB     r1,[r2,#0x28]
        0x080020c8:    4a0a        .J      LDR      r2,[pc,#40] ; [0x80020f4] = 0x20000018
        0x080020ca:    5c51        Q\      LDRB     r1,[r2,r1]
        0x080020cc:    7301        .s      STRB     r1,[r0,#0xc]
;;;468    	if (z_axis.ramp_step == 0) {
        0x080020ce:    4908        .I      LDR      r1,[pc,#32] ; [0x80020f0] = 0x200005e0
        0x080020d0:    f8911028    ..(.    LDRB     r1,[r1,#0x28]
        0x080020d4:    b959        Y.      CBNZ     r1,0x80020ee ; do_fsm_ramp_down_async + 62
;;;469    //	} else {
;;;470    // for last step there is no need to wail long, motor can be start to disabled after 145 processor ticks, so with prescaler =145 and more ARR = 1 is enought
;;;471    //		s->z_period = 2; 
;;;472    //		LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_DISABLED); // stop pulse generation on timer
;;;473    		if(z_axis.end_pos != z_axis.current_pos) {
        0x080020d6:    4906        .I      LDR      r1,[pc,#24] ; [0x80020f0] = 0x200005e0
        0x080020d8:    6849        Ih      LDR      r1,[r1,#4]
        0x080020da:    4a05        .J      LDR      r2,[pc,#20] ; [0x80020f0] = 0x200005e0
        0x080020dc:    6812        .h      LDR      r2,[r2,#0]
        0x080020de:    4291        .B      CMP      r1,r2
        0x080020e0:    d003        ..      BEQ      0x80020ea ; do_fsm_ramp_down_async + 58
;;;474    			z_axis.end_pos = z_axis.current_pos;
        0x080020e2:    4903        .I      LDR      r1,[pc,#12] ; [0x80020f0] = 0x200005e0
        0x080020e4:    6809        .h      LDR      r1,[r1,#0]
        0x080020e6:    4a02        .J      LDR      r2,[pc,#8] ; [0x80020f0] = 0x200005e0
        0x080020e8:    6051        Q`      STR      r1,[r2,#4]
;;;475    		}
;;;476    		s->function = do_fsm_move_end;
        0x080020ea:    4903        .I      LDR      r1,[pc,#12] ; [0x80020f8] = 0x8001f31
        0x080020ec:    6001        .`      STR      r1,[r0,#0]
;;;477    //		do_fsm_move_end(s);
;;;478    	}
;;;479    }
        0x080020ee:    4770        pG      BX       lr
    $d
        0x080020f0:    200005e0    ...     DCD    536872416
        0x080020f4:    20000018    ...     DCD    536870936
        0x080020f8:    08001f31    1...    DCD    134225713
    $t
    i.do_fsm_ramp_up
    do_fsm_ramp_up
;;; .\..\Src\fsm.c (302)
        0x080020fc:    b510        ..      PUSH     {r4,lr}
        0x080020fe:    4604        .F      MOV      r4,r0
;;;303    	z_axis.current_pos++;
        0x08002100:    4805        .H      LDR      r0,[pc,#20] ; [0x8002118] = 0x200005e0
        0x08002102:    6800        .h      LDR      r0,[r0,#0]
        0x08002104:    1c40        @.      ADDS     r0,r0,#1
        0x08002106:    4904        .I      LDR      r1,[pc,#16] ; [0x8002118] = 0x200005e0
        0x08002108:    6008        .`      STR      r0,[r1,#0]
;;;304    	if(z_axis_ramp_up2(s)) {
        0x0800210a:    4620         F      MOV      r0,r4
        0x0800210c:    f000fb2a    ..*.    BL       z_axis_ramp_up2 ; 0x8002764
        0x08002110:    b108        ..      CBZ      r0,0x8002116 ; do_fsm_ramp_up + 26
;;;305    		s->function = do_fsm_move;
        0x08002112:    4802        .H      LDR      r0,[pc,#8] ; [0x800211c] = 0x8001ea9
        0x08002114:    6020         `      STR      r0,[r4,#0]
;;;306    	}
;;;307    }
        0x08002116:    bd10        ..      POP      {r4,pc}
    $d
        0x08002118:    200005e0    ...     DCD    536872416
        0x0800211c:    08001ea9    ....    DCD    134225577
    $t
    i.do_fsm_ramp_up_async
    do_fsm_ramp_up_async
;;;308    
;;;309    void do_fsm_move(state_t* s)
;;;310    {
;;;311    //	if(s->spindle_dir)	z_axis.current_pos++;
;;;312    //	else z_axis.current_pos--;
;;;313    	if( ++z_axis.current_pos <= ( z_axis.end_pos - z_axis.ramp_step ) ) { // when end_pos is zero, end_pos-ramp_step= 4294967296 - ramp_step, so it will be much more lager then current_pos
;;;314    		z_axis_move2(s);
;;;315    	} else {
;;;316    		if(z_axis_ramp_down2(s)) {
;;;317    			if(z_axis.end_pos != z_axis.current_pos) {
;;;318    				z_axis.end_pos = z_axis.current_pos;
;;;319    			}
;;;320    			s->function = do_fsm_move_end;
;;;321    		}
;;;322    		s->function = do_fsm_ramp_down;
;;;323    	}
;;;324    }
;;;325    
;;;326    void do_long_press_end_callback(state_t* s)          // direct movement: first pass, thread recording: long press release callback
;;;327    {
;;;328    	// для 1/2 микрошага нужно что бы общее количество шагов в цикле резьбы было кратно 2,(для 1/4 кратно 4 и тп).
;;;329    	// это нужно для того что бы в конце шаговый мотор остановился на одном из двухсот устойчивых шагов,
;;;330    	// не перескакивая на соседние шаги при потере питания.
;;;331    	if(z_axis.end_pos == 0) //s->sync?
;;;332    		z_axis.end_pos = ( z_axis.ramp_step + z_axis.current_pos ) | (step_divider - 1);
;;;333    	s->function = do_fsm_move;
;;;334    	do_fsm_move(s);
;;;335    }
;;;336    
;;;337    
;;;338    void do_fsm_ramp_down(state_t* s)
;;;339    {
;;;340    //	if(s->spindle_dir)	
;;;341    		z_axis.current_pos++;
;;;342    //	else 
;;;343    //		z_axis.current_pos--;
;;;344    	if(z_axis_ramp_down2(s)) {
;;;345    		if(z_axis.end_pos != z_axis.current_pos) {
;;;346    			z_axis.end_pos = z_axis.current_pos;
;;;347    		}
;;;348    		s->function = do_fsm_move_end;
;;;349    	}
;;;350    }
;;;351    
;;;352    void do_fsm_move_end(state_t* s){
;;;353    	s->async_z = 0;
;;;354      LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_DISABLED);
;;;355    
;;;356    	//	MOTOR_Z_BlockPulse();
;;;357    	if (s->sync) {
;;;358    		disable_encoder_ticks(); 										//reset interrupt for encoder ticks, only tacho todo async mode not compatible now
;;;359    		LL_TIM_CC_DisableChannel(TIM4, LL_TIM_CHANNEL_CH3);	// configure TACHO events on channel 3
;;;360    	} else {
;;;361    		LL_TIM_DisableCounter(TIM2); // pause async timer
;;;362    //		LL_TIM_DisableIT_UPDATE(TIM2);
;;;363    	}
;;;364    	s->syncbase = 0; // reset syncbase to stop calling it from timer interrupt
;;;365    
;;;366    //	LL_GPIO_TogglePin(MOTOR_Z_ENABLE_GPIO_Port, MOTOR_Z_ENABLE_Pin); //debug
;;;367    	LL_mDelay(2);
;;;368      MOTOR_Z_Disable();
;;;369      MOTOR_X_Disable();
;;;370    //	feed_direction = feed_direction == feed_direction_left ? feed_direction_right : feed_direction_left;
;;;371    	feed_direction = !feed_direction; 					//autochange feed direction
;;;372    	menu_changed = 1; 													//update menu
;;;373    	s->function = do_fsm_wait_sclick;
;;;374    
;;;375    //	z_axis.current_pos = 0;
;;;376    }
;;;377    
;;;378    
;;;379    _Bool z_axis_ramp_up2(state_t* s)
;;;380    {
;;;381    	const fixedptu  set_with_fract = sync_ramp_profile[z_axis.ramp_step] << 24;
;;;382    	if(z_axis.Q824set > set_with_fract || z_axis.ramp_step == sync_ramp_profile_len) { 	// reach desired speed or end of ramp map
;;;383    		s->syncbase->ARR = fixedpt_toint(z_axis.Q824set) - 1; 			// update register ARR
;;;384    //		s->syncbase->EGR |= TIM_EGR_UG;
;;;385    		z_axis.fract_part = fixedpt_fracpart(z_axis.Q824set); 								// save fract part for future use on next step
;;;386    //		z_axis.end_minus_ramp_delta =
;;;387    		return true;
;;;388    	} else {
;;;389    		z_axis.ramp_step++;
;;;390    		s->syncbase->ARR = fixedpt_toint(set_with_fract) - 1; 			// update register ARR
;;;391    //		s->syncbase->EGR |= TIM_EGR_UG;
;;;392    //		z_axis.fract_part = fixedpt_fracpart( set_with_fract ); 						// save fract part for future use on next step
;;;393    	}
;;;394    	return false;
;;;395    }
;;;396    
;;;397    _Bool z_axis_ramp_down2(state_t* s)
;;;398    {
;;;399    	if (z_axis.ramp_step == 0)
;;;400    		return true;
;;;401    //	const fixedptu set_with_fract = ramp2[--z_axis.ramp_step] << 24;
;;;402    //	s->syncbase->ARR = fixedpt_toint(set_with_fract) - 1; // update register ARR
;;;403    
;;;404    	s->syncbase->ARR = sync_ramp_profile[--z_axis.ramp_step];
;;;405    	//	s->syncbase->EGR |= TIM_EGR_UG;
;;;406    //	z_axis.fract_part = fixedpt_fracpart( set_with_fract ); // save fract part for future use on next step
;;;407    	if(z_axis.ramp_step == 0)
;;;408    		return true;
;;;409    	return false;
;;;410    }
;;;411    
;;;412    void z_axis_move2(state_t* s)
;;;413    {
;;;414    	const fixedptu set_with_fract = fixedpt_add(z_axis.Q824set, z_axis.fract_part); // calculate new step delay with fract from previous step
;;;415    	s->syncbase->ARR = fixedpt_toint(set_with_fract) - 1; // update register ARR
;;;416    	s->syncbase->CNT = 0;
;;;417    	s->syncbase->EGR |= TIM_EGR_UG;
;;;418    	z_axis.fract_part = fixedpt_fracpart( set_with_fract ); // save fract part for future use on next step
;;;419    }
;;;420    
;;;421    
;;;422    
;;;423    
;;;424    
;;;425    //------------------------------------ ASYNC block -----------------------------------
;;;426    //------------------------------------ ASYNC block -----------------------------------
;;;427    //------------------------------------ ASYNC block -----------------------------------
;;;428    void do_fsm_ramp_up_async(state_t* s)
;;;429    {
        0x08002120:    b530        0.      PUSH     {r4,r5,lr}
;;;430    //	LL_GPIO_TogglePin(MOTOR_Z_ENABLE_GPIO_Port, MOTOR_Z_ENABLE_Pin); //debug
;;;431    //	MOTOR_Z_SetPulse();
;;;432    	z_axis.current_pos++;
        0x08002122:    4b18        .K      LDR      r3,[pc,#96] ; [0x8002184] = 0x200005e0
        0x08002124:    681b        .h      LDR      r3,[r3,#0]
        0x08002126:    1c5b        [.      ADDS     r3,r3,#1
        0x08002128:    4c16        .L      LDR      r4,[pc,#88] ; [0x8002184] = 0x200005e0
        0x0800212a:    6023        #`      STR      r3,[r4,#0]
;;;433    	const uint8_t z_arr = async_ramp_profile[z_axis.ramp_step++];
        0x0800212c:    4623        #F      MOV      r3,r4
        0x0800212e:    f8934028    ..(@    LDRB     r4,[r3,#0x28]
        0x08002132:    f8933028    ..(0    LDRB     r3,[r3,#0x28]
        0x08002136:    1c5b        [.      ADDS     r3,r3,#1
        0x08002138:    4d12        .M      LDR      r5,[pc,#72] ; [0x8002184] = 0x200005e0
        0x0800213a:    f8853028    ..(0    STRB     r3,[r5,#0x28]
        0x0800213e:    4b12        .K      LDR      r3,[pc,#72] ; [0x8002188] = 0x20000018
        0x08002140:    5d19        .]      LDRB     r1,[r3,r4]
;;;434    	const uint16_t rs2 = z_axis.ramp_step << 1;
        0x08002142:    462b        +F      MOV      r3,r5
        0x08002144:    f8933028    ..(0    LDRB     r3,[r3,#0x28]
        0x08002148:    005a        Z.      LSLS     r2,r3,#1
;;;435    	if(z_arr < slew_speed_period || rs2 >= z_axis.end_pos  ) { 	// reach desired speed
        0x0800214a:    2932        2)      CMP      r1,#0x32
        0x0800214c:    db03        ..      BLT      0x8002156 ; do_fsm_ramp_up_async + 54
        0x0800214e:    462b        +F      MOV      r3,r5
        0x08002150:    685b        [h      LDR      r3,[r3,#4]
        0x08002152:    4293        .B      CMP      r3,r2
        0x08002154:    d813        ..      BHI      0x800217e ; do_fsm_ramp_up_async + 94
;;;436    		if( rs2 < z_axis.end_pos) {
        0x08002156:    4b0b        .K      LDR      r3,[pc,#44] ; [0x8002184] = 0x200005e0
        0x08002158:    685b        [h      LDR      r3,[r3,#4]
        0x0800215a:    4293        .B      CMP      r3,r2
        0x0800215c:    d904        ..      BLS      0x8002168 ; do_fsm_ramp_up_async + 72
;;;437    			s->z_period = slew_speed_period;
        0x0800215e:    2332        2#      MOVS     r3,#0x32
        0x08002160:    7303        .s      STRB     r3,[r0,#0xc]
;;;438    			s->function = do_fsm_move_async;
        0x08002162:    4b0a        .K      LDR      r3,[pc,#40] ; [0x800218c] = 0x8001f01
        0x08002164:    6003        .`      STR      r3,[r0,#0]
        0x08002166:    e00b        ..      B        0x8002180 ; do_fsm_ramp_up_async + 96
;;;439    		}
;;;440    		else {
;;;441    			s->z_period = z_arr;
        0x08002168:    7301        .s      STRB     r1,[r0,#0xc]
;;;442    			s->function = do_fsm_ramp_down_async;
        0x0800216a:    4b09        .K      LDR      r3,[pc,#36] ; [0x8002190] = 0x80020b1
        0x0800216c:    6003        .`      STR      r3,[r0,#0]
;;;443    			z_axis.ramp_step--;
        0x0800216e:    4b05        .K      LDR      r3,[pc,#20] ; [0x8002184] = 0x200005e0
        0x08002170:    f8933028    ..(0    LDRB     r3,[r3,#0x28]
        0x08002174:    1e5b        [.      SUBS     r3,r3,#1
        0x08002176:    4c03        .L      LDR      r4,[pc,#12] ; [0x8002184] = 0x200005e0
        0x08002178:    f8843028    ..(0    STRB     r3,[r4,#0x28]
        0x0800217c:    e000        ..      B        0x8002180 ; do_fsm_ramp_up_async + 96
;;;444    		}
;;;445    	} else {
;;;446    //		z_axis.ramp_step++;
;;;447    		s->z_period = z_arr;
        0x0800217e:    7301        .s      STRB     r1,[r0,#0xc]
;;;448    	}
;;;449    }
        0x08002180:    bd30        0.      POP      {r4,r5,pc}
    $d
        0x08002182:    0000        ..      DCW    0
        0x08002184:    200005e0    ...     DCD    536872416
        0x08002188:    20000018    ...     DCD    536870936
        0x0800218c:    08001f01    ....    DCD    134225665
        0x08002190:    080020b1    . ..    DCD    134226097
    $t
    i.do_fsm_wait_sclick
    do_fsm_wait_sclick
;;; .\..\Src\fsm.c (195)
        0x08002194:    4770        pG      BX       lr
        0x08002196:    0000        ..      MOVS     r0,r0
    i.do_long_press_end_callback
    do_long_press_end_callback
;;;196    
;;;197    void z_move(uint32_t direction, uint32_t length, bool sync, bool autostart){
;;;198    	MOTOR_X_Enable();
;;;199    	MOTOR_Z_Enable(); // time to wakeup motor from sleep is quite high(1.7ms), so enable it as soon as possible
;;;200    
;;;201    	if(direction == feed_direction_left) {
;;;202    		feed_direction = feed_direction_left;
;;;203    		MOTOR_Z_Reverse();
;;;204    		MOTOR_X_Reverse();
;;;205    	} else {
;;;206    		feed_direction = feed_direction_right;
;;;207    		MOTOR_Z_Forward();
;;;208    		MOTOR_X_Forward();
;;;209    	}
;;;210    	LL_mDelay(2);
;;;211    
;;;212    	state.sync = sync;
;;;213    	if(sync){
;;;214    		state.main_feed_direction = feed_direction;
;;;215    	}
;;;216    
;;;217    	z_axis.current_pos = 0;
;;;218    	z_axis.end_pos = length;
;;;219    	if(z_axis.end_pos > 0){
;;;220    		z_axis.end_pos &= 0xFFFFFFFF - step_divider + 1;
;;;221    //		z_axis.end_pos |= step_divider; // to make sure that we'll not stop between full steps
;;;222    
;;;223    	} else {
;;;224    		state.sync = true;
;;;225    	}
;;;226    
;;;227    	do_fsm_move_start(&state);
;;;228    }
;;;229    
;;;230    //---------------------------------------------------------------------------------------------
;;;231    void do_fsm_move_start(state_t* s){
;;;232    	if(s->sync && !s->f_tacho){
;;;233    		s->function = do_fsm_move_start;// return here from interrupt when TACHO event
;;;234    		// enable and wait tacho event on spindle encoder
;;;235    		LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH3);	// configure TACHO events on channel 3
;;;236    		return;
;;;237    	}
;;;238    
;;;239    	if(s->f_tacho || !s->sync) { // if tacho event or we going to start back feed to initial position with async clock
;;;240    //		LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_DISABLED);
;;;241    		if(s->sync && s->f_tacho) {
;;;242    			s->function = do_fsm_ramp_up;
;;;243    			s->async_z = 0;
;;;244    			s->syncbase = TIM4; 									// sync with spindle
;;;245    
;;;246    			LL_TIM_SetTriggerInput(TIM3, LL_TIM_TS_ITR3); 				//trigger by spindle encoder timer TIM4(sync mode)
;;;247    
;;;248    // disable TACHO events, we dont need'em until next start			
;;;249    			LL_TIM_CC_DisableChannel(TIM4, LL_TIM_CHANNEL_CH3);	// configure TACHO events on channel 3
;;;250    			enable_encoder_ticks(); 									// enable thread specific interrupt controlled by Q824set
;;;251    		} else {
;;;252    			s->function = do_fsm_ramp_up_async;
;;;253    //			s->async_z = 1;
;;;254    			s->syncbase = TIM2; 									// sync with internal clock source(virtual spindle, "async" to main spindle)
;;;255    
;;;256    //			s->set_pulse_function(s);
;;;257    //			dxdz_callback(s);
;;;258    //			LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_DISABLED);
;;;259    			TIM3->ARR = min_pulse*5;
;;;260    			LL_TIM_GenerateEvent_UPDATE(TIM3);
;;;261    //			LL_TIM_EnableCounter(TIM3);
;;;262    //			LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_TRIGGER);
;;;263    //			LL_GPIO_TogglePin(MOTOR_Z_ENABLE_GPIO_Port, MOTOR_Z_ENABLE_Pin);
;;;264    
;;;265    //			TIM3->SR = 0;
;;;266    //			LL_TIM_EnableCounter(TIM3);
;;;267    //			LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_DISABLED);
;;;268    //			LL_TIM_SetTriggerInput(TIM3, LL_TIM_TS_ITR1); 				//trigger by TIM2(async mode)
;;;269    
;;;270    			
;;;271    //			LL_TIM_EnableCounter(TIM2); /* Enable counter */
;;;272    
;;;273    //			MOTOR_Z_AllowPulse();
;;;274    //			MOTOR_X_AllowPulse();
;;;275    //			LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_TRIGGER);
;;;276    
;;;277    			TIM2->ARR = 10;
;;;278    //			LL_TIM_GenerateEvent_UPDATE(TIM2); // start first step on motor
;;;279    			LL_TIM_EnableCounter(TIM2);
;;;280    
;;;281    
;;;282    //			TIM2->ARR = 1;
;;;283    //			LL_TIM_EnableCounter(TIM2);
;;;284    
;;;285    //		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH1 | LL_TIM_CHANNEL_CH3);
;;;286    //			TIM3->SR = 0;
;;;287    //			LL_TIM_EnableCounter(TIM3);
;;;288    //			LL_TIM_GenerateEvent_TRIG(TIM2); // start first step on motor
;;;289    	//		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH3);
;;;290    //			s->syncbase->ARR = 1; 					// start stepper motor ramp up procedure immediately after tacho event
;;;291    			s->async_z = 1;
;;;292    //			TIM2->CNT = 0;
;;;293    //			LL_TIM_GenerateEvent_UPDATE(TIM2); /* Force update generation */
;;;294    
;;;295    		}
;;;296    
;;;297    //		LL_mDelay(20);
;;;298    	}	
;;;299    }
;;;300    
;;;301    void do_fsm_ramp_up(state_t* s)
;;;302    {
;;;303    	z_axis.current_pos++;
;;;304    	if(z_axis_ramp_up2(s)) {
;;;305    		s->function = do_fsm_move;
;;;306    	}
;;;307    }
;;;308    
;;;309    void do_fsm_move(state_t* s)
;;;310    {
;;;311    //	if(s->spindle_dir)	z_axis.current_pos++;
;;;312    //	else z_axis.current_pos--;
;;;313    	if( ++z_axis.current_pos <= ( z_axis.end_pos - z_axis.ramp_step ) ) { // when end_pos is zero, end_pos-ramp_step= 4294967296 - ramp_step, so it will be much more lager then current_pos
;;;314    		z_axis_move2(s);
;;;315    	} else {
;;;316    		if(z_axis_ramp_down2(s)) {
;;;317    			if(z_axis.end_pos != z_axis.current_pos) {
;;;318    				z_axis.end_pos = z_axis.current_pos;
;;;319    			}
;;;320    			s->function = do_fsm_move_end;
;;;321    		}
;;;322    		s->function = do_fsm_ramp_down;
;;;323    	}
;;;324    }
;;;325    
;;;326    void do_long_press_end_callback(state_t* s)          // direct movement: first pass, thread recording: long press release callback
;;;327    {
        0x08002198:    b510        ..      PUSH     {r4,lr}
        0x0800219a:    4604        .F      MOV      r4,r0
;;;328    	// для 1/2 микрошага нужно что бы общее количество шагов в цикле резьбы было кратно 2,(для 1/4 кратно 4 и тп).
;;;329    	// это нужно для того что бы в конце шаговый мотор остановился на одном из двухсот устойчивых шагов,
;;;330    	// не перескакивая на соседние шаги при потере питания.
;;;331    	if(z_axis.end_pos == 0) //s->sync?
        0x0800219c:    4809        .H      LDR      r0,[pc,#36] ; [0x80021c4] = 0x200005e0
        0x0800219e:    6840        @h      LDR      r0,[r0,#4]
        0x080021a0:    b948        H.      CBNZ     r0,0x80021b6 ; do_long_press_end_callback + 30
;;;332    		z_axis.end_pos = ( z_axis.ramp_step + z_axis.current_pos ) | (step_divider - 1);
        0x080021a2:    4808        .H      LDR      r0,[pc,#32] ; [0x80021c4] = 0x200005e0
        0x080021a4:    f8900028    ..(.    LDRB     r0,[r0,#0x28]
        0x080021a8:    4906        .I      LDR      r1,[pc,#24] ; [0x80021c4] = 0x200005e0
        0x080021aa:    6809        .h      LDR      r1,[r1,#0]
        0x080021ac:    4408        .D      ADD      r0,r0,r1
        0x080021ae:    f0400001    @...    ORR      r0,r0,#1
        0x080021b2:    4904        .I      LDR      r1,[pc,#16] ; [0x80021c4] = 0x200005e0
        0x080021b4:    6048        H`      STR      r0,[r1,#4]
;;;333    	s->function = do_fsm_move;
        0x080021b6:    4804        .H      LDR      r0,[pc,#16] ; [0x80021c8] = 0x8001ea9
        0x080021b8:    6020         `      STR      r0,[r4,#0]
;;;334    	do_fsm_move(s);
        0x080021ba:    4620         F      MOV      r0,r4
        0x080021bc:    f7fffe74    ..t.    BL       do_fsm_move ; 0x8001ea8
;;;335    }
        0x080021c0:    bd10        ..      POP      {r4,pc}
    $d
        0x080021c2:    0000        ..      DCW    0
        0x080021c4:    200005e0    ...     DCD    536872416
        0x080021c8:    08001ea9    ....    DCD    134225577
    $t
    i.dxdz_callback
    dxdz_callback
;;; ../Inc/fsm.h
;;;94     __STATIC_INLINE void dxdz_callback(state_t* s){
        0x080021cc:    b510        ..      PUSH     {r4,lr}
        0x080021ce:    4604        .F      MOV      r4,r0
;;;95     	TIM3->CCER = 0;	//	LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH1 | LL_TIM_CHANNEL_CH3);
        0x080021d0:    2000        .       MOVS     r0,#0
        0x080021d2:    4910        .I      LDR      r1,[pc,#64] ; [0x8002214] = 0x40000420
        0x080021d4:    6008        .`      STR      r0,[r1,#0]
;;;96     	s->e2 = s->err;
        0x080021d6:    6c60        `l      LDR      r0,[r4,#0x44]
        0x080021d8:    64a0        .d      STR      r0,[r4,#0x48]
;;;97     	if (s->e2 > -s->dx)	{ 
        0x080021da:    6aa1        .j      LDR      r1,[r4,#0x28]
        0x080021dc:    4249        IB      RSBS     r1,r1,#0
        0x080021de:    6ca0        .l      LDR      r0,[r4,#0x48]
        0x080021e0:    4288        .B      CMP      r0,r1
        0x080021e2:    dd08        ..      BLE      0x80021f6 ; dxdz_callback + 42
;;;98     		s->err -= s->dz; 
        0x080021e4:    6ae1        .j      LDR      r1,[r4,#0x2c]
        0x080021e6:    6c60        `l      LDR      r0,[r4,#0x44]
        0x080021e8:    1a40        @.      SUBS     r0,r0,r1
        0x080021ea:    6460        `d      STR      r0,[r4,#0x44]
;;;99     		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH1); 
        0x080021ec:    2101        .!      MOVS     r1,#1
        0x080021ee:    4809        .H      LDR      r0,[pc,#36] ; [0x8002214] = 0x40000420
        0x080021f0:    3820         8      SUBS     r0,r0,#0x20
        0x080021f2:    f7fefaee    ....    BL       LL_TIM_CC_EnableChannel ; 0x80007d2
;;;100    	}
;;;101    	if (s->e2 < s->dz)	{ 
        0x080021f6:    6ae1        .j      LDR      r1,[r4,#0x2c]
        0x080021f8:    6ca0        .l      LDR      r0,[r4,#0x48]
        0x080021fa:    4288        .B      CMP      r0,r1
        0x080021fc:    da09        ..      BGE      0x8002212 ; dxdz_callback + 70
;;;102    		s->err += s->dx; 
        0x080021fe:    6aa1        .j      LDR      r1,[r4,#0x28]
        0x08002200:    6c60        `l      LDR      r0,[r4,#0x44]
        0x08002202:    4408        .D      ADD      r0,r0,r1
        0x08002204:    6460        `d      STR      r0,[r4,#0x44]
;;;103    		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH3); 
        0x08002206:    f44f7180    O..q    MOV      r1,#0x100
        0x0800220a:    4802        .H      LDR      r0,[pc,#8] ; [0x8002214] = 0x40000420
        0x0800220c:    3820         8      SUBS     r0,r0,#0x20
        0x0800220e:    f7fefae0    ....    BL       LL_TIM_CC_EnableChannel ; 0x80007d2
;;;104    	}
;;;105    }
        0x08002212:    bd10        ..      POP      {r4,pc}
    $d
        0x08002214:    40000420     ..@    DCD    1073742880
    $t
    i.dzdx_init
    dzdx_init
;;; .\..\Src\fsm.c
;;;481    void dzdx_init(int dx, int dz, state_t* s) {
        0x08002218:    b530        0.      PUSH     {r4,r5,lr}
;;;482    	s->dx = abs(dx); 
        0x0800221a:    1e03        ..      SUBS     r3,r0,#0
        0x0800221c:    db01        ..      BLT      0x8002222 ; dzdx_init + 10
        0x0800221e:    461c        .F      MOV      r4,r3
        0x08002220:    e000        ..      B        0x8002224 ; dzdx_init + 12
        0x08002222:    425c        \B      RSBS     r4,r3,#0
        0x08002224:    6294        .b      STR      r4,[r2,#0x28]
;;;483    	s->sx = dx > 0 ? 1 : -1;
        0x08002226:    2800        .(      CMP      r0,#0
        0x08002228:    dd01        ..      BLE      0x800222e ; dzdx_init + 22
        0x0800222a:    2301        .#      MOVS     r3,#1
        0x0800222c:    e001        ..      B        0x8002232 ; dzdx_init + 26
        0x0800222e:    f04f33ff    O..3    MOV      r3,#0xffffffff
        0x08002232:    6313        .c      STR      r3,[r2,#0x30]
;;;484      s->dz = abs(dz);
        0x08002234:    1e0b        ..      SUBS     r3,r1,#0
        0x08002236:    db01        ..      BLT      0x800223c ; dzdx_init + 36
        0x08002238:    461c        .F      MOV      r4,r3
        0x0800223a:    e000        ..      B        0x800223e ; dzdx_init + 38
        0x0800223c:    425c        \B      RSBS     r4,r3,#0
        0x0800223e:    62d4        .b      STR      r4,[r2,#0x2c]
;;;485    	s->sz = dz > 0 ? 1 : -1; 
        0x08002240:    2900        .)      CMP      r1,#0
        0x08002242:    dd01        ..      BLE      0x8002248 ; dzdx_init + 48
        0x08002244:    2301        .#      MOVS     r3,#1
        0x08002246:    e001        ..      B        0x800224c ; dzdx_init + 52
        0x08002248:    f04f33ff    O..3    MOV      r3,#0xffffffff
        0x0800224c:    6353        Sc      STR      r3,[r2,#0x34]
;;;486      s->e2 = s->err = (s->dx > s->dz ? s->dx : -s->dz)/2;
        0x0800224e:    e9d2450a    ...E    LDRD     r4,r5,[r2,#0x28]
        0x08002252:    42ac        .B      CMP      r4,r5
        0x08002254:    dd01        ..      BLE      0x800225a ; dzdx_init + 66
        0x08002256:    6a94        .j      LDR      r4,[r2,#0x28]
        0x08002258:    e001        ..      B        0x800225e ; dzdx_init + 70
        0x0800225a:    6ad4        .j      LDR      r4,[r2,#0x2c]
        0x0800225c:    4264        dB      RSBS     r4,r4,#0
        0x0800225e:    4623        #F      MOV      r3,r4
        0x08002260:    eb0474d3    ...t    ADD      r4,r4,r3,LSR #31
        0x08002264:    1064        d.      ASRS     r4,r4,#1
        0x08002266:    6454        Td      STR      r4,[r2,#0x44]
        0x08002268:    6494        .d      STR      r4,[r2,#0x48]
;;;487    	s->set_pulse_function = dxdz_callback;
        0x0800226a:    4b01        .K      LDR      r3,[pc,#4] ; [0x8002270] = 0x80021cd
        0x0800226c:    6593        .e      STR      r3,[r2,#0x58]
;;;488    }
        0x0800226e:    bd30        0.      POP      {r4,r5,pc}
    $d
        0x08002270:    080021cd    .!..    DCD    134226381
    $t
    i.init_buttons
    init_buttons
;;; .\..\Src\buttons.c
;;;11     void init_buttons(void){
        0x08002274:    b510        ..      PUSH     {r4,lr}
;;;12     
;;;13     	bt[0].clk_mode = 10;
        0x08002276:    200a        .       MOVS     r0,#0xa
        0x08002278:    4906        .I      LDR      r1,[pc,#24] ; [0x8002294] = 0x200004f0
        0x0800227a:    61c8        .a      STR      r0,[r1,#0x1c]
;;;14     	bt[0].GPIOx = BUTTON_1_GPIO_Port;
        0x0800227c:    4806        .H      LDR      r0,[pc,#24] ; [0x8002298] = 0x40010800
        0x0800227e:    6008        .`      STR      r0,[r1,#0]
;;;15     	bt[0].button_pin = BUTTON_1_Pin;
        0x08002280:    4806        .H      LDR      r0,[pc,#24] ; [0x800229c] = 0x4010001
        0x08002282:    6048        H`      STR      r0,[r1,#4]
;;;16     	bt[0].buttons = bt[0].buttons_mask = LL_GPIO_IsInputPinSet(bt[0].GPIOx,BUTTON_1_Pin); //bt[0].GPIOx->IDR & bt[0].button_pin;
        0x08002284:    6808        .h      LDR      r0,[r1,#0]
        0x08002286:    4905        .I      LDR      r1,[pc,#20] ; [0x800229c] = 0x4010001
        0x08002288:    f7fef9ad    ....    BL       LL_GPIO_IsInputPinSet ; 0x80005e6
        0x0800228c:    4901        .I      LDR      r1,[pc,#4] ; [0x8002294] = 0x200004f0
        0x0800228e:    6188        .a      STR      r0,[r1,#0x18]
        0x08002290:    60c8        .`      STR      r0,[r1,#0xc]
;;;17     	return;
;;;18     	bt[1] = bt[0];
;;;19     	bt[1].clk_mode = 10;
;;;20     	bt[1].GPIOx = BUTTON_2_GPIO_Port;
;;;21     	bt[1].button_pin = BUTTON_2_Pin;
;;;22     	bt[1].buttons = bt[1].buttons_mask = bt[1].GPIOx->IDR & bt[1].button_pin;
;;;23     
;;;24     	if(device_ready == 1){
;;;25     //		read_sample_i2c(&i2c_device_logging.sample[i2c_device_logging.index]);		
;;;26     		reqest_sample_i2c_dma();
;;;27     //		while(ubTransferComplete == 0){
;;;28     //		}
;;;29     	}
;;;30     	bt[2].clk_mode = 10;
;;;31     	bt[2].button_pin = 0x02; // button_c code
;;;32     	bt[2].buttons = bt[2].buttons_mask = dma_data[5]&bt[2].button_pin; // = bt[1].GPIOx->IDR & bt[1].button_pin;
;;;33     	
;;;34     	bt[3].clk_mode = 10;
;;;35     	bt[3].button_pin = 0x01; // button_c code
;;;36     	bt[3].buttons = bt[3].buttons_mask = dma_data[5]&bt[3].button_pin; // = bt[1].GPIOx->IDR & bt[1].button_pin;
;;;37     
;;;38     }
        0x08002292:    bd10        ..      POP      {r4,pc}
    $d
        0x08002294:    200004f0    ...     DCD    536872176
        0x08002298:    40010800    ...@    DCD    1073809408
        0x0800229c:    04010001    ....    DCD    67174401
    $t
    i.main
    main
;;; .\../Src/main.c
;;;356    	rs = 11;
        0x080022a0:    200b        .       MOVS     r0,#0xb
        0x080022a2:    496a        jI      LDR      r1,[pc,#424] ; [0x800244c] = 0x200000b0
        0x080022a4:    6008        .`      STR      r0,[r1,#0]
;;;357    /*
;;;358    	float af = -5.5;
;;;359    	fixedpt af1 = af * (1 << FIXEDPT_FBITS);
;;;360    	float af2 = fixedpt_tofloat(af1);
;;;361    	char code[] = "G01X.2Z100F10";
;;;362    	char codea[] = "-1.223";
;;;363    	
;;;364    	char *end;
;;;365    	af = -1.223;
;;;366    	af1 = af * (1 << FIXEDPT_FBITS);
;;;367    	fixedpt a = strto824(codea, &end);
;;;368    	int rst = str_f_to_steps(codea, 400, &end);	
;;;369    
;;;370    	af2 = fixedpt_tofloat(a);
;;;371    
;;;372    	a = fixedpt_fromint(-1);
;;;373    	char codeb[] = "-5.5";
;;;374    	fixedpt b = strto824(codeb, &end);
;;;375    	af2 = fixedpt_tofloat(b);
;;;376    	b = fixedpt_fromint(-5);
;;;377    	fixedpt c = fixedpt_add(a,b);
;;;378    	int d = fixedpt_toint(c);
;;;379    //	return 0;
;;;380    */
;;;381    	
;;;382    	
;;;383    	
;;;384    	
;;;385    	
;;;386    	
;;;387    //	gc_execute_line(code);
;;;388    
;;;389    //	z_axis.end_pos = 50;
;;;390    //	z_axis.Q824set = Thread_Info[Menu_Step].Q824;
;;;391    
;;;392    //	state.main_feed_direction = 1;
;;;393    
;;;394    	//	do_fsm_move_start(&state);
;;;395    	//	do_fsm_wait_tacho(&state);
;;;396    	
;;;397    //	TIM4_IRQHandler();
;;;398      /* USER CODE END 1 */
;;;399    
;;;400      /* MCU Configuration--------------------------------------------------------*/
;;;401    
;;;402      /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
;;;403      
;;;404    
;;;405      LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
        0x080022a6:    2001        .       MOVS     r0,#1
        0x080022a8:    f7fef88e    ....    BL       LL_APB2_GRP1_EnableClock ; 0x80003c8
;;;406      LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
        0x080022ac:    f04f5080    O..P    MOV      r0,#0x10000000
        0x080022b0:    f7fef87c    ..|.    BL       LL_APB1_GRP1_EnableClock ; 0x80003ac
;;;407    
;;;408      NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
        0x080022b4:    2003        .       MOVS     r0,#3
;;; ../Drivers/CMSIS/Include/core_cm3.h
;;;1425     uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
        0x080022b6:    4602        .F      MOV      r2,r0
;;;1426   
;;;1427     reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
        0x080022b8:    4b65        eK      LDR      r3,[pc,#404] ; [0x8002450] = 0xe000ed0c
        0x080022ba:    6819        .h      LDR      r1,[r3,#0]
;;;1428     reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
        0x080022bc:    f64f03ff    O...    MOV      r3,#0xf8ff
        0x080022c0:    4019        .@      ANDS     r1,r1,r3
;;;1429     reg_value  =  (reg_value                                   |
        0x080022c2:    4b64        dK      LDR      r3,[pc,#400] ; [0x8002454] = 0x5fa0000
        0x080022c4:    430b        .C      ORRS     r3,r3,r1
        0x080022c6:    ea432102    C..!    ORR      r1,r3,r2,LSL #8
;;;1430                   ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
;;;1431                   (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
;;;1432     SCB->AIRCR =  reg_value;
        0x080022ca:    4b61        aK      LDR      r3,[pc,#388] ; [0x8002450] = 0xe000ed0c
        0x080022cc:    6019        .`      STR      r1,[r3,#0]
;;;1433   }
        0x080022ce:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;414      LL_GPIO_AF_Remap_SWJ_NOJTAG();
        0x080022d0:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h
;;;1597     CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
        0x080022d2:    4861        aH      LDR      r0,[pc,#388] ; [0x8002458] = 0x40010000
        0x080022d4:    6840        @h      LDR      r0,[r0,#4]
        0x080022d6:    f02060e0     ..`    BIC      r0,r0,#0x7000000
        0x080022da:    495f        _I      LDR      r1,[pc,#380] ; [0x8002458] = 0x40010000
        0x080022dc:    6048        H`      STR      r0,[r1,#4]
;;;1598     SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
        0x080022de:    4608        .F      MOV      r0,r1
        0x080022e0:    6840        @h      LDR      r0,[r0,#4]
        0x080022e2:    f0407000    @..p    ORR      r0,r0,#0x2000000
        0x080022e6:    6048        H`      STR      r0,[r1,#4]
;;;1599   }
        0x080022e8:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;420      SystemClock_Config();
        0x080022ea:    f7fffaff    ....    BL       SystemClock_Config ; 0x80018ec
;;;421    
;;;422      /* USER CODE BEGIN SysInit */
;;;423    	LL_SYSTICK_EnableIT();
        0x080022ee:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_cortex.h
;;;291      SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
        0x080022f0:    f04f20e0    O..     MOV      r0,#0xe000e000
        0x080022f4:    6900        .i      LDR      r0,[r0,#0x10]
        0x080022f6:    f0400002    @...    ORR      r0,r0,#2
        0x080022fa:    f04f21e0    O..!    MOV      r1,#0xe000e000
        0x080022fe:    6108        .a      STR      r0,[r1,#0x10]
;;;292    }
        0x08002300:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;427      MX_GPIO_Init();
        0x08002302:    f7fefd1f    ....    BL       MX_GPIO_Init ; 0x8000d44
;;;428      MX_DMA_Init();
        0x08002306:    f7fefcef    ....    BL       MX_DMA_Init ; 0x8000ce8
;;;429      MX_I2C2_Init();
        0x0800230a:    f7fefd95    ....    BL       MX_I2C2_Init ; 0x8000e38
;;;430      MX_TIM1_Init();
        0x0800230e:    f7fefe2b    ..+.    BL       MX_TIM1_Init ; 0x8000f68
;;;431      MX_TIM2_Init();
        0x08002312:    f7fefe93    ....    BL       MX_TIM2_Init ; 0x800103c
;;;432      MX_TIM3_Init();
        0x08002316:    f7fefee5    ....    BL       MX_TIM3_Init ; 0x80010e4
;;;433      MX_TIM4_Init();
        0x0800231a:    f7feffa7    ....    BL       MX_TIM4_Init ; 0x800126c
;;;434      MX_USART2_UART_Init();
        0x0800231e:    f7fff839    ..9.    BL       MX_USART2_UART_Init ; 0x8001394
;;;435      /* USER CODE BEGIN 2 */
;;;436    
;;;437      /* Enable DMA TX Interrupt */
;;;438      LL_USART_EnableDMAReq_TX(USART2);
        0x08002322:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h
;;;2416     SET_BIT(USARTx->CR3, USART_CR3_DMAT);
        0x08002324:    484d        MH      LDR      r0,[pc,#308] ; [0x800245c] = 0x40004400
        0x08002326:    6940        @i      LDR      r0,[r0,#0x14]
        0x08002328:    f0400080    @...    ORR      r0,r0,#0x80
        0x0800232c:    494b        KI      LDR      r1,[pc,#300] ; [0x800245c] = 0x40004400
        0x0800232e:    6148        Ha      STR      r0,[r1,#0x14]
;;;2417   }
        0x08002330:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;440      LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
        0x08002332:    484b        KH      LDR      r0,[pc,#300] ; [0x8002460] = 0x40020000
        0x08002334:    2107        .!      MOVS     r1,#7
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h
;;;472      SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
        0x08002336:    1e4a        J.      SUBS     r2,r1,#1
        0x08002338:    4b4a        JK      LDR      r3,[pc,#296] ; [0x8002464] = 0x80028b0
        0x0800233a:    5c9a        .\      LDRB     r2,[r3,r2]
        0x0800233c:    5882        .X      LDR      r2,[r0,r2]
        0x0800233e:    f0420301    B...    ORR      r3,r2,#1
        0x08002342:    1e4a        J.      SUBS     r2,r1,#1
        0x08002344:    4c47        GL      LDR      r4,[pc,#284] ; [0x8002464] = 0x80028b0
        0x08002346:    5ca2        .\      LDRB     r2,[r4,r2]
        0x08002348:    5083        .P      STR      r3,[r0,r2]
;;;473    }
        0x0800234a:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;445    	LL_TIM_GenerateEvent_UPDATE(TIM2);
        0x0800234c:    0340        @.      LSLS     r0,r0,#13
        0x0800234e:    f7fefa61    ..a.    BL       LL_TIM_GenerateEvent_UPDATE ; 0x8000814
;;;446    //  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1); // if we need output on leg
;;;447      LL_TIM_ClearFlag_UPDATE(TIM2);
        0x08002352:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;2932     WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
        0x08002354:    f06f0001    o...    MVN      r0,#1
        0x08002358:    f04f4180    O..A    MOV      r1,#0x40000000
        0x0800235c:    6108        .a      STR      r0,[r1,#0x10]
;;;2933   }
        0x0800235e:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;448    	LL_TIM_EnableIT_UPDATE(TIM2);
        0x08002360:    4608        .F      MOV      r0,r1
        0x08002362:    f7fefa4d    ..M.    BL       LL_TIM_EnableIT_UPDATE ; 0x8000800
;;;449    
;;;450    //	LL_GPIO_TogglePin(MOTOR_Z_ENABLE_GPIO_Port, MOTOR_Z_ENABLE_Pin);
;;;451    
;;;452    
;;;453    //  LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_DISABLED);
;;;454    //  LL_TIM_SetTriggerInput(TIM3, LL_TIM_TS_ITR1);
;;;455    //	TIM3->SR = 0;
;;;456    //	TIM2->SR = 0;
;;;457    	TIM3->ARR = 0;
        0x08002366:    2000        .       MOVS     r0,#0
        0x08002368:    493f        ?I      LDR      r1,[pc,#252] ; [0x8002468] = 0x4000042c
        0x0800236a:    6008        .`      STR      r0,[r1,#0]
;;;458    	LL_TIM_GenerateEvent_UPDATE(TIM3);
        0x0800236c:    483e        >H      LDR      r0,[pc,#248] ; [0x8002468] = 0x4000042c
        0x0800236e:    382c        ,8      SUBS     r0,r0,#0x2c
        0x08002370:    f7fefa50    ..P.    BL       LL_TIM_GenerateEvent_UPDATE ; 0x8000814
;;;459    	LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH1 | LL_TIM_CHANNEL_CH3);
        0x08002374:    f2401001    @...    MOV      r0,#0x101
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;1493     SET_BIT(TIMx->CCER, Channels);
        0x08002378:    493b        ;I      LDR      r1,[pc,#236] ; [0x8002468] = 0x4000042c
        0x0800237a:    392c        ,9      SUBS     r1,r1,#0x2c
        0x0800237c:    6a09        .j      LDR      r1,[r1,#0x20]
        0x0800237e:    4301        .C      ORRS     r1,r1,r0
        0x08002380:    4a39        9J      LDR      r2,[pc,#228] ; [0x8002468] = 0x4000042c
        0x08002382:    3a2c        ,:      SUBS     r2,r2,#0x2c
        0x08002384:    6211        .b      STR      r1,[r2,#0x20]
;;;1494   }
        0x08002386:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;460    	TIM3->SR = 0;
        0x08002388:    2000        .       MOVS     r0,#0
        0x0800238a:    4937        7I      LDR      r1,[pc,#220] ; [0x8002468] = 0x4000042c
        0x0800238c:    391c        .9      SUBS     r1,r1,#0x1c
        0x0800238e:    6008        .`      STR      r0,[r1,#0]
;;;461    	LL_TIM_EnableIT_UPDATE(TIM3);
        0x08002390:    4610        .F      MOV      r0,r2
        0x08002392:    f7fefa35    ..5.    BL       LL_TIM_EnableIT_UPDATE ; 0x8000800
;;;462    
;;;463    //	LL_GPIO_TogglePin(MOTOR_Z_ENABLE_GPIO_Port, MOTOR_Z_ENABLE_Pin);
;;;464    
;;;465    
;;;466    
;;;467    	if(LL_GPIO_IsInputPinSet(BUTTON_1_GPIO_Port, BUTTON_1_Pin)){
        0x08002396:    4835        5H      LDR      r0,[pc,#212] ; [0x800246c] = 0x4010001
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h
;;;741      return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
        0x08002398:    4935        5I      LDR      r1,[pc,#212] ; [0x8002470] = 0x40010800
        0x0800239a:    6889        .h      LDR      r1,[r1,#8]
        0x0800239c:    f3c0220f    ..."    UBFX     r2,r0,#8,#16
        0x080023a0:    4011        .@      ANDS     r1,r1,r2
        0x080023a2:    f3c0220f    ..."    UBFX     r2,r0,#8,#16
        0x080023a6:    4291        .B      CMP      r1,r2
        0x080023a8:    d101        ..      BNE      0x80023ae ; main + 270
        0x080023aa:    2101        .!      MOVS     r1,#1
        0x080023ac:    e000        ..      B        0x80023b0 ; main + 272
        0x080023ae:    2100        .!      MOVS     r1,#0
        0x080023b0:    b111        ..      CBZ      r1,0x80023b8 ; main + 280
;;; .\../Src/main.c
;;;468    		demo = true;
        0x080023b2:    2001        .       MOVS     r0,#1
        0x080023b4:    492f        /I      LDR      r1,[pc,#188] ; [0x8002474] = 0x20000041
        0x080023b6:    7008        .p      STRB     r0,[r1,#0]
;;;469    	}
;;;470    //	MOTOR_Z_Disable();
;;;471    //	MOTOR_X_Disable();
;;;472    // инициализация дисплея
;;;473    #ifndef _SIMU
;;;474    	Activate_I2C_Master();
;;;475    	init_screen(I2C2);
;;;476    //	update_screen();
;;;477    //	i2c_device_init(I2C2);
;;;478    	LL_mDelay(250);
;;;479    #endif
;;;480    	init_buttons();
        0x080023b8:    f7ffff5c    ..\.    BL       init_buttons ; 0x8002274
;;;481      /* USER CODE END 2 */
;;;482    
;;;483      /* Infinite loop */
;;;484      /* USER CODE BEGIN WHILE */
;;;485    
;;;486    
;;;487    ///// from STM examples:
;;;488    //  /**************************/
;;;489    //  /* Start pulse generation */
;;;490    //  /**************************/
;;;491    //  /* Enable channel 1 */
;;;492    //  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH3);
;;;493    //  
;;;494    //  /* Enable TIM3 outputs */
;;;495    //  LL_TIM_EnableAllOutputs(TIM3);
;;;496    //  
;;;497    //  /* Enable auto-reload register preload */
;;;498    //  LL_TIM_EnableARRPreload(TIM3);
;;;499    
;;;500    //  /* Force update generation */
;;;501    //  LL_TIM_GenerateEvent_UPDATE(TIM3);  
;;;502    
;;;503    
;;;504    //  LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_DISABLED);
;;;505    
;;;506    
;;;507    
;;;508    
;;;509    //  LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_DISABLED);
;;;510    //  LL_TIM_SetTriggerInput(TIM3, LL_TIM_TS_ITR1); 				//trigger by TIM2(async mode)
;;;511    //  LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_TRIGGER);
;;;512    
;;;513    //  LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_DISABLED);
;;;514    //  LL_TIM_SetTriggerInput(TIM3, LL_TIM_TS_ITR3); 				//trigger by spindle encoder timer TIM4(sync mode)
;;;515    //  LL_TIM_SetSlaveMode(TIM3, LL_TIM_SLAVEMODE_TRIGGER);
;;;516    
;;;517    
;;;518    //	MOTOR_X_BlockPulse(); // LL_TIM_OC_SetCompareCH3(TIM3, 0);
;;;519    //	MOTOR_Z_BlockPulse(); // LL_TIM_OC_SetCompareCH3(TIM3, 0);
;;;520    
;;;521    //LL_TIM_EnableCounter(TIM3);
;;;522    
;;;523    
;;;524    //TIM3->SR = 0;
;;;525    //TIM3->EGR |= TIM_EGR_UG;
;;;526    //		LL_TIM_GenerateEvent_UPDATE(TIM3); /* Force update generation */
;;;527    
;;;528    //  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH1);
;;;529    	//GPIOB->BSRR
;;;530    //	LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_0);
;;;531    //	LL_mDelay(50);
;;;532    //	LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_0);
;;;533    //	LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH3);
;;;534    	
;;;535    //	LL_TIM_EnableAllOutputs(TIM3);
;;;536    //MOTOR_X_AllowPulse();
;;;537    //MOTOR_Z_AllowPulse();
;;;538    //		LL_mDelay(50);
;;;539    //	LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH3);	// configure TACHO events on channel 3
;;;540      LL_TIM_EnableIT_CC3(TIM4);													// enable interrupts for TACHO events from encoder
        0x080023bc:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;3302     SET_BIT(TIMx->DIER, TIM_DIER_CC3IE);
        0x080023be:    482e        .H      LDR      r0,[pc,#184] ; [0x8002478] = 0x40000800
        0x080023c0:    68c0        .h      LDR      r0,[r0,#0xc]
        0x080023c2:    f0400008    @...    ORR      r0,r0,#8
        0x080023c6:    492c        ,I      LDR      r1,[pc,#176] ; [0x8002478] = 0x40000800
        0x080023c8:    60c8        .`      STR      r0,[r1,#0xc]
;;;3303   }
        0x080023ca:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;541      LL_TIM_EnableCounter(TIM4); 												//Enable timer 4
        0x080023cc:    bf00        ..      NOP      
;;; ../Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h
;;;1027     SET_BIT(TIMx->CR1, TIM_CR1_CEN);
        0x080023ce:    4608        .F      MOV      r0,r1
        0x080023d0:    6800        .h      LDR      r0,[r0,#0]
        0x080023d2:    f0400001    @...    ORR      r0,r0,#1
        0x080023d6:    6008        .`      STR      r0,[r1,#0]
;;;1028   }
        0x080023d8:    bf00        ..      NOP      
;;; .\../Src/main.c
;;;543    	TIM4->SR = 0; 																			// reset interrup flags
        0x080023da:    2000        .       MOVS     r0,#0
        0x080023dc:    4926        &I      LDR      r1,[pc,#152] ; [0x8002478] = 0x40000800
        0x080023de:    3110        .1      ADDS     r1,r1,#0x10
        0x080023e0:    6008        .`      STR      r0,[r1,#0]
;;;544    
;;;545    //	LL_TIM_EnableIT_UPDATE(TIM1);
;;;546    //	LL_TIM_EnableIT_UPDATE(TIM2);
;;;547    //	LL_TIM_EnableCounter(TIM2);
;;;548    	
;;;549    //	do_fsm_move_start(&state);
;;;550    
;;;551    	
;;;552      /* Enable counter */
;;;553    //  LL_TIM_EnableCounter(TIM2);
;;;554      /* Force update generation */
;;;555    //  LL_TIM_GenerateEvent_UPDATE(TIM2);
;;;556    
;;;557    // init buttons
;;;558    //	LL_mDelay(5);
;;;559    	do_fsm_menu(&state);
        0x080023e2:    4826        &H      LDR      r0,[pc,#152] ; [0x800247c] = 0x20000044
        0x080023e4:    f7fffc56    ..V.    BL       do_fsm_menu ; 0x8001c94
;;;560    //	LL_mDelay(5);
;;;561    //	LL_GPIO_TogglePin(MOTOR_Z_ENABLE_GPIO_Port, MOTOR_Z_ENABLE_Pin);
;;;562    	LED_GPIO_Port->BSRR = LED_Pin; // led off
        0x080023e8:    4825        %H      LDR      r0,[pc,#148] ; [0x8002480] = 0x4200020
        0x080023ea:    4926        &I      LDR      r1,[pc,#152] ; [0x8002484] = 0x40011000
        0x080023ec:    6108        .a      STR      r0,[r1,#0x10]
;;;563    	while (1) {
        0x080023ee:    e02b        +.      B        0x8002448 ; main + 424
;;;564        /* USER CODE END WHILE */
;;;565    
;;;566        /* USER CODE BEGIN 3 */
;;;567    #ifndef _SIMU		
;;;568    //		reqest_sample_i2c_dma(); // init reqest to joystick by DMA, when process_button complete i2c done its job
;;;569    #endif		
;;;570    //		read_sample_i2c(&i2c_device_logging.sample[i2c_device_logging.index]);
;;;571    		process_button();
        0x080023f0:    f000f850    ..P.    BL       process_button ; 0x8002494
;;;572    //		process_joystick();
;;;573    //		read_sample_i2c(&i2c_device_logging.sample[i2c_device_logging.index]);
;;;574    
;;;575    
;;;576    //		uint8_t level = Thread_Info[Menu_Step].level;
;;;577    
;;;578    //		if(auto_mode == true) {
;;;579    //			if ( auto_mode_delay == 0 ) {
;;;580    //				buttons_flag_set = single_click_Msk; //
;;;581    //			}
;;;582    //		}
;;;583    
;;;584    		if(buttons_flag_set) {
        0x080023f4:    4824        $H      LDR      r0,[pc,#144] ; [0x8002488] = 0x200005dc
        0x080023f6:    6800        .h      LDR      r0,[r0,#0]
        0x080023f8:    b128        (.      CBZ      r0,0x8002406 ; main + 358
;;;585    			do_fsm_menu(&state);
        0x080023fa:    4820         H      LDR      r0,[pc,#128] ; [0x800247c] = 0x20000044
        0x080023fc:    f7fffc4a    ..J.    BL       do_fsm_menu ; 0x8001c94
;;;586    			buttons_flag_set = 0; // reset button flags
        0x08002400:    2000        .       MOVS     r0,#0
        0x08002402:    4921        !I      LDR      r1,[pc,#132] ; [0x8002488] = 0x200005dc
        0x08002404:    6008        .`      STR      r0,[r1,#0]
;;;587    		}
;;;588    
;;;589    		if(z_axis.ramp_step != rs) {
        0x08002406:    4821        !H      LDR      r0,[pc,#132] ; [0x800248c] = 0x200005e0
        0x08002408:    f8900028    ..(.    LDRB     r0,[r0,#0x28]
        0x0800240c:    490f        .I      LDR      r1,[pc,#60] ; [0x800244c] = 0x200000b0
        0x0800240e:    6809        .h      LDR      r1,[r1,#0]
        0x08002410:    4288        .B      CMP      r0,r1
        0x08002412:    d007        ..      BEQ      0x8002424 ; main + 388
;;;590    			rs = z_axis.ramp_step;
        0x08002414:    481d        .H      LDR      r0,[pc,#116] ; [0x800248c] = 0x200005e0
        0x08002416:    f8900028    ..(.    LDRB     r0,[r0,#0x28]
        0x0800241a:    490c        .I      LDR      r1,[pc,#48] ; [0x800244c] = 0x200000b0
        0x0800241c:    6008        .`      STR      r0,[r1,#0]
;;;591    			menu_changed = 1;
        0x0800241e:    2001        .       MOVS     r0,#1
        0x08002420:    491b        .I      LDR      r1,[pc,#108] ; [0x8002490] = 0x200000a4
        0x08002422:    6008        .`      STR      r0,[r1,#0]
;;;592    		}
;;;593    
;;;594    		if(z_axis.current_pos != rs) {
        0x08002424:    4819        .H      LDR      r0,[pc,#100] ; [0x800248c] = 0x200005e0
        0x08002426:    6800        .h      LDR      r0,[r0,#0]
        0x08002428:    4908        .I      LDR      r1,[pc,#32] ; [0x800244c] = 0x200000b0
        0x0800242a:    6809        .h      LDR      r1,[r1,#0]
        0x0800242c:    4288        .B      CMP      r0,r1
        0x0800242e:    d003        ..      BEQ      0x8002438 ; main + 408
;;;595    			rs = z_axis.current_pos;
        0x08002430:    4816        .H      LDR      r0,[pc,#88] ; [0x800248c] = 0x200005e0
        0x08002432:    6800        .h      LDR      r0,[r0,#0]
        0x08002434:    4905        .I      LDR      r1,[pc,#20] ; [0x800244c] = 0x200000b0
        0x08002436:    6008        .`      STR      r0,[r1,#0]
;;;596    //			menu_changed = 1;
;;;597    		}
;;;598    
;;;599    // update display info
;;;600    		if(menu_changed == 1){ // haltodo && hi2c2.hdmatx->State == HAL_DMA_STATE_READY) {
        0x08002438:    4815        .H      LDR      r0,[pc,#84] ; [0x8002490] = 0x200000a4
        0x0800243a:    6800        .h      LDR      r0,[r0,#0]
        0x0800243c:    2801        .(      CMP      r0,#1
        0x0800243e:    d103        ..      BNE      0x8002448 ; main + 424
;;;601    			menu_changed = update_screen();
        0x08002440:    f000f954    ..T.    BL       update_screen ; 0x80026ec
        0x08002444:    4912        .I      LDR      r1,[pc,#72] ; [0x8002490] = 0x200000a4
        0x08002446:    6008        .`      STR      r0,[r1,#0]
        0x08002448:    e7d2        ..      B        0x80023f0 ; main + 336
    $d
        0x0800244a:    0000        ..      DCW    0
        0x0800244c:    200000b0    ...     DCD    536871088
        0x08002450:    e000ed0c    ....    DCD    3758157068
        0x08002454:    05fa0000    ....    DCD    100270080
        0x08002458:    40010000    ...@    DCD    1073807360
        0x0800245c:    40004400    .D.@    DCD    1073759232
        0x08002460:    40020000    ...@    DCD    1073872896
        0x08002464:    080028b0    .(..    DCD    134228144
        0x08002468:    4000042c    ,..@    DCD    1073742892
        0x0800246c:    04010001    ....    DCD    67174401
        0x08002470:    40010800    ...@    DCD    1073809408
        0x08002474:    20000041    A..     DCD    536870977
        0x08002478:    40000800    ...@    DCD    1073743872
        0x0800247c:    20000044    D..     DCD    536870980
        0x08002480:    04200020     . .    DCD    69206048
        0x08002484:    40011000    ...@    DCD    1073811456
        0x08002488:    200005dc    ...     DCD    536872412
        0x0800248c:    200005e0    ...     DCD    536872416
        0x08002490:    200000a4    ...     DCD    536871076
    $t
    i.process_button
    process_button
;;; .\..\Src\buttons.c
;;;57     {
        0x08002494:    b570        p.      PUSH     {r4-r6,lr}
;;;58     	for(int a =0; a<BT_TOTAL;a++){
        0x08002496:    2400        .$      MOVS     r4,#0
        0x08002498:    e11c        ..      B        0x80026d4 ; process_button + 576
;;;59     	/*
;;;60     	click Nondeterministic finite automaton(NFA):
;;;61     	10. ждем сигнала с кнопки
;;;62     	20. кнопка нажата, считаем тики. если тиков > 1000 это лонг пресс, идем в 30
;;;63     	30. сигнал long_press_start, идем в 40
;;;64     	40. ждем отпуска кнопки, далее в 50
;;;65     	50. кнопку отпустили, если тиков меньше 200 идем в 70, иначе в 60
;;;66     	60. если тиков < 1000 генерим сигнал CLICK, если тиков больше генерим сигнал long_press_end, идем в 10
;;;67     	70. тиков меньше 200, это может быть дабл-клик, ждем еще 100, если ничего идем в 60, если клик идем в 80
;;;68     	80. ждем отпуска кнопки, далее в 90
;;;69     	90. кнопку отпустили, генерим DOUBLE_CLICK, идем в 10
;;;70     	*/
;;;71      
;;;72     //	#if defined ( _SIMU )
;;;73     //		uint32_t tmp_buttons = bt[a].GPIOx->IDR & bt[a].button_pin;
;;;74     //	#else
;;;75     		uint32_t tmp_buttons;
;;;76     		if(bt[a].GPIOx != 0)
        0x0800249a:    4891        .H      LDR      r0,[pc,#580] ; [0x80026e0] = 0x200004f0
        0x0800249c:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x080024a0:    6800        .h      LDR      r0,[r0,#0]
        0x080024a2:    b158        X.      CBZ      r0,0x80024bc ; process_button + 40
;;;77     			tmp_buttons = LL_GPIO_IsInputPinSet(bt[a].GPIOx,bt[a].button_pin);
        0x080024a4:    4a8e        .J      LDR      r2,[pc,#568] ; [0x80026e0] = 0x200004f0
        0x080024a6:    eb021244    ..D.    ADD      r2,r2,r4,LSL #5
        0x080024aa:    6851        Qh      LDR      r1,[r2,#4]
        0x080024ac:    4a8c        .J      LDR      r2,[pc,#560] ; [0x80026e0] = 0x200004f0
        0x080024ae:    eb021244    ..D.    ADD      r2,r2,r4,LSL #5
        0x080024b2:    6810        .h      LDR      r0,[r2,#0]
        0x080024b4:    f7fef897    ....    BL       LL_GPIO_IsInputPinSet ; 0x80005e6
        0x080024b8:    4605        .F      MOV      r5,r0
        0x080024ba:    e007        ..      B        0x80024cc ; process_button + 56
;;;78     //			tmp_buttons = bt[a].GPIOx->IDR & bt[a].button_pin; //BUTTON_1_GPIO_Port->IDR & bt[a].button_pin;
;;;79     		else{
;;;80     			
;;;81     //			if(ubTransferComplete == 0)
;;;82     //				continue;
;;;83     			//	dma_delay = 0;
;;;84     //	while(hi2c2->hdmarx->State != HAL_DMA_STATE_READY){
;;;85     //		dma_delay++;
;;;86     //		HAL_Delay(1);
;;;87     //	}
;;;88     //	dma_delay2 = dma_delay;
;;;89     
;;;90     			tmp_buttons = dma_data[5] & bt[a].button_pin;
        0x080024bc:    4889        .H      LDR      r0,[pc,#548] ; [0x80026e4] = 0x20000011
        0x080024be:    7940        @y      LDRB     r0,[r0,#5]
        0x080024c0:    4987        .I      LDR      r1,[pc,#540] ; [0x80026e0] = 0x200004f0
        0x080024c2:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x080024c6:    6849        Ih      LDR      r1,[r1,#4]
        0x080024c8:    ea000501    ....    AND      r5,r0,r1
;;;91     		}
;;;92     //	#endif
;;;93     
;;;94     //		if(z_axis.current_pos < 20)
;;;95     //			tmp_buttons = 0;
;;;96     		
;;;97     		if( tmp_buttons != bt[a].buttons ) { // start debounce
        0x080024cc:    4884        .H      LDR      r0,[pc,#528] ; [0x80026e0] = 0x200004f0
        0x080024ce:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x080024d2:    68c0        .h      LDR      r0,[r0,#0xc]
        0x080024d4:    42a8        .B      CMP      r0,r5
        0x080024d6:    d009        ..      BEQ      0x80024ec ; process_button + 88
;;;98     			bt[a].buttons = tmp_buttons;
        0x080024d8:    4881        .H      LDR      r0,[pc,#516] ; [0x80026e0] = 0x200004f0
        0x080024da:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x080024de:    60c5        .`      STR      r5,[r0,#0xc]
;;;99     			// reset debounce counter and start count every one ms
;;;100    			bt[a].buttons_mstick = 1;
        0x080024e0:    2001        .       MOVS     r0,#1
        0x080024e2:    497f        .I      LDR      r1,[pc,#508] ; [0x80026e0] = 0x200004f0
        0x080024e4:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x080024e8:    6108        .a      STR      r0,[r1,#0x10]
        0x080024ea:    bd70        p.      POP      {r4-r6,pc}
;;;101    			return;
;;;102    		}
;;;103    
;;;104    		if( bt[a].buttons_mstick > DEBOUNCE_MS ) {
        0x080024ec:    487c        |H      LDR      r0,[pc,#496] ; [0x80026e0] = 0x200004f0
        0x080024ee:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x080024f2:    6900        .i      LDR      r0,[r0,#0x10]
        0x080024f4:    2814        .(      CMP      r0,#0x14
        0x080024f6:    d971        q.      BLS      0x80025dc ; process_button + 328
;;;105    			switch(bt[a].clk_mode) {
        0x080024f8:    4879        yH      LDR      r0,[pc,#484] ; [0x80026e0] = 0x200004f0
        0x080024fa:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x080024fe:    69c0        .i      LDR      r0,[r0,#0x1c]
        0x08002500:    2832        2(      CMP      r0,#0x32
        0x08002502:    d063        c.      BEQ      0x80025cc ; process_button + 312
        0x08002504:    dc08        ..      BGT      0x8002518 ; process_button + 132
        0x08002506:    280a        .(      CMP      r0,#0xa
        0x08002508:    d00f        ..      BEQ      0x800252a ; process_button + 150
        0x0800250a:    2814        .(      CMP      r0,#0x14
        0x0800250c:    d019        ..      BEQ      0x8002542 ; process_button + 174
        0x0800250e:    281e        .(      CMP      r0,#0x1e
        0x08002510:    d038        8.      BEQ      0x8002584 ; process_button + 240
        0x08002512:    2828        ((      CMP      r0,#0x28
        0x08002514:    d114        ..      BNE      0x8002540 ; process_button + 172
        0x08002516:    e044        D.      B        0x80025a2 ; process_button + 270
        0x08002518:    283c        <(      CMP      r0,#0x3c
        0x0800251a:    d066        f.      BEQ      0x80025ea ; process_button + 342
        0x0800251c:    2846        F(      CMP      r0,#0x46
        0x0800251e:    d075        u.      BEQ      0x800260c ; process_button + 376
        0x08002520:    2850        P(      CMP      r0,#0x50
        0x08002522:    d074        t.      BEQ      0x800260e ; process_button + 378
        0x08002524:    285a        Z(      CMP      r0,#0x5a
        0x08002526:    d1f5        ..      BNE      0x8002514 ; process_button + 128
        0x08002528:    e0be        ..      B        0x80026a8 ; process_button + 532
;;;106    			case 10: {
;;;107    				if ( tmp_buttons & bt[a].button_pin ) {   // released
        0x0800252a:    486d        mH      LDR      r0,[pc,#436] ; [0x80026e0] = 0x200004f0
        0x0800252c:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x08002530:    6840        @h      LDR      r0,[r0,#4]
        0x08002532:    4028        (@      ANDS     r0,r0,r5
        0x08002534:    b920         .      CBNZ     r0,0x8002540 ; process_button + 172
;;;108    				} else { // pressed
;;;109    //					buttons_mstick = 1;
;;;110    					bt[a].clk_mode = 20;
        0x08002536:    2014        .       MOVS     r0,#0x14
        0x08002538:    4969        iI      LDR      r1,[pc,#420] ; [0x80026e0] = 0x200004f0
        0x0800253a:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x0800253e:    61c8        .a      STR      r0,[r1,#0x1c]
;;;111    				}
;;;112    				break;
        0x08002540:    e0c6        ..      B        0x80026d0 ; process_button + 572
;;;113    			}
;;;114    			case 20: {
;;;115    				if ( tmp_buttons & bt[a].button_pin ) { // released
        0x08002542:    4867        gH      LDR      r0,[pc,#412] ; [0x80026e0] = 0x200004f0
        0x08002544:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x08002548:    6840        @h      LDR      r0,[r0,#4]
        0x0800254a:    4028        (@      ANDS     r0,r0,r5
        0x0800254c:    b128        (.      CBZ      r0,0x800255a ; process_button + 198
;;;116    					bt[a].clk_mode = 50;
        0x0800254e:    2032        2       MOVS     r0,#0x32
        0x08002550:    4963        cI      LDR      r1,[pc,#396] ; [0x80026e0] = 0x200004f0
        0x08002552:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x08002556:    61c8        .a      STR      r0,[r1,#0x1c]
        0x08002558:    e007        ..      B        0x800256a ; process_button + 214
;;;117    				} else {
;;;118    					bt[a].downTime = bt[a].buttons_mstick;
        0x0800255a:    4861        aH      LDR      r0,[pc,#388] ; [0x80026e0] = 0x200004f0
        0x0800255c:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x08002560:    6900        .i      LDR      r0,[r0,#0x10]
        0x08002562:    495f        _I      LDR      r1,[pc,#380] ; [0x80026e0] = 0x200004f0
        0x08002564:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x08002568:    6088        .`      STR      r0,[r1,#8]
;;;119    				}
;;;120    				if (bt[a].downTime > HOLDTIME_MS ) { // long press detected
        0x0800256a:    485d        ]H      LDR      r0,[pc,#372] ; [0x80026e0] = 0x200004f0
        0x0800256c:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x08002570:    6880        .h      LDR      r0,[r0,#8]
        0x08002572:    f5b07ffa    ....    CMP      r0,#0x1f4
        0x08002576:    d904        ..      BLS      0x8002582 ; process_button + 238
;;;121    					bt[a].clk_mode = 30;
        0x08002578:    201e        .       MOVS     r0,#0x1e
        0x0800257a:    4959        YI      LDR      r1,[pc,#356] ; [0x80026e0] = 0x200004f0
        0x0800257c:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x08002580:    61c8        .a      STR      r0,[r1,#0x1c]
;;;122    				}
;;;123    				break;
        0x08002582:    e0a5        ..      B        0x80026d0 ; process_button + 572
;;;124    			}
;;;125    			case 30: { // long_press_start event
;;;126    				buttons_flag_setbb[(a<<2)+long_press_start_Pos]  = 1; //long_press_start = 1;
        0x08002584:    2001        .       MOVS     r0,#1
        0x08002586:    2100        .!      MOVS     r1,#0
        0x08002588:    eb010184    ....    ADD      r1,r1,r4,LSL #2
        0x0800258c:    4a56        VJ      LDR      r2,[pc,#344] ; [0x80026e8] = 0x2200b000
        0x0800258e:    eb020181    ....    ADD      r1,r2,r1,LSL #2
        0x08002592:    f8c10b80    ....    STR      r0,[r1,#0xb80]
;;;127    				bt[a].clk_mode = 40;
        0x08002596:    2028        (       MOVS     r0,#0x28
        0x08002598:    4951        QI      LDR      r1,[pc,#324] ; [0x80026e0] = 0x200004f0
        0x0800259a:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x0800259e:    61c8        .a      STR      r0,[r1,#0x1c]
;;;128    				break;
        0x080025a0:    e096        ..      B        0x80026d0 ; process_button + 572
;;;129    			}
;;;130    			case 40: {
;;;131    				if ( tmp_buttons & bt[a].button_pin ) { //released
        0x080025a2:    484f        OH      LDR      r0,[pc,#316] ; [0x80026e0] = 0x200004f0
        0x080025a4:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x080025a8:    6840        @h      LDR      r0,[r0,#4]
        0x080025aa:    4028        (@      ANDS     r0,r0,r5
        0x080025ac:    b128        (.      CBZ      r0,0x80025ba ; process_button + 294
;;;132    					bt[a].clk_mode = 50;
        0x080025ae:    2032        2       MOVS     r0,#0x32
        0x080025b0:    494b        KI      LDR      r1,[pc,#300] ; [0x80026e0] = 0x200004f0
        0x080025b2:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x080025b6:    61c8        .a      STR      r0,[r1,#0x1c]
        0x080025b8:    e007        ..      B        0x80025ca ; process_button + 310
;;;133    				} else {
;;;134    					bt[a].downTime = bt[a].buttons_mstick;
        0x080025ba:    4849        IH      LDR      r0,[pc,#292] ; [0x80026e0] = 0x200004f0
        0x080025bc:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x080025c0:    6900        .i      LDR      r0,[r0,#0x10]
        0x080025c2:    4947        GI      LDR      r1,[pc,#284] ; [0x80026e0] = 0x200004f0
        0x080025c4:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x080025c8:    6088        .`      STR      r0,[r1,#8]
;;;135    				}
;;;136    				break;
        0x080025ca:    e081        ..      B        0x80026d0 ; process_button + 572
;;;137    			}
;;;138    			case 50: {
;;;139    				bt[a].clk_mode = bt[a].downTime < CLICKTIME_MS ? 70 : 60;
        0x080025cc:    4844        DH      LDR      r0,[pc,#272] ; [0x80026e0] = 0x200004f0
        0x080025ce:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x080025d2:    6880        .h      LDR      r0,[r0,#8]
        0x080025d4:    28fa        .(      CMP      r0,#0xfa
        0x080025d6:    d202        ..      BCS      0x80025de ; process_button + 330
        0x080025d8:    2046        F       MOVS     r0,#0x46
        0x080025da:    e001        ..      B        0x80025e0 ; process_button + 332
        0x080025dc:    e079        y.      B        0x80026d2 ; process_button + 574
        0x080025de:    203c        <       MOVS     r0,#0x3c
        0x080025e0:    493f        ?I      LDR      r1,[pc,#252] ; [0x80026e0] = 0x200004f0
        0x080025e2:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x080025e6:    61c8        .a      STR      r0,[r1,#0x1c]
;;;140    				break;
        0x080025e8:    e072        r.      B        0x80026d0 ; process_button + 572
;;;141    			}
;;;142    			case 60: {//60 if tick count < 1000 generate CLICK event, else generate long_press_end event, go to 10 state
;;;143    				if(bt[a].downTime < HOLDTIME_MS) { //single CLICK event
        0x080025ea:    483d        =H      LDR      r0,[pc,#244] ; [0x80026e0] = 0x200004f0
        0x080025ec:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x080025f0:    6880        .h      LDR      r0,[r0,#8]
        0x080025f2:    f5b07ffa    ....    CMP      r0,#0x1f4
        0x080025f6:    d20b        ..      BCS      0x8002610 ; process_button + 380
;;;144    					buttons_flag_setbb[(a<<2)+single_click_Pos]  = 1; //single_click = 1;
        0x080025f8:    2001        .       MOVS     r0,#1
        0x080025fa:    2102        .!      MOVS     r1,#2
        0x080025fc:    eb010184    ....    ADD      r1,r1,r4,LSL #2
        0x08002600:    4a39        9J      LDR      r2,[pc,#228] ; [0x80026e8] = 0x2200b000
        0x08002602:    eb020181    ....    ADD      r1,r2,r1,LSL #2
        0x08002606:    f8c10b80    ....    STR      r0,[r1,#0xb80]
        0x0800260a:    e009        ..      B        0x8002620 ; process_button + 396
        0x0800260c:    e017        ..      B        0x800263e ; process_button + 426
        0x0800260e:    e036        6.      B        0x800267e ; process_button + 490
;;;145    				} else { //  long_press_end event
;;;146    					buttons_flag_setbb[(a<<2)+long_press_end_Pos]  = 1; //long_press_end = 1;
        0x08002610:    2001        .       MOVS     r0,#1
        0x08002612:    eb000184    ....    ADD      r1,r0,r4,LSL #2
        0x08002616:    4a34        4J      LDR      r2,[pc,#208] ; [0x80026e8] = 0x2200b000
        0x08002618:    eb020181    ....    ADD      r1,r2,r1,LSL #2
        0x0800261c:    f8c10b80    ....    STR      r0,[r1,#0xb80]
;;;147    				}
;;;148    				bt[a].downTime = bt[a].buttons_mstick = 0;
        0x08002620:    2000        .       MOVS     r0,#0
        0x08002622:    492f        /I      LDR      r1,[pc,#188] ; [0x80026e0] = 0x200004f0
        0x08002624:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x08002628:    6108        .a      STR      r0,[r1,#0x10]
        0x0800262a:    492d        -I      LDR      r1,[pc,#180] ; [0x80026e0] = 0x200004f0
        0x0800262c:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x08002630:    6088        .`      STR      r0,[r1,#8]
;;;149    				bt[a].clk_mode = 10;
        0x08002632:    200a        .       MOVS     r0,#0xa
        0x08002634:    492a        *I      LDR      r1,[pc,#168] ; [0x80026e0] = 0x200004f0
        0x08002636:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x0800263a:    61c8        .a      STR      r0,[r1,#0x1c]
;;;150    				break;
        0x0800263c:    e048        H.      B        0x80026d0 ; process_button + 572
;;;151    			}
;;;152    			case 70: { //70. тиков меньше 200, это может быть дабл-клик, ждем нажатия еще 100, если ничего идем в 60, если клик идем в 80
;;;153    				if ( tmp_buttons & bt[a].button_pin ) {
        0x0800263e:    4828        (H      LDR      r0,[pc,#160] ; [0x80026e0] = 0x200004f0
        0x08002640:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x08002644:    6840        @h      LDR      r0,[r0,#4]
        0x08002646:    4028        (@      ANDS     r0,r0,r5
        0x08002648:    b198        ..      CBZ      r0,0x8002672 ; process_button + 478
;;;154    					bt[a].downTime = bt[a].buttons_mstick;
        0x0800264a:    4825        %H      LDR      r0,[pc,#148] ; [0x80026e0] = 0x200004f0
        0x0800264c:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x08002650:    6900        .i      LDR      r0,[r0,#0x10]
        0x08002652:    4923        #I      LDR      r1,[pc,#140] ; [0x80026e0] = 0x200004f0
        0x08002654:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x08002658:    6088        .`      STR      r0,[r1,#8]
;;;155    					if( bt[a].downTime > DOUBLECLICK_GAP_MS ) {
        0x0800265a:    4821        !H      LDR      r0,[pc,#132] ; [0x80026e0] = 0x200004f0
        0x0800265c:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x08002660:    6880        .h      LDR      r0,[r0,#8]
        0x08002662:    2896        .(      CMP      r0,#0x96
        0x08002664:    d90a        ..      BLS      0x800267c ; process_button + 488
;;;156    						bt[a].clk_mode = 60;
        0x08002666:    203c        <       MOVS     r0,#0x3c
        0x08002668:    491d        .I      LDR      r1,[pc,#116] ; [0x80026e0] = 0x200004f0
        0x0800266a:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x0800266e:    61c8        .a      STR      r0,[r1,#0x1c]
        0x08002670:    e004        ..      B        0x800267c ; process_button + 488
;;;157    					}
;;;158    				} else {
;;;159    					bt[a].clk_mode = 80;
        0x08002672:    2050        P       MOVS     r0,#0x50
        0x08002674:    491a        .I      LDR      r1,[pc,#104] ; [0x80026e0] = 0x200004f0
        0x08002676:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x0800267a:    61c8        .a      STR      r0,[r1,#0x1c]
;;;160    				}
;;;161    				break;
        0x0800267c:    e028        (.      B        0x80026d0 ; process_button + 572
;;;162    			}
;;;163    			case 80: {
;;;164    				if ( tmp_buttons & bt[a].button_pin ) { // released
        0x0800267e:    4818        .H      LDR      r0,[pc,#96] ; [0x80026e0] = 0x200004f0
        0x08002680:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x08002684:    6840        @h      LDR      r0,[r0,#4]
        0x08002686:    4028        (@      ANDS     r0,r0,r5
        0x08002688:    b128        (.      CBZ      r0,0x8002696 ; process_button + 514
;;;165    					bt[a].clk_mode = 90;
        0x0800268a:    205a        Z       MOVS     r0,#0x5a
        0x0800268c:    4914        .I      LDR      r1,[pc,#80] ; [0x80026e0] = 0x200004f0
        0x0800268e:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x08002692:    61c8        .a      STR      r0,[r1,#0x1c]
        0x08002694:    e007        ..      B        0x80026a6 ; process_button + 530
;;;166    				} else {
;;;167    					bt[a].downTime = bt[a].buttons_mstick;
        0x08002696:    4812        .H      LDR      r0,[pc,#72] ; [0x80026e0] = 0x200004f0
        0x08002698:    eb001044    ..D.    ADD      r0,r0,r4,LSL #5
        0x0800269c:    6900        .i      LDR      r0,[r0,#0x10]
        0x0800269e:    4910        .I      LDR      r1,[pc,#64] ; [0x80026e0] = 0x200004f0
        0x080026a0:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x080026a4:    6088        .`      STR      r0,[r1,#8]
;;;168    				}
;;;169    				break;
        0x080026a6:    e013        ..      B        0x80026d0 ; process_button + 572
;;;170    			}
;;;171    			case 90: { // сигнал DOUBLE_CLICK
;;;172    				buttons_flag_setbb[(a<<2)+double_click_Pos]  = 1; //double_click = 1;
        0x080026a8:    2001        .       MOVS     r0,#1
        0x080026aa:    2103        .!      MOVS     r1,#3
        0x080026ac:    eb010184    ....    ADD      r1,r1,r4,LSL #2
        0x080026b0:    4a0d        .J      LDR      r2,[pc,#52] ; [0x80026e8] = 0x2200b000
        0x080026b2:    eb020181    ....    ADD      r1,r2,r1,LSL #2
        0x080026b6:    f8c10b80    ....    STR      r0,[r1,#0xb80]
;;;173    				bt[a].clk_mode = 10;
        0x080026ba:    200a        .       MOVS     r0,#0xa
        0x080026bc:    4908        .I      LDR      r1,[pc,#32] ; [0x80026e0] = 0x200004f0
        0x080026be:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x080026c2:    61c8        .a      STR      r0,[r1,#0x1c]
;;;174    				bt[a].buttons_mstick = 0;
        0x080026c4:    2000        .       MOVS     r0,#0
        0x080026c6:    4906        .I      LDR      r1,[pc,#24] ; [0x80026e0] = 0x200004f0
        0x080026c8:    eb011144    ..D.    ADD      r1,r1,r4,LSL #5
        0x080026cc:    6108        .a      STR      r0,[r1,#0x10]
;;;175    				break;
        0x080026ce:    bf00        ..      NOP      
        0x080026d0:    bf00        ..      NOP      
        0x080026d2:    1c64        d.      ADDS     r4,r4,#1
        0x080026d4:    2c01        .,      CMP      r4,#1
        0x080026d6:    f6ffaee0    ....    BLT      0x800249a ; process_button + 6
;;;176    			}
;;;177    			}
;;;178    		}
;;;179    	}
;;;180    //	ubTransferComplete = 0;
;;;181    }
        0x080026da:    bf00        ..      NOP      
        0x080026dc:    e705        ..      B        0x80024ea ; process_button + 86
    $d
        0x080026de:    0000        ..      DCW    0
        0x080026e0:    200004f0    ...     DCD    536872176
        0x080026e4:    20000011    ...     DCD    536870929
        0x080026e8:    2200b000    ..."    DCD    570470400
    $t
    i.update_screen
    update_screen
;;; .\..\Src\screen.c
;;;86     	return 0;
        0x080026ec:    2000        .       MOVS     r0,#0
;;;87     }
        0x080026ee:    4770        pG      BX       lr
    i.z_axis_move2
    z_axis_move2
;;; .\..\Src\fsm.c
;;;414    	const fixedptu set_with_fract = fixedpt_add(z_axis.Q824set, z_axis.fract_part); // calculate new step delay with fract from previous step
        0x080026f0:    4a0b        .J      LDR      r2,[pc,#44] ; [0x8002720] = 0x200005e0
        0x080026f2:    68d2        .h      LDR      r2,[r2,#0xc]
        0x080026f4:    4b0a        .K      LDR      r3,[pc,#40] ; [0x8002720] = 0x200005e0
        0x080026f6:    691b        .i      LDR      r3,[r3,#0x10]
        0x080026f8:    18d1        ..      ADDS     r1,r2,r3
;;;415    	s->syncbase->ARR = fixedpt_toint(set_with_fract) - 1; // update register ARR
        0x080026fa:    2201        ."      MOVS     r2,#1
        0x080026fc:    ebc26211    ...b    RSB      r2,r2,r1,LSR #24
        0x08002700:    6943        Ci      LDR      r3,[r0,#0x14]
        0x08002702:    62da        .b      STR      r2,[r3,#0x2c]
;;;416    	s->syncbase->CNT = 0;
        0x08002704:    2200        ."      MOVS     r2,#0
        0x08002706:    6943        Ci      LDR      r3,[r0,#0x14]
        0x08002708:    625a        Zb      STR      r2,[r3,#0x24]
;;;417    	s->syncbase->EGR |= TIM_EGR_UG;
        0x0800270a:    6942        Bi      LDR      r2,[r0,#0x14]
        0x0800270c:    6952        Ri      LDR      r2,[r2,#0x14]
        0x0800270e:    f0420201    B...    ORR      r2,r2,#1
        0x08002712:    6943        Ci      LDR      r3,[r0,#0x14]
        0x08002714:    615a        Za      STR      r2,[r3,#0x14]
;;;418    	z_axis.fract_part = fixedpt_fracpart( set_with_fract ); // save fract part for future use on next step
        0x08002716:    f021427f    !..B    BIC      r2,r1,#0xff000000
        0x0800271a:    4b01        .K      LDR      r3,[pc,#4] ; [0x8002720] = 0x200005e0
        0x0800271c:    611a        .a      STR      r2,[r3,#0x10]
;;;419    }
        0x0800271e:    4770        pG      BX       lr
    $d
        0x08002720:    200005e0    ...     DCD    536872416
    $t
    i.z_axis_ramp_down2
    z_axis_ramp_down2
;;; .\..\Src\fsm.c (398)
        0x08002724:    4601        .F      MOV      r1,r0
;;;399    	if (z_axis.ramp_step == 0)
        0x08002726:    480d        .H      LDR      r0,[pc,#52] ; [0x800275c] = 0x200005e0
        0x08002728:    f8900028    ..(.    LDRB     r0,[r0,#0x28]
        0x0800272c:    b908        ..      CBNZ     r0,0x8002732 ; z_axis_ramp_down2 + 14
;;;400    		return true;
        0x0800272e:    2001        .       MOVS     r0,#1
        0x08002730:    4770        pG      BX       lr
;;;401    //	const fixedptu set_with_fract = ramp2[--z_axis.ramp_step] << 24;
;;;402    //	s->syncbase->ARR = fixedpt_toint(set_with_fract) - 1; // update register ARR
;;;403    
;;;404    	s->syncbase->ARR = sync_ramp_profile[--z_axis.ramp_step];
        0x08002732:    480a        .H      LDR      r0,[pc,#40] ; [0x800275c] = 0x200005e0
        0x08002734:    f8900028    ..(.    LDRB     r0,[r0,#0x28]
        0x08002738:    1e40        @.      SUBS     r0,r0,#1
        0x0800273a:    b2c0        ..      UXTB     r0,r0
        0x0800273c:    4a07        .J      LDR      r2,[pc,#28] ; [0x800275c] = 0x200005e0
        0x0800273e:    f8820028    ..(.    STRB     r0,[r2,#0x28]
        0x08002742:    4a07        .J      LDR      r2,[pc,#28] ; [0x8002760] = 0x20000038
        0x08002744:    5c10        .\      LDRB     r0,[r2,r0]
        0x08002746:    694a        Ji      LDR      r2,[r1,#0x14]
        0x08002748:    62d0        .b      STR      r0,[r2,#0x2c]
;;;405    	//	s->syncbase->EGR |= TIM_EGR_UG;
;;;406    //	z_axis.fract_part = fixedpt_fracpart( set_with_fract ); // save fract part for future use on next step
;;;407    	if(z_axis.ramp_step == 0)
        0x0800274a:    4804        .H      LDR      r0,[pc,#16] ; [0x800275c] = 0x200005e0
        0x0800274c:    f8900028    ..(.    LDRB     r0,[r0,#0x28]
        0x08002750:    b908        ..      CBNZ     r0,0x8002756 ; z_axis_ramp_down2 + 50
;;;408    		return true;
        0x08002752:    2001        .       MOVS     r0,#1
        0x08002754:    e7ec        ..      B        0x8002730 ; z_axis_ramp_down2 + 12
;;;409    	return false;
        0x08002756:    2000        .       MOVS     r0,#0
        0x08002758:    e7ea        ..      B        0x8002730 ; z_axis_ramp_down2 + 12
    $d
        0x0800275a:    0000        ..      DCW    0
        0x0800275c:    200005e0    ...     DCD    536872416
        0x08002760:    20000038    8..     DCD    536870968
    $t
    i.z_axis_ramp_up2
    z_axis_ramp_up2
;;; .\..\Src\fsm.c (380)
        0x08002764:    4601        .F      MOV      r1,r0
;;;381    	const fixedptu  set_with_fract = sync_ramp_profile[z_axis.ramp_step] << 24;
        0x08002766:    4816        .H      LDR      r0,[pc,#88] ; [0x80027c0] = 0x200005e0
        0x08002768:    f8900028    ..(.    LDRB     r0,[r0,#0x28]
        0x0800276c:    4b15        .K      LDR      r3,[pc,#84] ; [0x80027c4] = 0x20000038
        0x0800276e:    5c18        .\      LDRB     r0,[r3,r0]
        0x08002770:    0602        ..      LSLS     r2,r0,#24
;;;382    	if(z_axis.Q824set > set_with_fract || z_axis.ramp_step == sync_ramp_profile_len) { 	// reach desired speed or end of ramp map
        0x08002772:    4813        .H      LDR      r0,[pc,#76] ; [0x80027c0] = 0x200005e0
        0x08002774:    68c0        .h      LDR      r0,[r0,#0xc]
        0x08002776:    4290        .B      CMP      r0,r2
        0x08002778:    d804        ..      BHI      0x8002784 ; z_axis_ramp_up2 + 32
        0x0800277a:    4811        .H      LDR      r0,[pc,#68] ; [0x80027c0] = 0x200005e0
        0x0800277c:    f8900028    ..(.    LDRB     r0,[r0,#0x28]
        0x08002780:    2805        .(      CMP      r0,#5
        0x08002782:    d10e        ..      BNE      0x80027a2 ; z_axis_ramp_up2 + 62
;;;383    		s->syncbase->ARR = fixedpt_toint(z_axis.Q824set) - 1; 			// update register ARR
        0x08002784:    480e        .H      LDR      r0,[pc,#56] ; [0x80027c0] = 0x200005e0
        0x08002786:    68c0        .h      LDR      r0,[r0,#0xc]
        0x08002788:    2301        .#      MOVS     r3,#1
        0x0800278a:    ebc36010    ...`    RSB      r0,r3,r0,LSR #24
        0x0800278e:    694b        Ki      LDR      r3,[r1,#0x14]
        0x08002790:    62d8        .b      STR      r0,[r3,#0x2c]
;;;384    //		s->syncbase->EGR |= TIM_EGR_UG;
;;;385    		z_axis.fract_part = fixedpt_fracpart(z_axis.Q824set); 								// save fract part for future use on next step
        0x08002792:    480b        .H      LDR      r0,[pc,#44] ; [0x80027c0] = 0x200005e0
        0x08002794:    68c0        .h      LDR      r0,[r0,#0xc]
        0x08002796:    f020407f     ..@    BIC      r0,r0,#0xff000000
        0x0800279a:    4b09        .K      LDR      r3,[pc,#36] ; [0x80027c0] = 0x200005e0
        0x0800279c:    6118        .a      STR      r0,[r3,#0x10]
;;;386    //		z_axis.end_minus_ramp_delta =
;;;387    		return true;
        0x0800279e:    2001        .       MOVS     r0,#1
        0x080027a0:    4770        pG      BX       lr
;;;388    	} else {
;;;389    		z_axis.ramp_step++;
        0x080027a2:    4807        .H      LDR      r0,[pc,#28] ; [0x80027c0] = 0x200005e0
        0x080027a4:    f8900028    ..(.    LDRB     r0,[r0,#0x28]
        0x080027a8:    1c40        @.      ADDS     r0,r0,#1
        0x080027aa:    4b05        .K      LDR      r3,[pc,#20] ; [0x80027c0] = 0x200005e0
        0x080027ac:    f8830028    ..(.    STRB     r0,[r3,#0x28]
;;;390    		s->syncbase->ARR = fixedpt_toint(set_with_fract) - 1; 			// update register ARR
        0x080027b0:    2001        .       MOVS     r0,#1
        0x080027b2:    ebc06012    ...`    RSB      r0,r0,r2,LSR #24
        0x080027b6:    694b        Ki      LDR      r3,[r1,#0x14]
        0x080027b8:    62d8        .b      STR      r0,[r3,#0x2c]
;;;391    //		s->syncbase->EGR |= TIM_EGR_UG;
;;;392    //		z_axis.fract_part = fixedpt_fracpart( set_with_fract ); 						// save fract part for future use on next step
;;;393    	}
;;;394    	return false;
        0x080027ba:    2000        .       MOVS     r0,#0
        0x080027bc:    e7f0        ..      B        0x80027a0 ; z_axis_ramp_up2 + 60
    $d
        0x080027be:    0000        ..      DCW    0
        0x080027c0:    200005e0    ...     DCD    536872416
        0x080027c4:    20000038    8..     DCD    536870968
    $t
    i.z_move
    z_move
;;; .\..\Src\fsm.c (197)
        0x080027c8:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x080027cc:    4605        .F      MOV      r5,r0
        0x080027ce:    460e        .F      MOV      r6,r1
        0x080027d0:    4614        .F      MOV      r4,r2
        0x080027d2:    461f        .F      MOV      r7,r3
;;;198    	MOTOR_X_Enable();
        0x080027d4:    f2402002    @..     MOV      r0,#0x202
        0x080027d8:    491c        .I      LDR      r1,[pc,#112] ; [0x800284c] = 0x40010810
        0x080027da:    6008        .`      STR      r0,[r1,#0]
;;;199    	MOTOR_Z_Enable(); // time to wakeup motor from sleep is quite high(1.7ms), so enable it as soon as possible
        0x080027dc:    491c        .I      LDR      r1,[pc,#112] ; [0x8002850] = 0x40010c10
        0x080027de:    6008        .`      STR      r0,[r1,#0]
;;;200    
;;;201    	if(direction == feed_direction_left) {
        0x080027e0:    b95d        ].      CBNZ     r5,0x80027fa ; z_move + 50
;;;202    		feed_direction = feed_direction_left;
        0x080027e2:    2000        .       MOVS     r0,#0
        0x080027e4:    491b        .I      LDR      r1,[pc,#108] ; [0x8002854] = 0x200000a1
        0x080027e6:    7008        .p      STRB     r0,[r1,#0]
;;;203    		MOTOR_Z_Reverse();
        0x080027e8:    f2480080    H...    MOV      r0,#0x8080
        0x080027ec:    4917        .I      LDR      r1,[pc,#92] ; [0x800284c] = 0x40010810
        0x080027ee:    1d09        ..      ADDS     r1,r1,#4
        0x080027f0:    6008        .`      STR      r0,[r1,#0]
;;;204    		MOTOR_X_Reverse();
        0x080027f2:    4819        .H      LDR      r0,[pc,#100] ; [0x8002858] = 0x4800080
        0x080027f4:    4919        .I      LDR      r1,[pc,#100] ; [0x800285c] = 0x40011000
        0x080027f6:    6148        Ha      STR      r0,[r1,#0x14]
        0x080027f8:    e009        ..      B        0x800280e ; z_move + 70
;;;205    	} else {
;;;206    		feed_direction = feed_direction_right;
        0x080027fa:    2001        .       MOVS     r0,#1
        0x080027fc:    4915        .I      LDR      r1,[pc,#84] ; [0x8002854] = 0x200000a1
        0x080027fe:    7008        .p      STRB     r0,[r1,#0]
;;;207    		MOTOR_Z_Forward();
        0x08002800:    f2480080    H...    MOV      r0,#0x8080
        0x08002804:    4911        .I      LDR      r1,[pc,#68] ; [0x800284c] = 0x40010810
        0x08002806:    6008        .`      STR      r0,[r1,#0]
;;;208    		MOTOR_X_Forward();
        0x08002808:    4813        .H      LDR      r0,[pc,#76] ; [0x8002858] = 0x4800080
        0x0800280a:    4914        .I      LDR      r1,[pc,#80] ; [0x800285c] = 0x40011000
        0x0800280c:    6108        .a      STR      r0,[r1,#0x10]
;;;209    	}
;;;210    	LL_mDelay(2);
        0x0800280e:    2002        .       MOVS     r0,#2
        0x08002810:    f7fefa56    ..V.    BL       LL_mDelay ; 0x8000cc0
;;;211    
;;;212    	state.sync = sync;
        0x08002814:    4812        .H      LDR      r0,[pc,#72] ; [0x8002860] = 0x20000044
        0x08002816:    7404        .t      STRB     r4,[r0,#0x10]
;;;213    	if(sync){
        0x08002818:    b11c        ..      CBZ      r4,0x8002822 ; z_move + 90
;;;214    		state.main_feed_direction = feed_direction;
        0x0800281a:    480e        .H      LDR      r0,[pc,#56] ; [0x8002854] = 0x200000a1
        0x0800281c:    7800        .x      LDRB     r0,[r0,#0]
        0x0800281e:    4910        .I      LDR      r1,[pc,#64] ; [0x8002860] = 0x20000044
        0x08002820:    7448        Ht      STRB     r0,[r1,#0x11]
;;;215    	}
;;;216    
;;;217    	z_axis.current_pos = 0;
        0x08002822:    2000        .       MOVS     r0,#0
        0x08002824:    490f        .I      LDR      r1,[pc,#60] ; [0x8002864] = 0x200005e0
        0x08002826:    6008        .`      STR      r0,[r1,#0]
;;;218    	z_axis.end_pos = length;
        0x08002828:    4608        .F      MOV      r0,r1
        0x0800282a:    6046        F`      STR      r6,[r0,#4]
;;;219    	if(z_axis.end_pos > 0){
        0x0800282c:    6840        @h      LDR      r0,[r0,#4]
        0x0800282e:    b128        (.      CBZ      r0,0x800283c ; z_move + 116
;;;220    		z_axis.end_pos &= 0xFFFFFFFF - step_divider + 1;
        0x08002830:    4608        .F      MOV      r0,r1
        0x08002832:    6840        @h      LDR      r0,[r0,#4]
        0x08002834:    f0200001     ...    BIC      r0,r0,#1
        0x08002838:    6048        H`      STR      r0,[r1,#4]
        0x0800283a:    e002        ..      B        0x8002842 ; z_move + 122
;;;221    //		z_axis.end_pos |= step_divider; // to make sure that we'll not stop between full steps
;;;222    
;;;223    	} else {
;;;224    		state.sync = true;
        0x0800283c:    2001        .       MOVS     r0,#1
        0x0800283e:    4908        .I      LDR      r1,[pc,#32] ; [0x8002860] = 0x20000044
        0x08002840:    7408        .t      STRB     r0,[r1,#0x10]
;;;225    	}
;;;226    
;;;227    	do_fsm_move_start(&state);
        0x08002842:    4807        .H      LDR      r0,[pc,#28] ; [0x8002860] = 0x20000044
        0x08002844:    f7fffbbe    ....    BL       do_fsm_move_start ; 0x8001fc4
;;;228    }
        0x08002848:    e8bd81f0    ....    POP      {r4-r8,pc}
    $d
        0x0800284c:    40010810    ...@    DCD    1073809424
        0x08002850:    40010c10    ...@    DCD    1073810448
        0x08002854:    200000a1    ...     DCD    536871073
        0x08002858:    04800080    ....    DCD    75497600
        0x0800285c:    40011000    ...@    DCD    1073811456
        0x08002860:    20000044    D..     DCD    536870980
        0x08002864:    200005e0    ...     DCD    536872416
    $d.realdata
    .constdata
    AHBPrescTable
        0x08002868:    00000000    ....    DCD    0
        0x0800286c:    00000000    ....    DCD    0
        0x08002870:    04030201    ....    DCD    67305985
        0x08002874:    09080706    ....    DCD    151521030
    APBPrescTable
        0x08002878:    00000000    ....    DCD    0
        0x0800287c:    04030201    ....    DCD    67305985
    .constdata
    CHANNEL_OFFSET_TAB
        0x08002880:    44301c08    ..0D    DCD    1144003592
        0x08002884:    6c58        Xl      DCW    27736
        0x08002886:    80          .       DCB    128
    OFFSET_TAB_CCMRx
        0x08002887:    00          .       DCB    0
        0x08002888:    04000000    ....    DCD    67108864
        0x0800288c:    0404        ..      DCW    1028
    SHIFT_TAB_OCxx
        0x0800288e:    0000        ..      DCW    0
        0x08002890:    00000008    ....    DCD    8
        0x08002894:    08          .       DCB    8
    SHIFT_TAB_ICxx
        0x08002895:    000008      ...     DCB    0,0,8
        0x08002898:    08000000    ....    DCD    134217728
    SHIFT_TAB_CCxP
        0x0800289c:    06040200    ....    DCD    100925952
        0x080028a0:    0a08        ..      DCW    2568
        0x080028a2:    0c          .       DCB    12
    SHIFT_TAB_OISx
        0x080028a3:    00          .       DCB    0
        0x080028a4:    04030201    ....    DCD    67305985
        0x080028a8:    00000605    ....    DCD    1541
        0x080028ac:    00000000    ....    DCD    0
    .constdata
    CHANNEL_OFFSET_TAB
        0x080028b0:    44301c08    ..0D    DCD    1144003592
        0x080028b4:    6c58        Xl      DCW    27736
        0x080028b6:    80          .       DCB    128
    OFFSET_TAB_CCMRx
        0x080028b7:    00          .       DCB    0
        0x080028b8:    04000000    ....    DCD    67108864
        0x080028bc:    0404        ..      DCW    1028
    SHIFT_TAB_OCxx
        0x080028be:    0000        ..      DCW    0
        0x080028c0:    00000008    ....    DCD    8
        0x080028c4:    08          .       DCB    8
    SHIFT_TAB_ICxx
        0x080028c5:    000008      ...     DCB    0,0,8
        0x080028c8:    08000000    ....    DCD    134217728
    SHIFT_TAB_CCxP
        0x080028cc:    06040200    ....    DCD    100925952
        0x080028d0:    0a08        ..      DCW    2568
        0x080028d2:    0c          .       DCB    12
    SHIFT_TAB_OISx
        0x080028d3:    00          .       DCB    0
        0x080028d4:    04030201    ....    DCD    67305985
        0x080028d8:    0605        ..      DCW    1541
    Menu_size
        0x080028da:    0021        !.      DCW    33
        0x080028dc:    00000000    ....    DCD    0
    enc_setup
        0x080028e0:    00000000    ....    DCD    0
        0x080028e4:    00090000    ....    DCD    589824
    aTxBuffer
        0x080028e8:    334d5453    STM3    DCD    860705875
        0x080028ec:    78314632    2F1x    DCD    2016495154
        0x080028f0:    53552078    x US    DCD    1398087800
        0x080028f4:    20545241    ART     DCD    542396993
        0x080028f8:    41204c4c    LL A    DCD    1092635724
        0x080028fc:    45204950    PI E    DCD    1159743824
        0x08002900:    706d6178    xamp    DCD    1886216568
        0x08002904:    3a20656c    le :    DCD    975201644
        0x08002908:    2f585420     TX/    DCD    794317856
        0x0800290c:    69205852    RX i    DCD    1763727442
        0x08002910:    4d44206e    n DM    DCD    1296310382
        0x08002914:    6f6d2041    A mo    DCD    1869422657
        0x08002918:    0a0d6564    de..    DCD    168650084
        0x0800291c:    666e6f43    Conf    DCD    1718513475
        0x08002920:    72756769    igur    DCD    1920296809
        0x08002924:    6f697461    atio    DCD    1869182049
        0x08002928:    4155206e    n UA    DCD    1096097902
        0x0800292c:    31205452    RT 1    DCD    824202322
        0x08002930:    30323531    1520    DCD    808596785
        0x08002934:    70622030    0 bp    DCD    1885478960
        0x08002938:    38202c73    s, 8    DCD    941632627
        0x0800293c:    74616420     dat    DCD    1952539680
        0x08002940:    69622061    a bi    DCD    1768038497
        0x08002944:    20312f74    t/1     DCD    540094324
        0x08002948:    706f7473    stop    DCD    1886352499
        0x0800294c:    74696220     bit    DCD    1953063456
        0x08002950:    206f4e2f    /No     DCD    544165423
        0x08002954:    69726170    pari    DCD    1769103728
        0x08002958:    4e2f7974    ty/N    DCD    1311734132
        0x0800295c:    5748206f    o HW    DCD    1464344687
        0x08002960:    6f6c6620     flo    DCD    1869375008
        0x08002964:    6f632077    w co    DCD    1868767351
        0x08002968:    6f72746e    ntro    DCD    1869771886
        0x0800296c:    500a0d6c    l..P    DCD    1342836076
        0x08002970:    7361656c    leas    DCD    1935762796
        0x08002974:    6e652065    e en    DCD    1852121189
        0x08002978:    20726574    ter     DCD    544367988
        0x0800297c:    444e4527    'END    DCD    1145980199
        0x08002980:    74732027    ' st    DCD    1953701927
        0x08002984:    676e6972    ring    DCD    1735289202
        0x08002988:    2e2e2e20     ...    DCD    774778400
        0x0800298c:    00000a0d    ....    DCD    2573
    Region$$Table$$Base
        0x08002990:    080029b0    .)..    DCD    134228400
        0x08002994:    20000000    ...     DCD    536870912
        0x08002998:    000004f0    ....    DCD    1264
        0x0800299c:    0800020c    ....    DCD    134218252
        0x080029a0:    08002b4c    L+..    DCD    134228812
        0x080029a4:    200004f0    ...     DCD    536872176
        0x080029a8:    000006d8    ....    DCD    1752
        0x080029ac:    08001c84    ....    DCD    134225028
    Region$$Table$$Limit

** Section #2 'RW_IRAM1' (SHT_PROGBITS) [SHF_ALLOC + SHF_WRITE]
    Size   : 412 bytes (alignment 4)
    Address: 0x20000000


** Section #3 'RW_IRAM1' (SHT_NOBITS) [SHF_ALLOC + SHF_WRITE]
    Size   : 1752 bytes (alignment 8)
    Address: 0x200004f0


** Section #4 '.debug_abbrev' (SHT_PROGBITS)
    Size   : 1476 bytes


** Section #5 '.debug_frame' (SHT_PROGBITS)
    Size   : 3444 bytes


** Section #6 '.debug_info' (SHT_PROGBITS)
    Size   : 206036 bytes


** Section #7 '.debug_line' (SHT_PROGBITS)
    Size   : 25296 bytes


** Section #8 '.debug_loc' (SHT_PROGBITS)
    Size   : 7760 bytes


** Section #9 '.debug_macinfo' (SHT_PROGBITS)
    Size   : 529960 bytes


** Section #10 '.debug_pubnames' (SHT_PROGBITS)
    Size   : 3311 bytes


** Section #11 '.symtab' (SHT_SYMTAB)
    Size   : 9264 bytes (alignment 4)
    String table #12 '.strtab'
    Last local symbol no. 407


** Section #12 '.strtab' (SHT_STRTAB)
    Size   : 8140 bytes


** Section #13 '.note' (SHT_NOTE)
    Size   : 28 bytes (alignment 4)


** Section #14 '.comment' (SHT_PROGBITS)
    Size   : 24884 bytes


** Section #15 '.shstrtab' (SHT_STRTAB)
    Size   : 156 bytes


